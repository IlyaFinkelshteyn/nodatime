### YamlMime:ManagedReference
items:
- uid: NodaTime.Testing.TimeZones.FakeDateTimeZoneSource.Builder
  commentId: T:NodaTime.Testing.TimeZones.FakeDateTimeZoneSource.Builder
  id: FakeDateTimeZoneSource.Builder
  parent: NodaTime.Testing.TimeZones
  children:
  - NodaTime.Testing.TimeZones.FakeDateTimeZoneSource.Builder.#ctor
  - NodaTime.Testing.TimeZones.FakeDateTimeZoneSource.Builder.Add(NodaTime.DateTimeZone)
  - NodaTime.Testing.TimeZones.FakeDateTimeZoneSource.Builder.BclIdsToZoneIds
  - NodaTime.Testing.TimeZones.FakeDateTimeZoneSource.Builder.Build
  - NodaTime.Testing.TimeZones.FakeDateTimeZoneSource.Builder.GetEnumerator
  - NodaTime.Testing.TimeZones.FakeDateTimeZoneSource.Builder.System#Collections#IEnumerable#GetEnumerator
  - NodaTime.Testing.TimeZones.FakeDateTimeZoneSource.Builder.VersionId
  - NodaTime.Testing.TimeZones.FakeDateTimeZoneSource.Builder.Zones
  langs:
  - csharp
  - vb
  name: FakeDateTimeZoneSource.Builder
  nameWithType: FakeDateTimeZoneSource.Builder
  fullName: NodaTime.Testing.TimeZones.FakeDateTimeZoneSource.Builder
  type: Class
  source:
    remote:
      path: 1.4.x/src/NodaTime.Testing/TimeZones/FakeDateTimeZoneSource.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: Builder
    path: src/NodaTime.Testing/TimeZones/FakeDateTimeZoneSource.cs
    startLine: 86
  assemblies:
  - NodaTime.Testing
  namespace: NodaTime.Testing.TimeZones
  summary: "\nBuilder for <xref href=\"NodaTime.Testing.TimeZones.FakeDateTimeZoneSource\" data-throw-if-not-resolved=\"false\"></xref>, allowing the built object to\nbe immutable, but constructed via object/collection initializers.\n"
  example: []
  syntax:
    content: 'public sealed class Builder : IEnumerable<DateTimeZone>, IEnumerable'
    content.vb: >-
      Public NotInheritable Class Builder
          Implements IEnumerable(Of DateTimeZone), IEnumerable
  inheritance:
  - System.Object
  implements:
  - System.Collections.Generic.IEnumerable{NodaTime.DateTimeZone}
  - System.Collections.IEnumerable
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - sealed
  - class
  modifiers.vb:
  - Public
  - NotInheritable
  - Class
- uid: NodaTime.Testing.TimeZones.FakeDateTimeZoneSource.Builder.BclIdsToZoneIds
  commentId: P:NodaTime.Testing.TimeZones.FakeDateTimeZoneSource.Builder.BclIdsToZoneIds
  id: BclIdsToZoneIds
  parent: NodaTime.Testing.TimeZones.FakeDateTimeZoneSource.Builder
  langs:
  - csharp
  - vb
  name: BclIdsToZoneIds
  nameWithType: FakeDateTimeZoneSource.Builder.BclIdsToZoneIds
  fullName: NodaTime.Testing.TimeZones.FakeDateTimeZoneSource.Builder.BclIdsToZoneIds
  type: Property
  source:
    remote:
      path: 1.4.x/src/NodaTime.Testing/TimeZones/FakeDateTimeZoneSource.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: BclIdsToZoneIds
    path: src/NodaTime.Testing/TimeZones/FakeDateTimeZoneSource.cs
    startLine: 95
  assemblies:
  - NodaTime.Testing
  namespace: NodaTime.Testing.TimeZones
  summary: "\nThe dictionary mapping BCL <xref href=\"System.TimeZoneInfo\" data-throw-if-not-resolved=\"false\"></xref> IDs to the canonical IDs\nserved within the provider being built.\n"
  example: []
  syntax:
    content: public IDictionary<string, string> BclIdsToZoneIds { get; }
    parameters: []
    return:
      type: System.Collections.Generic.IDictionary{System.String,System.String}
    content.vb: Public ReadOnly Property BclIdsToZoneIds As IDictionary(Of String, String)
  overload: NodaTime.Testing.TimeZones.FakeDateTimeZoneSource.Builder.BclIdsToZoneIds*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: NodaTime.Testing.TimeZones.FakeDateTimeZoneSource.Builder.Zones
  commentId: P:NodaTime.Testing.TimeZones.FakeDateTimeZoneSource.Builder.Zones
  id: Zones
  parent: NodaTime.Testing.TimeZones.FakeDateTimeZoneSource.Builder
  langs:
  - csharp
  - vb
  name: Zones
  nameWithType: FakeDateTimeZoneSource.Builder.Zones
  fullName: NodaTime.Testing.TimeZones.FakeDateTimeZoneSource.Builder.Zones
  type: Property
  source:
    remote:
      path: 1.4.x/src/NodaTime.Testing/TimeZones/FakeDateTimeZoneSource.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: Zones
    path: src/NodaTime.Testing/TimeZones/FakeDateTimeZoneSource.cs
    startLine: 101
  assemblies:
  - NodaTime.Testing
  namespace: NodaTime.Testing.TimeZones
  summary: "\nList of zones, exposed as a property for use when a test needs to set properties as\nwell as adding zones.\n"
  example: []
  syntax:
    content: public IList<DateTimeZone> Zones { get; }
    parameters: []
    return:
      type: System.Collections.Generic.IList{NodaTime.DateTimeZone}
    content.vb: Public ReadOnly Property Zones As IList(Of DateTimeZone)
  overload: NodaTime.Testing.TimeZones.FakeDateTimeZoneSource.Builder.Zones*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: NodaTime.Testing.TimeZones.FakeDateTimeZoneSource.Builder.VersionId
  commentId: P:NodaTime.Testing.TimeZones.FakeDateTimeZoneSource.Builder.VersionId
  id: VersionId
  parent: NodaTime.Testing.TimeZones.FakeDateTimeZoneSource.Builder
  langs:
  - csharp
  - vb
  name: VersionId
  nameWithType: FakeDateTimeZoneSource.Builder.VersionId
  fullName: NodaTime.Testing.TimeZones.FakeDateTimeZoneSource.Builder.VersionId
  type: Property
  source:
    remote:
      path: 1.4.x/src/NodaTime.Testing/TimeZones/FakeDateTimeZoneSource.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: VersionId
    path: src/NodaTime.Testing/TimeZones/FakeDateTimeZoneSource.cs
    startLine: 106
  assemblies:
  - NodaTime.Testing
  namespace: NodaTime.Testing.TimeZones
  summary: "\nThe version ID to advertise; defaults to &quot;TestZones&quot;.\n"
  example: []
  syntax:
    content: public string VersionId { get; set; }
    parameters: []
    return:
      type: System.String
    content.vb: Public Property VersionId As String
  overload: NodaTime.Testing.TimeZones.FakeDateTimeZoneSource.Builder.VersionId*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: NodaTime.Testing.TimeZones.FakeDateTimeZoneSource.Builder.#ctor
  commentId: M:NodaTime.Testing.TimeZones.FakeDateTimeZoneSource.Builder.#ctor
  id: '#ctor'
  parent: NodaTime.Testing.TimeZones.FakeDateTimeZoneSource.Builder
  langs:
  - csharp
  - vb
  name: Builder()
  nameWithType: FakeDateTimeZoneSource.Builder.Builder()
  fullName: NodaTime.Testing.TimeZones.FakeDateTimeZoneSource.Builder.Builder()
  type: Constructor
  source:
    remote:
      path: 1.4.x/src/NodaTime.Testing/TimeZones/FakeDateTimeZoneSource.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: .ctor
    path: src/NodaTime.Testing/TimeZones/FakeDateTimeZoneSource.cs
    startLine: 111
  assemblies:
  - NodaTime.Testing
  namespace: NodaTime.Testing.TimeZones
  summary: "\nCreates a new builder.\n"
  example: []
  syntax:
    content: public Builder()
    content.vb: Public Sub New
  overload: NodaTime.Testing.TimeZones.FakeDateTimeZoneSource.Builder.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: NodaTime.Testing.TimeZones.FakeDateTimeZoneSource.Builder.Add(NodaTime.DateTimeZone)
  commentId: M:NodaTime.Testing.TimeZones.FakeDateTimeZoneSource.Builder.Add(NodaTime.DateTimeZone)
  id: Add(NodaTime.DateTimeZone)
  parent: NodaTime.Testing.TimeZones.FakeDateTimeZoneSource.Builder
  langs:
  - csharp
  - vb
  name: Add(DateTimeZone)
  nameWithType: FakeDateTimeZoneSource.Builder.Add(DateTimeZone)
  fullName: NodaTime.Testing.TimeZones.FakeDateTimeZoneSource.Builder.Add(NodaTime.DateTimeZone)
  type: Method
  source:
    remote:
      path: 1.4.x/src/NodaTime.Testing/TimeZones/FakeDateTimeZoneSource.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: Add
    path: src/NodaTime.Testing/TimeZones/FakeDateTimeZoneSource.cs
    startLine: 120
  assemblies:
  - NodaTime.Testing
  namespace: NodaTime.Testing.TimeZones
  summary: "\nAdds a time zone to the builder.\n"
  example: []
  syntax:
    content: public void Add(DateTimeZone zone)
    parameters:
    - id: zone
      type: NodaTime.DateTimeZone
      description: The zone to add.
    content.vb: Public Sub Add(zone As DateTimeZone)
  overload: NodaTime.Testing.TimeZones.FakeDateTimeZoneSource.Builder.Add*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: NodaTime.Testing.TimeZones.FakeDateTimeZoneSource.Builder.GetEnumerator
  commentId: M:NodaTime.Testing.TimeZones.FakeDateTimeZoneSource.Builder.GetEnumerator
  id: GetEnumerator
  parent: NodaTime.Testing.TimeZones.FakeDateTimeZoneSource.Builder
  langs:
  - csharp
  - vb
  name: GetEnumerator()
  nameWithType: FakeDateTimeZoneSource.Builder.GetEnumerator()
  fullName: NodaTime.Testing.TimeZones.FakeDateTimeZoneSource.Builder.GetEnumerator()
  type: Method
  source:
    remote:
      path: 1.4.x/src/NodaTime.Testing/TimeZones/FakeDateTimeZoneSource.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: GetEnumerator
    path: src/NodaTime.Testing/TimeZones/FakeDateTimeZoneSource.cs
    startLine: 131
  assemblies:
  - NodaTime.Testing
  namespace: NodaTime.Testing.TimeZones
  summary: "\nReturns the zones within the builder. This mostly exists\nto enable collection initializers.\n"
  example: []
  syntax:
    content: public IEnumerator<DateTimeZone> GetEnumerator()
    return:
      type: System.Collections.Generic.IEnumerator{NodaTime.DateTimeZone}
      description: An iterator over the zones in this builder.
    content.vb: Public Function GetEnumerator As IEnumerator(Of DateTimeZone)
  overload: NodaTime.Testing.TimeZones.FakeDateTimeZoneSource.Builder.GetEnumerator*
  implements:
  - System.Collections.Generic.IEnumerable{NodaTime.DateTimeZone}.GetEnumerator
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: NodaTime.Testing.TimeZones.FakeDateTimeZoneSource.Builder.System#Collections#IEnumerable#GetEnumerator
  commentId: M:NodaTime.Testing.TimeZones.FakeDateTimeZoneSource.Builder.System#Collections#IEnumerable#GetEnumerator
  id: System#Collections#IEnumerable#GetEnumerator
  isEii: true
  parent: NodaTime.Testing.TimeZones.FakeDateTimeZoneSource.Builder
  langs:
  - csharp
  - vb
  name: IEnumerable.GetEnumerator()
  nameWithType: FakeDateTimeZoneSource.Builder.IEnumerable.GetEnumerator()
  fullName: NodaTime.Testing.TimeZones.FakeDateTimeZoneSource.Builder.System.Collections.IEnumerable.GetEnumerator()
  type: Method
  source:
    remote:
      path: 1.4.x/src/NodaTime.Testing/TimeZones/FakeDateTimeZoneSource.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: System.Collections.IEnumerable.GetEnumerator
    path: src/NodaTime.Testing/TimeZones/FakeDateTimeZoneSource.cs
    startLine: 140
  assemblies:
  - NodaTime.Testing
  namespace: NodaTime.Testing.TimeZones
  summary: "\nExplicit interface implementation of <xref href=\"System.Collections.IEnumerator\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: IEnumerator IEnumerable.GetEnumerator()
    return:
      type: System.Collections.IEnumerator
      description: An iterator over the zones in this builder.
    content.vb: Function System.Collections.IEnumerable.GetEnumerator As IEnumerator Implements IEnumerable.GetEnumerator
  overload: NodaTime.Testing.TimeZones.FakeDateTimeZoneSource.Builder.System#Collections#IEnumerable#GetEnumerator*
  implements:
  - System.Collections.IEnumerable.GetEnumerator
  nameWithType.vb: FakeDateTimeZoneSource.Builder.System.Collections.IEnumerable.GetEnumerator()
  name.vb: System.Collections.IEnumerable.GetEnumerator()
- uid: NodaTime.Testing.TimeZones.FakeDateTimeZoneSource.Builder.Build
  commentId: M:NodaTime.Testing.TimeZones.FakeDateTimeZoneSource.Builder.Build
  id: Build
  parent: NodaTime.Testing.TimeZones.FakeDateTimeZoneSource.Builder
  langs:
  - csharp
  - vb
  name: Build()
  nameWithType: FakeDateTimeZoneSource.Builder.Build()
  fullName: NodaTime.Testing.TimeZones.FakeDateTimeZoneSource.Builder.Build()
  type: Method
  source:
    remote:
      path: 1.4.x/src/NodaTime.Testing/TimeZones/FakeDateTimeZoneSource.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: Build
    path: src/NodaTime.Testing/TimeZones/FakeDateTimeZoneSource.cs
    startLine: 156
  assemblies:
  - NodaTime.Testing
  namespace: NodaTime.Testing.TimeZones
  summary: "\nBuilds a time zone source from this builder. The returned\nbuilder will be independent of this builder; further changes\nto this builder will not be reflected in the returned source.\n"
  remarks: "\nThis method performs some sanity checks, and throws exceptions if\nthey&apos;re violated. Those exceptions are not documented here, and you\nshouldn&apos;t be catching them anyway. (This is aimed at testing...)\n"
  example: []
  syntax:
    content: public FakeDateTimeZoneSource Build()
    return:
      type: NodaTime.Testing.TimeZones.FakeDateTimeZoneSource
      description: The newly-built time zone source.
    content.vb: Public Function Build As FakeDateTimeZoneSource
  overload: NodaTime.Testing.TimeZones.FakeDateTimeZoneSource.Builder.Build*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: NodaTime.Testing.TimeZones.FakeDateTimeZoneSource
  commentId: T:NodaTime.Testing.TimeZones.FakeDateTimeZoneSource
  parent: NodaTime.Testing.TimeZones
  name: FakeDateTimeZoneSource
  nameWithType: FakeDateTimeZoneSource
  fullName: NodaTime.Testing.TimeZones.FakeDateTimeZoneSource
- uid: NodaTime.Testing.TimeZones
  commentId: N:NodaTime.Testing.TimeZones
  name: NodaTime.Testing.TimeZones
  nameWithType: NodaTime.Testing.TimeZones
  fullName: NodaTime.Testing.TimeZones
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Collections.Generic.IEnumerable{NodaTime.DateTimeZone}
  commentId: T:System.Collections.Generic.IEnumerable{NodaTime.DateTimeZone}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<DateTimeZone>
  nameWithType: IEnumerable<DateTimeZone>
  fullName: System.Collections.Generic.IEnumerable<NodaTime.DateTimeZone>
  nameWithType.vb: IEnumerable(Of DateTimeZone)
  fullName.vb: System.Collections.Generic.IEnumerable(Of NodaTime.DateTimeZone)
  name.vb: IEnumerable(Of DateTimeZone)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: NodaTime.DateTimeZone
    name: DateTimeZone
    nameWithType: DateTimeZone
    fullName: NodaTime.DateTimeZone
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: NodaTime.DateTimeZone
    name: DateTimeZone
    nameWithType: DateTimeZone
    fullName: NodaTime.DateTimeZone
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.IEnumerable
  commentId: T:System.Collections.IEnumerable
  parent: System.Collections
  isExternal: true
  name: IEnumerable
  nameWithType: IEnumerable
  fullName: System.Collections.IEnumerable
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: System.Collections
  commentId: N:System.Collections
  isExternal: true
  name: System.Collections
  nameWithType: System.Collections
  fullName: System.Collections
- uid: System.TimeZoneInfo
  commentId: T:System.TimeZoneInfo
  parent: System
  isExternal: true
  name: TimeZoneInfo
  nameWithType: TimeZoneInfo
  fullName: System.TimeZoneInfo
- uid: NodaTime.Testing.TimeZones.FakeDateTimeZoneSource.Builder.BclIdsToZoneIds*
  commentId: Overload:NodaTime.Testing.TimeZones.FakeDateTimeZoneSource.Builder.BclIdsToZoneIds
  name: BclIdsToZoneIds
  nameWithType: FakeDateTimeZoneSource.Builder.BclIdsToZoneIds
  fullName: NodaTime.Testing.TimeZones.FakeDateTimeZoneSource.Builder.BclIdsToZoneIds
- uid: System.Collections.Generic.IDictionary{System.String,System.String}
  commentId: T:System.Collections.Generic.IDictionary{System.String,System.String}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IDictionary`2
  name: IDictionary<String, String>
  nameWithType: IDictionary<String, String>
  fullName: System.Collections.Generic.IDictionary<System.String, System.String>
  nameWithType.vb: IDictionary(Of String, String)
  fullName.vb: System.Collections.Generic.IDictionary(Of System.String, System.String)
  name.vb: IDictionary(Of String, String)
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IDictionary`2
  commentId: T:System.Collections.Generic.IDictionary`2
  isExternal: true
  name: IDictionary<TKey, TValue>
  nameWithType: IDictionary<TKey, TValue>
  fullName: System.Collections.Generic.IDictionary<TKey, TValue>
  nameWithType.vb: IDictionary(Of TKey, TValue)
  fullName.vb: System.Collections.Generic.IDictionary(Of TKey, TValue)
  name.vb: IDictionary(Of TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: NodaTime.Testing.TimeZones.FakeDateTimeZoneSource.Builder.Zones*
  commentId: Overload:NodaTime.Testing.TimeZones.FakeDateTimeZoneSource.Builder.Zones
  name: Zones
  nameWithType: FakeDateTimeZoneSource.Builder.Zones
  fullName: NodaTime.Testing.TimeZones.FakeDateTimeZoneSource.Builder.Zones
- uid: System.Collections.Generic.IList{NodaTime.DateTimeZone}
  commentId: T:System.Collections.Generic.IList{NodaTime.DateTimeZone}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IList`1
  name: IList<DateTimeZone>
  nameWithType: IList<DateTimeZone>
  fullName: System.Collections.Generic.IList<NodaTime.DateTimeZone>
  nameWithType.vb: IList(Of DateTimeZone)
  fullName.vb: System.Collections.Generic.IList(Of NodaTime.DateTimeZone)
  name.vb: IList(Of DateTimeZone)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: NodaTime.DateTimeZone
    name: DateTimeZone
    nameWithType: DateTimeZone
    fullName: NodaTime.DateTimeZone
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: NodaTime.DateTimeZone
    name: DateTimeZone
    nameWithType: DateTimeZone
    fullName: NodaTime.DateTimeZone
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IList`1
  commentId: T:System.Collections.Generic.IList`1
  isExternal: true
  name: IList<T>
  nameWithType: IList<T>
  fullName: System.Collections.Generic.IList<T>
  nameWithType.vb: IList(Of T)
  fullName.vb: System.Collections.Generic.IList(Of T)
  name.vb: IList(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: NodaTime.Testing.TimeZones.FakeDateTimeZoneSource.Builder.VersionId*
  commentId: Overload:NodaTime.Testing.TimeZones.FakeDateTimeZoneSource.Builder.VersionId
  name: VersionId
  nameWithType: FakeDateTimeZoneSource.Builder.VersionId
  fullName: NodaTime.Testing.TimeZones.FakeDateTimeZoneSource.Builder.VersionId
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: NodaTime.Testing.TimeZones.FakeDateTimeZoneSource.Builder.#ctor*
  commentId: Overload:NodaTime.Testing.TimeZones.FakeDateTimeZoneSource.Builder.#ctor
  name: Builder
  nameWithType: FakeDateTimeZoneSource.Builder.Builder
  fullName: NodaTime.Testing.TimeZones.FakeDateTimeZoneSource.Builder.Builder
- uid: NodaTime.Testing.TimeZones.FakeDateTimeZoneSource.Builder.Add*
  commentId: Overload:NodaTime.Testing.TimeZones.FakeDateTimeZoneSource.Builder.Add
  name: Add
  nameWithType: FakeDateTimeZoneSource.Builder.Add
  fullName: NodaTime.Testing.TimeZones.FakeDateTimeZoneSource.Builder.Add
- uid: NodaTime.DateTimeZone
  commentId: T:NodaTime.DateTimeZone
  parent: NodaTime
  name: DateTimeZone
  nameWithType: DateTimeZone
  fullName: NodaTime.DateTimeZone
- uid: NodaTime
  commentId: N:NodaTime
  name: NodaTime
  nameWithType: NodaTime
  fullName: NodaTime
- uid: NodaTime.Testing.TimeZones.FakeDateTimeZoneSource.Builder.GetEnumerator*
  commentId: Overload:NodaTime.Testing.TimeZones.FakeDateTimeZoneSource.Builder.GetEnumerator
  name: GetEnumerator
  nameWithType: FakeDateTimeZoneSource.Builder.GetEnumerator
  fullName: NodaTime.Testing.TimeZones.FakeDateTimeZoneSource.Builder.GetEnumerator
- uid: System.Collections.Generic.IEnumerable{NodaTime.DateTimeZone}.GetEnumerator
  commentId: M:System.Collections.Generic.IEnumerable{NodaTime.DateTimeZone}.GetEnumerator
  parent: System.Collections.Generic.IEnumerable{NodaTime.DateTimeZone}
  definition: System.Collections.Generic.IEnumerable`1.GetEnumerator
  name: GetEnumerator()
  nameWithType: IEnumerable<DateTimeZone>.GetEnumerator()
  fullName: System.Collections.Generic.IEnumerable<NodaTime.DateTimeZone>.GetEnumerator()
  nameWithType.vb: IEnumerable(Of DateTimeZone).GetEnumerator()
  fullName.vb: System.Collections.Generic.IEnumerable(Of NodaTime.DateTimeZone).GetEnumerator()
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable<DateTimeZone>.GetEnumerator
    fullName: System.Collections.Generic.IEnumerable<NodaTime.DateTimeZone>.GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable(Of DateTimeZone).GetEnumerator
    fullName: System.Collections.Generic.IEnumerable(Of NodaTime.DateTimeZone).GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerator{NodaTime.DateTimeZone}
  commentId: T:System.Collections.Generic.IEnumerator{NodaTime.DateTimeZone}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerator`1
  name: IEnumerator<DateTimeZone>
  nameWithType: IEnumerator<DateTimeZone>
  fullName: System.Collections.Generic.IEnumerator<NodaTime.DateTimeZone>
  nameWithType.vb: IEnumerator(Of DateTimeZone)
  fullName.vb: System.Collections.Generic.IEnumerator(Of NodaTime.DateTimeZone)
  name.vb: IEnumerator(Of DateTimeZone)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    nameWithType: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: NodaTime.DateTimeZone
    name: DateTimeZone
    nameWithType: DateTimeZone
    fullName: NodaTime.DateTimeZone
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    nameWithType: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: NodaTime.DateTimeZone
    name: DateTimeZone
    nameWithType: DateTimeZone
    fullName: NodaTime.DateTimeZone
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
  commentId: M:System.Collections.Generic.IEnumerable`1.GetEnumerator
  isExternal: true
  name: GetEnumerator()
  nameWithType: IEnumerable<T>.GetEnumerator()
  fullName: System.Collections.Generic.IEnumerable<T>.GetEnumerator()
  nameWithType.vb: IEnumerable(Of T).GetEnumerator()
  fullName.vb: System.Collections.Generic.IEnumerable(Of T).GetEnumerator()
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable<T>.GetEnumerator
    fullName: System.Collections.Generic.IEnumerable<T>.GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable(Of T).GetEnumerator
    fullName: System.Collections.Generic.IEnumerable(Of T).GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerator`1
  commentId: T:System.Collections.Generic.IEnumerator`1
  isExternal: true
  name: IEnumerator<T>
  nameWithType: IEnumerator<T>
  fullName: System.Collections.Generic.IEnumerator<T>
  nameWithType.vb: IEnumerator(Of T)
  fullName.vb: System.Collections.Generic.IEnumerator(Of T)
  name.vb: IEnumerator(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    nameWithType: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    nameWithType: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.IEnumerator
  commentId: T:System.Collections.IEnumerator
  parent: System.Collections
  isExternal: true
  name: IEnumerator
  nameWithType: IEnumerator
  fullName: System.Collections.IEnumerator
- uid: NodaTime.Testing.TimeZones.FakeDateTimeZoneSource.Builder.System#Collections#IEnumerable#GetEnumerator*
  commentId: Overload:NodaTime.Testing.TimeZones.FakeDateTimeZoneSource.Builder.System#Collections#IEnumerable#GetEnumerator
  name: IEnumerable.GetEnumerator
  nameWithType: FakeDateTimeZoneSource.Builder.IEnumerable.GetEnumerator
  fullName: NodaTime.Testing.TimeZones.FakeDateTimeZoneSource.Builder.System.Collections.IEnumerable.GetEnumerator
  nameWithType.vb: FakeDateTimeZoneSource.Builder.System.Collections.IEnumerable.GetEnumerator
  name.vb: System.Collections.IEnumerable.GetEnumerator
- uid: System.Collections.IEnumerable.GetEnumerator
  commentId: M:System.Collections.IEnumerable.GetEnumerator
  parent: System.Collections.IEnumerable
  isExternal: true
  name: GetEnumerator()
  nameWithType: IEnumerable.GetEnumerator()
  fullName: System.Collections.IEnumerable.GetEnumerator()
  spec.csharp:
  - uid: System.Collections.IEnumerable.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable.GetEnumerator
    fullName: System.Collections.IEnumerable.GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.IEnumerable.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable.GetEnumerator
    fullName: System.Collections.IEnumerable.GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: NodaTime.Testing.TimeZones.FakeDateTimeZoneSource.Builder.Build*
  commentId: Overload:NodaTime.Testing.TimeZones.FakeDateTimeZoneSource.Builder.Build
  name: Build
  nameWithType: FakeDateTimeZoneSource.Builder.Build
  fullName: NodaTime.Testing.TimeZones.FakeDateTimeZoneSource.Builder.Build
shouldSkipMarkup: true
