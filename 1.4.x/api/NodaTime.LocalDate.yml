### YamlMime:ManagedReference
items:
- uid: NodaTime.LocalDate
  commentId: T:NodaTime.LocalDate
  id: LocalDate
  parent: NodaTime
  children:
  - NodaTime.LocalDate.#ctor(NodaTime.Calendars.Era,System.Int32,System.Int32,System.Int32)
  - NodaTime.LocalDate.#ctor(NodaTime.Calendars.Era,System.Int32,System.Int32,System.Int32,NodaTime.CalendarSystem)
  - NodaTime.LocalDate.#ctor(System.Int32,System.Int32,System.Int32)
  - NodaTime.LocalDate.#ctor(System.Int32,System.Int32,System.Int32,NodaTime.CalendarSystem)
  - NodaTime.LocalDate.Add(NodaTime.LocalDate,NodaTime.Period)
  - NodaTime.LocalDate.At(NodaTime.LocalTime)
  - NodaTime.LocalDate.AtMidnight
  - NodaTime.LocalDate.Calendar
  - NodaTime.LocalDate.CompareTo(NodaTime.LocalDate)
  - NodaTime.LocalDate.Day
  - NodaTime.LocalDate.DayOfWeek
  - NodaTime.LocalDate.DayOfYear
  - NodaTime.LocalDate.Equals(NodaTime.LocalDate)
  - NodaTime.LocalDate.Equals(System.Object)
  - NodaTime.LocalDate.Era
  - NodaTime.LocalDate.FromWeekYearWeekAndDay(System.Int32,System.Int32,NodaTime.IsoDayOfWeek)
  - NodaTime.LocalDate.GetHashCode
  - NodaTime.LocalDate.IsoDayOfWeek
  - NodaTime.LocalDate.Minus(NodaTime.Period)
  - NodaTime.LocalDate.Month
  - NodaTime.LocalDate.Next(NodaTime.IsoDayOfWeek)
  - NodaTime.LocalDate.op_Addition(NodaTime.LocalDate,NodaTime.LocalTime)
  - NodaTime.LocalDate.op_Addition(NodaTime.LocalDate,NodaTime.Period)
  - NodaTime.LocalDate.op_Equality(NodaTime.LocalDate,NodaTime.LocalDate)
  - NodaTime.LocalDate.op_GreaterThan(NodaTime.LocalDate,NodaTime.LocalDate)
  - NodaTime.LocalDate.op_GreaterThanOrEqual(NodaTime.LocalDate,NodaTime.LocalDate)
  - NodaTime.LocalDate.op_Inequality(NodaTime.LocalDate,NodaTime.LocalDate)
  - NodaTime.LocalDate.op_LessThan(NodaTime.LocalDate,NodaTime.LocalDate)
  - NodaTime.LocalDate.op_LessThanOrEqual(NodaTime.LocalDate,NodaTime.LocalDate)
  - NodaTime.LocalDate.op_Subtraction(NodaTime.LocalDate,NodaTime.Period)
  - NodaTime.LocalDate.Plus(NodaTime.Period)
  - NodaTime.LocalDate.PlusDays(System.Int32)
  - NodaTime.LocalDate.PlusMonths(System.Int32)
  - NodaTime.LocalDate.PlusWeeks(System.Int32)
  - NodaTime.LocalDate.PlusYears(System.Int32)
  - NodaTime.LocalDate.Previous(NodaTime.IsoDayOfWeek)
  - NodaTime.LocalDate.Subtract(NodaTime.LocalDate,NodaTime.Period)
  - NodaTime.LocalDate.System#IComparable#CompareTo(System.Object)
  - NodaTime.LocalDate.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  - NodaTime.LocalDate.System#Xml#Serialization#IXmlSerializable#GetSchema
  - NodaTime.LocalDate.System#Xml#Serialization#IXmlSerializable#ReadXml(System.Xml.XmlReader)
  - NodaTime.LocalDate.System#Xml#Serialization#IXmlSerializable#WriteXml(System.Xml.XmlWriter)
  - NodaTime.LocalDate.ToString
  - NodaTime.LocalDate.ToString(System.String,System.IFormatProvider)
  - NodaTime.LocalDate.WeekOfWeekYear
  - NodaTime.LocalDate.WeekYear
  - NodaTime.LocalDate.WithCalendar(NodaTime.CalendarSystem)
  - NodaTime.LocalDate.Year
  - NodaTime.LocalDate.YearOfCentury
  - NodaTime.LocalDate.YearOfEra
  langs:
  - csharp
  - vb
  name: LocalDate
  nameWithType: LocalDate
  fullName: NodaTime.LocalDate
  type: Struct
  source:
    remote:
      path: 1.4.x/src/NodaTime/LocalDate.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: LocalDate
    path: src/NodaTime/LocalDate.cs
    startLine: 38
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nLocalDate is an immutable struct representing a date within the calendar,\nwith no reference to a particular time zone or time of day.\n"
  remarks: "\n<p>Comparisons of dates can be handled in a way which is either calendar-sensitive or calendar-insensitive.\nNoda Time implements all the operators (and the <xref href=\"NodaTime.LocalDate.Equals(NodaTime.LocalDate)\" data-throw-if-not-resolved=\"false\"></xref> method) such that all operators other than <xref href=\"NodaTime.LocalDate.op_Inequality(NodaTime.LocalDate%2cNodaTime.LocalDate)\" data-throw-if-not-resolved=\"false\"></xref>\nwill return false if asked to compare two values in different calendar systems.\n</p>\n<p>\nHowever, the <xref href=\"NodaTime.LocalDate.CompareTo(NodaTime.LocalDate)\" data-throw-if-not-resolved=\"false\"></xref> method (implementing <xref href=\"System.IComparable%601\" data-throw-if-not-resolved=\"false\"></xref>) is calendar-insensitive; it compares the two\ndates historically in terms of when they actually occurred, as if they&apos;re both converted to some &quot;neutral&quot; calendar system first.\n</p>\n<p>\nIt&apos;s unclear at the time of this writing whether this is the most appropriate approach, and it may change in future versions. In general,\nit would be a good idea for users to avoid comparing dates in different calendar systems, and indeed most users are unlikely to ever explicitly\nconsider which calendar system they&apos;re working in anyway.\n</p>\n"
  example: []
  syntax:
    content: >-
      [Serializable]

      public struct LocalDate : IEquatable<LocalDate>, IComparable<LocalDate>, IComparable, IFormattable, IXmlSerializable, ISerializable
    content.vb: >-
      <Serializable>

      Public Structure LocalDate
          Implements IEquatable(Of LocalDate), IComparable(Of LocalDate), IComparable, IFormattable, IXmlSerializable, ISerializable
  implements:
  - System.IEquatable{NodaTime.LocalDate}
  - System.IComparable{NodaTime.LocalDate}
  - System.IComparable
  - System.IFormattable
  - System.Xml.Serialization.IXmlSerializable
  - System.Runtime.Serialization.ISerializable
  inheritedMembers:
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetType
  attributes:
  - type: System.SerializableAttribute
    ctor: System.SerializableAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - struct
  modifiers.vb:
  - Public
  - Structure
- uid: NodaTime.LocalDate.#ctor(System.Int32,System.Int32,System.Int32)
  commentId: M:NodaTime.LocalDate.#ctor(System.Int32,System.Int32,System.Int32)
  id: '#ctor(System.Int32,System.Int32,System.Int32)'
  parent: NodaTime.LocalDate
  langs:
  - csharp
  - vb
  name: LocalDate(Int32, Int32, Int32)
  nameWithType: LocalDate.LocalDate(Int32, Int32, Int32)
  fullName: NodaTime.LocalDate.LocalDate(System.Int32, System.Int32, System.Int32)
  type: Constructor
  source:
    remote:
      path: 1.4.x/src/NodaTime/LocalDate.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: .ctor
    path: src/NodaTime/LocalDate.cs
    startLine: 55
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nConstructs an instance for the given year, month and day in the ISO calendar.\n"
  example: []
  syntax:
    content: public LocalDate(int year, int month, int day)
    parameters:
    - id: year
      type: System.Int32
      description: The year. This is the &quot;absolute year&quot;, so a value of 0 means 1 BC, for example.
    - id: month
      type: System.Int32
      description: The month of year.
    - id: day
      type: System.Int32
      description: The day of month.
    content.vb: Public Sub New(year As Integer, month As Integer, day As Integer)
  overload: NodaTime.LocalDate.#ctor*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: The parameters do not form a valid date.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: NodaTime.LocalDate.#ctor(System.Int32,System.Int32,System.Int32,NodaTime.CalendarSystem)
  commentId: M:NodaTime.LocalDate.#ctor(System.Int32,System.Int32,System.Int32,NodaTime.CalendarSystem)
  id: '#ctor(System.Int32,System.Int32,System.Int32,NodaTime.CalendarSystem)'
  parent: NodaTime.LocalDate
  langs:
  - csharp
  - vb
  name: LocalDate(Int32, Int32, Int32, CalendarSystem)
  nameWithType: LocalDate.LocalDate(Int32, Int32, Int32, CalendarSystem)
  fullName: NodaTime.LocalDate.LocalDate(System.Int32, System.Int32, System.Int32, NodaTime.CalendarSystem)
  type: Constructor
  source:
    remote:
      path: 1.4.x/src/NodaTime/LocalDate.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: .ctor
    path: src/NodaTime/LocalDate.cs
    startLine: 70
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nConstructs an instance for the given year, month and day in the specified calendar.\n"
  example: []
  syntax:
    content: public LocalDate(int year, int month, int day, CalendarSystem calendar)
    parameters:
    - id: year
      type: System.Int32
      description: >-
        The year. This is the &quot;absolute year&quot;, so, for

        the ISO calendar, a value of 0 means 1 BC, for example.
    - id: month
      type: System.Int32
      description: The month of year.
    - id: day
      type: System.Int32
      description: The day of month.
    - id: calendar
      type: NodaTime.CalendarSystem
      description: Calendar system in which to create the date.
    content.vb: Public Sub New(year As Integer, month As Integer, day As Integer, calendar As CalendarSystem)
  overload: NodaTime.LocalDate.#ctor*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: The parameters do not form a valid date.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: NodaTime.LocalDate.#ctor(NodaTime.Calendars.Era,System.Int32,System.Int32,System.Int32)
  commentId: M:NodaTime.LocalDate.#ctor(NodaTime.Calendars.Era,System.Int32,System.Int32,System.Int32)
  id: '#ctor(NodaTime.Calendars.Era,System.Int32,System.Int32,System.Int32)'
  parent: NodaTime.LocalDate
  langs:
  - csharp
  - vb
  name: LocalDate(Era, Int32, Int32, Int32)
  nameWithType: LocalDate.LocalDate(Era, Int32, Int32, Int32)
  fullName: NodaTime.LocalDate.LocalDate(NodaTime.Calendars.Era, System.Int32, System.Int32, System.Int32)
  type: Constructor
  source:
    remote:
      path: 1.4.x/src/NodaTime/LocalDate.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: .ctor
    path: src/NodaTime/LocalDate.cs
    startLine: 84
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nConstructs an instance for the given era, year of era, month and day in the ISO calendar.\n"
  example: []
  syntax:
    content: public LocalDate(Era era, int yearOfEra, int month, int day)
    parameters:
    - id: era
      type: NodaTime.Calendars.Era
      description: The era within which to create a date. Must be a valid era within the ISO calendar.
    - id: yearOfEra
      type: System.Int32
      description: The year of era.
    - id: month
      type: System.Int32
      description: The month of year.
    - id: day
      type: System.Int32
      description: The day of month.
    content.vb: Public Sub New(era As Era, yearOfEra As Integer, month As Integer, day As Integer)
  overload: NodaTime.LocalDate.#ctor*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: The parameters do not form a valid date.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: NodaTime.LocalDate.#ctor(NodaTime.Calendars.Era,System.Int32,System.Int32,System.Int32,NodaTime.CalendarSystem)
  commentId: M:NodaTime.LocalDate.#ctor(NodaTime.Calendars.Era,System.Int32,System.Int32,System.Int32,NodaTime.CalendarSystem)
  id: '#ctor(NodaTime.Calendars.Era,System.Int32,System.Int32,System.Int32,NodaTime.CalendarSystem)'
  parent: NodaTime.LocalDate
  langs:
  - csharp
  - vb
  name: LocalDate(Era, Int32, Int32, Int32, CalendarSystem)
  nameWithType: LocalDate.LocalDate(Era, Int32, Int32, Int32, CalendarSystem)
  fullName: NodaTime.LocalDate.LocalDate(NodaTime.Calendars.Era, System.Int32, System.Int32, System.Int32, NodaTime.CalendarSystem)
  type: Constructor
  source:
    remote:
      path: 1.4.x/src/NodaTime/LocalDate.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: .ctor
    path: src/NodaTime/LocalDate.cs
    startLine: 99
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nConstructs an instance for the given era, year of era, month and day in the specified calendar.\n"
  example: []
  syntax:
    content: public LocalDate(Era era, int yearOfEra, int month, int day, CalendarSystem calendar)
    parameters:
    - id: era
      type: NodaTime.Calendars.Era
      description: The era within which to create a date. Must be a valid era within the specified calendar.
    - id: yearOfEra
      type: System.Int32
      description: The year of era.
    - id: month
      type: System.Int32
      description: The month of year.
    - id: day
      type: System.Int32
      description: The day of month.
    - id: calendar
      type: NodaTime.CalendarSystem
      description: Calendar system in which to create the date.
    content.vb: Public Sub New(era As Era, yearOfEra As Integer, month As Integer, day As Integer, calendar As CalendarSystem)
  overload: NodaTime.LocalDate.#ctor*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: The parameters do not form a valid date.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: NodaTime.LocalDate.Calendar
  commentId: P:NodaTime.LocalDate.Calendar
  id: Calendar
  parent: NodaTime.LocalDate
  langs:
  - csharp
  - vb
  name: Calendar
  nameWithType: LocalDate.Calendar
  fullName: NodaTime.LocalDate.Calendar
  type: Property
  source:
    remote:
      path: 1.4.x/src/NodaTime/LocalDate.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: Calendar
    path: src/NodaTime/LocalDate.cs
    startLine: 111
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: Gets the calendar system associated with this local date.
  example: []
  syntax:
    content: public CalendarSystem Calendar { get; }
    parameters: []
    return:
      type: NodaTime.CalendarSystem
    content.vb: Public ReadOnly Property Calendar As CalendarSystem
  overload: NodaTime.LocalDate.Calendar*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: NodaTime.LocalDate.Year
  commentId: P:NodaTime.LocalDate.Year
  id: Year
  parent: NodaTime.LocalDate
  langs:
  - csharp
  - vb
  name: Year
  nameWithType: LocalDate.Year
  fullName: NodaTime.LocalDate.Year
  type: Property
  source:
    remote:
      path: 1.4.x/src/NodaTime/LocalDate.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: Year
    path: src/NodaTime/LocalDate.cs
    startLine: 116
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: Gets the year of this local date.
  remarks: >-
    This returns the &quot;absolute year&quot;, so, for the ISO calendar,

    a value of 0 means 1 BC, for example.
  example: []
  syntax:
    content: public int Year { get; }
    parameters: []
    return:
      type: System.Int32
    content.vb: Public ReadOnly Property Year As Integer
  overload: NodaTime.LocalDate.Year*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: NodaTime.LocalDate.Month
  commentId: P:NodaTime.LocalDate.Month
  id: Month
  parent: NodaTime.LocalDate
  langs:
  - csharp
  - vb
  name: Month
  nameWithType: LocalDate.Month
  fullName: NodaTime.LocalDate.Month
  type: Property
  source:
    remote:
      path: 1.4.x/src/NodaTime/LocalDate.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: Month
    path: src/NodaTime/LocalDate.cs
    startLine: 119
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: Gets the month of this local date within the year.
  example: []
  syntax:
    content: public int Month { get; }
    parameters: []
    return:
      type: System.Int32
    content.vb: Public ReadOnly Property Month As Integer
  overload: NodaTime.LocalDate.Month*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: NodaTime.LocalDate.Day
  commentId: P:NodaTime.LocalDate.Day
  id: Day
  parent: NodaTime.LocalDate
  langs:
  - csharp
  - vb
  name: Day
  nameWithType: LocalDate.Day
  fullName: NodaTime.LocalDate.Day
  type: Property
  source:
    remote:
      path: 1.4.x/src/NodaTime/LocalDate.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: Day
    path: src/NodaTime/LocalDate.cs
    startLine: 122
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: Gets the day of this local date within the month.
  example: []
  syntax:
    content: public int Day { get; }
    parameters: []
    return:
      type: System.Int32
    content.vb: Public ReadOnly Property Day As Integer
  overload: NodaTime.LocalDate.Day*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: NodaTime.LocalDate.IsoDayOfWeek
  commentId: P:NodaTime.LocalDate.IsoDayOfWeek
  id: IsoDayOfWeek
  parent: NodaTime.LocalDate
  langs:
  - csharp
  - vb
  name: IsoDayOfWeek
  nameWithType: LocalDate.IsoDayOfWeek
  fullName: NodaTime.LocalDate.IsoDayOfWeek
  type: Property
  source:
    remote:
      path: 1.4.x/src/NodaTime/LocalDate.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: IsoDayOfWeek
    path: src/NodaTime/LocalDate.cs
    startLine: 130
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nGets the week day of this local date expressed as an <xref href=\"NodaTime.IsoDayOfWeek\" data-throw-if-not-resolved=\"false\"></xref> value,\nfor calendars which use ISO days of the week.\n"
  example: []
  syntax:
    content: public IsoDayOfWeek IsoDayOfWeek { get; }
    parameters: []
    return:
      type: NodaTime.IsoDayOfWeek
    content.vb: Public ReadOnly Property IsoDayOfWeek As IsoDayOfWeek
  overload: NodaTime.LocalDate.IsoDayOfWeek*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: The underlying calendar doesn&apos;t use ISO days of the week.
  seealso:
  - linkId: NodaTime.LocalDate.DayOfWeek
    commentId: P:NodaTime.LocalDate.DayOfWeek
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: NodaTime.LocalDate.DayOfWeek
  commentId: P:NodaTime.LocalDate.DayOfWeek
  id: DayOfWeek
  parent: NodaTime.LocalDate
  langs:
  - csharp
  - vb
  name: DayOfWeek
  nameWithType: LocalDate.DayOfWeek
  fullName: NodaTime.LocalDate.DayOfWeek
  type: Property
  source:
    remote:
      path: 1.4.x/src/NodaTime/LocalDate.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: DayOfWeek
    path: src/NodaTime/LocalDate.cs
    startLine: 139
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nGets the week day of this local date as a number.\n"
  remarks: "\nFor calendars using ISO week days, this gives 1 for Monday to 7 for Sunday.\n"
  example: []
  syntax:
    content: public int DayOfWeek { get; }
    parameters: []
    return:
      type: System.Int32
    content.vb: Public ReadOnly Property DayOfWeek As Integer
  overload: NodaTime.LocalDate.DayOfWeek*
  seealso:
  - linkId: NodaTime.LocalDate.IsoDayOfWeek
    commentId: P:NodaTime.LocalDate.IsoDayOfWeek
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: NodaTime.LocalDate.WeekYear
  commentId: P:NodaTime.LocalDate.WeekYear
  id: WeekYear
  parent: NodaTime.LocalDate
  langs:
  - csharp
  - vb
  name: WeekYear
  nameWithType: LocalDate.WeekYear
  fullName: NodaTime.LocalDate.WeekYear
  type: Property
  source:
    remote:
      path: 1.4.x/src/NodaTime/LocalDate.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: WeekYear
    path: src/NodaTime/LocalDate.cs
    startLine: 159
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nGets the &quot;week year&quot; of this local date.\n"
  remarks: "\n<p>\nThe WeekYear is the year that matches with the <xref href=\"NodaTime.LocalDate.WeekOfWeekYear\" data-throw-if-not-resolved=\"false\"></xref> field.\nIn the standard ISO8601 week algorithm, the first week of the year\nis that in which at least 4 days are in the year. As a result of this\ndefinition, day 1 of the first week may be in the previous year.\nThe WeekYear allows you to query the effective year for that day.\n</p>\n<p>\nFor example, January 1st 2011 was a Saturday, so only two days of that week\n(Saturday and Sunday) were in 2011. Therefore January 1st is part of\nweek 52 of WeekYear 2010. Conversely, December 31st 2012 is a Monday,\nso is part of week 1 of WeekYear 2013.\n</p>\n"
  example: []
  syntax:
    content: >-
      [Obsolete("Use WeekYearRules for specific week-year rules for compatibility with 2.0.")]

      public int WeekYear { get; }
    parameters: []
    return:
      type: System.Int32
    content.vb: >-
      <Obsolete("Use WeekYearRules for specific week-year rules for compatibility with 2.0.")>

      Public ReadOnly Property WeekYear As Integer
  overload: NodaTime.LocalDate.WeekYear*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Use WeekYearRules for specific week-year rules for compatibility with 2.0.
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: NodaTime.LocalDate.WeekOfWeekYear
  commentId: P:NodaTime.LocalDate.WeekOfWeekYear
  id: WeekOfWeekYear
  parent: NodaTime.LocalDate
  langs:
  - csharp
  - vb
  name: WeekOfWeekYear
  nameWithType: LocalDate.WeekOfWeekYear
  fullName: NodaTime.LocalDate.WeekOfWeekYear
  type: Property
  source:
    remote:
      path: 1.4.x/src/NodaTime/LocalDate.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: WeekOfWeekYear
    path: src/NodaTime/LocalDate.cs
    startLine: 163
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: Gets the week within the WeekYear. See <xref href="NodaTime.LocalDate.WeekYear" data-throw-if-not-resolved="false"></xref> for more details.
  example: []
  syntax:
    content: >-
      [Obsolete("Use WeekYearRules for specific week-year rules for compatibility with 2.0.")]

      public int WeekOfWeekYear { get; }
    parameters: []
    return:
      type: System.Int32
    content.vb: >-
      <Obsolete("Use WeekYearRules for specific week-year rules for compatibility with 2.0.")>

      Public ReadOnly Property WeekOfWeekYear As Integer
  overload: NodaTime.LocalDate.WeekOfWeekYear*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Use WeekYearRules for specific week-year rules for compatibility with 2.0.
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: NodaTime.LocalDate.YearOfCentury
  commentId: P:NodaTime.LocalDate.YearOfCentury
  id: YearOfCentury
  parent: NodaTime.LocalDate
  langs:
  - csharp
  - vb
  name: YearOfCentury
  nameWithType: LocalDate.YearOfCentury
  fullName: NodaTime.LocalDate.YearOfCentury
  type: Property
  source:
    remote:
      path: 1.4.x/src/NodaTime/LocalDate.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: YearOfCentury
    path: src/NodaTime/LocalDate.cs
    startLine: 168
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: Gets the year of this local date within the century.
  remarks: This always returns a value in the range 0 to 99 inclusive.
  example: []
  syntax:
    content: >-
      [Obsolete("Century-based properties have been removed in 2.0")]

      public int YearOfCentury { get; }
    parameters: []
    return:
      type: System.Int32
    content.vb: >-
      <Obsolete("Century-based properties have been removed in 2.0")>

      Public ReadOnly Property YearOfCentury As Integer
  overload: NodaTime.LocalDate.YearOfCentury*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Century-based properties have been removed in 2.0
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: NodaTime.LocalDate.YearOfEra
  commentId: P:NodaTime.LocalDate.YearOfEra
  id: YearOfEra
  parent: NodaTime.LocalDate
  langs:
  - csharp
  - vb
  name: YearOfEra
  nameWithType: LocalDate.YearOfEra
  fullName: NodaTime.LocalDate.YearOfEra
  type: Property
  source:
    remote:
      path: 1.4.x/src/NodaTime/LocalDate.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: YearOfEra
    path: src/NodaTime/LocalDate.cs
    startLine: 172
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: Gets the year of this local date within the era.
  example: []
  syntax:
    content: public int YearOfEra { get; }
    parameters: []
    return:
      type: System.Int32
    content.vb: Public ReadOnly Property YearOfEra As Integer
  overload: NodaTime.LocalDate.YearOfEra*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: NodaTime.LocalDate.Era
  commentId: P:NodaTime.LocalDate.Era
  id: Era
  parent: NodaTime.LocalDate
  langs:
  - csharp
  - vb
  name: Era
  nameWithType: LocalDate.Era
  fullName: NodaTime.LocalDate.Era
  type: Property
  source:
    remote:
      path: 1.4.x/src/NodaTime/LocalDate.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: Era
    path: src/NodaTime/LocalDate.cs
    startLine: 175
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: Gets the era of this local date.
  example: []
  syntax:
    content: public Era Era { get; }
    parameters: []
    return:
      type: NodaTime.Calendars.Era
    content.vb: Public ReadOnly Property Era As Era
  overload: NodaTime.LocalDate.Era*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: NodaTime.LocalDate.DayOfYear
  commentId: P:NodaTime.LocalDate.DayOfYear
  id: DayOfYear
  parent: NodaTime.LocalDate
  langs:
  - csharp
  - vb
  name: DayOfYear
  nameWithType: LocalDate.DayOfYear
  fullName: NodaTime.LocalDate.DayOfYear
  type: Property
  source:
    remote:
      path: 1.4.x/src/NodaTime/LocalDate.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: DayOfYear
    path: src/NodaTime/LocalDate.cs
    startLine: 178
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: Gets the day of this local date within the year.
  example: []
  syntax:
    content: public int DayOfYear { get; }
    parameters: []
    return:
      type: System.Int32
    content.vb: Public ReadOnly Property DayOfYear As Integer
  overload: NodaTime.LocalDate.DayOfYear*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: NodaTime.LocalDate.AtMidnight
  commentId: M:NodaTime.LocalDate.AtMidnight
  id: AtMidnight
  parent: NodaTime.LocalDate
  langs:
  - csharp
  - vb
  name: AtMidnight()
  nameWithType: LocalDate.AtMidnight()
  fullName: NodaTime.LocalDate.AtMidnight()
  type: Method
  source:
    remote:
      path: 1.4.x/src/NodaTime/LocalDate.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: AtMidnight
    path: src/NodaTime/LocalDate.cs
    startLine: 185
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nGets a <xref href=\"NodaTime.LocalDateTime\" data-throw-if-not-resolved=\"false\"></xref> at midnight on the date represented by this local date.\n"
  example: []
  syntax:
    content: public LocalDateTime AtMidnight()
    return:
      type: NodaTime.LocalDateTime
      description: >-
        The <xref href="NodaTime.LocalDateTime" data-throw-if-not-resolved="false"></xref> representing midnight on this local date, in the same calendar

        system.
    content.vb: Public Function AtMidnight As LocalDateTime
  overload: NodaTime.LocalDate.AtMidnight*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: NodaTime.LocalDate.FromWeekYearWeekAndDay(System.Int32,System.Int32,NodaTime.IsoDayOfWeek)
  commentId: M:NodaTime.LocalDate.FromWeekYearWeekAndDay(System.Int32,System.Int32,NodaTime.IsoDayOfWeek)
  id: FromWeekYearWeekAndDay(System.Int32,System.Int32,NodaTime.IsoDayOfWeek)
  parent: NodaTime.LocalDate
  langs:
  - csharp
  - vb
  name: FromWeekYearWeekAndDay(Int32, Int32, IsoDayOfWeek)
  nameWithType: LocalDate.FromWeekYearWeekAndDay(Int32, Int32, IsoDayOfWeek)
  fullName: NodaTime.LocalDate.FromWeekYearWeekAndDay(System.Int32, System.Int32, NodaTime.IsoDayOfWeek)
  type: Method
  source:
    remote:
      path: 1.4.x/src/NodaTime/LocalDate.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: FromWeekYearWeekAndDay
    path: src/NodaTime/LocalDate.cs
    startLine: 199
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nReturns the local date corresponding to the given &quot;week year&quot;, &quot;week of week year&quot;, and &quot;day of week&quot;\nin the ISO calendar system.\n"
  example: []
  syntax:
    content: public static LocalDate FromWeekYearWeekAndDay(int weekYear, int weekOfWeekYear, IsoDayOfWeek dayOfWeek)
    parameters:
    - id: weekYear
      type: System.Int32
      description: ISO-8601 week year of value to return
    - id: weekOfWeekYear
      type: System.Int32
      description: ISO-8601 week of week year of value to return
    - id: dayOfWeek
      type: NodaTime.IsoDayOfWeek
      description: ISO-8601 day of week to return
    return:
      type: NodaTime.LocalDate
      description: The date corresponding to the given week year / week of week year / day of week.
    content.vb: Public Shared Function FromWeekYearWeekAndDay(weekYear As Integer, weekOfWeekYear As Integer, dayOfWeek As IsoDayOfWeek) As LocalDate
  overload: NodaTime.LocalDate.FromWeekYearWeekAndDay*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: NodaTime.LocalDate.op_Addition(NodaTime.LocalDate,NodaTime.Period)
  commentId: M:NodaTime.LocalDate.op_Addition(NodaTime.LocalDate,NodaTime.Period)
  id: op_Addition(NodaTime.LocalDate,NodaTime.Period)
  parent: NodaTime.LocalDate
  langs:
  - csharp
  - vb
  name: Addition(LocalDate, Period)
  nameWithType: LocalDate.Addition(LocalDate, Period)
  fullName: NodaTime.LocalDate.Addition(NodaTime.LocalDate, NodaTime.Period)
  type: Operator
  source:
    remote:
      path: 1.4.x/src/NodaTime/LocalDate.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: op_Addition
    path: src/NodaTime/LocalDate.cs
    startLine: 211
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nAdds the specified period to the date.\n"
  example: []
  syntax:
    content: public static LocalDate operator +(LocalDate date, Period period)
    parameters:
    - id: date
      type: NodaTime.LocalDate
      description: The date to add the period to
    - id: period
      type: NodaTime.Period
      description: The period to add. Must not contain any (non-zero) time units.
    return:
      type: NodaTime.LocalDate
      description: The sum of the given date and period
    content.vb: Public Shared Operator +(date As LocalDate, period As Period) As LocalDate
  overload: NodaTime.LocalDate.op_Addition*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: NodaTime.LocalDate.Add(NodaTime.LocalDate,NodaTime.Period)
  commentId: M:NodaTime.LocalDate.Add(NodaTime.LocalDate,NodaTime.Period)
  id: Add(NodaTime.LocalDate,NodaTime.Period)
  parent: NodaTime.LocalDate
  langs:
  - csharp
  - vb
  name: Add(LocalDate, Period)
  nameWithType: LocalDate.Add(LocalDate, Period)
  fullName: NodaTime.LocalDate.Add(NodaTime.LocalDate, NodaTime.Period)
  type: Method
  source:
    remote:
      path: 1.4.x/src/NodaTime/LocalDate.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: Add
    path: src/NodaTime/LocalDate.cs
    startLine: 224
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nAdds the specified period to the date. Friendly alternative to <code>operator+()</code>.\n"
  example: []
  syntax:
    content: public static LocalDate Add(LocalDate date, Period period)
    parameters:
    - id: date
      type: NodaTime.LocalDate
      description: The date to add the period to
    - id: period
      type: NodaTime.Period
      description: The period to add. Must not contain any (non-zero) time units.
    return:
      type: NodaTime.LocalDate
      description: The sum of the given date and period
    content.vb: Public Shared Function Add(date As LocalDate, period As Period) As LocalDate
  overload: NodaTime.LocalDate.Add*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: NodaTime.LocalDate.Plus(NodaTime.Period)
  commentId: M:NodaTime.LocalDate.Plus(NodaTime.Period)
  id: Plus(NodaTime.Period)
  parent: NodaTime.LocalDate
  langs:
  - csharp
  - vb
  name: Plus(Period)
  nameWithType: LocalDate.Plus(Period)
  fullName: NodaTime.LocalDate.Plus(NodaTime.Period)
  type: Method
  source:
    remote:
      path: 1.4.x/src/NodaTime/LocalDate.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: Plus
    path: src/NodaTime/LocalDate.cs
    startLine: 234
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nAdds the specified period to this date. Fluent alternative to <code>operator+()</code>.\n"
  example: []
  syntax:
    content: public LocalDate Plus(Period period)
    parameters:
    - id: period
      type: NodaTime.Period
      description: The period to add. Must not contain any (non-zero) time units.
    return:
      type: NodaTime.LocalDate
      description: The sum of this date and the given period
    content.vb: Public Function Plus(period As Period) As LocalDate
  overload: NodaTime.LocalDate.Plus*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: NodaTime.LocalDate.op_Addition(NodaTime.LocalDate,NodaTime.LocalTime)
  commentId: M:NodaTime.LocalDate.op_Addition(NodaTime.LocalDate,NodaTime.LocalTime)
  id: op_Addition(NodaTime.LocalDate,NodaTime.LocalTime)
  parent: NodaTime.LocalDate
  langs:
  - csharp
  - vb
  name: Addition(LocalDate, LocalTime)
  nameWithType: LocalDate.Addition(LocalDate, LocalTime)
  fullName: NodaTime.LocalDate.Addition(NodaTime.LocalDate, NodaTime.LocalTime)
  type: Operator
  source:
    remote:
      path: 1.4.x/src/NodaTime/LocalDate.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: op_Addition
    path: src/NodaTime/LocalDate.cs
    startLine: 247
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nCombines the given <xref href=\"NodaTime.LocalDate\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"NodaTime.LocalTime\" data-throw-if-not-resolved=\"false\"></xref> components\ninto a single <xref href=\"NodaTime.LocalDateTime\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public static LocalDateTime operator +(LocalDate date, LocalTime time)
    parameters:
    - id: date
      type: NodaTime.LocalDate
      description: The date to add the time to
    - id: time
      type: NodaTime.LocalTime
      description: The time to add
    return:
      type: NodaTime.LocalDateTime
      description: The sum of the given date and time
    content.vb: Public Shared Operator +(date As LocalDate, time As LocalTime) As LocalDateTime
  overload: NodaTime.LocalDate.op_Addition*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: NodaTime.LocalDate.op_Subtraction(NodaTime.LocalDate,NodaTime.Period)
  commentId: M:NodaTime.LocalDate.op_Subtraction(NodaTime.LocalDate,NodaTime.Period)
  id: op_Subtraction(NodaTime.LocalDate,NodaTime.Period)
  parent: NodaTime.LocalDate
  langs:
  - csharp
  - vb
  name: Subtraction(LocalDate, Period)
  nameWithType: LocalDate.Subtraction(LocalDate, Period)
  fullName: NodaTime.LocalDate.Subtraction(NodaTime.LocalDate, NodaTime.Period)
  type: Operator
  source:
    remote:
      path: 1.4.x/src/NodaTime/LocalDate.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: op_Subtraction
    path: src/NodaTime/LocalDate.cs
    startLine: 260
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nSubtracts the specified period from the date.\n"
  example: []
  syntax:
    content: public static LocalDate operator -(LocalDate date, Period period)
    parameters:
    - id: date
      type: NodaTime.LocalDate
      description: The date to subtract the period from
    - id: period
      type: NodaTime.Period
      description: The period to subtract. Must not contain any (non-zero) time units.
    return:
      type: NodaTime.LocalDate
      description: The result of subtracting the given period from the date
    content.vb: Public Shared Operator -(date As LocalDate, period As Period) As LocalDate
  overload: NodaTime.LocalDate.op_Subtraction*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: NodaTime.LocalDate.Subtract(NodaTime.LocalDate,NodaTime.Period)
  commentId: M:NodaTime.LocalDate.Subtract(NodaTime.LocalDate,NodaTime.Period)
  id: Subtract(NodaTime.LocalDate,NodaTime.Period)
  parent: NodaTime.LocalDate
  langs:
  - csharp
  - vb
  name: Subtract(LocalDate, Period)
  nameWithType: LocalDate.Subtract(LocalDate, Period)
  fullName: NodaTime.LocalDate.Subtract(NodaTime.LocalDate, NodaTime.Period)
  type: Method
  source:
    remote:
      path: 1.4.x/src/NodaTime/LocalDate.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: Subtract
    path: src/NodaTime/LocalDate.cs
    startLine: 273
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nSubtracts the specified period from the date. Friendly alternative to <code>operator-()</code>.\n"
  example: []
  syntax:
    content: public static LocalDate Subtract(LocalDate date, Period period)
    parameters:
    - id: date
      type: NodaTime.LocalDate
      description: The date to subtract the period from
    - id: period
      type: NodaTime.Period
      description: The period to subtract. Must not contain any (non-zero) time units.
    return:
      type: NodaTime.LocalDate
      description: The result of subtracting the given period from the date.
    content.vb: Public Shared Function Subtract(date As LocalDate, period As Period) As LocalDate
  overload: NodaTime.LocalDate.Subtract*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: NodaTime.LocalDate.Minus(NodaTime.Period)
  commentId: M:NodaTime.LocalDate.Minus(NodaTime.Period)
  id: Minus(NodaTime.Period)
  parent: NodaTime.LocalDate
  langs:
  - csharp
  - vb
  name: Minus(Period)
  nameWithType: LocalDate.Minus(Period)
  fullName: NodaTime.LocalDate.Minus(NodaTime.Period)
  type: Method
  source:
    remote:
      path: 1.4.x/src/NodaTime/LocalDate.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: Minus
    path: src/NodaTime/LocalDate.cs
    startLine: 283
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nSubtracts the specified period from this date. Fluent alternative to <code>operator-()</code>.\n"
  example: []
  syntax:
    content: public LocalDate Minus(Period period)
    parameters:
    - id: period
      type: NodaTime.Period
      description: The period to subtract. Must not contain any (non-zero) time units.
    return:
      type: NodaTime.LocalDate
      description: The result of subtracting the given period from this date.
    content.vb: Public Function Minus(period As Period) As LocalDate
  overload: NodaTime.LocalDate.Minus*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: NodaTime.LocalDate.op_Equality(NodaTime.LocalDate,NodaTime.LocalDate)
  commentId: M:NodaTime.LocalDate.op_Equality(NodaTime.LocalDate,NodaTime.LocalDate)
  id: op_Equality(NodaTime.LocalDate,NodaTime.LocalDate)
  parent: NodaTime.LocalDate
  langs:
  - csharp
  - vb
  name: Equality(LocalDate, LocalDate)
  nameWithType: LocalDate.Equality(LocalDate, LocalDate)
  fullName: NodaTime.LocalDate.Equality(NodaTime.LocalDate, NodaTime.LocalDate)
  type: Operator
  source:
    remote:
      path: 1.4.x/src/NodaTime/LocalDate.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: op_Equality
    path: src/NodaTime/LocalDate.cs
    startLine: 296
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nCompares two <xref href=\"NodaTime.LocalDate\" data-throw-if-not-resolved=\"false\"></xref> values for equality. This requires\nthat the dates be the same, within the same calendar.\n"
  example: []
  syntax:
    content: public static bool operator ==(LocalDate lhs, LocalDate rhs)
    parameters:
    - id: lhs
      type: NodaTime.LocalDate
      description: The first value to compare
    - id: rhs
      type: NodaTime.LocalDate
      description: The second value to compare
    return:
      type: System.Boolean
      description: True if the two dates are the same and in the same calendar; false otherwise
    content.vb: Public Shared Operator =(lhs As LocalDate, rhs As LocalDate) As Boolean
  overload: NodaTime.LocalDate.op_Equality*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: NodaTime.LocalDate.op_Inequality(NodaTime.LocalDate,NodaTime.LocalDate)
  commentId: M:NodaTime.LocalDate.op_Inequality(NodaTime.LocalDate,NodaTime.LocalDate)
  id: op_Inequality(NodaTime.LocalDate,NodaTime.LocalDate)
  parent: NodaTime.LocalDate
  langs:
  - csharp
  - vb
  name: Inequality(LocalDate, LocalDate)
  nameWithType: LocalDate.Inequality(LocalDate, LocalDate)
  fullName: NodaTime.LocalDate.Inequality(NodaTime.LocalDate, NodaTime.LocalDate)
  type: Operator
  source:
    remote:
      path: 1.4.x/src/NodaTime/LocalDate.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: op_Inequality
    path: src/NodaTime/LocalDate.cs
    startLine: 307
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nCompares two <xref href=\"NodaTime.LocalDate\" data-throw-if-not-resolved=\"false\"></xref> values for inequality.\n"
  example: []
  syntax:
    content: public static bool operator !=(LocalDate lhs, LocalDate rhs)
    parameters:
    - id: lhs
      type: NodaTime.LocalDate
      description: The first value to compare
    - id: rhs
      type: NodaTime.LocalDate
      description: The second value to compare
    return:
      type: System.Boolean
      description: False if the two dates are the same and in the same calendar; true otherwise
    content.vb: Public Shared Operator <>(lhs As LocalDate, rhs As LocalDate) As Boolean
  overload: NodaTime.LocalDate.op_Inequality*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: NodaTime.LocalDate.op_LessThan(NodaTime.LocalDate,NodaTime.LocalDate)
  commentId: M:NodaTime.LocalDate.op_LessThan(NodaTime.LocalDate,NodaTime.LocalDate)
  id: op_LessThan(NodaTime.LocalDate,NodaTime.LocalDate)
  parent: NodaTime.LocalDate
  langs:
  - csharp
  - vb
  name: LessThan(LocalDate, LocalDate)
  nameWithType: LocalDate.LessThan(LocalDate, LocalDate)
  fullName: NodaTime.LocalDate.LessThan(NodaTime.LocalDate, NodaTime.LocalDate)
  type: Operator
  source:
    remote:
      path: 1.4.x/src/NodaTime/LocalDate.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: op_LessThan
    path: src/NodaTime/LocalDate.cs
    startLine: 323
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nCompares two LocalDate values to see if the left one is strictly earlier than the right\none.\n"
  remarks: "\nThis operator always returns false if the two operands have different calendars. See the top-level type\ndocumentation for more information about comparisons.\n"
  example: []
  syntax:
    content: public static bool operator <(LocalDate lhs, LocalDate rhs)
    parameters:
    - id: lhs
      type: NodaTime.LocalDate
      description: First operand of the comparison
    - id: rhs
      type: NodaTime.LocalDate
      description: Second operand of the comparison
    return:
      type: System.Boolean
      description: true if the <code data-dev-comment-type="paramref" class="paramref">lhs</code> is strictly earlier than <code data-dev-comment-type="paramref" class="paramref">rhs</code>, false otherwise.
    content.vb: Public Shared Operator <(lhs As LocalDate, rhs As LocalDate) As Boolean
  overload: NodaTime.LocalDate.op_LessThan*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: NodaTime.LocalDate.op_LessThanOrEqual(NodaTime.LocalDate,NodaTime.LocalDate)
  commentId: M:NodaTime.LocalDate.op_LessThanOrEqual(NodaTime.LocalDate,NodaTime.LocalDate)
  id: op_LessThanOrEqual(NodaTime.LocalDate,NodaTime.LocalDate)
  parent: NodaTime.LocalDate
  langs:
  - csharp
  - vb
  name: LessThanOrEqual(LocalDate, LocalDate)
  nameWithType: LocalDate.LessThanOrEqual(LocalDate, LocalDate)
  fullName: NodaTime.LocalDate.LessThanOrEqual(NodaTime.LocalDate, NodaTime.LocalDate)
  type: Operator
  source:
    remote:
      path: 1.4.x/src/NodaTime/LocalDate.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: op_LessThanOrEqual
    path: src/NodaTime/LocalDate.cs
    startLine: 339
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nCompares two LocalDate values to see if the left one is earlier than or equal to the right\none.\n"
  remarks: "\nThis operator always returns false if the two operands have different calendars. See the top-level type\ndocumentation for more information about comparisons.\n"
  example: []
  syntax:
    content: public static bool operator <=(LocalDate lhs, LocalDate rhs)
    parameters:
    - id: lhs
      type: NodaTime.LocalDate
      description: First operand of the comparison
    - id: rhs
      type: NodaTime.LocalDate
      description: Second operand of the comparison
    return:
      type: System.Boolean
      description: true if the <code data-dev-comment-type="paramref" class="paramref">lhs</code> is earlier than or equal to <code data-dev-comment-type="paramref" class="paramref">rhs</code>, false otherwise.
    content.vb: Public Shared Operator <=(lhs As LocalDate, rhs As LocalDate) As Boolean
  overload: NodaTime.LocalDate.op_LessThanOrEqual*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: NodaTime.LocalDate.op_GreaterThan(NodaTime.LocalDate,NodaTime.LocalDate)
  commentId: M:NodaTime.LocalDate.op_GreaterThan(NodaTime.LocalDate,NodaTime.LocalDate)
  id: op_GreaterThan(NodaTime.LocalDate,NodaTime.LocalDate)
  parent: NodaTime.LocalDate
  langs:
  - csharp
  - vb
  name: GreaterThan(LocalDate, LocalDate)
  nameWithType: LocalDate.GreaterThan(LocalDate, LocalDate)
  fullName: NodaTime.LocalDate.GreaterThan(NodaTime.LocalDate, NodaTime.LocalDate)
  type: Operator
  source:
    remote:
      path: 1.4.x/src/NodaTime/LocalDate.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: op_GreaterThan
    path: src/NodaTime/LocalDate.cs
    startLine: 355
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nCompares two LocalDate values to see if the left one is strictly later than the right\none.\n"
  remarks: "\nThis operator always returns false if the two operands have different calendars. See the top-level type\ndocumentation for more information about comparisons.\n"
  example: []
  syntax:
    content: public static bool operator>(LocalDate lhs, LocalDate rhs)
    parameters:
    - id: lhs
      type: NodaTime.LocalDate
      description: First operand of the comparison
    - id: rhs
      type: NodaTime.LocalDate
      description: Second operand of the comparison
    return:
      type: System.Boolean
      description: true if the <code data-dev-comment-type="paramref" class="paramref">lhs</code> is strictly later than <code data-dev-comment-type="paramref" class="paramref">rhs</code>, false otherwise.
    content.vb: Public Shared Operator>(lhs As LocalDate, rhs As LocalDate) As Boolean
  overload: NodaTime.LocalDate.op_GreaterThan*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: NodaTime.LocalDate.op_GreaterThanOrEqual(NodaTime.LocalDate,NodaTime.LocalDate)
  commentId: M:NodaTime.LocalDate.op_GreaterThanOrEqual(NodaTime.LocalDate,NodaTime.LocalDate)
  id: op_GreaterThanOrEqual(NodaTime.LocalDate,NodaTime.LocalDate)
  parent: NodaTime.LocalDate
  langs:
  - csharp
  - vb
  name: GreaterThanOrEqual(LocalDate, LocalDate)
  nameWithType: LocalDate.GreaterThanOrEqual(LocalDate, LocalDate)
  fullName: NodaTime.LocalDate.GreaterThanOrEqual(NodaTime.LocalDate, NodaTime.LocalDate)
  type: Operator
  source:
    remote:
      path: 1.4.x/src/NodaTime/LocalDate.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: op_GreaterThanOrEqual
    path: src/NodaTime/LocalDate.cs
    startLine: 371
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nCompares two LocalDate values to see if the left one is later than or equal to the right\none.\n"
  remarks: "\nThis operator always returns false if the two operands have different calendars. See the top-level type\ndocumentation for more information about comparisons.\n"
  example: []
  syntax:
    content: public static bool operator >=(LocalDate lhs, LocalDate rhs)
    parameters:
    - id: lhs
      type: NodaTime.LocalDate
      description: First operand of the comparison
    - id: rhs
      type: NodaTime.LocalDate
      description: Second operand of the comparison
    return:
      type: System.Boolean
      description: true if the <code data-dev-comment-type="paramref" class="paramref">lhs</code> is later than or equal to <code data-dev-comment-type="paramref" class="paramref">rhs</code>, false otherwise.
    content.vb: Public Shared Operator >=(lhs As LocalDate, rhs As LocalDate) As Boolean
  overload: NodaTime.LocalDate.op_GreaterThanOrEqual*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: NodaTime.LocalDate.CompareTo(NodaTime.LocalDate)
  commentId: M:NodaTime.LocalDate.CompareTo(NodaTime.LocalDate)
  id: CompareTo(NodaTime.LocalDate)
  parent: NodaTime.LocalDate
  langs:
  - csharp
  - vb
  name: CompareTo(LocalDate)
  nameWithType: LocalDate.CompareTo(LocalDate)
  fullName: NodaTime.LocalDate.CompareTo(NodaTime.LocalDate)
  type: Method
  source:
    remote:
      path: 1.4.x/src/NodaTime/LocalDate.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: CompareTo
    path: src/NodaTime/LocalDate.cs
    startLine: 390
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nIndicates whether this date is earlier, later or the same as another one.\n"
  remarks: "\nThe comparison is performed in terms of a calendar-independent notion of date;\nthe calendar systems of both <xref href=\"NodaTime.LocalDate\" data-throw-if-not-resolved=\"false\"></xref> values are ignored. When both values use the same calendar,\nthis is absolutely natural. However, when comparing a value in one calendar with a value in another,\nthis can lead to surprising results. For example, 1945 in the ISO calendar corresponds to around 1364\nin the Islamic calendar, so an Islamic date in year 1400 is &quot;after&quot; a date in 1945 in the ISO calendar.\n"
  example: []
  syntax:
    content: public int CompareTo(LocalDate other)
    parameters:
    - id: other
      type: NodaTime.LocalDate
      description: The other date to compare this one with
    return:
      type: System.Int32
      description: >-
        A value less than zero if this date is earlier than <code data-dev-comment-type="paramref" class="paramref">other</code>;

        zero if this date is the same as <code data-dev-comment-type="paramref" class="paramref">other</code>; a value greater than zero if this date is

        later than <code data-dev-comment-type="paramref" class="paramref">other</code>.
    content.vb: Public Function CompareTo(other As LocalDate) As Integer
  overload: NodaTime.LocalDate.CompareTo*
  implements:
  - System.IComparable{NodaTime.LocalDate}.CompareTo(NodaTime.LocalDate)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: NodaTime.LocalDate.System#IComparable#CompareTo(System.Object)
  commentId: M:NodaTime.LocalDate.System#IComparable#CompareTo(System.Object)
  id: System#IComparable#CompareTo(System.Object)
  isEii: true
  parent: NodaTime.LocalDate
  langs:
  - csharp
  - vb
  name: IComparable.CompareTo(Object)
  nameWithType: LocalDate.IComparable.CompareTo(Object)
  fullName: NodaTime.LocalDate.System.IComparable.CompareTo(System.Object)
  type: Method
  source:
    remote:
      path: 1.4.x/src/NodaTime/LocalDate.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: System.IComparable.CompareTo
    path: src/NodaTime/LocalDate.cs
    startLine: 406
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nImplementation of <xref href=\"System.IComparable.CompareTo(System.Object)\" data-throw-if-not-resolved=\"false\"></xref> to compare two LocalDates.\n"
  remarks: "\nThis uses explicit interface implementation to avoid it being called accidentally. The generic implementation should usually be preferred.\n"
  example: []
  syntax:
    content: int IComparable.CompareTo(object obj)
    parameters:
    - id: obj
      type: System.Object
      description: The object to compare this value with.
    return:
      type: System.Int32
      description: >
        The result of comparing this LocalDate with another one; see <xref href="NodaTime.LocalDate.CompareTo(NodaTime.LocalDate)" data-throw-if-not-resolved="false"></xref> for general details.

        If <code data-dev-comment-type="paramref" class="paramref">obj</code> is null, this method returns a value greater than 0.
    content.vb: Function System.IComparable.CompareTo(obj As Object) As Integer Implements IComparable.CompareTo
  overload: NodaTime.LocalDate.System#IComparable#CompareTo*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: <code data-dev-comment-type="paramref" class="paramref">obj</code> is non-null but does not refer to an instance of <xref href="NodaTime.LocalDate" data-throw-if-not-resolved="false"></xref>.
  implements:
  - System.IComparable.CompareTo(System.Object)
  nameWithType.vb: LocalDate.System.IComparable.CompareTo(Object)
  name.vb: System.IComparable.CompareTo(Object)
- uid: NodaTime.LocalDate.GetHashCode
  commentId: M:NodaTime.LocalDate.GetHashCode
  id: GetHashCode
  parent: NodaTime.LocalDate
  langs:
  - csharp
  - vb
  name: GetHashCode()
  nameWithType: LocalDate.GetHashCode()
  fullName: NodaTime.LocalDate.GetHashCode()
  type: Method
  source:
    remote:
      path: 1.4.x/src/NodaTime/LocalDate.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: GetHashCode
    path: src/NodaTime/LocalDate.cs
    startLine: 420
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nReturns a hash code for this local date.\n"
  example: []
  syntax:
    content: public override int GetHashCode()
    return:
      type: System.Int32
      description: A hash code for this local date.
    content.vb: Public Overrides Function GetHashCode As Integer
  overridden: System.ValueType.GetHashCode
  overload: NodaTime.LocalDate.GetHashCode*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: NodaTime.LocalDate.Equals(System.Object)
  commentId: M:NodaTime.LocalDate.Equals(System.Object)
  id: Equals(System.Object)
  parent: NodaTime.LocalDate
  langs:
  - csharp
  - vb
  name: Equals(Object)
  nameWithType: LocalDate.Equals(Object)
  fullName: NodaTime.LocalDate.Equals(System.Object)
  type: Method
  source:
    remote:
      path: 1.4.x/src/NodaTime/LocalDate.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: Equals
    path: src/NodaTime/LocalDate.cs
    startLine: 431
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nCompares two <xref href=\"NodaTime.LocalDate\" data-throw-if-not-resolved=\"false\"></xref> values for equality. This requires\nthat the dates be the same, within the same calendar.\n"
  example: []
  syntax:
    content: public override bool Equals(object obj)
    parameters:
    - id: obj
      type: System.Object
      description: The object to compare this date with.
    return:
      type: System.Boolean
      description: True if the given value is another local date equal to this one; false otherwise.
    content.vb: Public Overrides Function Equals(obj As Object) As Boolean
  overridden: System.ValueType.Equals(System.Object)
  overload: NodaTime.LocalDate.Equals*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: NodaTime.LocalDate.Equals(NodaTime.LocalDate)
  commentId: M:NodaTime.LocalDate.Equals(NodaTime.LocalDate)
  id: Equals(NodaTime.LocalDate)
  parent: NodaTime.LocalDate
  langs:
  - csharp
  - vb
  name: Equals(LocalDate)
  nameWithType: LocalDate.Equals(LocalDate)
  fullName: NodaTime.LocalDate.Equals(NodaTime.LocalDate)
  type: Method
  source:
    remote:
      path: 1.4.x/src/NodaTime/LocalDate.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: Equals
    path: src/NodaTime/LocalDate.cs
    startLine: 446
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nCompares two <xref href=\"NodaTime.LocalDate\" data-throw-if-not-resolved=\"false\"></xref> values for equality. This requires\nthat the dates be the same, within the same calendar.\n"
  example: []
  syntax:
    content: public bool Equals(LocalDate other)
    parameters:
    - id: other
      type: NodaTime.LocalDate
      description: The value to compare this date with.
    return:
      type: System.Boolean
      description: True if the given value is another local date equal to this one; false otherwise.
    content.vb: Public Function Equals(other As LocalDate) As Boolean
  overload: NodaTime.LocalDate.Equals*
  implements:
  - System.IEquatable{NodaTime.LocalDate}.Equals(NodaTime.LocalDate)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: NodaTime.LocalDate.WithCalendar(NodaTime.CalendarSystem)
  commentId: M:NodaTime.LocalDate.WithCalendar(NodaTime.CalendarSystem)
  id: WithCalendar(NodaTime.CalendarSystem)
  parent: NodaTime.LocalDate
  langs:
  - csharp
  - vb
  name: WithCalendar(CalendarSystem)
  nameWithType: LocalDate.WithCalendar(CalendarSystem)
  fullName: NodaTime.LocalDate.WithCalendar(NodaTime.CalendarSystem)
  type: Method
  source:
    remote:
      path: 1.4.x/src/NodaTime/LocalDate.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: WithCalendar
    path: src/NodaTime/LocalDate.cs
    startLine: 458
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nCreates a new LocalDate representing the same physical date, but in a different calendar.\nThe returned LocalDate is likely to have different field values to this one.\nFor example, January 1st 1970 in the Gregorian calendar was December 19th 1969 in the Julian calendar.\n"
  example: []
  syntax:
    content: public LocalDate WithCalendar(CalendarSystem calendarSystem)
    parameters:
    - id: calendarSystem
      type: NodaTime.CalendarSystem
      description: The calendar system to convert this local date to.
    return:
      type: NodaTime.LocalDate
      description: The converted LocalDate
    content.vb: Public Function WithCalendar(calendarSystem As CalendarSystem) As LocalDate
  overload: NodaTime.LocalDate.WithCalendar*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: NodaTime.LocalDate.PlusYears(System.Int32)
  commentId: M:NodaTime.LocalDate.PlusYears(System.Int32)
  id: PlusYears(System.Int32)
  parent: NodaTime.LocalDate
  langs:
  - csharp
  - vb
  name: PlusYears(Int32)
  nameWithType: LocalDate.PlusYears(Int32)
  fullName: NodaTime.LocalDate.PlusYears(System.Int32)
  type: Method
  source:
    remote:
      path: 1.4.x/src/NodaTime/LocalDate.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: PlusYears
    path: src/NodaTime/LocalDate.cs
    startLine: 474
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nReturns a new LocalDate representing the current value with the given number of years added.\n"
  remarks: "\nIf the resulting date is invalid, lower fields (typically the day of month) are reduced to find a valid value.\nFor example, adding one year to February 29th 2012 will return February 28th 2013; subtracting one year from\nFebruary 29th 2012 will return February 28th 2011.\n"
  example: []
  syntax:
    content: public LocalDate PlusYears(int years)
    parameters:
    - id: years
      type: System.Int32
      description: The number of years to add
    return:
      type: NodaTime.LocalDate
      description: The current value plus the given number of years.
    content.vb: Public Function PlusYears(years As Integer) As LocalDate
  overload: NodaTime.LocalDate.PlusYears*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: NodaTime.LocalDate.PlusMonths(System.Int32)
  commentId: M:NodaTime.LocalDate.PlusMonths(System.Int32)
  id: PlusMonths(System.Int32)
  parent: NodaTime.LocalDate
  langs:
  - csharp
  - vb
  name: PlusMonths(Int32)
  nameWithType: LocalDate.PlusMonths(Int32)
  fullName: NodaTime.LocalDate.PlusMonths(System.Int32)
  type: Method
  source:
    remote:
      path: 1.4.x/src/NodaTime/LocalDate.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: PlusMonths
    path: src/NodaTime/LocalDate.cs
    startLine: 496
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nReturns a new LocalDate representing the current value with the given number of months added.\n"
  remarks: "\n<p>\nThis method does not try to maintain the year of the current value, so adding four months to a value in \nOctober will result in a value in the following February.\n</p>\n<p>\nIf the resulting date is invalid, the day of month is reduced to find a valid value.\nFor example, adding one month to January 30th 2011 will return February 28th 2011; subtracting one month from\nMarch 30th 2011 will return February 28th 2011.\n</p>\n"
  example: []
  syntax:
    content: public LocalDate PlusMonths(int months)
    parameters:
    - id: months
      type: System.Int32
      description: The number of months to add
    return:
      type: NodaTime.LocalDate
      description: The current date plus the given number of months
    content.vb: Public Function PlusMonths(months As Integer) As LocalDate
  overload: NodaTime.LocalDate.PlusMonths*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: NodaTime.LocalDate.PlusDays(System.Int32)
  commentId: M:NodaTime.LocalDate.PlusDays(System.Int32)
  id: PlusDays(System.Int32)
  parent: NodaTime.LocalDate
  langs:
  - csharp
  - vb
  name: PlusDays(Int32)
  nameWithType: LocalDate.PlusDays(Int32)
  fullName: NodaTime.LocalDate.PlusDays(System.Int32)
  type: Method
  source:
    remote:
      path: 1.4.x/src/NodaTime/LocalDate.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: PlusDays
    path: src/NodaTime/LocalDate.cs
    startLine: 513
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nReturns a new LocalDate representing the current value with the given number of days added.\n"
  remarks: "\n<p>\nThis method does not try to maintain the month or year of the current value, so adding 3 days to a value of January 30th\nwill result in a value of February 2nd.\n</p>\n"
  example: []
  syntax:
    content: public LocalDate PlusDays(int days)
    parameters:
    - id: days
      type: System.Int32
      description: The number of days to add
    return:
      type: NodaTime.LocalDate
      description: The current value plus the given number of days.
    content.vb: Public Function PlusDays(days As Integer) As LocalDate
  overload: NodaTime.LocalDate.PlusDays*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: NodaTime.LocalDate.PlusWeeks(System.Int32)
  commentId: M:NodaTime.LocalDate.PlusWeeks(System.Int32)
  id: PlusWeeks(System.Int32)
  parent: NodaTime.LocalDate
  langs:
  - csharp
  - vb
  name: PlusWeeks(Int32)
  nameWithType: LocalDate.PlusWeeks(Int32)
  fullName: NodaTime.LocalDate.PlusWeeks(System.Int32)
  type: Method
  source:
    remote:
      path: 1.4.x/src/NodaTime/LocalDate.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: PlusWeeks
    path: src/NodaTime/LocalDate.cs
    startLine: 524
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nReturns a new LocalDate representing the current value with the given number of weeks added.\n"
  example: []
  syntax:
    content: public LocalDate PlusWeeks(int weeks)
    parameters:
    - id: weeks
      type: System.Int32
      description: The number of weeks to add
    return:
      type: NodaTime.LocalDate
      description: The current value plus the given number of weeks.
    content.vb: Public Function PlusWeeks(weeks As Integer) As LocalDate
  overload: NodaTime.LocalDate.PlusWeeks*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: NodaTime.LocalDate.Next(NodaTime.IsoDayOfWeek)
  commentId: M:NodaTime.LocalDate.Next(NodaTime.IsoDayOfWeek)
  id: Next(NodaTime.IsoDayOfWeek)
  parent: NodaTime.LocalDate
  langs:
  - csharp
  - vb
  name: Next(IsoDayOfWeek)
  nameWithType: LocalDate.Next(IsoDayOfWeek)
  fullName: NodaTime.LocalDate.Next(NodaTime.IsoDayOfWeek)
  type: Method
  source:
    remote:
      path: 1.4.x/src/NodaTime/LocalDate.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: Next
    path: src/NodaTime/LocalDate.cs
    startLine: 540
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nReturns the next <xref href=\"NodaTime.LocalDate\" data-throw-if-not-resolved=\"false\"></xref> falling on the specified <xref href=\"NodaTime.LocalDate.IsoDayOfWeek\" data-throw-if-not-resolved=\"false\"></xref>.\nThis is a strict &quot;next&quot; - if this date on already falls on the target\nday of the week, the returned value will be a week later.\n"
  example: []
  syntax:
    content: public LocalDate Next(IsoDayOfWeek targetDayOfWeek)
    parameters:
    - id: targetDayOfWeek
      type: NodaTime.IsoDayOfWeek
      description: The ISO day of the week to return the next date of.
    return:
      type: NodaTime.LocalDate
      description: The next <xref href="NodaTime.LocalDate" data-throw-if-not-resolved="false"></xref> falling on the specified day of the week.
    content.vb: Public Function Next(targetDayOfWeek As IsoDayOfWeek) As LocalDate
  overload: NodaTime.LocalDate.Next*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: The underlying calendar doesn&apos;t use ISO days of the week.
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: >-
      <code data-dev-comment-type="paramref" class="paramref">targetDayOfWeek</code> is not a valid day of the
          week (Monday to Sunday).
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: NodaTime.LocalDate.Previous(NodaTime.IsoDayOfWeek)
  commentId: M:NodaTime.LocalDate.Previous(NodaTime.IsoDayOfWeek)
  id: Previous(NodaTime.IsoDayOfWeek)
  parent: NodaTime.LocalDate
  langs:
  - csharp
  - vb
  name: Previous(IsoDayOfWeek)
  nameWithType: LocalDate.Previous(IsoDayOfWeek)
  fullName: NodaTime.LocalDate.Previous(NodaTime.IsoDayOfWeek)
  type: Method
  source:
    remote:
      path: 1.4.x/src/NodaTime/LocalDate.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: Previous
    path: src/NodaTime/LocalDate.cs
    startLine: 557
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nReturns the previous <xref href=\"NodaTime.LocalDate\" data-throw-if-not-resolved=\"false\"></xref> falling on the specified <xref href=\"NodaTime.LocalDate.IsoDayOfWeek\" data-throw-if-not-resolved=\"false\"></xref>.\nThis is a strict &quot;previous&quot; - if this date on already falls on the target\nday of the week, the returned value will be a week earlier.\n"
  example: []
  syntax:
    content: public LocalDate Previous(IsoDayOfWeek targetDayOfWeek)
    parameters:
    - id: targetDayOfWeek
      type: NodaTime.IsoDayOfWeek
      description: The ISO day of the week to return the previous date of.
    return:
      type: NodaTime.LocalDate
      description: The previous <xref href="NodaTime.LocalDate" data-throw-if-not-resolved="false"></xref> falling on the specified day of the week.
    content.vb: Public Function Previous(targetDayOfWeek As IsoDayOfWeek) As LocalDate
  overload: NodaTime.LocalDate.Previous*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: The underlying calendar doesn&apos;t use ISO days of the week.
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: >-
      <code data-dev-comment-type="paramref" class="paramref">targetDayOfWeek</code> is not a valid day of the
          week (Monday to Sunday).
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: NodaTime.LocalDate.At(NodaTime.LocalTime)
  commentId: M:NodaTime.LocalDate.At(NodaTime.LocalTime)
  id: At(NodaTime.LocalTime)
  parent: NodaTime.LocalDate
  langs:
  - csharp
  - vb
  name: At(LocalTime)
  nameWithType: LocalDate.At(LocalTime)
  fullName: NodaTime.LocalDate.At(NodaTime.LocalTime)
  type: Method
  source:
    remote:
      path: 1.4.x/src/NodaTime/LocalDate.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: At
    path: src/NodaTime/LocalDate.cs
    startLine: 571
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nCombines this <xref href=\"NodaTime.LocalDate\" data-throw-if-not-resolved=\"false\"></xref> with the given <xref href=\"NodaTime.LocalTime\" data-throw-if-not-resolved=\"false\"></xref>\ninto a single <xref href=\"NodaTime.LocalDateTime\" data-throw-if-not-resolved=\"false\"></xref>.\nFluent alternative to <code>operator+()</code>.\n"
  example: []
  syntax:
    content: public LocalDateTime At(LocalTime time)
    parameters:
    - id: time
      type: NodaTime.LocalTime
      description: The time to combine with this date.
    return:
      type: NodaTime.LocalDateTime
      description: The <xref href="NodaTime.LocalDateTime" data-throw-if-not-resolved="false"></xref> representation of the given time on this date
    content.vb: Public Function At(time As LocalTime) As LocalDateTime
  overload: NodaTime.LocalDate.At*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: NodaTime.LocalDate.ToString
  commentId: M:NodaTime.LocalDate.ToString
  id: ToString
  parent: NodaTime.LocalDate
  langs:
  - csharp
  - vb
  name: ToString()
  nameWithType: LocalDate.ToString()
  fullName: NodaTime.LocalDate.ToString()
  type: Method
  source:
    remote:
      path: 1.4.x/src/NodaTime/LocalDate.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: ToString
    path: src/NodaTime/LocalDate.cs
    startLine: 585
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nReturns a <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref> that represents this instance.\n"
  example: []
  syntax:
    content: public override string ToString()
    return:
      type: System.String
      description: "\nThe value of the current instance in the default format pattern (&quot;D&quot;), using the current thread&apos;s\nculture to obtain a format provider.\n"
    content.vb: Public Overrides Function ToString As String
  overridden: System.ValueType.ToString
  overload: NodaTime.LocalDate.ToString*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: NodaTime.LocalDate.ToString(System.String,System.IFormatProvider)
  commentId: M:NodaTime.LocalDate.ToString(System.String,System.IFormatProvider)
  id: ToString(System.String,System.IFormatProvider)
  parent: NodaTime.LocalDate
  langs:
  - csharp
  - vb
  name: ToString(String, IFormatProvider)
  nameWithType: LocalDate.ToString(String, IFormatProvider)
  fullName: NodaTime.LocalDate.ToString(System.String, System.IFormatProvider)
  type: Method
  source:
    remote:
      path: 1.4.x/src/NodaTime/LocalDate.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: ToString
    path: src/NodaTime/LocalDate.cs
    startLine: 603
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nFormats the value of the current instance using the specified pattern.\n"
  example: []
  syntax:
    content: public string ToString(string patternText, IFormatProvider formatProvider)
    parameters:
    - id: patternText
      type: System.String
      description: >
        The <xref href="System.String" data-throw-if-not-resolved="false"></xref> specifying the pattern to use,

        or null to use the default format pattern (&quot;D&quot;).
    - id: formatProvider
      type: System.IFormatProvider
      description: >
        The <xref href="System.IFormatProvider" data-throw-if-not-resolved="false"></xref> to use when formatting the value,

        or null to use the current thread&apos;s culture to obtain a format provider.
    return:
      type: System.String
      description: "\nA <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref> containing the value of the current instance in the specified format.\n"
    content.vb: Public Function ToString(patternText As String, formatProvider As IFormatProvider) As String
  overload: NodaTime.LocalDate.ToString*
  implements:
  - System.IFormattable.ToString(System.String,System.IFormatProvider)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: NodaTime.LocalDate.System#Xml#Serialization#IXmlSerializable#GetSchema
  commentId: M:NodaTime.LocalDate.System#Xml#Serialization#IXmlSerializable#GetSchema
  id: System#Xml#Serialization#IXmlSerializable#GetSchema
  isEii: true
  parent: NodaTime.LocalDate
  langs:
  - csharp
  - vb
  name: IXmlSerializable.GetSchema()
  nameWithType: LocalDate.IXmlSerializable.GetSchema()
  fullName: NodaTime.LocalDate.System.Xml.Serialization.IXmlSerializable.GetSchema()
  type: Method
  source:
    remote:
      path: 1.4.x/src/NodaTime/LocalDate.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: System.Xml.Serialization.IXmlSerializable.GetSchema
    path: src/NodaTime/LocalDate.cs
    startLine: 611
  assemblies:
  - NodaTime
  namespace: NodaTime
  example: []
  syntax:
    content: XmlSchema IXmlSerializable.GetSchema()
    return:
      type: System.Xml.Schema.XmlSchema
    content.vb: Function System.Xml.Serialization.IXmlSerializable.GetSchema As XmlSchema Implements IXmlSerializable.GetSchema
  overload: NodaTime.LocalDate.System#Xml#Serialization#IXmlSerializable#GetSchema*
  implements:
  - System.Xml.Serialization.IXmlSerializable.GetSchema
  nameWithType.vb: LocalDate.System.Xml.Serialization.IXmlSerializable.GetSchema()
  name.vb: System.Xml.Serialization.IXmlSerializable.GetSchema()
- uid: NodaTime.LocalDate.System#Xml#Serialization#IXmlSerializable#ReadXml(System.Xml.XmlReader)
  commentId: M:NodaTime.LocalDate.System#Xml#Serialization#IXmlSerializable#ReadXml(System.Xml.XmlReader)
  id: System#Xml#Serialization#IXmlSerializable#ReadXml(System.Xml.XmlReader)
  isEii: true
  parent: NodaTime.LocalDate
  langs:
  - csharp
  - vb
  name: IXmlSerializable.ReadXml(XmlReader)
  nameWithType: LocalDate.IXmlSerializable.ReadXml(XmlReader)
  fullName: NodaTime.LocalDate.System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)
  type: Method
  source:
    remote:
      path: 1.4.x/src/NodaTime/LocalDate.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: System.Xml.Serialization.IXmlSerializable.ReadXml
    path: src/NodaTime/LocalDate.cs
    startLine: 617
  assemblies:
  - NodaTime
  namespace: NodaTime
  example: []
  syntax:
    content: void IXmlSerializable.ReadXml(XmlReader reader)
    parameters:
    - id: reader
      type: System.Xml.XmlReader
    content.vb: Sub System.Xml.Serialization.IXmlSerializable.ReadXml(reader As XmlReader) Implements IXmlSerializable.ReadXml
  overload: NodaTime.LocalDate.System#Xml#Serialization#IXmlSerializable#ReadXml*
  implements:
  - System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)
  nameWithType.vb: LocalDate.System.Xml.Serialization.IXmlSerializable.ReadXml(XmlReader)
  name.vb: System.Xml.Serialization.IXmlSerializable.ReadXml(XmlReader)
- uid: NodaTime.LocalDate.System#Xml#Serialization#IXmlSerializable#WriteXml(System.Xml.XmlWriter)
  commentId: M:NodaTime.LocalDate.System#Xml#Serialization#IXmlSerializable#WriteXml(System.Xml.XmlWriter)
  id: System#Xml#Serialization#IXmlSerializable#WriteXml(System.Xml.XmlWriter)
  isEii: true
  parent: NodaTime.LocalDate
  langs:
  - csharp
  - vb
  name: IXmlSerializable.WriteXml(XmlWriter)
  nameWithType: LocalDate.IXmlSerializable.WriteXml(XmlWriter)
  fullName: NodaTime.LocalDate.System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)
  type: Method
  source:
    remote:
      path: 1.4.x/src/NodaTime/LocalDate.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: System.Xml.Serialization.IXmlSerializable.WriteXml
    path: src/NodaTime/LocalDate.cs
    startLine: 634
  assemblies:
  - NodaTime
  namespace: NodaTime
  example: []
  syntax:
    content: void IXmlSerializable.WriteXml(XmlWriter writer)
    parameters:
    - id: writer
      type: System.Xml.XmlWriter
    content.vb: Sub System.Xml.Serialization.IXmlSerializable.WriteXml(writer As XmlWriter) Implements IXmlSerializable.WriteXml
  overload: NodaTime.LocalDate.System#Xml#Serialization#IXmlSerializable#WriteXml*
  implements:
  - System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)
  nameWithType.vb: LocalDate.System.Xml.Serialization.IXmlSerializable.WriteXml(XmlWriter)
  name.vb: System.Xml.Serialization.IXmlSerializable.WriteXml(XmlWriter)
- uid: NodaTime.LocalDate.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  commentId: M:NodaTime.LocalDate.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  id: System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  isEii: true
  parent: NodaTime.LocalDate
  langs:
  - csharp
  - vb
  name: ISerializable.GetObjectData(SerializationInfo, StreamingContext)
  nameWithType: LocalDate.ISerializable.GetObjectData(SerializationInfo, StreamingContext)
  fullName: NodaTime.LocalDate.System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext)
  type: Method
  source:
    remote:
      path: 1.4.x/src/NodaTime/LocalDate.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: System.Runtime.Serialization.ISerializable.GetObjectData
    path: src/NodaTime/LocalDate.cs
    startLine: 666
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nImplementation of <xref href=\"System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo%2cSystem.Runtime.Serialization.StreamingContext)\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: >-
      [SecurityCritical]

      void ISerializable.GetObjectData(SerializationInfo info, StreamingContext context)
    parameters:
    - id: info
      type: System.Runtime.Serialization.SerializationInfo
      description: The <xref href="System.Runtime.Serialization.SerializationInfo" data-throw-if-not-resolved="false"></xref> to populate with data.
    - id: context
      type: System.Runtime.Serialization.StreamingContext
      description: The destination for this serialization.
    content.vb: >-
      <SecurityCritical>

      Sub System.Runtime.Serialization.ISerializable.GetObjectData(info As SerializationInfo, context As StreamingContext) Implements ISerializable.GetObjectData
  overload: NodaTime.LocalDate.System#Runtime#Serialization#ISerializable#GetObjectData*
  implements:
  - System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  attributes:
  - type: System.Security.SecurityCriticalAttribute
    ctor: System.Security.SecurityCriticalAttribute.#ctor
    arguments: []
  nameWithType.vb: LocalDate.System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo, StreamingContext)
  name.vb: System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo, StreamingContext)
references:
- uid: NodaTime.LocalDate.Equals(NodaTime.LocalDate)
  commentId: M:NodaTime.LocalDate.Equals(NodaTime.LocalDate)
  isExternal: true
- uid: NodaTime.LocalDate.op_Inequality(NodaTime.LocalDate,NodaTime.LocalDate)
  commentId: M:NodaTime.LocalDate.op_Inequality(NodaTime.LocalDate,NodaTime.LocalDate)
  isExternal: true
- uid: NodaTime.LocalDate.CompareTo(NodaTime.LocalDate)
  commentId: M:NodaTime.LocalDate.CompareTo(NodaTime.LocalDate)
  isExternal: true
- uid: System.IComparable`1
  commentId: T:System.IComparable`1
  isExternal: true
  name: IComparable<T>
  nameWithType: IComparable<T>
  fullName: System.IComparable<T>
  nameWithType.vb: IComparable(Of T)
  fullName.vb: System.IComparable(Of T)
  name.vb: IComparable(Of T)
  spec.csharp:
  - uid: System.IComparable`1
    name: IComparable
    nameWithType: IComparable
    fullName: System.IComparable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.IComparable`1
    name: IComparable
    nameWithType: IComparable
    fullName: System.IComparable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: NodaTime
  commentId: N:NodaTime
  name: NodaTime
  nameWithType: NodaTime
  fullName: NodaTime
- uid: System.IEquatable{NodaTime.LocalDate}
  commentId: T:System.IEquatable{NodaTime.LocalDate}
  parent: System
  definition: System.IEquatable`1
  name: IEquatable<LocalDate>
  nameWithType: IEquatable<LocalDate>
  fullName: System.IEquatable<NodaTime.LocalDate>
  nameWithType.vb: IEquatable(Of LocalDate)
  fullName.vb: System.IEquatable(Of NodaTime.LocalDate)
  name.vb: IEquatable(Of LocalDate)
  spec.csharp:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: NodaTime.LocalDate
    name: LocalDate
    nameWithType: LocalDate
    fullName: NodaTime.LocalDate
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: NodaTime.LocalDate
    name: LocalDate
    nameWithType: LocalDate
    fullName: NodaTime.LocalDate
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IComparable{NodaTime.LocalDate}
  commentId: T:System.IComparable{NodaTime.LocalDate}
  parent: System
  definition: System.IComparable`1
  name: IComparable<LocalDate>
  nameWithType: IComparable<LocalDate>
  fullName: System.IComparable<NodaTime.LocalDate>
  nameWithType.vb: IComparable(Of LocalDate)
  fullName.vb: System.IComparable(Of NodaTime.LocalDate)
  name.vb: IComparable(Of LocalDate)
  spec.csharp:
  - uid: System.IComparable`1
    name: IComparable
    nameWithType: IComparable
    fullName: System.IComparable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: NodaTime.LocalDate
    name: LocalDate
    nameWithType: LocalDate
    fullName: NodaTime.LocalDate
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.IComparable`1
    name: IComparable
    nameWithType: IComparable
    fullName: System.IComparable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: NodaTime.LocalDate
    name: LocalDate
    nameWithType: LocalDate
    fullName: NodaTime.LocalDate
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IComparable
  commentId: T:System.IComparable
  parent: System
  isExternal: true
  name: IComparable
  nameWithType: IComparable
  fullName: System.IComparable
- uid: System.IFormattable
  commentId: T:System.IFormattable
  parent: System
  isExternal: true
  name: IFormattable
  nameWithType: IFormattable
  fullName: System.IFormattable
- uid: System.Xml.Serialization.IXmlSerializable
  commentId: T:System.Xml.Serialization.IXmlSerializable
  parent: System.Xml.Serialization
  isExternal: true
  name: IXmlSerializable
  nameWithType: IXmlSerializable
  fullName: System.Xml.Serialization.IXmlSerializable
- uid: System.Runtime.Serialization.ISerializable
  commentId: T:System.Runtime.Serialization.ISerializable
  parent: System.Runtime.Serialization
  isExternal: true
  name: ISerializable
  nameWithType: ISerializable
  fullName: System.Runtime.Serialization.ISerializable
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IEquatable`1
  commentId: T:System.IEquatable`1
  isExternal: true
  name: IEquatable<T>
  nameWithType: IEquatable<T>
  fullName: System.IEquatable<T>
  nameWithType.vb: IEquatable(Of T)
  fullName.vb: System.IEquatable(Of T)
  name.vb: IEquatable(Of T)
  spec.csharp:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: System.Xml.Serialization
  commentId: N:System.Xml.Serialization
  isExternal: true
  name: System.Xml.Serialization
  nameWithType: System.Xml.Serialization
  fullName: System.Xml.Serialization
- uid: System.Runtime.Serialization
  commentId: N:System.Runtime.Serialization
  isExternal: true
  name: System.Runtime.Serialization
  nameWithType: System.Runtime.Serialization
  fullName: System.Runtime.Serialization
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.ArgumentOutOfRangeException
  commentId: T:System.ArgumentOutOfRangeException
  parent: System
  isExternal: true
  name: ArgumentOutOfRangeException
  nameWithType: ArgumentOutOfRangeException
  fullName: System.ArgumentOutOfRangeException
- uid: NodaTime.LocalDate.#ctor*
  commentId: Overload:NodaTime.LocalDate.#ctor
  name: LocalDate
  nameWithType: LocalDate.LocalDate
  fullName: NodaTime.LocalDate.LocalDate
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: NodaTime.CalendarSystem
  commentId: T:NodaTime.CalendarSystem
  parent: NodaTime
  name: CalendarSystem
  nameWithType: CalendarSystem
  fullName: NodaTime.CalendarSystem
- uid: NodaTime.Calendars.Era
  commentId: T:NodaTime.Calendars.Era
  parent: NodaTime.Calendars
  name: Era
  nameWithType: Era
  fullName: NodaTime.Calendars.Era
- uid: NodaTime.Calendars
  commentId: N:NodaTime.Calendars
  name: NodaTime.Calendars
  nameWithType: NodaTime.Calendars
  fullName: NodaTime.Calendars
- uid: NodaTime.LocalDate.Calendar*
  commentId: Overload:NodaTime.LocalDate.Calendar
  name: Calendar
  nameWithType: LocalDate.Calendar
  fullName: NodaTime.LocalDate.Calendar
- uid: NodaTime.LocalDate.Year*
  commentId: Overload:NodaTime.LocalDate.Year
  name: Year
  nameWithType: LocalDate.Year
  fullName: NodaTime.LocalDate.Year
- uid: NodaTime.LocalDate.Month*
  commentId: Overload:NodaTime.LocalDate.Month
  name: Month
  nameWithType: LocalDate.Month
  fullName: NodaTime.LocalDate.Month
- uid: NodaTime.LocalDate.Day*
  commentId: Overload:NodaTime.LocalDate.Day
  name: Day
  nameWithType: LocalDate.Day
  fullName: NodaTime.LocalDate.Day
- uid: NodaTime.IsoDayOfWeek
  commentId: T:NodaTime.IsoDayOfWeek
  parent: NodaTime
  name: IsoDayOfWeek
  nameWithType: IsoDayOfWeek
  fullName: NodaTime.IsoDayOfWeek
- uid: NodaTime.LocalDate.DayOfWeek
  commentId: P:NodaTime.LocalDate.DayOfWeek
  isExternal: true
- uid: System.InvalidOperationException
  commentId: T:System.InvalidOperationException
  isExternal: true
- uid: NodaTime.LocalDate.IsoDayOfWeek*
  commentId: Overload:NodaTime.LocalDate.IsoDayOfWeek
  name: IsoDayOfWeek
  nameWithType: LocalDate.IsoDayOfWeek
  fullName: NodaTime.LocalDate.IsoDayOfWeek
- uid: NodaTime.LocalDate.IsoDayOfWeek
  commentId: P:NodaTime.LocalDate.IsoDayOfWeek
  isExternal: true
- uid: NodaTime.LocalDate.DayOfWeek*
  commentId: Overload:NodaTime.LocalDate.DayOfWeek
  name: DayOfWeek
  nameWithType: LocalDate.DayOfWeek
  fullName: NodaTime.LocalDate.DayOfWeek
- uid: NodaTime.LocalDate.WeekOfWeekYear
  commentId: P:NodaTime.LocalDate.WeekOfWeekYear
  isExternal: true
- uid: NodaTime.LocalDate.WeekYear*
  commentId: Overload:NodaTime.LocalDate.WeekYear
  name: WeekYear
  nameWithType: LocalDate.WeekYear
  fullName: NodaTime.LocalDate.WeekYear
- uid: NodaTime.LocalDate.WeekYear
  commentId: P:NodaTime.LocalDate.WeekYear
  isExternal: true
- uid: NodaTime.LocalDate.WeekOfWeekYear*
  commentId: Overload:NodaTime.LocalDate.WeekOfWeekYear
  name: WeekOfWeekYear
  nameWithType: LocalDate.WeekOfWeekYear
  fullName: NodaTime.LocalDate.WeekOfWeekYear
- uid: NodaTime.LocalDate.YearOfCentury*
  commentId: Overload:NodaTime.LocalDate.YearOfCentury
  name: YearOfCentury
  nameWithType: LocalDate.YearOfCentury
  fullName: NodaTime.LocalDate.YearOfCentury
- uid: NodaTime.LocalDate.YearOfEra*
  commentId: Overload:NodaTime.LocalDate.YearOfEra
  name: YearOfEra
  nameWithType: LocalDate.YearOfEra
  fullName: NodaTime.LocalDate.YearOfEra
- uid: NodaTime.LocalDate.Era*
  commentId: Overload:NodaTime.LocalDate.Era
  name: Era
  nameWithType: LocalDate.Era
  fullName: NodaTime.LocalDate.Era
- uid: NodaTime.LocalDate.DayOfYear*
  commentId: Overload:NodaTime.LocalDate.DayOfYear
  name: DayOfYear
  nameWithType: LocalDate.DayOfYear
  fullName: NodaTime.LocalDate.DayOfYear
- uid: NodaTime.LocalDateTime
  commentId: T:NodaTime.LocalDateTime
  parent: NodaTime
  name: LocalDateTime
  nameWithType: LocalDateTime
  fullName: NodaTime.LocalDateTime
- uid: NodaTime.LocalDate.AtMidnight*
  commentId: Overload:NodaTime.LocalDate.AtMidnight
  name: AtMidnight
  nameWithType: LocalDate.AtMidnight
  fullName: NodaTime.LocalDate.AtMidnight
- uid: NodaTime.LocalDate.FromWeekYearWeekAndDay*
  commentId: Overload:NodaTime.LocalDate.FromWeekYearWeekAndDay
  name: FromWeekYearWeekAndDay
  nameWithType: LocalDate.FromWeekYearWeekAndDay
  fullName: NodaTime.LocalDate.FromWeekYearWeekAndDay
- uid: NodaTime.LocalDate
  commentId: T:NodaTime.LocalDate
  parent: NodaTime
  name: LocalDate
  nameWithType: LocalDate
  fullName: NodaTime.LocalDate
- uid: NodaTime.LocalDate.op_Addition*
  commentId: Overload:NodaTime.LocalDate.op_Addition
  name: Addition
  nameWithType: LocalDate.Addition
  fullName: NodaTime.LocalDate.Addition
- uid: NodaTime.Period
  commentId: T:NodaTime.Period
  parent: NodaTime
  name: Period
  nameWithType: Period
  fullName: NodaTime.Period
- uid: NodaTime.LocalDate.Add*
  commentId: Overload:NodaTime.LocalDate.Add
  name: Add
  nameWithType: LocalDate.Add
  fullName: NodaTime.LocalDate.Add
- uid: NodaTime.LocalDate.Plus*
  commentId: Overload:NodaTime.LocalDate.Plus
  name: Plus
  nameWithType: LocalDate.Plus
  fullName: NodaTime.LocalDate.Plus
- uid: NodaTime.LocalTime
  commentId: T:NodaTime.LocalTime
  parent: NodaTime
  name: LocalTime
  nameWithType: LocalTime
  fullName: NodaTime.LocalTime
- uid: NodaTime.LocalDate.op_Subtraction*
  commentId: Overload:NodaTime.LocalDate.op_Subtraction
  name: Subtraction
  nameWithType: LocalDate.Subtraction
  fullName: NodaTime.LocalDate.Subtraction
- uid: NodaTime.LocalDate.Subtract*
  commentId: Overload:NodaTime.LocalDate.Subtract
  name: Subtract
  nameWithType: LocalDate.Subtract
  fullName: NodaTime.LocalDate.Subtract
- uid: NodaTime.LocalDate.Minus*
  commentId: Overload:NodaTime.LocalDate.Minus
  name: Minus
  nameWithType: LocalDate.Minus
  fullName: NodaTime.LocalDate.Minus
- uid: NodaTime.LocalDate.op_Equality*
  commentId: Overload:NodaTime.LocalDate.op_Equality
  name: Equality
  nameWithType: LocalDate.Equality
  fullName: NodaTime.LocalDate.Equality
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: NodaTime.LocalDate.op_Inequality*
  commentId: Overload:NodaTime.LocalDate.op_Inequality
  name: Inequality
  nameWithType: LocalDate.Inequality
  fullName: NodaTime.LocalDate.Inequality
- uid: NodaTime.LocalDate.op_LessThan*
  commentId: Overload:NodaTime.LocalDate.op_LessThan
  name: LessThan
  nameWithType: LocalDate.LessThan
  fullName: NodaTime.LocalDate.LessThan
- uid: NodaTime.LocalDate.op_LessThanOrEqual*
  commentId: Overload:NodaTime.LocalDate.op_LessThanOrEqual
  name: LessThanOrEqual
  nameWithType: LocalDate.LessThanOrEqual
  fullName: NodaTime.LocalDate.LessThanOrEqual
- uid: NodaTime.LocalDate.op_GreaterThan*
  commentId: Overload:NodaTime.LocalDate.op_GreaterThan
  name: GreaterThan
  nameWithType: LocalDate.GreaterThan
  fullName: NodaTime.LocalDate.GreaterThan
- uid: NodaTime.LocalDate.op_GreaterThanOrEqual*
  commentId: Overload:NodaTime.LocalDate.op_GreaterThanOrEqual
  name: GreaterThanOrEqual
  nameWithType: LocalDate.GreaterThanOrEqual
  fullName: NodaTime.LocalDate.GreaterThanOrEqual
- uid: NodaTime.LocalDate.CompareTo*
  commentId: Overload:NodaTime.LocalDate.CompareTo
  name: CompareTo
  nameWithType: LocalDate.CompareTo
  fullName: NodaTime.LocalDate.CompareTo
- uid: System.IComparable{NodaTime.LocalDate}.CompareTo(NodaTime.LocalDate)
  commentId: M:System.IComparable{NodaTime.LocalDate}.CompareTo(NodaTime.LocalDate)
  parent: System.IComparable{NodaTime.LocalDate}
  definition: System.IComparable`1.CompareTo(`0)
  name: CompareTo(LocalDate)
  nameWithType: IComparable<LocalDate>.CompareTo(LocalDate)
  fullName: System.IComparable<NodaTime.LocalDate>.CompareTo(NodaTime.LocalDate)
  nameWithType.vb: IComparable(Of LocalDate).CompareTo(LocalDate)
  fullName.vb: System.IComparable(Of NodaTime.LocalDate).CompareTo(NodaTime.LocalDate)
  spec.csharp:
  - uid: System.IComparable`1.CompareTo(`0)
    name: CompareTo
    nameWithType: IComparable<LocalDate>.CompareTo
    fullName: System.IComparable<NodaTime.LocalDate>.CompareTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: NodaTime.LocalDate
    name: LocalDate
    nameWithType: LocalDate
    fullName: NodaTime.LocalDate
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IComparable`1.CompareTo(`0)
    name: CompareTo
    nameWithType: IComparable(Of LocalDate).CompareTo
    fullName: System.IComparable(Of NodaTime.LocalDate).CompareTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: NodaTime.LocalDate
    name: LocalDate
    nameWithType: LocalDate
    fullName: NodaTime.LocalDate
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IComparable`1.CompareTo(`0)
  commentId: M:System.IComparable`1.CompareTo(`0)
  isExternal: true
  name: CompareTo(T)
  nameWithType: IComparable<T>.CompareTo(T)
  fullName: System.IComparable<T>.CompareTo(T)
  nameWithType.vb: IComparable(Of T).CompareTo(T)
  fullName.vb: System.IComparable(Of T).CompareTo(T)
  spec.csharp:
  - uid: System.IComparable`1.CompareTo(`0)
    name: CompareTo
    nameWithType: IComparable<T>.CompareTo
    fullName: System.IComparable<T>.CompareTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IComparable`1.CompareTo(`0)
    name: CompareTo
    nameWithType: IComparable(Of T).CompareTo
    fullName: System.IComparable(Of T).CompareTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IComparable.CompareTo(System.Object)
  commentId: M:System.IComparable.CompareTo(System.Object)
  parent: System.IComparable
  isExternal: true
  name: CompareTo(Object)
  nameWithType: IComparable.CompareTo(Object)
  fullName: System.IComparable.CompareTo(System.Object)
  spec.csharp:
  - uid: System.IComparable.CompareTo(System.Object)
    name: CompareTo
    nameWithType: IComparable.CompareTo
    fullName: System.IComparable.CompareTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IComparable.CompareTo(System.Object)
    name: CompareTo
    nameWithType: IComparable.CompareTo
    fullName: System.IComparable.CompareTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.ArgumentException
  commentId: T:System.ArgumentException
  parent: System
  isExternal: true
  name: ArgumentException
  nameWithType: ArgumentException
  fullName: System.ArgumentException
- uid: NodaTime.LocalDate.System#IComparable#CompareTo*
  commentId: Overload:NodaTime.LocalDate.System#IComparable#CompareTo
  name: IComparable.CompareTo
  nameWithType: LocalDate.IComparable.CompareTo
  fullName: NodaTime.LocalDate.System.IComparable.CompareTo
  nameWithType.vb: LocalDate.System.IComparable.CompareTo
  name.vb: System.IComparable.CompareTo
- uid: System.ValueType.GetHashCode
  commentId: M:System.ValueType.GetHashCode
  parent: System.ValueType
  isExternal: true
  name: GetHashCode()
  nameWithType: ValueType.GetHashCode()
  fullName: System.ValueType.GetHashCode()
  spec.csharp:
  - uid: System.ValueType.GetHashCode
    name: GetHashCode
    nameWithType: ValueType.GetHashCode
    fullName: System.ValueType.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.ValueType.GetHashCode
    name: GetHashCode
    nameWithType: ValueType.GetHashCode
    fullName: System.ValueType.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: NodaTime.LocalDate.GetHashCode*
  commentId: Overload:NodaTime.LocalDate.GetHashCode
  name: GetHashCode
  nameWithType: LocalDate.GetHashCode
  fullName: NodaTime.LocalDate.GetHashCode
- uid: System.ValueType
  commentId: T:System.ValueType
  parent: System
  isExternal: true
  name: ValueType
  nameWithType: ValueType
  fullName: System.ValueType
- uid: System.ValueType.Equals(System.Object)
  commentId: M:System.ValueType.Equals(System.Object)
  parent: System.ValueType
  isExternal: true
  name: Equals(Object)
  nameWithType: ValueType.Equals(Object)
  fullName: System.ValueType.Equals(System.Object)
  spec.csharp:
  - uid: System.ValueType.Equals(System.Object)
    name: Equals
    nameWithType: ValueType.Equals
    fullName: System.ValueType.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.ValueType.Equals(System.Object)
    name: Equals
    nameWithType: ValueType.Equals
    fullName: System.ValueType.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: NodaTime.LocalDate.Equals*
  commentId: Overload:NodaTime.LocalDate.Equals
  name: Equals
  nameWithType: LocalDate.Equals
  fullName: NodaTime.LocalDate.Equals
- uid: System.IEquatable{NodaTime.LocalDate}.Equals(NodaTime.LocalDate)
  commentId: M:System.IEquatable{NodaTime.LocalDate}.Equals(NodaTime.LocalDate)
  parent: System.IEquatable{NodaTime.LocalDate}
  definition: System.IEquatable`1.Equals(`0)
  name: Equals(LocalDate)
  nameWithType: IEquatable<LocalDate>.Equals(LocalDate)
  fullName: System.IEquatable<NodaTime.LocalDate>.Equals(NodaTime.LocalDate)
  nameWithType.vb: IEquatable(Of LocalDate).Equals(LocalDate)
  fullName.vb: System.IEquatable(Of NodaTime.LocalDate).Equals(NodaTime.LocalDate)
  spec.csharp:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    nameWithType: IEquatable<LocalDate>.Equals
    fullName: System.IEquatable<NodaTime.LocalDate>.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: NodaTime.LocalDate
    name: LocalDate
    nameWithType: LocalDate
    fullName: NodaTime.LocalDate
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    nameWithType: IEquatable(Of LocalDate).Equals
    fullName: System.IEquatable(Of NodaTime.LocalDate).Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: NodaTime.LocalDate
    name: LocalDate
    nameWithType: LocalDate
    fullName: NodaTime.LocalDate
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IEquatable`1.Equals(`0)
  commentId: M:System.IEquatable`1.Equals(`0)
  isExternal: true
  name: Equals(T)
  nameWithType: IEquatable<T>.Equals(T)
  fullName: System.IEquatable<T>.Equals(T)
  nameWithType.vb: IEquatable(Of T).Equals(T)
  fullName.vb: System.IEquatable(Of T).Equals(T)
  spec.csharp:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    nameWithType: IEquatable<T>.Equals
    fullName: System.IEquatable<T>.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    nameWithType: IEquatable(Of T).Equals
    fullName: System.IEquatable(Of T).Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: NodaTime.LocalDate.WithCalendar*
  commentId: Overload:NodaTime.LocalDate.WithCalendar
  name: WithCalendar
  nameWithType: LocalDate.WithCalendar
  fullName: NodaTime.LocalDate.WithCalendar
- uid: NodaTime.LocalDate.PlusYears*
  commentId: Overload:NodaTime.LocalDate.PlusYears
  name: PlusYears
  nameWithType: LocalDate.PlusYears
  fullName: NodaTime.LocalDate.PlusYears
- uid: NodaTime.LocalDate.PlusMonths*
  commentId: Overload:NodaTime.LocalDate.PlusMonths
  name: PlusMonths
  nameWithType: LocalDate.PlusMonths
  fullName: NodaTime.LocalDate.PlusMonths
- uid: NodaTime.LocalDate.PlusDays*
  commentId: Overload:NodaTime.LocalDate.PlusDays
  name: PlusDays
  nameWithType: LocalDate.PlusDays
  fullName: NodaTime.LocalDate.PlusDays
- uid: NodaTime.LocalDate.PlusWeeks*
  commentId: Overload:NodaTime.LocalDate.PlusWeeks
  name: PlusWeeks
  nameWithType: LocalDate.PlusWeeks
  fullName: NodaTime.LocalDate.PlusWeeks
- uid: NodaTime.LocalDate.Next*
  commentId: Overload:NodaTime.LocalDate.Next
  name: Next
  nameWithType: LocalDate.Next
  fullName: NodaTime.LocalDate.Next
- uid: NodaTime.LocalDate.Previous*
  commentId: Overload:NodaTime.LocalDate.Previous
  name: Previous
  nameWithType: LocalDate.Previous
  fullName: NodaTime.LocalDate.Previous
- uid: NodaTime.LocalDate.At*
  commentId: Overload:NodaTime.LocalDate.At
  name: At
  nameWithType: LocalDate.At
  fullName: NodaTime.LocalDate.At
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.ValueType.ToString
  commentId: M:System.ValueType.ToString
  parent: System.ValueType
  isExternal: true
  name: ToString()
  nameWithType: ValueType.ToString()
  fullName: System.ValueType.ToString()
  spec.csharp:
  - uid: System.ValueType.ToString
    name: ToString
    nameWithType: ValueType.ToString
    fullName: System.ValueType.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.ValueType.ToString
    name: ToString
    nameWithType: ValueType.ToString
    fullName: System.ValueType.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: NodaTime.LocalDate.ToString*
  commentId: Overload:NodaTime.LocalDate.ToString
  name: ToString
  nameWithType: LocalDate.ToString
  fullName: NodaTime.LocalDate.ToString
- uid: System.IFormatProvider
  commentId: T:System.IFormatProvider
  parent: System
  isExternal: true
  name: IFormatProvider
  nameWithType: IFormatProvider
  fullName: System.IFormatProvider
- uid: System.IFormattable.ToString(System.String,System.IFormatProvider)
  commentId: M:System.IFormattable.ToString(System.String,System.IFormatProvider)
  parent: System.IFormattable
  isExternal: true
  name: ToString(String, IFormatProvider)
  nameWithType: IFormattable.ToString(String, IFormatProvider)
  fullName: System.IFormattable.ToString(System.String, System.IFormatProvider)
  spec.csharp:
  - uid: System.IFormattable.ToString(System.String,System.IFormatProvider)
    name: ToString
    nameWithType: IFormattable.ToString
    fullName: System.IFormattable.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.IFormatProvider
    name: IFormatProvider
    nameWithType: IFormatProvider
    fullName: System.IFormatProvider
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IFormattable.ToString(System.String,System.IFormatProvider)
    name: ToString
    nameWithType: IFormattable.ToString
    fullName: System.IFormattable.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.IFormatProvider
    name: IFormatProvider
    nameWithType: IFormatProvider
    fullName: System.IFormatProvider
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: NodaTime.LocalDate.System#Xml#Serialization#IXmlSerializable#GetSchema*
  commentId: Overload:NodaTime.LocalDate.System#Xml#Serialization#IXmlSerializable#GetSchema
  name: IXmlSerializable.GetSchema
  nameWithType: LocalDate.IXmlSerializable.GetSchema
  fullName: NodaTime.LocalDate.System.Xml.Serialization.IXmlSerializable.GetSchema
  nameWithType.vb: LocalDate.System.Xml.Serialization.IXmlSerializable.GetSchema
  name.vb: System.Xml.Serialization.IXmlSerializable.GetSchema
- uid: System.Xml.Serialization.IXmlSerializable.GetSchema
  commentId: M:System.Xml.Serialization.IXmlSerializable.GetSchema
  parent: System.Xml.Serialization.IXmlSerializable
  isExternal: true
  name: GetSchema()
  nameWithType: IXmlSerializable.GetSchema()
  fullName: System.Xml.Serialization.IXmlSerializable.GetSchema()
  spec.csharp:
  - uid: System.Xml.Serialization.IXmlSerializable.GetSchema
    name: GetSchema
    nameWithType: IXmlSerializable.GetSchema
    fullName: System.Xml.Serialization.IXmlSerializable.GetSchema
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Xml.Serialization.IXmlSerializable.GetSchema
    name: GetSchema
    nameWithType: IXmlSerializable.GetSchema
    fullName: System.Xml.Serialization.IXmlSerializable.GetSchema
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Xml.Schema.XmlSchema
  commentId: T:System.Xml.Schema.XmlSchema
  parent: System.Xml.Schema
  isExternal: true
  name: XmlSchema
  nameWithType: XmlSchema
  fullName: System.Xml.Schema.XmlSchema
- uid: System.Xml.Schema
  commentId: N:System.Xml.Schema
  isExternal: true
  name: System.Xml.Schema
  nameWithType: System.Xml.Schema
  fullName: System.Xml.Schema
- uid: NodaTime.LocalDate.System#Xml#Serialization#IXmlSerializable#ReadXml*
  commentId: Overload:NodaTime.LocalDate.System#Xml#Serialization#IXmlSerializable#ReadXml
  name: IXmlSerializable.ReadXml
  nameWithType: LocalDate.IXmlSerializable.ReadXml
  fullName: NodaTime.LocalDate.System.Xml.Serialization.IXmlSerializable.ReadXml
  nameWithType.vb: LocalDate.System.Xml.Serialization.IXmlSerializable.ReadXml
  name.vb: System.Xml.Serialization.IXmlSerializable.ReadXml
- uid: System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)
  commentId: M:System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)
  parent: System.Xml.Serialization.IXmlSerializable
  isExternal: true
  name: ReadXml(XmlReader)
  nameWithType: IXmlSerializable.ReadXml(XmlReader)
  fullName: System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)
  spec.csharp:
  - uid: System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)
    name: ReadXml
    nameWithType: IXmlSerializable.ReadXml
    fullName: System.Xml.Serialization.IXmlSerializable.ReadXml
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Xml.XmlReader
    name: XmlReader
    nameWithType: XmlReader
    fullName: System.Xml.XmlReader
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)
    name: ReadXml
    nameWithType: IXmlSerializable.ReadXml
    fullName: System.Xml.Serialization.IXmlSerializable.ReadXml
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Xml.XmlReader
    name: XmlReader
    nameWithType: XmlReader
    fullName: System.Xml.XmlReader
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Xml.XmlReader
  commentId: T:System.Xml.XmlReader
  parent: System.Xml
  isExternal: true
  name: XmlReader
  nameWithType: XmlReader
  fullName: System.Xml.XmlReader
- uid: System.Xml
  commentId: N:System.Xml
  isExternal: true
  name: System.Xml
  nameWithType: System.Xml
  fullName: System.Xml
- uid: NodaTime.LocalDate.System#Xml#Serialization#IXmlSerializable#WriteXml*
  commentId: Overload:NodaTime.LocalDate.System#Xml#Serialization#IXmlSerializable#WriteXml
  name: IXmlSerializable.WriteXml
  nameWithType: LocalDate.IXmlSerializable.WriteXml
  fullName: NodaTime.LocalDate.System.Xml.Serialization.IXmlSerializable.WriteXml
  nameWithType.vb: LocalDate.System.Xml.Serialization.IXmlSerializable.WriteXml
  name.vb: System.Xml.Serialization.IXmlSerializable.WriteXml
- uid: System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)
  commentId: M:System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)
  parent: System.Xml.Serialization.IXmlSerializable
  isExternal: true
  name: WriteXml(XmlWriter)
  nameWithType: IXmlSerializable.WriteXml(XmlWriter)
  fullName: System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)
  spec.csharp:
  - uid: System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)
    name: WriteXml
    nameWithType: IXmlSerializable.WriteXml
    fullName: System.Xml.Serialization.IXmlSerializable.WriteXml
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Xml.XmlWriter
    name: XmlWriter
    nameWithType: XmlWriter
    fullName: System.Xml.XmlWriter
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)
    name: WriteXml
    nameWithType: IXmlSerializable.WriteXml
    fullName: System.Xml.Serialization.IXmlSerializable.WriteXml
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Xml.XmlWriter
    name: XmlWriter
    nameWithType: XmlWriter
    fullName: System.Xml.XmlWriter
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Xml.XmlWriter
  commentId: T:System.Xml.XmlWriter
  parent: System.Xml
  isExternal: true
  name: XmlWriter
  nameWithType: XmlWriter
  fullName: System.Xml.XmlWriter
- uid: System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  commentId: M:System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  parent: System.Runtime.Serialization.ISerializable
  isExternal: true
  name: GetObjectData(SerializationInfo, StreamingContext)
  nameWithType: ISerializable.GetObjectData(SerializationInfo, StreamingContext)
  fullName: System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext)
  spec.csharp:
  - uid: System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
    name: GetObjectData
    nameWithType: ISerializable.GetObjectData
    fullName: System.Runtime.Serialization.ISerializable.GetObjectData
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Runtime.Serialization.SerializationInfo
    name: SerializationInfo
    nameWithType: SerializationInfo
    fullName: System.Runtime.Serialization.SerializationInfo
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Runtime.Serialization.StreamingContext
    name: StreamingContext
    nameWithType: StreamingContext
    fullName: System.Runtime.Serialization.StreamingContext
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
    name: GetObjectData
    nameWithType: ISerializable.GetObjectData
    fullName: System.Runtime.Serialization.ISerializable.GetObjectData
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Runtime.Serialization.SerializationInfo
    name: SerializationInfo
    nameWithType: SerializationInfo
    fullName: System.Runtime.Serialization.SerializationInfo
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Runtime.Serialization.StreamingContext
    name: StreamingContext
    nameWithType: StreamingContext
    fullName: System.Runtime.Serialization.StreamingContext
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Runtime.Serialization.SerializationInfo
  commentId: T:System.Runtime.Serialization.SerializationInfo
  parent: System.Runtime.Serialization
  isExternal: true
  name: SerializationInfo
  nameWithType: SerializationInfo
  fullName: System.Runtime.Serialization.SerializationInfo
- uid: NodaTime.LocalDate.System#Runtime#Serialization#ISerializable#GetObjectData*
  commentId: Overload:NodaTime.LocalDate.System#Runtime#Serialization#ISerializable#GetObjectData
  name: ISerializable.GetObjectData
  nameWithType: LocalDate.ISerializable.GetObjectData
  fullName: NodaTime.LocalDate.System.Runtime.Serialization.ISerializable.GetObjectData
  nameWithType.vb: LocalDate.System.Runtime.Serialization.ISerializable.GetObjectData
  name.vb: System.Runtime.Serialization.ISerializable.GetObjectData
- uid: System.Runtime.Serialization.StreamingContext
  commentId: T:System.Runtime.Serialization.StreamingContext
  parent: System.Runtime.Serialization
  isExternal: true
  name: StreamingContext
  nameWithType: StreamingContext
  fullName: System.Runtime.Serialization.StreamingContext
shouldSkipMarkup: true
