### YamlMime:ManagedReference
items:
- uid: NodaTime.Testing.TimeZones.MultiTransitionDateTimeZone
  commentId: T:NodaTime.Testing.TimeZones.MultiTransitionDateTimeZone
  id: MultiTransitionDateTimeZone
  parent: NodaTime.Testing.TimeZones
  children:
  - NodaTime.Testing.TimeZones.MultiTransitionDateTimeZone.EqualsImpl(NodaTime.DateTimeZone)
  - NodaTime.Testing.TimeZones.MultiTransitionDateTimeZone.GetHashCode
  - NodaTime.Testing.TimeZones.MultiTransitionDateTimeZone.GetZoneInterval(NodaTime.Instant)
  - NodaTime.Testing.TimeZones.MultiTransitionDateTimeZone.Intervals
  - NodaTime.Testing.TimeZones.MultiTransitionDateTimeZone.Transitions
  langs:
  - csharp
  - vb
  name: MultiTransitionDateTimeZone
  nameWithType: MultiTransitionDateTimeZone
  fullName: NodaTime.Testing.TimeZones.MultiTransitionDateTimeZone
  type: Class
  source:
    remote:
      path: 1.4.x/src/NodaTime.Testing/TimeZones/MultiTransitionDateTimeZone.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: MultiTransitionDateTimeZone
    path: src/NodaTime.Testing/TimeZones/MultiTransitionDateTimeZone.cs
    startLine: 17
  assemblies:
  - NodaTime.Testing
  namespace: NodaTime.Testing.TimeZones
  summary: "\nTime zone with multiple transitions, created via a builder.\n"
  example: []
  syntax:
    content: 'public sealed class MultiTransitionDateTimeZone : DateTimeZone, IEquatable<DateTimeZone>, IZoneIntervalMap'
    content.vb: >-
      Public NotInheritable Class MultiTransitionDateTimeZone
          Inherits DateTimeZone
          Implements IEquatable(Of DateTimeZone), IZoneIntervalMap
  inheritance:
  - System.Object
  - NodaTime.DateTimeZone
  implements:
  - System.IEquatable{NodaTime.DateTimeZone}
  inheritedMembers:
  - NodaTime.DateTimeZone.Utc
  - NodaTime.DateTimeZone.ForOffset(NodaTime.Offset)
  - NodaTime.DateTimeZone.Id
  - NodaTime.DateTimeZone.MinOffset
  - NodaTime.DateTimeZone.MaxOffset
  - NodaTime.DateTimeZone.GetUtcOffset(NodaTime.Instant)
  - NodaTime.DateTimeZone.AtStartOfDay(NodaTime.LocalDate)
  - NodaTime.DateTimeZone.MapLocal(NodaTime.LocalDateTime)
  - NodaTime.DateTimeZone.ResolveLocal(NodaTime.LocalDateTime,NodaTime.TimeZones.ZoneLocalMappingResolver)
  - NodaTime.DateTimeZone.AtStrictly(NodaTime.LocalDateTime)
  - NodaTime.DateTimeZone.AtLeniently(NodaTime.LocalDateTime)
  - NodaTime.DateTimeZone.ToString
  - NodaTime.DateTimeZone.Equals(System.Object)
  - NodaTime.DateTimeZone.Equals(NodaTime.DateTimeZone)
  - NodaTime.DateTimeZone.GetZoneIntervals(NodaTime.Instant,NodaTime.Instant)
  - NodaTime.DateTimeZone.GetZoneIntervals(NodaTime.Interval)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - sealed
  - class
  modifiers.vb:
  - Public
  - NotInheritable
  - Class
- uid: NodaTime.Testing.TimeZones.MultiTransitionDateTimeZone.Intervals
  commentId: P:NodaTime.Testing.TimeZones.MultiTransitionDateTimeZone.Intervals
  id: Intervals
  parent: NodaTime.Testing.TimeZones.MultiTransitionDateTimeZone
  langs:
  - csharp
  - vb
  name: Intervals
  nameWithType: MultiTransitionDateTimeZone.Intervals
  fullName: NodaTime.Testing.TimeZones.MultiTransitionDateTimeZone.Intervals
  type: Property
  source:
    remote:
      path: 1.4.x/src/NodaTime.Testing/TimeZones/MultiTransitionDateTimeZone.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: Intervals
    path: src/NodaTime.Testing/TimeZones/MultiTransitionDateTimeZone.cs
    startLine: 25
  assemblies:
  - NodaTime.Testing
  namespace: NodaTime.Testing.TimeZones
  summary: "\nZone intervals within this time zone, in chronological order, spanning the whole time line.\n"
  example: []
  syntax:
    content: public ReadOnlyCollection<ZoneInterval> Intervals { get; }
    parameters: []
    return:
      type: System.Collections.ObjectModel.ReadOnlyCollection{NodaTime.TimeZones.ZoneInterval}
    content.vb: Public ReadOnly Property Intervals As ReadOnlyCollection(Of ZoneInterval)
  overload: NodaTime.Testing.TimeZones.MultiTransitionDateTimeZone.Intervals*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: NodaTime.Testing.TimeZones.MultiTransitionDateTimeZone.Transitions
  commentId: P:NodaTime.Testing.TimeZones.MultiTransitionDateTimeZone.Transitions
  id: Transitions
  parent: NodaTime.Testing.TimeZones.MultiTransitionDateTimeZone
  langs:
  - csharp
  - vb
  name: Transitions
  nameWithType: MultiTransitionDateTimeZone.Transitions
  fullName: NodaTime.Testing.TimeZones.MultiTransitionDateTimeZone.Transitions
  type: Property
  source:
    remote:
      path: 1.4.x/src/NodaTime.Testing/TimeZones/MultiTransitionDateTimeZone.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: Transitions
    path: src/NodaTime.Testing/TimeZones/MultiTransitionDateTimeZone.cs
    startLine: 30
  assemblies:
  - NodaTime.Testing
  namespace: NodaTime.Testing.TimeZones
  summary: "\nTransition points between intervals.\n"
  example: []
  syntax:
    content: public ReadOnlyCollection<Instant> Transitions { get; }
    parameters: []
    return:
      type: System.Collections.ObjectModel.ReadOnlyCollection{NodaTime.Instant}
    content.vb: Public ReadOnly Property Transitions As ReadOnlyCollection(Of Instant)
  overload: NodaTime.Testing.TimeZones.MultiTransitionDateTimeZone.Transitions*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: NodaTime.Testing.TimeZones.MultiTransitionDateTimeZone.GetZoneInterval(NodaTime.Instant)
  commentId: M:NodaTime.Testing.TimeZones.MultiTransitionDateTimeZone.GetZoneInterval(NodaTime.Instant)
  id: GetZoneInterval(NodaTime.Instant)
  parent: NodaTime.Testing.TimeZones.MultiTransitionDateTimeZone
  langs:
  - csharp
  - vb
  name: GetZoneInterval(Instant)
  nameWithType: MultiTransitionDateTimeZone.GetZoneInterval(Instant)
  fullName: NodaTime.Testing.TimeZones.MultiTransitionDateTimeZone.GetZoneInterval(NodaTime.Instant)
  type: Method
  source:
    remote:
      path: 1.4.x/src/NodaTime.Testing/TimeZones/MultiTransitionDateTimeZone.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: GetZoneInterval
    path: src/NodaTime.Testing/TimeZones/MultiTransitionDateTimeZone.cs
    startLine: 40
  assemblies:
  - NodaTime.Testing
  namespace: NodaTime.Testing.TimeZones
  summary: "\nGets the zone interval for the given instant; the range of time around the instant in which the same Offset\napplies (with the same split between standard time and daylight saving time, and with the same offset).\n"
  remarks: "\nThis will always return a valid zone interval, as time zones cover the whole of time.\n"
  example: []
  syntax:
    content: public override ZoneInterval GetZoneInterval(Instant instant)
    parameters:
    - id: instant
      type: NodaTime.Instant
      description: The <xref href="NodaTime.Instant" data-throw-if-not-resolved="false"></xref> to query.
    return:
      type: NodaTime.TimeZones.ZoneInterval
      description: The defined <xref href="NodaTime.TimeZones.ZoneInterval" data-throw-if-not-resolved="false"></xref>.
    content.vb: Public Overrides Function GetZoneInterval(instant As Instant) As ZoneInterval
  overridden: NodaTime.DateTimeZone.GetZoneInterval(NodaTime.Instant)
  overload: NodaTime.Testing.TimeZones.MultiTransitionDateTimeZone.GetZoneInterval*
  seealso:
  - linkId: NodaTime.DateTimeZone.GetZoneIntervals(NodaTime.Interval)
    commentId: M:NodaTime.DateTimeZone.GetZoneIntervals(NodaTime.Interval)
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: NodaTime.Testing.TimeZones.MultiTransitionDateTimeZone.EqualsImpl(NodaTime.DateTimeZone)
  commentId: M:NodaTime.Testing.TimeZones.MultiTransitionDateTimeZone.EqualsImpl(NodaTime.DateTimeZone)
  id: EqualsImpl(NodaTime.DateTimeZone)
  parent: NodaTime.Testing.TimeZones.MultiTransitionDateTimeZone
  langs:
  - csharp
  - vb
  name: EqualsImpl(DateTimeZone)
  nameWithType: MultiTransitionDateTimeZone.EqualsImpl(DateTimeZone)
  fullName: NodaTime.Testing.TimeZones.MultiTransitionDateTimeZone.EqualsImpl(NodaTime.DateTimeZone)
  type: Method
  source:
    remote:
      path: 1.4.x/src/NodaTime.Testing/TimeZones/MultiTransitionDateTimeZone.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: EqualsImpl
    path: src/NodaTime.Testing/TimeZones/MultiTransitionDateTimeZone.cs
    startLine: 70
  assemblies:
  - NodaTime.Testing
  namespace: NodaTime.Testing.TimeZones
  summary: "\nImplements equality in derived classes.\n"
  example: []
  syntax:
    content: >-
      [Obsolete("General DateTimeZone equality is not supported in 2.0")]

      protected override bool EqualsImpl(DateTimeZone zone)
    parameters:
    - id: zone
      type: NodaTime.DateTimeZone
      description: >-
        The zone to compare with this one. This is guaranteed (when called by <xref href="NodaTime.DateTimeZone.Equals(NodaTime.DateTimeZone)" data-throw-if-not-resolved="false"></xref>) to

        be a non-null reference of the same type as this instance.
    return:
      type: System.Boolean
      description: "\n<code>true</code> if the specified <xref href=\"NodaTime.DateTimeZone\" data-throw-if-not-resolved=\"false\"></xref> is equal to this instance;\notherwise, <code>false</code>.\n"
    content.vb: >-
      <Obsolete("General DateTimeZone equality is not supported in 2.0")>

      Protected Overrides Function EqualsImpl(zone As DateTimeZone) As Boolean
  overridden: NodaTime.DateTimeZone.EqualsImpl(NodaTime.DateTimeZone)
  overload: NodaTime.Testing.TimeZones.MultiTransitionDateTimeZone.EqualsImpl*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: General DateTimeZone equality is not supported in 2.0
  modifiers.csharp:
  - protected
  - override
  modifiers.vb:
  - Protected
  - Overrides
- uid: NodaTime.Testing.TimeZones.MultiTransitionDateTimeZone.GetHashCode
  commentId: M:NodaTime.Testing.TimeZones.MultiTransitionDateTimeZone.GetHashCode
  id: GetHashCode
  parent: NodaTime.Testing.TimeZones.MultiTransitionDateTimeZone
  langs:
  - csharp
  - vb
  name: GetHashCode()
  nameWithType: MultiTransitionDateTimeZone.GetHashCode()
  fullName: NodaTime.Testing.TimeZones.MultiTransitionDateTimeZone.GetHashCode()
  type: Method
  source:
    remote:
      path: 1.4.x/src/NodaTime.Testing/TimeZones/MultiTransitionDateTimeZone.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: GetHashCode
    path: src/NodaTime.Testing/TimeZones/MultiTransitionDateTimeZone.cs
    startLine: 78
  assemblies:
  - NodaTime.Testing
  namespace: NodaTime.Testing.TimeZones
  summary: "\nReturns a hash code for this instance.\n"
  example: []
  syntax:
    content: public override int GetHashCode()
    return:
      type: System.Int32
      description: "\nA hash code for this instance, suitable for use in hashing algorithms and data\nstructures like a hash table. \n"
    content.vb: Public Overrides Function GetHashCode As Integer
  overridden: NodaTime.DateTimeZone.GetHashCode
  overload: NodaTime.Testing.TimeZones.MultiTransitionDateTimeZone.GetHashCode*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
references:
- uid: NodaTime.Testing.TimeZones
  commentId: N:NodaTime.Testing.TimeZones
  name: NodaTime.Testing.TimeZones
  nameWithType: NodaTime.Testing.TimeZones
  fullName: NodaTime.Testing.TimeZones
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: NodaTime.DateTimeZone
  commentId: T:NodaTime.DateTimeZone
  parent: NodaTime
  name: DateTimeZone
  nameWithType: DateTimeZone
  fullName: NodaTime.DateTimeZone
- uid: System.IEquatable{NodaTime.DateTimeZone}
  commentId: T:System.IEquatable{NodaTime.DateTimeZone}
  parent: System
  definition: System.IEquatable`1
  name: IEquatable<DateTimeZone>
  nameWithType: IEquatable<DateTimeZone>
  fullName: System.IEquatable<NodaTime.DateTimeZone>
  nameWithType.vb: IEquatable(Of DateTimeZone)
  fullName.vb: System.IEquatable(Of NodaTime.DateTimeZone)
  name.vb: IEquatable(Of DateTimeZone)
  spec.csharp:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: NodaTime.DateTimeZone
    name: DateTimeZone
    nameWithType: DateTimeZone
    fullName: NodaTime.DateTimeZone
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: NodaTime.DateTimeZone
    name: DateTimeZone
    nameWithType: DateTimeZone
    fullName: NodaTime.DateTimeZone
  - name: )
    nameWithType: )
    fullName: )
- uid: NodaTime.DateTimeZone.Utc
  commentId: P:NodaTime.DateTimeZone.Utc
  parent: NodaTime.DateTimeZone
  name: Utc
  nameWithType: DateTimeZone.Utc
  fullName: NodaTime.DateTimeZone.Utc
- uid: NodaTime.DateTimeZone.ForOffset(NodaTime.Offset)
  commentId: M:NodaTime.DateTimeZone.ForOffset(NodaTime.Offset)
  parent: NodaTime.DateTimeZone
  name: ForOffset(Offset)
  nameWithType: DateTimeZone.ForOffset(Offset)
  fullName: NodaTime.DateTimeZone.ForOffset(NodaTime.Offset)
  spec.csharp:
  - uid: NodaTime.DateTimeZone.ForOffset(NodaTime.Offset)
    name: ForOffset
    nameWithType: DateTimeZone.ForOffset
    fullName: NodaTime.DateTimeZone.ForOffset
  - name: (
    nameWithType: (
    fullName: (
  - uid: NodaTime.Offset
    name: Offset
    nameWithType: Offset
    fullName: NodaTime.Offset
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NodaTime.DateTimeZone.ForOffset(NodaTime.Offset)
    name: ForOffset
    nameWithType: DateTimeZone.ForOffset
    fullName: NodaTime.DateTimeZone.ForOffset
  - name: (
    nameWithType: (
    fullName: (
  - uid: NodaTime.Offset
    name: Offset
    nameWithType: Offset
    fullName: NodaTime.Offset
  - name: )
    nameWithType: )
    fullName: )
- uid: NodaTime.DateTimeZone.Id
  commentId: P:NodaTime.DateTimeZone.Id
  parent: NodaTime.DateTimeZone
  name: Id
  nameWithType: DateTimeZone.Id
  fullName: NodaTime.DateTimeZone.Id
- uid: NodaTime.DateTimeZone.MinOffset
  commentId: P:NodaTime.DateTimeZone.MinOffset
  parent: NodaTime.DateTimeZone
  name: MinOffset
  nameWithType: DateTimeZone.MinOffset
  fullName: NodaTime.DateTimeZone.MinOffset
- uid: NodaTime.DateTimeZone.MaxOffset
  commentId: P:NodaTime.DateTimeZone.MaxOffset
  parent: NodaTime.DateTimeZone
  name: MaxOffset
  nameWithType: DateTimeZone.MaxOffset
  fullName: NodaTime.DateTimeZone.MaxOffset
- uid: NodaTime.DateTimeZone.GetUtcOffset(NodaTime.Instant)
  commentId: M:NodaTime.DateTimeZone.GetUtcOffset(NodaTime.Instant)
  parent: NodaTime.DateTimeZone
  name: GetUtcOffset(Instant)
  nameWithType: DateTimeZone.GetUtcOffset(Instant)
  fullName: NodaTime.DateTimeZone.GetUtcOffset(NodaTime.Instant)
  spec.csharp:
  - uid: NodaTime.DateTimeZone.GetUtcOffset(NodaTime.Instant)
    name: GetUtcOffset
    nameWithType: DateTimeZone.GetUtcOffset
    fullName: NodaTime.DateTimeZone.GetUtcOffset
  - name: (
    nameWithType: (
    fullName: (
  - uid: NodaTime.Instant
    name: Instant
    nameWithType: Instant
    fullName: NodaTime.Instant
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NodaTime.DateTimeZone.GetUtcOffset(NodaTime.Instant)
    name: GetUtcOffset
    nameWithType: DateTimeZone.GetUtcOffset
    fullName: NodaTime.DateTimeZone.GetUtcOffset
  - name: (
    nameWithType: (
    fullName: (
  - uid: NodaTime.Instant
    name: Instant
    nameWithType: Instant
    fullName: NodaTime.Instant
  - name: )
    nameWithType: )
    fullName: )
- uid: NodaTime.DateTimeZone.AtStartOfDay(NodaTime.LocalDate)
  commentId: M:NodaTime.DateTimeZone.AtStartOfDay(NodaTime.LocalDate)
  parent: NodaTime.DateTimeZone
  name: AtStartOfDay(LocalDate)
  nameWithType: DateTimeZone.AtStartOfDay(LocalDate)
  fullName: NodaTime.DateTimeZone.AtStartOfDay(NodaTime.LocalDate)
  spec.csharp:
  - uid: NodaTime.DateTimeZone.AtStartOfDay(NodaTime.LocalDate)
    name: AtStartOfDay
    nameWithType: DateTimeZone.AtStartOfDay
    fullName: NodaTime.DateTimeZone.AtStartOfDay
  - name: (
    nameWithType: (
    fullName: (
  - uid: NodaTime.LocalDate
    name: LocalDate
    nameWithType: LocalDate
    fullName: NodaTime.LocalDate
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NodaTime.DateTimeZone.AtStartOfDay(NodaTime.LocalDate)
    name: AtStartOfDay
    nameWithType: DateTimeZone.AtStartOfDay
    fullName: NodaTime.DateTimeZone.AtStartOfDay
  - name: (
    nameWithType: (
    fullName: (
  - uid: NodaTime.LocalDate
    name: LocalDate
    nameWithType: LocalDate
    fullName: NodaTime.LocalDate
  - name: )
    nameWithType: )
    fullName: )
- uid: NodaTime.DateTimeZone.MapLocal(NodaTime.LocalDateTime)
  commentId: M:NodaTime.DateTimeZone.MapLocal(NodaTime.LocalDateTime)
  parent: NodaTime.DateTimeZone
  name: MapLocal(LocalDateTime)
  nameWithType: DateTimeZone.MapLocal(LocalDateTime)
  fullName: NodaTime.DateTimeZone.MapLocal(NodaTime.LocalDateTime)
  spec.csharp:
  - uid: NodaTime.DateTimeZone.MapLocal(NodaTime.LocalDateTime)
    name: MapLocal
    nameWithType: DateTimeZone.MapLocal
    fullName: NodaTime.DateTimeZone.MapLocal
  - name: (
    nameWithType: (
    fullName: (
  - uid: NodaTime.LocalDateTime
    name: LocalDateTime
    nameWithType: LocalDateTime
    fullName: NodaTime.LocalDateTime
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NodaTime.DateTimeZone.MapLocal(NodaTime.LocalDateTime)
    name: MapLocal
    nameWithType: DateTimeZone.MapLocal
    fullName: NodaTime.DateTimeZone.MapLocal
  - name: (
    nameWithType: (
    fullName: (
  - uid: NodaTime.LocalDateTime
    name: LocalDateTime
    nameWithType: LocalDateTime
    fullName: NodaTime.LocalDateTime
  - name: )
    nameWithType: )
    fullName: )
- uid: NodaTime.DateTimeZone.ResolveLocal(NodaTime.LocalDateTime,NodaTime.TimeZones.ZoneLocalMappingResolver)
  commentId: M:NodaTime.DateTimeZone.ResolveLocal(NodaTime.LocalDateTime,NodaTime.TimeZones.ZoneLocalMappingResolver)
  parent: NodaTime.DateTimeZone
  name: ResolveLocal(LocalDateTime, ZoneLocalMappingResolver)
  nameWithType: DateTimeZone.ResolveLocal(LocalDateTime, ZoneLocalMappingResolver)
  fullName: NodaTime.DateTimeZone.ResolveLocal(NodaTime.LocalDateTime, NodaTime.TimeZones.ZoneLocalMappingResolver)
  spec.csharp:
  - uid: NodaTime.DateTimeZone.ResolveLocal(NodaTime.LocalDateTime,NodaTime.TimeZones.ZoneLocalMappingResolver)
    name: ResolveLocal
    nameWithType: DateTimeZone.ResolveLocal
    fullName: NodaTime.DateTimeZone.ResolveLocal
  - name: (
    nameWithType: (
    fullName: (
  - uid: NodaTime.LocalDateTime
    name: LocalDateTime
    nameWithType: LocalDateTime
    fullName: NodaTime.LocalDateTime
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: NodaTime.TimeZones.ZoneLocalMappingResolver
    name: ZoneLocalMappingResolver
    nameWithType: ZoneLocalMappingResolver
    fullName: NodaTime.TimeZones.ZoneLocalMappingResolver
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NodaTime.DateTimeZone.ResolveLocal(NodaTime.LocalDateTime,NodaTime.TimeZones.ZoneLocalMappingResolver)
    name: ResolveLocal
    nameWithType: DateTimeZone.ResolveLocal
    fullName: NodaTime.DateTimeZone.ResolveLocal
  - name: (
    nameWithType: (
    fullName: (
  - uid: NodaTime.LocalDateTime
    name: LocalDateTime
    nameWithType: LocalDateTime
    fullName: NodaTime.LocalDateTime
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: NodaTime.TimeZones.ZoneLocalMappingResolver
    name: ZoneLocalMappingResolver
    nameWithType: ZoneLocalMappingResolver
    fullName: NodaTime.TimeZones.ZoneLocalMappingResolver
  - name: )
    nameWithType: )
    fullName: )
- uid: NodaTime.DateTimeZone.AtStrictly(NodaTime.LocalDateTime)
  commentId: M:NodaTime.DateTimeZone.AtStrictly(NodaTime.LocalDateTime)
  parent: NodaTime.DateTimeZone
  name: AtStrictly(LocalDateTime)
  nameWithType: DateTimeZone.AtStrictly(LocalDateTime)
  fullName: NodaTime.DateTimeZone.AtStrictly(NodaTime.LocalDateTime)
  spec.csharp:
  - uid: NodaTime.DateTimeZone.AtStrictly(NodaTime.LocalDateTime)
    name: AtStrictly
    nameWithType: DateTimeZone.AtStrictly
    fullName: NodaTime.DateTimeZone.AtStrictly
  - name: (
    nameWithType: (
    fullName: (
  - uid: NodaTime.LocalDateTime
    name: LocalDateTime
    nameWithType: LocalDateTime
    fullName: NodaTime.LocalDateTime
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NodaTime.DateTimeZone.AtStrictly(NodaTime.LocalDateTime)
    name: AtStrictly
    nameWithType: DateTimeZone.AtStrictly
    fullName: NodaTime.DateTimeZone.AtStrictly
  - name: (
    nameWithType: (
    fullName: (
  - uid: NodaTime.LocalDateTime
    name: LocalDateTime
    nameWithType: LocalDateTime
    fullName: NodaTime.LocalDateTime
  - name: )
    nameWithType: )
    fullName: )
- uid: NodaTime.DateTimeZone.AtLeniently(NodaTime.LocalDateTime)
  commentId: M:NodaTime.DateTimeZone.AtLeniently(NodaTime.LocalDateTime)
  parent: NodaTime.DateTimeZone
  name: AtLeniently(LocalDateTime)
  nameWithType: DateTimeZone.AtLeniently(LocalDateTime)
  fullName: NodaTime.DateTimeZone.AtLeniently(NodaTime.LocalDateTime)
  spec.csharp:
  - uid: NodaTime.DateTimeZone.AtLeniently(NodaTime.LocalDateTime)
    name: AtLeniently
    nameWithType: DateTimeZone.AtLeniently
    fullName: NodaTime.DateTimeZone.AtLeniently
  - name: (
    nameWithType: (
    fullName: (
  - uid: NodaTime.LocalDateTime
    name: LocalDateTime
    nameWithType: LocalDateTime
    fullName: NodaTime.LocalDateTime
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NodaTime.DateTimeZone.AtLeniently(NodaTime.LocalDateTime)
    name: AtLeniently
    nameWithType: DateTimeZone.AtLeniently
    fullName: NodaTime.DateTimeZone.AtLeniently
  - name: (
    nameWithType: (
    fullName: (
  - uid: NodaTime.LocalDateTime
    name: LocalDateTime
    nameWithType: LocalDateTime
    fullName: NodaTime.LocalDateTime
  - name: )
    nameWithType: )
    fullName: )
- uid: NodaTime.DateTimeZone.ToString
  commentId: M:NodaTime.DateTimeZone.ToString
  parent: NodaTime.DateTimeZone
  name: ToString()
  nameWithType: DateTimeZone.ToString()
  fullName: NodaTime.DateTimeZone.ToString()
  spec.csharp:
  - uid: NodaTime.DateTimeZone.ToString
    name: ToString
    nameWithType: DateTimeZone.ToString
    fullName: NodaTime.DateTimeZone.ToString
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NodaTime.DateTimeZone.ToString
    name: ToString
    nameWithType: DateTimeZone.ToString
    fullName: NodaTime.DateTimeZone.ToString
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: NodaTime.DateTimeZone.Equals(System.Object)
  commentId: M:NodaTime.DateTimeZone.Equals(System.Object)
  parent: NodaTime.DateTimeZone
  isExternal: true
  name: Equals(Object)
  nameWithType: DateTimeZone.Equals(Object)
  fullName: NodaTime.DateTimeZone.Equals(System.Object)
  spec.csharp:
  - uid: NodaTime.DateTimeZone.Equals(System.Object)
    name: Equals
    nameWithType: DateTimeZone.Equals
    fullName: NodaTime.DateTimeZone.Equals
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NodaTime.DateTimeZone.Equals(System.Object)
    name: Equals
    nameWithType: DateTimeZone.Equals
    fullName: NodaTime.DateTimeZone.Equals
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: NodaTime.DateTimeZone.Equals(NodaTime.DateTimeZone)
  commentId: M:NodaTime.DateTimeZone.Equals(NodaTime.DateTimeZone)
  parent: NodaTime.DateTimeZone
  name: Equals(DateTimeZone)
  nameWithType: DateTimeZone.Equals(DateTimeZone)
  fullName: NodaTime.DateTimeZone.Equals(NodaTime.DateTimeZone)
  spec.csharp:
  - uid: NodaTime.DateTimeZone.Equals(NodaTime.DateTimeZone)
    name: Equals
    nameWithType: DateTimeZone.Equals
    fullName: NodaTime.DateTimeZone.Equals
  - name: (
    nameWithType: (
    fullName: (
  - uid: NodaTime.DateTimeZone
    name: DateTimeZone
    nameWithType: DateTimeZone
    fullName: NodaTime.DateTimeZone
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NodaTime.DateTimeZone.Equals(NodaTime.DateTimeZone)
    name: Equals
    nameWithType: DateTimeZone.Equals
    fullName: NodaTime.DateTimeZone.Equals
  - name: (
    nameWithType: (
    fullName: (
  - uid: NodaTime.DateTimeZone
    name: DateTimeZone
    nameWithType: DateTimeZone
    fullName: NodaTime.DateTimeZone
  - name: )
    nameWithType: )
    fullName: )
- uid: NodaTime.DateTimeZone.GetZoneIntervals(NodaTime.Instant,NodaTime.Instant)
  commentId: M:NodaTime.DateTimeZone.GetZoneIntervals(NodaTime.Instant,NodaTime.Instant)
  parent: NodaTime.DateTimeZone
  name: GetZoneIntervals(Instant, Instant)
  nameWithType: DateTimeZone.GetZoneIntervals(Instant, Instant)
  fullName: NodaTime.DateTimeZone.GetZoneIntervals(NodaTime.Instant, NodaTime.Instant)
  spec.csharp:
  - uid: NodaTime.DateTimeZone.GetZoneIntervals(NodaTime.Instant,NodaTime.Instant)
    name: GetZoneIntervals
    nameWithType: DateTimeZone.GetZoneIntervals
    fullName: NodaTime.DateTimeZone.GetZoneIntervals
  - name: (
    nameWithType: (
    fullName: (
  - uid: NodaTime.Instant
    name: Instant
    nameWithType: Instant
    fullName: NodaTime.Instant
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: NodaTime.Instant
    name: Instant
    nameWithType: Instant
    fullName: NodaTime.Instant
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NodaTime.DateTimeZone.GetZoneIntervals(NodaTime.Instant,NodaTime.Instant)
    name: GetZoneIntervals
    nameWithType: DateTimeZone.GetZoneIntervals
    fullName: NodaTime.DateTimeZone.GetZoneIntervals
  - name: (
    nameWithType: (
    fullName: (
  - uid: NodaTime.Instant
    name: Instant
    nameWithType: Instant
    fullName: NodaTime.Instant
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: NodaTime.Instant
    name: Instant
    nameWithType: Instant
    fullName: NodaTime.Instant
  - name: )
    nameWithType: )
    fullName: )
- uid: NodaTime.DateTimeZone.GetZoneIntervals(NodaTime.Interval)
  commentId: M:NodaTime.DateTimeZone.GetZoneIntervals(NodaTime.Interval)
  parent: NodaTime.DateTimeZone
  name: GetZoneIntervals(Interval)
  nameWithType: DateTimeZone.GetZoneIntervals(Interval)
  fullName: NodaTime.DateTimeZone.GetZoneIntervals(NodaTime.Interval)
  spec.csharp:
  - uid: NodaTime.DateTimeZone.GetZoneIntervals(NodaTime.Interval)
    name: GetZoneIntervals
    nameWithType: DateTimeZone.GetZoneIntervals
    fullName: NodaTime.DateTimeZone.GetZoneIntervals
  - name: (
    nameWithType: (
    fullName: (
  - uid: NodaTime.Interval
    name: Interval
    nameWithType: Interval
    fullName: NodaTime.Interval
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NodaTime.DateTimeZone.GetZoneIntervals(NodaTime.Interval)
    name: GetZoneIntervals
    nameWithType: DateTimeZone.GetZoneIntervals
    fullName: NodaTime.DateTimeZone.GetZoneIntervals
  - name: (
    nameWithType: (
    fullName: (
  - uid: NodaTime.Interval
    name: Interval
    nameWithType: Interval
    fullName: NodaTime.Interval
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: NodaTime
  commentId: N:NodaTime
  name: NodaTime
  nameWithType: NodaTime
  fullName: NodaTime
- uid: System.IEquatable`1
  commentId: T:System.IEquatable`1
  isExternal: true
  name: IEquatable<T>
  nameWithType: IEquatable<T>
  fullName: System.IEquatable<T>
  nameWithType.vb: IEquatable(Of T)
  fullName.vb: System.IEquatable(Of T)
  name.vb: IEquatable(Of T)
  spec.csharp:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: NodaTime.Testing.TimeZones.MultiTransitionDateTimeZone.Intervals*
  commentId: Overload:NodaTime.Testing.TimeZones.MultiTransitionDateTimeZone.Intervals
  name: Intervals
  nameWithType: MultiTransitionDateTimeZone.Intervals
  fullName: NodaTime.Testing.TimeZones.MultiTransitionDateTimeZone.Intervals
- uid: System.Collections.ObjectModel.ReadOnlyCollection{NodaTime.TimeZones.ZoneInterval}
  commentId: T:System.Collections.ObjectModel.ReadOnlyCollection{NodaTime.TimeZones.ZoneInterval}
  parent: System.Collections.ObjectModel
  definition: System.Collections.ObjectModel.ReadOnlyCollection`1
  name: ReadOnlyCollection<ZoneInterval>
  nameWithType: ReadOnlyCollection<ZoneInterval>
  fullName: System.Collections.ObjectModel.ReadOnlyCollection<NodaTime.TimeZones.ZoneInterval>
  nameWithType.vb: ReadOnlyCollection(Of ZoneInterval)
  fullName.vb: System.Collections.ObjectModel.ReadOnlyCollection(Of NodaTime.TimeZones.ZoneInterval)
  name.vb: ReadOnlyCollection(Of ZoneInterval)
  spec.csharp:
  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1
    name: ReadOnlyCollection
    nameWithType: ReadOnlyCollection
    fullName: System.Collections.ObjectModel.ReadOnlyCollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: NodaTime.TimeZones.ZoneInterval
    name: ZoneInterval
    nameWithType: ZoneInterval
    fullName: NodaTime.TimeZones.ZoneInterval
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1
    name: ReadOnlyCollection
    nameWithType: ReadOnlyCollection
    fullName: System.Collections.ObjectModel.ReadOnlyCollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: NodaTime.TimeZones.ZoneInterval
    name: ZoneInterval
    nameWithType: ZoneInterval
    fullName: NodaTime.TimeZones.ZoneInterval
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.ObjectModel.ReadOnlyCollection`1
  commentId: T:System.Collections.ObjectModel.ReadOnlyCollection`1
  isExternal: true
  name: ReadOnlyCollection<T>
  nameWithType: ReadOnlyCollection<T>
  fullName: System.Collections.ObjectModel.ReadOnlyCollection<T>
  nameWithType.vb: ReadOnlyCollection(Of T)
  fullName.vb: System.Collections.ObjectModel.ReadOnlyCollection(Of T)
  name.vb: ReadOnlyCollection(Of T)
  spec.csharp:
  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1
    name: ReadOnlyCollection
    nameWithType: ReadOnlyCollection
    fullName: System.Collections.ObjectModel.ReadOnlyCollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1
    name: ReadOnlyCollection
    nameWithType: ReadOnlyCollection
    fullName: System.Collections.ObjectModel.ReadOnlyCollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.ObjectModel
  commentId: N:System.Collections.ObjectModel
  isExternal: true
  name: System.Collections.ObjectModel
  nameWithType: System.Collections.ObjectModel
  fullName: System.Collections.ObjectModel
- uid: NodaTime.Testing.TimeZones.MultiTransitionDateTimeZone.Transitions*
  commentId: Overload:NodaTime.Testing.TimeZones.MultiTransitionDateTimeZone.Transitions
  name: Transitions
  nameWithType: MultiTransitionDateTimeZone.Transitions
  fullName: NodaTime.Testing.TimeZones.MultiTransitionDateTimeZone.Transitions
- uid: System.Collections.ObjectModel.ReadOnlyCollection{NodaTime.Instant}
  commentId: T:System.Collections.ObjectModel.ReadOnlyCollection{NodaTime.Instant}
  parent: System.Collections.ObjectModel
  definition: System.Collections.ObjectModel.ReadOnlyCollection`1
  name: ReadOnlyCollection<Instant>
  nameWithType: ReadOnlyCollection<Instant>
  fullName: System.Collections.ObjectModel.ReadOnlyCollection<NodaTime.Instant>
  nameWithType.vb: ReadOnlyCollection(Of Instant)
  fullName.vb: System.Collections.ObjectModel.ReadOnlyCollection(Of NodaTime.Instant)
  name.vb: ReadOnlyCollection(Of Instant)
  spec.csharp:
  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1
    name: ReadOnlyCollection
    nameWithType: ReadOnlyCollection
    fullName: System.Collections.ObjectModel.ReadOnlyCollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: NodaTime.Instant
    name: Instant
    nameWithType: Instant
    fullName: NodaTime.Instant
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1
    name: ReadOnlyCollection
    nameWithType: ReadOnlyCollection
    fullName: System.Collections.ObjectModel.ReadOnlyCollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: NodaTime.Instant
    name: Instant
    nameWithType: Instant
    fullName: NodaTime.Instant
  - name: )
    nameWithType: )
    fullName: )
- uid: NodaTime.DateTimeZone.GetZoneInterval(NodaTime.Instant)
  commentId: M:NodaTime.DateTimeZone.GetZoneInterval(NodaTime.Instant)
  parent: NodaTime.DateTimeZone
  name: GetZoneInterval(Instant)
  nameWithType: DateTimeZone.GetZoneInterval(Instant)
  fullName: NodaTime.DateTimeZone.GetZoneInterval(NodaTime.Instant)
  spec.csharp:
  - uid: NodaTime.DateTimeZone.GetZoneInterval(NodaTime.Instant)
    name: GetZoneInterval
    nameWithType: DateTimeZone.GetZoneInterval
    fullName: NodaTime.DateTimeZone.GetZoneInterval
  - name: (
    nameWithType: (
    fullName: (
  - uid: NodaTime.Instant
    name: Instant
    nameWithType: Instant
    fullName: NodaTime.Instant
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NodaTime.DateTimeZone.GetZoneInterval(NodaTime.Instant)
    name: GetZoneInterval
    nameWithType: DateTimeZone.GetZoneInterval
    fullName: NodaTime.DateTimeZone.GetZoneInterval
  - name: (
    nameWithType: (
    fullName: (
  - uid: NodaTime.Instant
    name: Instant
    nameWithType: Instant
    fullName: NodaTime.Instant
  - name: )
    nameWithType: )
    fullName: )
- uid: NodaTime.Testing.TimeZones.MultiTransitionDateTimeZone.GetZoneInterval*
  commentId: Overload:NodaTime.Testing.TimeZones.MultiTransitionDateTimeZone.GetZoneInterval
  name: GetZoneInterval
  nameWithType: MultiTransitionDateTimeZone.GetZoneInterval
  fullName: NodaTime.Testing.TimeZones.MultiTransitionDateTimeZone.GetZoneInterval
- uid: NodaTime.Instant
  commentId: T:NodaTime.Instant
  parent: NodaTime
  name: Instant
  nameWithType: Instant
  fullName: NodaTime.Instant
- uid: NodaTime.TimeZones.ZoneInterval
  commentId: T:NodaTime.TimeZones.ZoneInterval
  parent: NodaTime.TimeZones
  name: ZoneInterval
  nameWithType: ZoneInterval
  fullName: NodaTime.TimeZones.ZoneInterval
- uid: NodaTime.TimeZones
  commentId: N:NodaTime.TimeZones
  name: NodaTime.TimeZones
  nameWithType: NodaTime.TimeZones
  fullName: NodaTime.TimeZones
- uid: NodaTime.DateTimeZone.EqualsImpl(NodaTime.DateTimeZone)
  commentId: M:NodaTime.DateTimeZone.EqualsImpl(NodaTime.DateTimeZone)
  parent: NodaTime.DateTimeZone
  name: EqualsImpl(DateTimeZone)
  nameWithType: DateTimeZone.EqualsImpl(DateTimeZone)
  fullName: NodaTime.DateTimeZone.EqualsImpl(NodaTime.DateTimeZone)
  spec.csharp:
  - uid: NodaTime.DateTimeZone.EqualsImpl(NodaTime.DateTimeZone)
    name: EqualsImpl
    nameWithType: DateTimeZone.EqualsImpl
    fullName: NodaTime.DateTimeZone.EqualsImpl
  - name: (
    nameWithType: (
    fullName: (
  - uid: NodaTime.DateTimeZone
    name: DateTimeZone
    nameWithType: DateTimeZone
    fullName: NodaTime.DateTimeZone
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NodaTime.DateTimeZone.EqualsImpl(NodaTime.DateTimeZone)
    name: EqualsImpl
    nameWithType: DateTimeZone.EqualsImpl
    fullName: NodaTime.DateTimeZone.EqualsImpl
  - name: (
    nameWithType: (
    fullName: (
  - uid: NodaTime.DateTimeZone
    name: DateTimeZone
    nameWithType: DateTimeZone
    fullName: NodaTime.DateTimeZone
  - name: )
    nameWithType: )
    fullName: )
- uid: NodaTime.Testing.TimeZones.MultiTransitionDateTimeZone.EqualsImpl*
  commentId: Overload:NodaTime.Testing.TimeZones.MultiTransitionDateTimeZone.EqualsImpl
  name: EqualsImpl
  nameWithType: MultiTransitionDateTimeZone.EqualsImpl
  fullName: NodaTime.Testing.TimeZones.MultiTransitionDateTimeZone.EqualsImpl
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: NodaTime.DateTimeZone.GetHashCode
  commentId: M:NodaTime.DateTimeZone.GetHashCode
  parent: NodaTime.DateTimeZone
  name: GetHashCode()
  nameWithType: DateTimeZone.GetHashCode()
  fullName: NodaTime.DateTimeZone.GetHashCode()
  spec.csharp:
  - uid: NodaTime.DateTimeZone.GetHashCode
    name: GetHashCode
    nameWithType: DateTimeZone.GetHashCode
    fullName: NodaTime.DateTimeZone.GetHashCode
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NodaTime.DateTimeZone.GetHashCode
    name: GetHashCode
    nameWithType: DateTimeZone.GetHashCode
    fullName: NodaTime.DateTimeZone.GetHashCode
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: NodaTime.Testing.TimeZones.MultiTransitionDateTimeZone.GetHashCode*
  commentId: Overload:NodaTime.Testing.TimeZones.MultiTransitionDateTimeZone.GetHashCode
  name: GetHashCode
  nameWithType: MultiTransitionDateTimeZone.GetHashCode
  fullName: NodaTime.Testing.TimeZones.MultiTransitionDateTimeZone.GetHashCode
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
shouldSkipMarkup: true
