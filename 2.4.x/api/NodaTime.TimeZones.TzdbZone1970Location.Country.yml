### YamlMime:ManagedReference
items:
- uid: NodaTime.TimeZones.TzdbZone1970Location.Country
  commentId: T:NodaTime.TimeZones.TzdbZone1970Location.Country
  id: TzdbZone1970Location.Country
  parent: NodaTime.TimeZones
  children:
  - NodaTime.TimeZones.TzdbZone1970Location.Country.#ctor(System.String,System.String)
  - NodaTime.TimeZones.TzdbZone1970Location.Country.Code
  - NodaTime.TimeZones.TzdbZone1970Location.Country.Equals(NodaTime.TimeZones.TzdbZone1970Location.Country)
  - NodaTime.TimeZones.TzdbZone1970Location.Country.Equals(System.Object)
  - NodaTime.TimeZones.TzdbZone1970Location.Country.GetHashCode
  - NodaTime.TimeZones.TzdbZone1970Location.Country.Name
  - NodaTime.TimeZones.TzdbZone1970Location.Country.ToString
  langs:
  - csharp
  - vb
  name: TzdbZone1970Location.Country
  nameWithType: TzdbZone1970Location.Country
  fullName: NodaTime.TimeZones.TzdbZone1970Location.Country
  type: Class
  source:
    remote:
      path: 2.4.x/src/NodaTime/TimeZones/TzdbZone1970Location.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: Country
    path: src/NodaTime/TimeZones/TzdbZone1970Location.cs
    startLine: 150
  assemblies:
  - NodaTime
  namespace: NodaTime.TimeZones
  summary: "\nA country represented within an entry in the &quot;zone1970.tab&quot; file, with the English name\nmapped from the &quot;iso3166.tab&quot; file.\n"
  example: []
  syntax:
    content: 'public sealed class Country : IEquatable<TzdbZone1970Location.Country>'
    content.vb: >-
      Public NotInheritable Class Country
          Implements IEquatable(Of TzdbZone1970Location.Country)
  inheritance:
  - System.Object
  implements:
  - System.IEquatable{NodaTime.TimeZones.TzdbZone1970Location.Country}
  inheritedMembers:
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - sealed
  - class
  modifiers.vb:
  - Public
  - NotInheritable
  - Class
- uid: NodaTime.TimeZones.TzdbZone1970Location.Country.Name
  commentId: P:NodaTime.TimeZones.TzdbZone1970Location.Country.Name
  id: Name
  parent: NodaTime.TimeZones.TzdbZone1970Location.Country
  langs:
  - csharp
  - vb
  name: Name
  nameWithType: TzdbZone1970Location.Country.Name
  fullName: NodaTime.TimeZones.TzdbZone1970Location.Country.Name
  type: Property
  source:
    remote:
      path: 2.4.x/src/NodaTime/TimeZones/TzdbZone1970Location.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: Name
    path: src/NodaTime/TimeZones/TzdbZone1970Location.cs
    startLine: 157
  assemblies:
  - NodaTime
  namespace: NodaTime.TimeZones
  summary: "\nGets the English name of the country.\n"
  example: []
  syntax:
    content: public string Name { get; }
    parameters: []
    return:
      type: System.String
      description: The English name of the country.
    content.vb: Public ReadOnly Property Name As String
  overload: NodaTime.TimeZones.TzdbZone1970Location.Country.Name*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: NodaTime.TimeZones.TzdbZone1970Location.Country.Code
  commentId: P:NodaTime.TimeZones.TzdbZone1970Location.Country.Code
  id: Code
  parent: NodaTime.TimeZones.TzdbZone1970Location.Country
  langs:
  - csharp
  - vb
  name: Code
  nameWithType: TzdbZone1970Location.Country.Code
  fullName: NodaTime.TimeZones.TzdbZone1970Location.Country.Code
  type: Property
  source:
    remote:
      path: 2.4.x/src/NodaTime/TimeZones/TzdbZone1970Location.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: Code
    path: src/NodaTime/TimeZones/TzdbZone1970Location.cs
    startLine: 163
  assemblies:
  - NodaTime
  namespace: NodaTime.TimeZones
  summary: "\nGets the ISO-3166 2-letter country code for the country.\n"
  example: []
  syntax:
    content: public string Code { get; }
    parameters: []
    return:
      type: System.String
      description: The ISO-3166 2-letter country code for the country.
    content.vb: Public ReadOnly Property Code As String
  overload: NodaTime.TimeZones.TzdbZone1970Location.Country.Code*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: NodaTime.TimeZones.TzdbZone1970Location.Country.#ctor(System.String,System.String)
  commentId: M:NodaTime.TimeZones.TzdbZone1970Location.Country.#ctor(System.String,System.String)
  id: '#ctor(System.String,System.String)'
  parent: NodaTime.TimeZones.TzdbZone1970Location.Country
  langs:
  - csharp
  - vb
  name: Country(String, String)
  nameWithType: TzdbZone1970Location.Country.Country(String, String)
  fullName: NodaTime.TimeZones.TzdbZone1970Location.Country.Country(System.String, System.String)
  type: Constructor
  source:
    remote:
      path: 2.4.x/src/NodaTime/TimeZones/TzdbZone1970Location.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: .ctor
    path: src/NodaTime/TimeZones/TzdbZone1970Location.cs
    startLine: 170
  assemblies:
  - NodaTime
  namespace: NodaTime.TimeZones
  summary: "\nConstructs a new country from its name and ISO-3166 2-letter code.\n"
  example: []
  syntax:
    content: public Country(string name, string code)
    parameters:
    - id: name
      type: System.String
      description: Country name; must not be empty.
    - id: code
      type: System.String
      description: 2-letter code
    content.vb: Public Sub New(name As String, code As String)
  overload: NodaTime.TimeZones.TzdbZone1970Location.Country.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: NodaTime.TimeZones.TzdbZone1970Location.Country.Equals(NodaTime.TimeZones.TzdbZone1970Location.Country)
  commentId: M:NodaTime.TimeZones.TzdbZone1970Location.Country.Equals(NodaTime.TimeZones.TzdbZone1970Location.Country)
  id: Equals(NodaTime.TimeZones.TzdbZone1970Location.Country)
  parent: NodaTime.TimeZones.TzdbZone1970Location.Country
  langs:
  - csharp
  - vb
  name: Equals(TzdbZone1970Location.Country)
  nameWithType: TzdbZone1970Location.Country.Equals(TzdbZone1970Location.Country)
  fullName: NodaTime.TimeZones.TzdbZone1970Location.Country.Equals(NodaTime.TimeZones.TzdbZone1970Location.Country)
  type: Method
  source:
    remote:
      path: 2.4.x/src/NodaTime/TimeZones/TzdbZone1970Location.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: Equals
    path: src/NodaTime/TimeZones/TzdbZone1970Location.cs
    startLine: 183
  assemblies:
  - NodaTime
  namespace: NodaTime.TimeZones
  summary: "\nCompares countries for equality, by name and code.\n"
  example: []
  syntax:
    content: public bool Equals(TzdbZone1970Location.Country other)
    parameters:
    - id: other
      type: NodaTime.TimeZones.TzdbZone1970Location.Country
      description: The country to compare with this one.
    return:
      type: System.Boolean
      description: <code>true</code> if the given country has the same name and code as this one; <code>false</code> otherwise.
    content.vb: Public Function Equals(other As TzdbZone1970Location.Country) As Boolean
  overload: NodaTime.TimeZones.TzdbZone1970Location.Country.Equals*
  implements:
  - System.IEquatable{NodaTime.TimeZones.TzdbZone1970Location.Country}.Equals(NodaTime.TimeZones.TzdbZone1970Location.Country)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: NodaTime.TimeZones.TzdbZone1970Location.Country.Equals(System.Object)
  commentId: M:NodaTime.TimeZones.TzdbZone1970Location.Country.Equals(System.Object)
  id: Equals(System.Object)
  parent: NodaTime.TimeZones.TzdbZone1970Location.Country
  langs:
  - csharp
  - vb
  name: Equals(Object)
  nameWithType: TzdbZone1970Location.Country.Equals(Object)
  fullName: NodaTime.TimeZones.TzdbZone1970Location.Country.Equals(System.Object)
  type: Method
  source:
    remote:
      path: 2.4.x/src/NodaTime/TimeZones/TzdbZone1970Location.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: Equals
    path: src/NodaTime/TimeZones/TzdbZone1970Location.cs
    startLine: 190
  assemblies:
  - NodaTime
  namespace: NodaTime.TimeZones
  summary: "\nCompares countries for equality, by name and code.\n"
  example: []
  syntax:
    content: public override bool Equals(object obj)
    parameters:
    - id: obj
      type: System.Object
      description: The object to compare this one with.
    return:
      type: System.Boolean
      description: <code>true</code> if the given object is a country with the same name and code as this one; <code>false</code> otherwise.
    content.vb: Public Overrides Function Equals(obj As Object) As Boolean
  overridden: System.Object.Equals(System.Object)
  overload: NodaTime.TimeZones.TzdbZone1970Location.Country.Equals*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: NodaTime.TimeZones.TzdbZone1970Location.Country.GetHashCode
  commentId: M:NodaTime.TimeZones.TzdbZone1970Location.Country.GetHashCode
  id: GetHashCode
  parent: NodaTime.TimeZones.TzdbZone1970Location.Country
  langs:
  - csharp
  - vb
  name: GetHashCode()
  nameWithType: TzdbZone1970Location.Country.GetHashCode()
  fullName: NodaTime.TimeZones.TzdbZone1970Location.Country.GetHashCode()
  type: Method
  source:
    remote:
      path: 2.4.x/src/NodaTime/TimeZones/TzdbZone1970Location.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: GetHashCode
    path: src/NodaTime/TimeZones/TzdbZone1970Location.cs
    startLine: 196
  assemblies:
  - NodaTime
  namespace: NodaTime.TimeZones
  summary: "\nReturns a hash code for this country.\n"
  example: []
  syntax:
    content: public override int GetHashCode()
    return:
      type: System.Int32
      description: A hash code for this country.
    content.vb: Public Overrides Function GetHashCode As Integer
  overridden: System.Object.GetHashCode
  overload: NodaTime.TimeZones.TzdbZone1970Location.Country.GetHashCode*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: NodaTime.TimeZones.TzdbZone1970Location.Country.ToString
  commentId: M:NodaTime.TimeZones.TzdbZone1970Location.Country.ToString
  id: ToString
  parent: NodaTime.TimeZones.TzdbZone1970Location.Country
  langs:
  - csharp
  - vb
  name: ToString()
  nameWithType: TzdbZone1970Location.Country.ToString()
  fullName: NodaTime.TimeZones.TzdbZone1970Location.Country.ToString()
  type: Method
  source:
    remote:
      path: 2.4.x/src/NodaTime/TimeZones/TzdbZone1970Location.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: ToString
    path: src/NodaTime/TimeZones/TzdbZone1970Location.cs
    startLine: 202
  assemblies:
  - NodaTime
  namespace: NodaTime.TimeZones
  summary: "\nReturns a string representation of this country, including the code and name.\n"
  example: []
  syntax:
    content: public override string ToString()
    return:
      type: System.String
      description: A string representation of this country.
    content.vb: Public Overrides Function ToString As String
  overridden: System.Object.ToString
  overload: NodaTime.TimeZones.TzdbZone1970Location.Country.ToString*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
references:
- uid: NodaTime.TimeZones
  commentId: N:NodaTime.TimeZones
  name: NodaTime.TimeZones
  nameWithType: NodaTime.TimeZones
  fullName: NodaTime.TimeZones
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.IEquatable{NodaTime.TimeZones.TzdbZone1970Location.Country}
  commentId: T:System.IEquatable{NodaTime.TimeZones.TzdbZone1970Location.Country}
  parent: System
  definition: System.IEquatable`1
  name: IEquatable<TzdbZone1970Location.Country>
  nameWithType: IEquatable<TzdbZone1970Location.Country>
  fullName: System.IEquatable<NodaTime.TimeZones.TzdbZone1970Location.Country>
  nameWithType.vb: IEquatable(Of TzdbZone1970Location.Country)
  fullName.vb: System.IEquatable(Of NodaTime.TimeZones.TzdbZone1970Location.Country)
  name.vb: IEquatable(Of TzdbZone1970Location.Country)
  spec.csharp:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: NodaTime.TimeZones.TzdbZone1970Location.Country
    name: TzdbZone1970Location.Country
    nameWithType: TzdbZone1970Location.Country
    fullName: NodaTime.TimeZones.TzdbZone1970Location.Country
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: NodaTime.TimeZones.TzdbZone1970Location.Country
    name: TzdbZone1970Location.Country
    nameWithType: TzdbZone1970Location.Country
    fullName: NodaTime.TimeZones.TzdbZone1970Location.Country
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: System.IEquatable`1
  commentId: T:System.IEquatable`1
  isExternal: true
  name: IEquatable<T>
  nameWithType: IEquatable<T>
  fullName: System.IEquatable<T>
  nameWithType.vb: IEquatable(Of T)
  fullName.vb: System.IEquatable(Of T)
  name.vb: IEquatable(Of T)
  spec.csharp:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: NodaTime.TimeZones.TzdbZone1970Location.Country.Name*
  commentId: Overload:NodaTime.TimeZones.TzdbZone1970Location.Country.Name
  name: Name
  nameWithType: TzdbZone1970Location.Country.Name
  fullName: NodaTime.TimeZones.TzdbZone1970Location.Country.Name
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: NodaTime.TimeZones.TzdbZone1970Location.Country.Code*
  commentId: Overload:NodaTime.TimeZones.TzdbZone1970Location.Country.Code
  name: Code
  nameWithType: TzdbZone1970Location.Country.Code
  fullName: NodaTime.TimeZones.TzdbZone1970Location.Country.Code
- uid: NodaTime.TimeZones.TzdbZone1970Location.Country.#ctor*
  commentId: Overload:NodaTime.TimeZones.TzdbZone1970Location.Country.#ctor
  name: Country
  nameWithType: TzdbZone1970Location.Country.Country
  fullName: NodaTime.TimeZones.TzdbZone1970Location.Country.Country
- uid: NodaTime.TimeZones.TzdbZone1970Location.Country.Equals*
  commentId: Overload:NodaTime.TimeZones.TzdbZone1970Location.Country.Equals
  name: Equals
  nameWithType: TzdbZone1970Location.Country.Equals
  fullName: NodaTime.TimeZones.TzdbZone1970Location.Country.Equals
- uid: System.IEquatable{NodaTime.TimeZones.TzdbZone1970Location.Country}.Equals(NodaTime.TimeZones.TzdbZone1970Location.Country)
  commentId: M:System.IEquatable{NodaTime.TimeZones.TzdbZone1970Location.Country}.Equals(NodaTime.TimeZones.TzdbZone1970Location.Country)
  parent: System.IEquatable{NodaTime.TimeZones.TzdbZone1970Location.Country}
  definition: System.IEquatable`1.Equals(`0)
  name: Equals(TzdbZone1970Location.Country)
  nameWithType: IEquatable<TzdbZone1970Location.Country>.Equals(TzdbZone1970Location.Country)
  fullName: System.IEquatable<NodaTime.TimeZones.TzdbZone1970Location.Country>.Equals(NodaTime.TimeZones.TzdbZone1970Location.Country)
  nameWithType.vb: IEquatable(Of TzdbZone1970Location.Country).Equals(TzdbZone1970Location.Country)
  fullName.vb: System.IEquatable(Of NodaTime.TimeZones.TzdbZone1970Location.Country).Equals(NodaTime.TimeZones.TzdbZone1970Location.Country)
  spec.csharp:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    nameWithType: IEquatable<TzdbZone1970Location.Country>.Equals
    fullName: System.IEquatable<NodaTime.TimeZones.TzdbZone1970Location.Country>.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: NodaTime.TimeZones.TzdbZone1970Location.Country
    name: TzdbZone1970Location.Country
    nameWithType: TzdbZone1970Location.Country
    fullName: NodaTime.TimeZones.TzdbZone1970Location.Country
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    nameWithType: IEquatable(Of TzdbZone1970Location.Country).Equals
    fullName: System.IEquatable(Of NodaTime.TimeZones.TzdbZone1970Location.Country).Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: NodaTime.TimeZones.TzdbZone1970Location.Country
    name: TzdbZone1970Location.Country
    nameWithType: TzdbZone1970Location.Country
    fullName: NodaTime.TimeZones.TzdbZone1970Location.Country
  - name: )
    nameWithType: )
    fullName: )
- uid: NodaTime.TimeZones.TzdbZone1970Location.Country
  commentId: T:NodaTime.TimeZones.TzdbZone1970Location.Country
  parent: NodaTime.TimeZones
  name: TzdbZone1970Location.Country
  nameWithType: TzdbZone1970Location.Country
  fullName: NodaTime.TimeZones.TzdbZone1970Location.Country
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.IEquatable`1.Equals(`0)
  commentId: M:System.IEquatable`1.Equals(`0)
  isExternal: true
  name: Equals(T)
  nameWithType: IEquatable<T>.Equals(T)
  fullName: System.IEquatable<T>.Equals(T)
  nameWithType.vb: IEquatable(Of T).Equals(T)
  fullName.vb: System.IEquatable(Of T).Equals(T)
  spec.csharp:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    nameWithType: IEquatable<T>.Equals
    fullName: System.IEquatable<T>.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    nameWithType: IEquatable(Of T).Equals
    fullName: System.IEquatable(Of T).Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: NodaTime.TimeZones.TzdbZone1970Location.Country.GetHashCode*
  commentId: Overload:NodaTime.TimeZones.TzdbZone1970Location.Country.GetHashCode
  name: GetHashCode
  nameWithType: TzdbZone1970Location.Country.GetHashCode
  fullName: NodaTime.TimeZones.TzdbZone1970Location.Country.GetHashCode
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: NodaTime.TimeZones.TzdbZone1970Location.Country.ToString*
  commentId: Overload:NodaTime.TimeZones.TzdbZone1970Location.Country.ToString
  name: ToString
  nameWithType: TzdbZone1970Location.Country.ToString
  fullName: NodaTime.TimeZones.TzdbZone1970Location.Country.ToString
shouldSkipMarkup: true
