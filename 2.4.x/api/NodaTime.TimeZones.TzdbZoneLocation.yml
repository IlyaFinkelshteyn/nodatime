### YamlMime:ManagedReference
items:
- uid: NodaTime.TimeZones.TzdbZoneLocation
  commentId: T:NodaTime.TimeZones.TzdbZoneLocation
  id: TzdbZoneLocation
  parent: NodaTime.TimeZones
  children:
  - NodaTime.TimeZones.TzdbZoneLocation.#ctor(System.Int32,System.Int32,System.String,System.String,System.String,System.String)
  - NodaTime.TimeZones.TzdbZoneLocation.Comment
  - NodaTime.TimeZones.TzdbZoneLocation.CountryCode
  - NodaTime.TimeZones.TzdbZoneLocation.CountryName
  - NodaTime.TimeZones.TzdbZoneLocation.Latitude
  - NodaTime.TimeZones.TzdbZoneLocation.Longitude
  - NodaTime.TimeZones.TzdbZoneLocation.ZoneId
  langs:
  - csharp
  - vb
  name: TzdbZoneLocation
  nameWithType: TzdbZoneLocation
  fullName: NodaTime.TimeZones.TzdbZoneLocation
  type: Class
  source:
    remote:
      path: 2.4.x/src/NodaTime/TimeZones/TzdbZoneLocation.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: TzdbZoneLocation
    path: src/NodaTime/TimeZones/TzdbZoneLocation.cs
    startLine: 17
  assemblies:
  - NodaTime
  namespace: NodaTime.TimeZones
  summary: "\nA location entry generated from the &quot;zone.tab&quot; file in a TZDB release. This can be used to provide\nusers with a choice of time zone, although it is not internationalized.\n"
  example: []
  syntax:
    content: public sealed class TzdbZoneLocation
    content.vb: Public NotInheritable Class TzdbZoneLocation
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - sealed
  - class
  modifiers.vb:
  - Public
  - NotInheritable
  - Class
- uid: NodaTime.TimeZones.TzdbZoneLocation.Latitude
  commentId: P:NodaTime.TimeZones.TzdbZoneLocation.Latitude
  id: Latitude
  parent: NodaTime.TimeZones.TzdbZoneLocation
  langs:
  - csharp
  - vb
  name: Latitude
  nameWithType: TzdbZoneLocation.Latitude
  fullName: NodaTime.TimeZones.TzdbZoneLocation.Latitude
  type: Property
  source:
    remote:
      path: 2.4.x/src/NodaTime/TimeZones/TzdbZoneLocation.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: Latitude
    path: src/NodaTime/TimeZones/TzdbZoneLocation.cs
    startLine: 27
  assemblies:
  - NodaTime
  namespace: NodaTime.TimeZones
  summary: "\nGets the latitude in degrees; positive for North, negative for South.\n"
  remarks: The value will be in the range [-90, 90].
  example: []
  syntax:
    content: public double Latitude { get; }
    parameters: []
    return:
      type: System.Double
      description: The latitude in degrees; positive for North, negative for South.
    content.vb: Public ReadOnly Property Latitude As Double
  overload: NodaTime.TimeZones.TzdbZoneLocation.Latitude*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: NodaTime.TimeZones.TzdbZoneLocation.Longitude
  commentId: P:NodaTime.TimeZones.TzdbZoneLocation.Longitude
  id: Longitude
  parent: NodaTime.TimeZones.TzdbZoneLocation
  langs:
  - csharp
  - vb
  name: Longitude
  nameWithType: TzdbZoneLocation.Longitude
  fullName: NodaTime.TimeZones.TzdbZoneLocation.Longitude
  type: Property
  source:
    remote:
      path: 2.4.x/src/NodaTime/TimeZones/TzdbZoneLocation.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: Longitude
    path: src/NodaTime/TimeZones/TzdbZoneLocation.cs
    startLine: 34
  assemblies:
  - NodaTime
  namespace: NodaTime.TimeZones
  summary: "\nGets the longitude in degrees; positive for East, negative for West.\n"
  remarks: The value will be in the range [-180, 180].
  example: []
  syntax:
    content: public double Longitude { get; }
    parameters: []
    return:
      type: System.Double
      description: The longitude in degrees; positive for East, negative for West.
    content.vb: Public ReadOnly Property Longitude As Double
  overload: NodaTime.TimeZones.TzdbZoneLocation.Longitude*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: NodaTime.TimeZones.TzdbZoneLocation.CountryName
  commentId: P:NodaTime.TimeZones.TzdbZoneLocation.CountryName
  id: CountryName
  parent: NodaTime.TimeZones.TzdbZoneLocation
  langs:
  - csharp
  - vb
  name: CountryName
  nameWithType: TzdbZoneLocation.CountryName
  fullName: NodaTime.TimeZones.TzdbZoneLocation.CountryName
  type: Property
  source:
    remote:
      path: 2.4.x/src/NodaTime/TimeZones/TzdbZoneLocation.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: CountryName
    path: src/NodaTime/TimeZones/TzdbZoneLocation.cs
    startLine: 40
  assemblies:
  - NodaTime
  namespace: NodaTime.TimeZones
  summary: "\nGets the English name of the country containing the location, which is never empty.\n"
  example: []
  syntax:
    content: public string CountryName { get; }
    parameters: []
    return:
      type: System.String
      description: The English name of the country containing the location.
    content.vb: Public ReadOnly Property CountryName As String
  overload: NodaTime.TimeZones.TzdbZoneLocation.CountryName*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: NodaTime.TimeZones.TzdbZoneLocation.CountryCode
  commentId: P:NodaTime.TimeZones.TzdbZoneLocation.CountryCode
  id: CountryCode
  parent: NodaTime.TimeZones.TzdbZoneLocation
  langs:
  - csharp
  - vb
  name: CountryCode
  nameWithType: TzdbZoneLocation.CountryCode
  fullName: NodaTime.TimeZones.TzdbZoneLocation.CountryCode
  type: Property
  source:
    remote:
      path: 2.4.x/src/NodaTime/TimeZones/TzdbZoneLocation.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: CountryCode
    path: src/NodaTime/TimeZones/TzdbZoneLocation.cs
    startLine: 46
  assemblies:
  - NodaTime
  namespace: NodaTime.TimeZones
  summary: "\nGets the ISO-3166 2-letter country code for the country containing the location.\n"
  example: []
  syntax:
    content: public string CountryCode { get; }
    parameters: []
    return:
      type: System.String
      description: The ISO-3166 2-letter country code for the country containing the location.
    content.vb: Public ReadOnly Property CountryCode As String
  overload: NodaTime.TimeZones.TzdbZoneLocation.CountryCode*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: NodaTime.TimeZones.TzdbZoneLocation.ZoneId
  commentId: P:NodaTime.TimeZones.TzdbZoneLocation.ZoneId
  id: ZoneId
  parent: NodaTime.TimeZones.TzdbZoneLocation
  langs:
  - csharp
  - vb
  name: ZoneId
  nameWithType: TzdbZoneLocation.ZoneId
  fullName: NodaTime.TimeZones.TzdbZoneLocation.ZoneId
  type: Property
  source:
    remote:
      path: 2.4.x/src/NodaTime/TimeZones/TzdbZoneLocation.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: ZoneId
    path: src/NodaTime/TimeZones/TzdbZoneLocation.cs
    startLine: 54
  assemblies:
  - NodaTime
  namespace: NodaTime.TimeZones
  summary: "\nThe ID of the time zone for this location.\n"
  remarks: >
    If this mapping was fetched from a <xref href="NodaTime.TimeZones.TzdbDateTimeZoneSource" data-throw-if-not-resolved="false"></xref>, it will always be a valid ID within that source.
  example: []
  syntax:
    content: public string ZoneId { get; }
    parameters: []
    return:
      type: System.String
      description: The ID of the time zone for this location.
    content.vb: Public ReadOnly Property ZoneId As String
  overload: NodaTime.TimeZones.TzdbZoneLocation.ZoneId*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: NodaTime.TimeZones.TzdbZoneLocation.Comment
  commentId: P:NodaTime.TimeZones.TzdbZoneLocation.Comment
  id: Comment
  parent: NodaTime.TimeZones.TzdbZoneLocation
  langs:
  - csharp
  - vb
  name: Comment
  nameWithType: TzdbZoneLocation.Comment
  fullName: NodaTime.TimeZones.TzdbZoneLocation.Comment
  type: Property
  source:
    remote:
      path: 2.4.x/src/NodaTime/TimeZones/TzdbZoneLocation.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: Comment
    path: src/NodaTime/TimeZones/TzdbZoneLocation.cs
    startLine: 64
  assemblies:
  - NodaTime
  namespace: NodaTime.TimeZones
  summary: "\nGets the comment (in English) for the mapping, if any.\n"
  remarks: "\nThis is usually used to differentiate between locations in the same country.\nThis will return an empty string if no comment was provided in the original data.\n"
  example: []
  syntax:
    content: public string Comment { get; }
    parameters: []
    return:
      type: System.String
      description: The comment (in English) for the mapping, if any.
    content.vb: Public ReadOnly Property Comment As String
  overload: NodaTime.TimeZones.TzdbZoneLocation.Comment*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: NodaTime.TimeZones.TzdbZoneLocation.#ctor(System.Int32,System.Int32,System.String,System.String,System.String,System.String)
  commentId: M:NodaTime.TimeZones.TzdbZoneLocation.#ctor(System.Int32,System.Int32,System.String,System.String,System.String,System.String)
  id: '#ctor(System.Int32,System.Int32,System.String,System.String,System.String,System.String)'
  parent: NodaTime.TimeZones.TzdbZoneLocation
  langs:
  - csharp
  - vb
  name: TzdbZoneLocation(Int32, Int32, String, String, String, String)
  nameWithType: TzdbZoneLocation.TzdbZoneLocation(Int32, Int32, String, String, String, String)
  fullName: NodaTime.TimeZones.TzdbZoneLocation.TzdbZoneLocation(System.Int32, System.Int32, System.String, System.String, System.String, System.String)
  type: Constructor
  source:
    remote:
      path: 2.4.x/src/NodaTime/TimeZones/TzdbZoneLocation.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: .ctor
    path: src/NodaTime/TimeZones/TzdbZoneLocation.cs
    startLine: 79
  assemblies:
  - NodaTime
  namespace: NodaTime.TimeZones
  summary: "\nCreates a new location.\n"
  remarks: >
    This constructor is only public for the sake of testability. Non-test code should

    usually obtain locations from a <xref href="NodaTime.TimeZones.TzdbDateTimeZoneSource" data-throw-if-not-resolved="false"></xref>.
  example: []
  syntax:
    content: public TzdbZoneLocation(int latitudeSeconds, int longitudeSeconds, string countryName, string countryCode, string zoneId, string comment)
    parameters:
    - id: latitudeSeconds
      type: System.Int32
      description: Latitude of the location, in seconds.
    - id: longitudeSeconds
      type: System.Int32
      description: Longitude of the location, in seconds.
    - id: countryName
      type: System.String
      description: English country name of the location, in degrees. Must not be null.
    - id: countryCode
      type: System.String
      description: ISO-3166 country code of the location. Must not be null.
    - id: zoneId
      type: System.String
      description: Time zone identifier of the location. Must not be null.
    - id: comment
      type: System.String
      description: Optional comment. Must not be null, but may be empty.
    content.vb: Public Sub New(latitudeSeconds As Integer, longitudeSeconds As Integer, countryName As String, countryCode As String, zoneId As String, comment As String)
  overload: NodaTime.TimeZones.TzdbZoneLocation.#ctor*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: The latitude or longitude is invalid.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: NodaTime.TimeZones
  commentId: N:NodaTime.TimeZones
  name: NodaTime.TimeZones
  nameWithType: NodaTime.TimeZones
  fullName: NodaTime.TimeZones
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: NodaTime.TimeZones.TzdbZoneLocation.Latitude*
  commentId: Overload:NodaTime.TimeZones.TzdbZoneLocation.Latitude
  name: Latitude
  nameWithType: TzdbZoneLocation.Latitude
  fullName: NodaTime.TimeZones.TzdbZoneLocation.Latitude
- uid: System.Double
  commentId: T:System.Double
  parent: System
  isExternal: true
  name: Double
  nameWithType: Double
  fullName: System.Double
- uid: NodaTime.TimeZones.TzdbZoneLocation.Longitude*
  commentId: Overload:NodaTime.TimeZones.TzdbZoneLocation.Longitude
  name: Longitude
  nameWithType: TzdbZoneLocation.Longitude
  fullName: NodaTime.TimeZones.TzdbZoneLocation.Longitude
- uid: NodaTime.TimeZones.TzdbZoneLocation.CountryName*
  commentId: Overload:NodaTime.TimeZones.TzdbZoneLocation.CountryName
  name: CountryName
  nameWithType: TzdbZoneLocation.CountryName
  fullName: NodaTime.TimeZones.TzdbZoneLocation.CountryName
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: NodaTime.TimeZones.TzdbZoneLocation.CountryCode*
  commentId: Overload:NodaTime.TimeZones.TzdbZoneLocation.CountryCode
  name: CountryCode
  nameWithType: TzdbZoneLocation.CountryCode
  fullName: NodaTime.TimeZones.TzdbZoneLocation.CountryCode
- uid: NodaTime.TimeZones.TzdbDateTimeZoneSource
  commentId: T:NodaTime.TimeZones.TzdbDateTimeZoneSource
  parent: NodaTime.TimeZones
  name: TzdbDateTimeZoneSource
  nameWithType: TzdbDateTimeZoneSource
  fullName: NodaTime.TimeZones.TzdbDateTimeZoneSource
- uid: NodaTime.TimeZones.TzdbZoneLocation.ZoneId*
  commentId: Overload:NodaTime.TimeZones.TzdbZoneLocation.ZoneId
  name: ZoneId
  nameWithType: TzdbZoneLocation.ZoneId
  fullName: NodaTime.TimeZones.TzdbZoneLocation.ZoneId
- uid: NodaTime.TimeZones.TzdbZoneLocation.Comment*
  commentId: Overload:NodaTime.TimeZones.TzdbZoneLocation.Comment
  name: Comment
  nameWithType: TzdbZoneLocation.Comment
  fullName: NodaTime.TimeZones.TzdbZoneLocation.Comment
- uid: System.ArgumentOutOfRangeException
  commentId: T:System.ArgumentOutOfRangeException
  parent: System
  isExternal: true
  name: ArgumentOutOfRangeException
  nameWithType: ArgumentOutOfRangeException
  fullName: System.ArgumentOutOfRangeException
- uid: NodaTime.TimeZones.TzdbZoneLocation.#ctor*
  commentId: Overload:NodaTime.TimeZones.TzdbZoneLocation.#ctor
  name: TzdbZoneLocation
  nameWithType: TzdbZoneLocation.TzdbZoneLocation
  fullName: NodaTime.TimeZones.TzdbZoneLocation.TzdbZoneLocation
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
shouldSkipMarkup: true
