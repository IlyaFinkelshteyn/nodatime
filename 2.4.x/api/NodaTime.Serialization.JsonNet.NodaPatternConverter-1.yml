### YamlMime:ManagedReference
items:
- uid: NodaTime.Serialization.JsonNet.NodaPatternConverter`1
  commentId: T:NodaTime.Serialization.JsonNet.NodaPatternConverter`1
  id: NodaPatternConverter`1
  parent: NodaTime.Serialization.JsonNet
  children:
  - NodaTime.Serialization.JsonNet.NodaPatternConverter`1.#ctor(NodaTime.Text.IPattern{`0})
  - NodaTime.Serialization.JsonNet.NodaPatternConverter`1.#ctor(NodaTime.Text.IPattern{`0},System.Action{`0})
  - NodaTime.Serialization.JsonNet.NodaPatternConverter`1.ReadJsonImpl(Newtonsoft.Json.JsonReader,Newtonsoft.Json.JsonSerializer)
  - NodaTime.Serialization.JsonNet.NodaPatternConverter`1.WriteJsonImpl(Newtonsoft.Json.JsonWriter,`0,Newtonsoft.Json.JsonSerializer)
  langs:
  - csharp
  - vb
  name: NodaPatternConverter<T>
  nameWithType: NodaPatternConverter<T>
  fullName: NodaTime.Serialization.JsonNet.NodaPatternConverter<T>
  type: Class
  source:
    remote:
      path: 2.4.x/src/NodaTime.Serialization.JsonNet/NodaPatternConverter.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: NodaPatternConverter
    path: src/NodaTime.Serialization.JsonNet/NodaPatternConverter.cs
    startLine: 16
  assemblies:
  - NodaTime.Serialization.JsonNet
  namespace: NodaTime.Serialization.JsonNet
  summary: "\nA JSON converter for types which can be represented by a single string value, parsed or formatted\nfrom an <xref href=\"NodaTime.Text.IPattern%601\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: 'public sealed class NodaPatternConverter<T> : NodaConverterBase<T>'
    typeParameters:
    - id: T
      description: The type to convert to/from JSON.
    content.vb: >-
      Public NotInheritable Class NodaPatternConverter(Of T)
          Inherits NodaConverterBase(Of T)
  inheritance:
  - System.Object
  - Newtonsoft.Json.JsonConverter
  - NodaTime.Serialization.JsonNet.NodaConverterBase{{T}}
  inheritedMembers:
  - NodaTime.Serialization.JsonNet.NodaConverterBase{{T}}.CanConvert(System.Type)
  - NodaTime.Serialization.JsonNet.NodaConverterBase{{T}}.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)
  - NodaTime.Serialization.JsonNet.NodaConverterBase{{T}}.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)
  - Newtonsoft.Json.JsonConverter.GetSchema
  - Newtonsoft.Json.JsonConverter.CanRead
  - Newtonsoft.Json.JsonConverter.CanWrite
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  nameWithType.vb: NodaPatternConverter(Of T)
  modifiers.csharp:
  - public
  - sealed
  - class
  modifiers.vb:
  - Public
  - NotInheritable
  - Class
  fullName.vb: NodaTime.Serialization.JsonNet.NodaPatternConverter(Of T)
  name.vb: NodaPatternConverter(Of T)
- uid: NodaTime.Serialization.JsonNet.NodaPatternConverter`1.#ctor(NodaTime.Text.IPattern{`0})
  commentId: M:NodaTime.Serialization.JsonNet.NodaPatternConverter`1.#ctor(NodaTime.Text.IPattern{`0})
  id: '#ctor(NodaTime.Text.IPattern{`0})'
  parent: NodaTime.Serialization.JsonNet.NodaPatternConverter`1
  langs:
  - csharp
  - vb
  name: NodaPatternConverter(IPattern<T>)
  nameWithType: NodaPatternConverter<T>.NodaPatternConverter(IPattern<T>)
  fullName: NodaTime.Serialization.JsonNet.NodaPatternConverter<T>.NodaPatternConverter(NodaTime.Text.IPattern<T>)
  type: Constructor
  source:
    remote:
      path: 2.4.x/src/NodaTime.Serialization.JsonNet/NodaPatternConverter.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: .ctor
    path: src/NodaTime.Serialization.JsonNet/NodaPatternConverter.cs
    startLine: 26
  assemblies:
  - NodaTime.Serialization.JsonNet
  namespace: NodaTime.Serialization.JsonNet
  summary: "\nCreates a new instance with a pattern and no validator.\n"
  example: []
  syntax:
    content: public NodaPatternConverter(IPattern<T> pattern)
    parameters:
    - id: pattern
      type: NodaTime.Text.IPattern{{T}}
      description: The pattern to use for parsing and formatting.
    content.vb: Public Sub New(pattern As IPattern(Of T))
  overload: NodaTime.Serialization.JsonNet.NodaPatternConverter`1.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code data-dev-comment-type="paramref" class="paramref">pattern</code> is null.
  nameWithType.vb: NodaPatternConverter(Of T).NodaPatternConverter(IPattern(Of T))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: NodaTime.Serialization.JsonNet.NodaPatternConverter(Of T).NodaPatternConverter(NodaTime.Text.IPattern(Of T))
  name.vb: NodaPatternConverter(IPattern(Of T))
- uid: NodaTime.Serialization.JsonNet.NodaPatternConverter`1.#ctor(NodaTime.Text.IPattern{`0},System.Action{`0})
  commentId: M:NodaTime.Serialization.JsonNet.NodaPatternConverter`1.#ctor(NodaTime.Text.IPattern{`0},System.Action{`0})
  id: '#ctor(NodaTime.Text.IPattern{`0},System.Action{`0})'
  parent: NodaTime.Serialization.JsonNet.NodaPatternConverter`1
  langs:
  - csharp
  - vb
  name: NodaPatternConverter(IPattern<T>, Action<T>)
  nameWithType: NodaPatternConverter<T>.NodaPatternConverter(IPattern<T>, Action<T>)
  fullName: NodaTime.Serialization.JsonNet.NodaPatternConverter<T>.NodaPatternConverter(NodaTime.Text.IPattern<T>, System.Action<T>)
  type: Constructor
  source:
    remote:
      path: 2.4.x/src/NodaTime.Serialization.JsonNet/NodaPatternConverter.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: .ctor
    path: src/NodaTime.Serialization.JsonNet/NodaPatternConverter.cs
    startLine: 37
  assemblies:
  - NodaTime.Serialization.JsonNet
  namespace: NodaTime.Serialization.JsonNet
  summary: "\nCreates a new instance with a pattern and an optional validator. The validator will be called before each\nvalue is written, and may throw an exception to indicate that the value cannot be serialized.\n"
  example: []
  syntax:
    content: public NodaPatternConverter(IPattern<T> pattern, Action<T> validator)
    parameters:
    - id: pattern
      type: NodaTime.Text.IPattern{{T}}
      description: The pattern to use for parsing and formatting.
    - id: validator
      type: System.Action{{T}}
      description: The validator to call before writing values. May be null, indicating that no validation is required.
    content.vb: Public Sub New(pattern As IPattern(Of T), validator As Action(Of T))
  overload: NodaTime.Serialization.JsonNet.NodaPatternConverter`1.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code data-dev-comment-type="paramref" class="paramref">pattern</code> is null.
  nameWithType.vb: NodaPatternConverter(Of T).NodaPatternConverter(IPattern(Of T), Action(Of T))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: NodaTime.Serialization.JsonNet.NodaPatternConverter(Of T).NodaPatternConverter(NodaTime.Text.IPattern(Of T), System.Action(Of T))
  name.vb: NodaPatternConverter(IPattern(Of T), Action(Of T))
- uid: NodaTime.Serialization.JsonNet.NodaPatternConverter`1.ReadJsonImpl(Newtonsoft.Json.JsonReader,Newtonsoft.Json.JsonSerializer)
  commentId: M:NodaTime.Serialization.JsonNet.NodaPatternConverter`1.ReadJsonImpl(Newtonsoft.Json.JsonReader,Newtonsoft.Json.JsonSerializer)
  id: ReadJsonImpl(Newtonsoft.Json.JsonReader,Newtonsoft.Json.JsonSerializer)
  parent: NodaTime.Serialization.JsonNet.NodaPatternConverter`1
  langs:
  - csharp
  - vb
  name: ReadJsonImpl(JsonReader, JsonSerializer)
  nameWithType: NodaPatternConverter<T>.ReadJsonImpl(JsonReader, JsonSerializer)
  fullName: NodaTime.Serialization.JsonNet.NodaPatternConverter<T>.ReadJsonImpl(Newtonsoft.Json.JsonReader, Newtonsoft.Json.JsonSerializer)
  type: Method
  source:
    remote:
      path: 2.4.x/src/NodaTime.Serialization.JsonNet/NodaPatternConverter.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: ReadJsonImpl
    path: src/NodaTime.Serialization.JsonNet/NodaPatternConverter.cs
    startLine: 56
  assemblies:
  - NodaTime.Serialization.JsonNet
  namespace: NodaTime.Serialization.JsonNet
  summary: "\nImplemented by concrete subclasses, this performs the final conversion from a non-null JSON value to\na value of type T.\n"
  example: []
  syntax:
    content: protected override T ReadJsonImpl(JsonReader reader, JsonSerializer serializer)
    parameters:
    - id: reader
      type: Newtonsoft.Json.JsonReader
      description: The JSON reader to pull data from
    - id: serializer
      type: Newtonsoft.Json.JsonSerializer
      description: The serializer to use for nested serialization
    return:
      type: '{T}'
      description: The deserialized value of type T.
    content.vb: Protected Overrides Function ReadJsonImpl(reader As JsonReader, serializer As JsonSerializer) As T
  overridden: NodaTime.Serialization.JsonNet.NodaConverterBase{{T}}.ReadJsonImpl(Newtonsoft.Json.JsonReader,Newtonsoft.Json.JsonSerializer)
  overload: NodaTime.Serialization.JsonNet.NodaPatternConverter`1.ReadJsonImpl*
  nameWithType.vb: NodaPatternConverter(Of T).ReadJsonImpl(JsonReader, JsonSerializer)
  modifiers.csharp:
  - protected
  - override
  modifiers.vb:
  - Protected
  - Overrides
  fullName.vb: NodaTime.Serialization.JsonNet.NodaPatternConverter(Of T).ReadJsonImpl(Newtonsoft.Json.JsonReader, Newtonsoft.Json.JsonSerializer)
- uid: NodaTime.Serialization.JsonNet.NodaPatternConverter`1.WriteJsonImpl(Newtonsoft.Json.JsonWriter,`0,Newtonsoft.Json.JsonSerializer)
  commentId: M:NodaTime.Serialization.JsonNet.NodaPatternConverter`1.WriteJsonImpl(Newtonsoft.Json.JsonWriter,`0,Newtonsoft.Json.JsonSerializer)
  id: WriteJsonImpl(Newtonsoft.Json.JsonWriter,`0,Newtonsoft.Json.JsonSerializer)
  parent: NodaTime.Serialization.JsonNet.NodaPatternConverter`1
  langs:
  - csharp
  - vb
  name: WriteJsonImpl(JsonWriter, T, JsonSerializer)
  nameWithType: NodaPatternConverter<T>.WriteJsonImpl(JsonWriter, T, JsonSerializer)
  fullName: NodaTime.Serialization.JsonNet.NodaPatternConverter<T>.WriteJsonImpl(Newtonsoft.Json.JsonWriter, T, Newtonsoft.Json.JsonSerializer)
  type: Method
  source:
    remote:
      path: 2.4.x/src/NodaTime.Serialization.JsonNet/NodaPatternConverter.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: WriteJsonImpl
    path: src/NodaTime.Serialization.JsonNet/NodaPatternConverter.cs
    startLine: 73
  assemblies:
  - NodaTime.Serialization.JsonNet
  namespace: NodaTime.Serialization.JsonNet
  summary: "\nWrites the formatted value to the writer.\n"
  example: []
  syntax:
    content: protected override void WriteJsonImpl(JsonWriter writer, T value, JsonSerializer serializer)
    parameters:
    - id: writer
      type: Newtonsoft.Json.JsonWriter
      description: The writer to write JSON data to
    - id: value
      type: '{T}'
      description: The value to serializer
    - id: serializer
      type: Newtonsoft.Json.JsonSerializer
      description: The serializer to use for nested serialization
    content.vb: Protected Overrides Sub WriteJsonImpl(writer As JsonWriter, value As T, serializer As JsonSerializer)
  overridden: NodaTime.Serialization.JsonNet.NodaConverterBase{{T}}.WriteJsonImpl(Newtonsoft.Json.JsonWriter,{T},Newtonsoft.Json.JsonSerializer)
  overload: NodaTime.Serialization.JsonNet.NodaPatternConverter`1.WriteJsonImpl*
  nameWithType.vb: NodaPatternConverter(Of T).WriteJsonImpl(JsonWriter, T, JsonSerializer)
  modifiers.csharp:
  - protected
  - override
  modifiers.vb:
  - Protected
  - Overrides
  fullName.vb: NodaTime.Serialization.JsonNet.NodaPatternConverter(Of T).WriteJsonImpl(Newtonsoft.Json.JsonWriter, T, Newtonsoft.Json.JsonSerializer)
references:
- uid: NodaTime.Text.IPattern`1
  commentId: T:NodaTime.Text.IPattern`1
  name: IPattern<T>
  nameWithType: IPattern<T>
  fullName: NodaTime.Text.IPattern<T>
  nameWithType.vb: IPattern(Of T)
  fullName.vb: NodaTime.Text.IPattern(Of T)
  name.vb: IPattern(Of T)
  spec.csharp:
  - uid: NodaTime.Text.IPattern`1
    name: IPattern
    nameWithType: IPattern
    fullName: NodaTime.Text.IPattern
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: NodaTime.Text.IPattern`1
    name: IPattern
    nameWithType: IPattern
    fullName: NodaTime.Text.IPattern
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: NodaTime.Serialization.JsonNet
  commentId: N:NodaTime.Serialization.JsonNet
  name: NodaTime.Serialization.JsonNet
  nameWithType: NodaTime.Serialization.JsonNet
  fullName: NodaTime.Serialization.JsonNet
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Newtonsoft.Json.JsonConverter
  commentId: T:Newtonsoft.Json.JsonConverter
  parent: Newtonsoft.Json
  isExternal: true
  name: JsonConverter
  nameWithType: JsonConverter
  fullName: Newtonsoft.Json.JsonConverter
- uid: NodaTime.Serialization.JsonNet.NodaConverterBase{{T}}
  commentId: T:NodaTime.Serialization.JsonNet.NodaConverterBase{`0}
  parent: NodaTime.Serialization.JsonNet
  definition: NodaTime.Serialization.JsonNet.NodaConverterBase`1
  name: NodaConverterBase<T>
  nameWithType: NodaConverterBase<T>
  fullName: NodaTime.Serialization.JsonNet.NodaConverterBase<T>
  nameWithType.vb: NodaConverterBase(Of T)
  fullName.vb: NodaTime.Serialization.JsonNet.NodaConverterBase(Of T)
  name.vb: NodaConverterBase(Of T)
  spec.csharp:
  - uid: NodaTime.Serialization.JsonNet.NodaConverterBase`1
    name: NodaConverterBase
    nameWithType: NodaConverterBase
    fullName: NodaTime.Serialization.JsonNet.NodaConverterBase
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: NodaTime.Serialization.JsonNet.NodaConverterBase`1
    name: NodaConverterBase
    nameWithType: NodaConverterBase
    fullName: NodaTime.Serialization.JsonNet.NodaConverterBase
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: NodaTime.Serialization.JsonNet.NodaConverterBase{{T}}.CanConvert(System.Type)
  commentId: M:NodaTime.Serialization.JsonNet.NodaConverterBase{`0}.CanConvert(System.Type)
  parent: NodaTime.Serialization.JsonNet.NodaConverterBase{{T}}
  definition: NodaTime.Serialization.JsonNet.NodaConverterBase`1.CanConvert(System.Type)
  name: CanConvert(Type)
  nameWithType: NodaConverterBase<T>.CanConvert(Type)
  fullName: NodaTime.Serialization.JsonNet.NodaConverterBase<T>.CanConvert(System.Type)
  nameWithType.vb: NodaConverterBase(Of T).CanConvert(Type)
  fullName.vb: NodaTime.Serialization.JsonNet.NodaConverterBase(Of T).CanConvert(System.Type)
  spec.csharp:
  - uid: NodaTime.Serialization.JsonNet.NodaConverterBase`1.CanConvert(System.Type)
    name: CanConvert
    nameWithType: NodaConverterBase<T>.CanConvert
    fullName: NodaTime.Serialization.JsonNet.NodaConverterBase<T>.CanConvert
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NodaTime.Serialization.JsonNet.NodaConverterBase`1.CanConvert(System.Type)
    name: CanConvert
    nameWithType: NodaConverterBase(Of T).CanConvert
    fullName: NodaTime.Serialization.JsonNet.NodaConverterBase(Of T).CanConvert
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: NodaTime.Serialization.JsonNet.NodaConverterBase{{T}}.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)
  commentId: M:NodaTime.Serialization.JsonNet.NodaConverterBase{`0}.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)
  parent: NodaTime.Serialization.JsonNet.NodaConverterBase{{T}}
  definition: NodaTime.Serialization.JsonNet.NodaConverterBase`1.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)
  name: ReadJson(JsonReader, Type, Object, JsonSerializer)
  nameWithType: NodaConverterBase<T>.ReadJson(JsonReader, Type, Object, JsonSerializer)
  fullName: NodaTime.Serialization.JsonNet.NodaConverterBase<T>.ReadJson(Newtonsoft.Json.JsonReader, System.Type, System.Object, Newtonsoft.Json.JsonSerializer)
  nameWithType.vb: NodaConverterBase(Of T).ReadJson(JsonReader, Type, Object, JsonSerializer)
  fullName.vb: NodaTime.Serialization.JsonNet.NodaConverterBase(Of T).ReadJson(Newtonsoft.Json.JsonReader, System.Type, System.Object, Newtonsoft.Json.JsonSerializer)
  spec.csharp:
  - uid: NodaTime.Serialization.JsonNet.NodaConverterBase`1.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)
    name: ReadJson
    nameWithType: NodaConverterBase<T>.ReadJson
    fullName: NodaTime.Serialization.JsonNet.NodaConverterBase<T>.ReadJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: Newtonsoft.Json.JsonReader
    name: JsonReader
    nameWithType: JsonReader
    fullName: Newtonsoft.Json.JsonReader
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Newtonsoft.Json.JsonSerializer
    name: JsonSerializer
    nameWithType: JsonSerializer
    fullName: Newtonsoft.Json.JsonSerializer
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NodaTime.Serialization.JsonNet.NodaConverterBase`1.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)
    name: ReadJson
    nameWithType: NodaConverterBase(Of T).ReadJson
    fullName: NodaTime.Serialization.JsonNet.NodaConverterBase(Of T).ReadJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: Newtonsoft.Json.JsonReader
    name: JsonReader
    nameWithType: JsonReader
    fullName: Newtonsoft.Json.JsonReader
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Newtonsoft.Json.JsonSerializer
    name: JsonSerializer
    nameWithType: JsonSerializer
    fullName: Newtonsoft.Json.JsonSerializer
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: NodaTime.Serialization.JsonNet.NodaConverterBase{{T}}.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)
  commentId: M:NodaTime.Serialization.JsonNet.NodaConverterBase{`0}.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)
  parent: NodaTime.Serialization.JsonNet.NodaConverterBase{{T}}
  definition: NodaTime.Serialization.JsonNet.NodaConverterBase`1.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)
  name: WriteJson(JsonWriter, Object, JsonSerializer)
  nameWithType: NodaConverterBase<T>.WriteJson(JsonWriter, Object, JsonSerializer)
  fullName: NodaTime.Serialization.JsonNet.NodaConverterBase<T>.WriteJson(Newtonsoft.Json.JsonWriter, System.Object, Newtonsoft.Json.JsonSerializer)
  nameWithType.vb: NodaConverterBase(Of T).WriteJson(JsonWriter, Object, JsonSerializer)
  fullName.vb: NodaTime.Serialization.JsonNet.NodaConverterBase(Of T).WriteJson(Newtonsoft.Json.JsonWriter, System.Object, Newtonsoft.Json.JsonSerializer)
  spec.csharp:
  - uid: NodaTime.Serialization.JsonNet.NodaConverterBase`1.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)
    name: WriteJson
    nameWithType: NodaConverterBase<T>.WriteJson
    fullName: NodaTime.Serialization.JsonNet.NodaConverterBase<T>.WriteJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: Newtonsoft.Json.JsonWriter
    name: JsonWriter
    nameWithType: JsonWriter
    fullName: Newtonsoft.Json.JsonWriter
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Newtonsoft.Json.JsonSerializer
    name: JsonSerializer
    nameWithType: JsonSerializer
    fullName: Newtonsoft.Json.JsonSerializer
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NodaTime.Serialization.JsonNet.NodaConverterBase`1.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)
    name: WriteJson
    nameWithType: NodaConverterBase(Of T).WriteJson
    fullName: NodaTime.Serialization.JsonNet.NodaConverterBase(Of T).WriteJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: Newtonsoft.Json.JsonWriter
    name: JsonWriter
    nameWithType: JsonWriter
    fullName: Newtonsoft.Json.JsonWriter
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Newtonsoft.Json.JsonSerializer
    name: JsonSerializer
    nameWithType: JsonSerializer
    fullName: Newtonsoft.Json.JsonSerializer
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Newtonsoft.Json.JsonConverter.GetSchema
  commentId: M:Newtonsoft.Json.JsonConverter.GetSchema
  parent: Newtonsoft.Json.JsonConverter
  isExternal: true
  name: GetSchema()
  nameWithType: JsonConverter.GetSchema()
  fullName: Newtonsoft.Json.JsonConverter.GetSchema()
  spec.csharp:
  - uid: Newtonsoft.Json.JsonConverter.GetSchema
    name: GetSchema
    nameWithType: JsonConverter.GetSchema
    fullName: Newtonsoft.Json.JsonConverter.GetSchema
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Newtonsoft.Json.JsonConverter.GetSchema
    name: GetSchema
    nameWithType: JsonConverter.GetSchema
    fullName: Newtonsoft.Json.JsonConverter.GetSchema
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Newtonsoft.Json.JsonConverter.CanRead
  commentId: P:Newtonsoft.Json.JsonConverter.CanRead
  parent: Newtonsoft.Json.JsonConverter
  isExternal: true
  name: CanRead
  nameWithType: JsonConverter.CanRead
  fullName: Newtonsoft.Json.JsonConverter.CanRead
- uid: Newtonsoft.Json.JsonConverter.CanWrite
  commentId: P:Newtonsoft.Json.JsonConverter.CanWrite
  parent: Newtonsoft.Json.JsonConverter
  isExternal: true
  name: CanWrite
  nameWithType: JsonConverter.CanWrite
  fullName: Newtonsoft.Json.JsonConverter.CanWrite
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Newtonsoft.Json
  commentId: N:Newtonsoft.Json
  isExternal: true
  name: Newtonsoft.Json
  nameWithType: Newtonsoft.Json
  fullName: Newtonsoft.Json
- uid: NodaTime.Serialization.JsonNet.NodaConverterBase`1
  commentId: T:NodaTime.Serialization.JsonNet.NodaConverterBase`1
  name: NodaConverterBase<T>
  nameWithType: NodaConverterBase<T>
  fullName: NodaTime.Serialization.JsonNet.NodaConverterBase<T>
  nameWithType.vb: NodaConverterBase(Of T)
  fullName.vb: NodaTime.Serialization.JsonNet.NodaConverterBase(Of T)
  name.vb: NodaConverterBase(Of T)
  spec.csharp:
  - uid: NodaTime.Serialization.JsonNet.NodaConverterBase`1
    name: NodaConverterBase
    nameWithType: NodaConverterBase
    fullName: NodaTime.Serialization.JsonNet.NodaConverterBase
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: NodaTime.Serialization.JsonNet.NodaConverterBase`1
    name: NodaConverterBase
    nameWithType: NodaConverterBase
    fullName: NodaTime.Serialization.JsonNet.NodaConverterBase
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: NodaTime.Serialization.JsonNet.NodaConverterBase`1.CanConvert(System.Type)
  commentId: M:NodaTime.Serialization.JsonNet.NodaConverterBase`1.CanConvert(System.Type)
  isExternal: true
  name: CanConvert(Type)
  nameWithType: NodaConverterBase<T>.CanConvert(Type)
  fullName: NodaTime.Serialization.JsonNet.NodaConverterBase<T>.CanConvert(System.Type)
  nameWithType.vb: NodaConverterBase(Of T).CanConvert(Type)
  fullName.vb: NodaTime.Serialization.JsonNet.NodaConverterBase(Of T).CanConvert(System.Type)
  spec.csharp:
  - uid: NodaTime.Serialization.JsonNet.NodaConverterBase`1.CanConvert(System.Type)
    name: CanConvert
    nameWithType: NodaConverterBase<T>.CanConvert
    fullName: NodaTime.Serialization.JsonNet.NodaConverterBase<T>.CanConvert
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NodaTime.Serialization.JsonNet.NodaConverterBase`1.CanConvert(System.Type)
    name: CanConvert
    nameWithType: NodaConverterBase(Of T).CanConvert
    fullName: NodaTime.Serialization.JsonNet.NodaConverterBase(Of T).CanConvert
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: NodaTime.Serialization.JsonNet.NodaConverterBase`1.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)
  commentId: M:NodaTime.Serialization.JsonNet.NodaConverterBase`1.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)
  isExternal: true
  name: ReadJson(JsonReader, Type, Object, JsonSerializer)
  nameWithType: NodaConverterBase<T>.ReadJson(JsonReader, Type, Object, JsonSerializer)
  fullName: NodaTime.Serialization.JsonNet.NodaConverterBase<T>.ReadJson(Newtonsoft.Json.JsonReader, System.Type, System.Object, Newtonsoft.Json.JsonSerializer)
  nameWithType.vb: NodaConverterBase(Of T).ReadJson(JsonReader, Type, Object, JsonSerializer)
  fullName.vb: NodaTime.Serialization.JsonNet.NodaConverterBase(Of T).ReadJson(Newtonsoft.Json.JsonReader, System.Type, System.Object, Newtonsoft.Json.JsonSerializer)
  spec.csharp:
  - uid: NodaTime.Serialization.JsonNet.NodaConverterBase`1.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)
    name: ReadJson
    nameWithType: NodaConverterBase<T>.ReadJson
    fullName: NodaTime.Serialization.JsonNet.NodaConverterBase<T>.ReadJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: Newtonsoft.Json.JsonReader
    name: JsonReader
    nameWithType: JsonReader
    fullName: Newtonsoft.Json.JsonReader
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Newtonsoft.Json.JsonSerializer
    name: JsonSerializer
    nameWithType: JsonSerializer
    fullName: Newtonsoft.Json.JsonSerializer
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NodaTime.Serialization.JsonNet.NodaConverterBase`1.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)
    name: ReadJson
    nameWithType: NodaConverterBase(Of T).ReadJson
    fullName: NodaTime.Serialization.JsonNet.NodaConverterBase(Of T).ReadJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: Newtonsoft.Json.JsonReader
    name: JsonReader
    nameWithType: JsonReader
    fullName: Newtonsoft.Json.JsonReader
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Newtonsoft.Json.JsonSerializer
    name: JsonSerializer
    nameWithType: JsonSerializer
    fullName: Newtonsoft.Json.JsonSerializer
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: NodaTime.Serialization.JsonNet.NodaConverterBase`1.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)
  commentId: M:NodaTime.Serialization.JsonNet.NodaConverterBase`1.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)
  isExternal: true
  name: WriteJson(JsonWriter, Object, JsonSerializer)
  nameWithType: NodaConverterBase<T>.WriteJson(JsonWriter, Object, JsonSerializer)
  fullName: NodaTime.Serialization.JsonNet.NodaConverterBase<T>.WriteJson(Newtonsoft.Json.JsonWriter, System.Object, Newtonsoft.Json.JsonSerializer)
  nameWithType.vb: NodaConverterBase(Of T).WriteJson(JsonWriter, Object, JsonSerializer)
  fullName.vb: NodaTime.Serialization.JsonNet.NodaConverterBase(Of T).WriteJson(Newtonsoft.Json.JsonWriter, System.Object, Newtonsoft.Json.JsonSerializer)
  spec.csharp:
  - uid: NodaTime.Serialization.JsonNet.NodaConverterBase`1.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)
    name: WriteJson
    nameWithType: NodaConverterBase<T>.WriteJson
    fullName: NodaTime.Serialization.JsonNet.NodaConverterBase<T>.WriteJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: Newtonsoft.Json.JsonWriter
    name: JsonWriter
    nameWithType: JsonWriter
    fullName: Newtonsoft.Json.JsonWriter
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Newtonsoft.Json.JsonSerializer
    name: JsonSerializer
    nameWithType: JsonSerializer
    fullName: Newtonsoft.Json.JsonSerializer
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NodaTime.Serialization.JsonNet.NodaConverterBase`1.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)
    name: WriteJson
    nameWithType: NodaConverterBase(Of T).WriteJson
    fullName: NodaTime.Serialization.JsonNet.NodaConverterBase(Of T).WriteJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: Newtonsoft.Json.JsonWriter
    name: JsonWriter
    nameWithType: JsonWriter
    fullName: Newtonsoft.Json.JsonWriter
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Newtonsoft.Json.JsonSerializer
    name: JsonSerializer
    nameWithType: JsonSerializer
    fullName: Newtonsoft.Json.JsonSerializer
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.ArgumentNullException
  commentId: T:System.ArgumentNullException
  isExternal: true
- uid: NodaTime.Serialization.JsonNet.NodaPatternConverter`1.#ctor*
  commentId: Overload:NodaTime.Serialization.JsonNet.NodaPatternConverter`1.#ctor
  name: NodaPatternConverter
  nameWithType: NodaPatternConverter<T>.NodaPatternConverter
  fullName: NodaTime.Serialization.JsonNet.NodaPatternConverter<T>.NodaPatternConverter
  nameWithType.vb: NodaPatternConverter(Of T).NodaPatternConverter
  fullName.vb: NodaTime.Serialization.JsonNet.NodaPatternConverter(Of T).NodaPatternConverter
- uid: NodaTime.Text.IPattern{{T}}
  commentId: T:NodaTime.Text.IPattern{`0}
  parent: NodaTime.Text
  definition: NodaTime.Text.IPattern`1
  name: IPattern<T>
  nameWithType: IPattern<T>
  fullName: NodaTime.Text.IPattern<T>
  nameWithType.vb: IPattern(Of T)
  fullName.vb: NodaTime.Text.IPattern(Of T)
  name.vb: IPattern(Of T)
  spec.csharp:
  - uid: NodaTime.Text.IPattern`1
    name: IPattern
    nameWithType: IPattern
    fullName: NodaTime.Text.IPattern
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: NodaTime.Text.IPattern`1
    name: IPattern
    nameWithType: IPattern
    fullName: NodaTime.Text.IPattern
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: NodaTime.Text
  commentId: N:NodaTime.Text
  name: NodaTime.Text
  nameWithType: NodaTime.Text
  fullName: NodaTime.Text
- uid: System.Action{{T}}
  commentId: T:System.Action{`0}
  parent: System
  definition: System.Action`1
  name: Action<T>
  nameWithType: Action<T>
  fullName: System.Action<T>
  nameWithType.vb: Action(Of T)
  fullName.vb: System.Action(Of T)
  name.vb: Action(Of T)
  spec.csharp:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Action`1
  commentId: T:System.Action`1
  isExternal: true
  name: Action<T>
  nameWithType: Action<T>
  fullName: System.Action<T>
  nameWithType.vb: Action(Of T)
  fullName.vb: System.Action(Of T)
  name.vb: Action(Of T)
  spec.csharp:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: NodaTime.Serialization.JsonNet.NodaConverterBase{{T}}.ReadJsonImpl(Newtonsoft.Json.JsonReader,Newtonsoft.Json.JsonSerializer)
  commentId: M:NodaTime.Serialization.JsonNet.NodaConverterBase{`0}.ReadJsonImpl(Newtonsoft.Json.JsonReader,Newtonsoft.Json.JsonSerializer)
  parent: NodaTime.Serialization.JsonNet.NodaConverterBase{{T}}
  definition: NodaTime.Serialization.JsonNet.NodaConverterBase`1.ReadJsonImpl(Newtonsoft.Json.JsonReader,Newtonsoft.Json.JsonSerializer)
  name: ReadJsonImpl(JsonReader, JsonSerializer)
  nameWithType: NodaConverterBase<T>.ReadJsonImpl(JsonReader, JsonSerializer)
  fullName: NodaTime.Serialization.JsonNet.NodaConverterBase<T>.ReadJsonImpl(Newtonsoft.Json.JsonReader, Newtonsoft.Json.JsonSerializer)
  nameWithType.vb: NodaConverterBase(Of T).ReadJsonImpl(JsonReader, JsonSerializer)
  fullName.vb: NodaTime.Serialization.JsonNet.NodaConverterBase(Of T).ReadJsonImpl(Newtonsoft.Json.JsonReader, Newtonsoft.Json.JsonSerializer)
  spec.csharp:
  - uid: NodaTime.Serialization.JsonNet.NodaConverterBase`1.ReadJsonImpl(Newtonsoft.Json.JsonReader,Newtonsoft.Json.JsonSerializer)
    name: ReadJsonImpl
    nameWithType: NodaConverterBase<T>.ReadJsonImpl
    fullName: NodaTime.Serialization.JsonNet.NodaConverterBase<T>.ReadJsonImpl
  - name: (
    nameWithType: (
    fullName: (
  - uid: Newtonsoft.Json.JsonReader
    name: JsonReader
    nameWithType: JsonReader
    fullName: Newtonsoft.Json.JsonReader
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Newtonsoft.Json.JsonSerializer
    name: JsonSerializer
    nameWithType: JsonSerializer
    fullName: Newtonsoft.Json.JsonSerializer
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NodaTime.Serialization.JsonNet.NodaConverterBase`1.ReadJsonImpl(Newtonsoft.Json.JsonReader,Newtonsoft.Json.JsonSerializer)
    name: ReadJsonImpl
    nameWithType: NodaConverterBase(Of T).ReadJsonImpl
    fullName: NodaTime.Serialization.JsonNet.NodaConverterBase(Of T).ReadJsonImpl
  - name: (
    nameWithType: (
    fullName: (
  - uid: Newtonsoft.Json.JsonReader
    name: JsonReader
    nameWithType: JsonReader
    fullName: Newtonsoft.Json.JsonReader
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Newtonsoft.Json.JsonSerializer
    name: JsonSerializer
    nameWithType: JsonSerializer
    fullName: Newtonsoft.Json.JsonSerializer
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: NodaTime.Serialization.JsonNet.NodaPatternConverter`1.ReadJsonImpl*
  commentId: Overload:NodaTime.Serialization.JsonNet.NodaPatternConverter`1.ReadJsonImpl
  name: ReadJsonImpl
  nameWithType: NodaPatternConverter<T>.ReadJsonImpl
  fullName: NodaTime.Serialization.JsonNet.NodaPatternConverter<T>.ReadJsonImpl
  nameWithType.vb: NodaPatternConverter(Of T).ReadJsonImpl
  fullName.vb: NodaTime.Serialization.JsonNet.NodaPatternConverter(Of T).ReadJsonImpl
- uid: Newtonsoft.Json.JsonReader
  commentId: T:Newtonsoft.Json.JsonReader
  parent: Newtonsoft.Json
  isExternal: true
  name: JsonReader
  nameWithType: JsonReader
  fullName: Newtonsoft.Json.JsonReader
- uid: Newtonsoft.Json.JsonSerializer
  commentId: T:Newtonsoft.Json.JsonSerializer
  parent: Newtonsoft.Json
  isExternal: true
  name: JsonSerializer
  nameWithType: JsonSerializer
  fullName: Newtonsoft.Json.JsonSerializer
- uid: '{T}'
  commentId: '!:T'
  definition: T
  name: T
  nameWithType: T
  fullName: T
- uid: NodaTime.Serialization.JsonNet.NodaConverterBase`1.ReadJsonImpl(Newtonsoft.Json.JsonReader,Newtonsoft.Json.JsonSerializer)
  commentId: M:NodaTime.Serialization.JsonNet.NodaConverterBase`1.ReadJsonImpl(Newtonsoft.Json.JsonReader,Newtonsoft.Json.JsonSerializer)
  isExternal: true
  name: ReadJsonImpl(JsonReader, JsonSerializer)
  nameWithType: NodaConverterBase<T>.ReadJsonImpl(JsonReader, JsonSerializer)
  fullName: NodaTime.Serialization.JsonNet.NodaConverterBase<T>.ReadJsonImpl(Newtonsoft.Json.JsonReader, Newtonsoft.Json.JsonSerializer)
  nameWithType.vb: NodaConverterBase(Of T).ReadJsonImpl(JsonReader, JsonSerializer)
  fullName.vb: NodaTime.Serialization.JsonNet.NodaConverterBase(Of T).ReadJsonImpl(Newtonsoft.Json.JsonReader, Newtonsoft.Json.JsonSerializer)
  spec.csharp:
  - uid: NodaTime.Serialization.JsonNet.NodaConverterBase`1.ReadJsonImpl(Newtonsoft.Json.JsonReader,Newtonsoft.Json.JsonSerializer)
    name: ReadJsonImpl
    nameWithType: NodaConverterBase<T>.ReadJsonImpl
    fullName: NodaTime.Serialization.JsonNet.NodaConverterBase<T>.ReadJsonImpl
  - name: (
    nameWithType: (
    fullName: (
  - uid: Newtonsoft.Json.JsonReader
    name: JsonReader
    nameWithType: JsonReader
    fullName: Newtonsoft.Json.JsonReader
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Newtonsoft.Json.JsonSerializer
    name: JsonSerializer
    nameWithType: JsonSerializer
    fullName: Newtonsoft.Json.JsonSerializer
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NodaTime.Serialization.JsonNet.NodaConverterBase`1.ReadJsonImpl(Newtonsoft.Json.JsonReader,Newtonsoft.Json.JsonSerializer)
    name: ReadJsonImpl
    nameWithType: NodaConverterBase(Of T).ReadJsonImpl
    fullName: NodaTime.Serialization.JsonNet.NodaConverterBase(Of T).ReadJsonImpl
  - name: (
    nameWithType: (
    fullName: (
  - uid: Newtonsoft.Json.JsonReader
    name: JsonReader
    nameWithType: JsonReader
    fullName: Newtonsoft.Json.JsonReader
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Newtonsoft.Json.JsonSerializer
    name: JsonSerializer
    nameWithType: JsonSerializer
    fullName: Newtonsoft.Json.JsonSerializer
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: T
  name: T
  nameWithType: T
  fullName: T
- uid: NodaTime.Serialization.JsonNet.NodaConverterBase{{T}}.WriteJsonImpl(Newtonsoft.Json.JsonWriter,{T},Newtonsoft.Json.JsonSerializer)
  commentId: M:NodaTime.Serialization.JsonNet.NodaConverterBase{`0}.WriteJsonImpl(Newtonsoft.Json.JsonWriter,`0,Newtonsoft.Json.JsonSerializer)
  parent: NodaTime.Serialization.JsonNet.NodaConverterBase{{T}}
  definition: NodaTime.Serialization.JsonNet.NodaConverterBase`1.WriteJsonImpl(Newtonsoft.Json.JsonWriter,`0,Newtonsoft.Json.JsonSerializer)
  name: WriteJsonImpl(JsonWriter, T, JsonSerializer)
  nameWithType: NodaConverterBase<T>.WriteJsonImpl(JsonWriter, T, JsonSerializer)
  fullName: NodaTime.Serialization.JsonNet.NodaConverterBase<T>.WriteJsonImpl(Newtonsoft.Json.JsonWriter, T, Newtonsoft.Json.JsonSerializer)
  nameWithType.vb: NodaConverterBase(Of T).WriteJsonImpl(JsonWriter, T, JsonSerializer)
  fullName.vb: NodaTime.Serialization.JsonNet.NodaConverterBase(Of T).WriteJsonImpl(Newtonsoft.Json.JsonWriter, T, Newtonsoft.Json.JsonSerializer)
  spec.csharp:
  - uid: NodaTime.Serialization.JsonNet.NodaConverterBase`1.WriteJsonImpl(Newtonsoft.Json.JsonWriter,`0,Newtonsoft.Json.JsonSerializer)
    name: WriteJsonImpl
    nameWithType: NodaConverterBase<T>.WriteJsonImpl
    fullName: NodaTime.Serialization.JsonNet.NodaConverterBase<T>.WriteJsonImpl
  - name: (
    nameWithType: (
    fullName: (
  - uid: Newtonsoft.Json.JsonWriter
    name: JsonWriter
    nameWithType: JsonWriter
    fullName: Newtonsoft.Json.JsonWriter
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Newtonsoft.Json.JsonSerializer
    name: JsonSerializer
    nameWithType: JsonSerializer
    fullName: Newtonsoft.Json.JsonSerializer
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NodaTime.Serialization.JsonNet.NodaConverterBase`1.WriteJsonImpl(Newtonsoft.Json.JsonWriter,`0,Newtonsoft.Json.JsonSerializer)
    name: WriteJsonImpl
    nameWithType: NodaConverterBase(Of T).WriteJsonImpl
    fullName: NodaTime.Serialization.JsonNet.NodaConverterBase(Of T).WriteJsonImpl
  - name: (
    nameWithType: (
    fullName: (
  - uid: Newtonsoft.Json.JsonWriter
    name: JsonWriter
    nameWithType: JsonWriter
    fullName: Newtonsoft.Json.JsonWriter
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Newtonsoft.Json.JsonSerializer
    name: JsonSerializer
    nameWithType: JsonSerializer
    fullName: Newtonsoft.Json.JsonSerializer
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: NodaTime.Serialization.JsonNet.NodaPatternConverter`1.WriteJsonImpl*
  commentId: Overload:NodaTime.Serialization.JsonNet.NodaPatternConverter`1.WriteJsonImpl
  name: WriteJsonImpl
  nameWithType: NodaPatternConverter<T>.WriteJsonImpl
  fullName: NodaTime.Serialization.JsonNet.NodaPatternConverter<T>.WriteJsonImpl
  nameWithType.vb: NodaPatternConverter(Of T).WriteJsonImpl
  fullName.vb: NodaTime.Serialization.JsonNet.NodaPatternConverter(Of T).WriteJsonImpl
- uid: Newtonsoft.Json.JsonWriter
  commentId: T:Newtonsoft.Json.JsonWriter
  parent: Newtonsoft.Json
  isExternal: true
  name: JsonWriter
  nameWithType: JsonWriter
  fullName: Newtonsoft.Json.JsonWriter
- uid: NodaTime.Serialization.JsonNet.NodaConverterBase`1.WriteJsonImpl(Newtonsoft.Json.JsonWriter,`0,Newtonsoft.Json.JsonSerializer)
  commentId: M:NodaTime.Serialization.JsonNet.NodaConverterBase`1.WriteJsonImpl(Newtonsoft.Json.JsonWriter,`0,Newtonsoft.Json.JsonSerializer)
  isExternal: true
  name: WriteJsonImpl(JsonWriter, T, JsonSerializer)
  nameWithType: NodaConverterBase<T>.WriteJsonImpl(JsonWriter, T, JsonSerializer)
  fullName: NodaTime.Serialization.JsonNet.NodaConverterBase<T>.WriteJsonImpl(Newtonsoft.Json.JsonWriter, T, Newtonsoft.Json.JsonSerializer)
  nameWithType.vb: NodaConverterBase(Of T).WriteJsonImpl(JsonWriter, T, JsonSerializer)
  fullName.vb: NodaTime.Serialization.JsonNet.NodaConverterBase(Of T).WriteJsonImpl(Newtonsoft.Json.JsonWriter, T, Newtonsoft.Json.JsonSerializer)
  spec.csharp:
  - uid: NodaTime.Serialization.JsonNet.NodaConverterBase`1.WriteJsonImpl(Newtonsoft.Json.JsonWriter,`0,Newtonsoft.Json.JsonSerializer)
    name: WriteJsonImpl
    nameWithType: NodaConverterBase<T>.WriteJsonImpl
    fullName: NodaTime.Serialization.JsonNet.NodaConverterBase<T>.WriteJsonImpl
  - name: (
    nameWithType: (
    fullName: (
  - uid: Newtonsoft.Json.JsonWriter
    name: JsonWriter
    nameWithType: JsonWriter
    fullName: Newtonsoft.Json.JsonWriter
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Newtonsoft.Json.JsonSerializer
    name: JsonSerializer
    nameWithType: JsonSerializer
    fullName: Newtonsoft.Json.JsonSerializer
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NodaTime.Serialization.JsonNet.NodaConverterBase`1.WriteJsonImpl(Newtonsoft.Json.JsonWriter,`0,Newtonsoft.Json.JsonSerializer)
    name: WriteJsonImpl
    nameWithType: NodaConverterBase(Of T).WriteJsonImpl
    fullName: NodaTime.Serialization.JsonNet.NodaConverterBase(Of T).WriteJsonImpl
  - name: (
    nameWithType: (
    fullName: (
  - uid: Newtonsoft.Json.JsonWriter
    name: JsonWriter
    nameWithType: JsonWriter
    fullName: Newtonsoft.Json.JsonWriter
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Newtonsoft.Json.JsonSerializer
    name: JsonSerializer
    nameWithType: JsonSerializer
    fullName: Newtonsoft.Json.JsonSerializer
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
shouldSkipMarkup: true
