### YamlMime:ManagedReference
items:
- uid: NodaTime.TimeZones.ZoneInterval
  commentId: T:NodaTime.TimeZones.ZoneInterval
  id: ZoneInterval
  parent: NodaTime.TimeZones
  children:
  - NodaTime.TimeZones.ZoneInterval.#ctor(System.String,System.Nullable{NodaTime.Instant},System.Nullable{NodaTime.Instant},NodaTime.Offset,NodaTime.Offset)
  - NodaTime.TimeZones.ZoneInterval.Contains(NodaTime.Instant)
  - NodaTime.TimeZones.ZoneInterval.Duration
  - NodaTime.TimeZones.ZoneInterval.End
  - NodaTime.TimeZones.ZoneInterval.Equals(NodaTime.TimeZones.ZoneInterval)
  - NodaTime.TimeZones.ZoneInterval.Equals(System.Object)
  - NodaTime.TimeZones.ZoneInterval.GetHashCode
  - NodaTime.TimeZones.ZoneInterval.HasEnd
  - NodaTime.TimeZones.ZoneInterval.HasStart
  - NodaTime.TimeZones.ZoneInterval.IsoLocalEnd
  - NodaTime.TimeZones.ZoneInterval.IsoLocalStart
  - NodaTime.TimeZones.ZoneInterval.Name
  - NodaTime.TimeZones.ZoneInterval.Savings
  - NodaTime.TimeZones.ZoneInterval.StandardOffset
  - NodaTime.TimeZones.ZoneInterval.Start
  - NodaTime.TimeZones.ZoneInterval.ToString
  - NodaTime.TimeZones.ZoneInterval.WallOffset
  langs:
  - csharp
  - vb
  name: ZoneInterval
  nameWithType: ZoneInterval
  fullName: NodaTime.TimeZones.ZoneInterval
  type: Class
  source:
    remote:
      path: 2.4.x/src/NodaTime/TimeZones/ZoneInterval.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: ZoneInterval
    path: src/NodaTime/TimeZones/ZoneInterval.cs
    startLine: 16
  assemblies:
  - NodaTime
  namespace: NodaTime.TimeZones
  summary: "\nRepresents a range of time for which a particular Offset applies.\n"
  example: []
  syntax:
    content: 'public sealed class ZoneInterval : IEquatable<ZoneInterval>'
    content.vb: >-
      Public NotInheritable Class ZoneInterval
          Implements IEquatable(Of ZoneInterval)
  inheritance:
  - System.Object
  implements:
  - System.IEquatable{NodaTime.TimeZones.ZoneInterval}
  inheritedMembers:
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - sealed
  - class
  modifiers.vb:
  - Public
  - NotInheritable
  - Class
- uid: NodaTime.TimeZones.ZoneInterval.StandardOffset
  commentId: P:NodaTime.TimeZones.ZoneInterval.StandardOffset
  id: StandardOffset
  parent: NodaTime.TimeZones.ZoneInterval
  langs:
  - csharp
  - vb
  name: StandardOffset
  nameWithType: ZoneInterval.StandardOffset
  fullName: NodaTime.TimeZones.ZoneInterval.StandardOffset
  type: Property
  source:
    remote:
      path: 2.4.x/src/NodaTime/TimeZones/ZoneInterval.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: StandardOffset
    path: src/NodaTime/TimeZones/ZoneInterval.cs
    startLine: 45
  assemblies:
  - NodaTime
  namespace: NodaTime.TimeZones
  summary: "\nGets the standard offset for this period. This is the offset without any daylight savings\ncontributions.\n"
  remarks: "\nThis is effectively <code>WallOffset - Savings</code>.\n"
  example: []
  syntax:
    content: public Offset StandardOffset { get; }
    parameters: []
    return:
      type: NodaTime.Offset
      description: The base Offset.
    content.vb: Public ReadOnly Property StandardOffset As Offset
  overload: NodaTime.TimeZones.ZoneInterval.StandardOffset*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: NodaTime.TimeZones.ZoneInterval.Duration
  commentId: P:NodaTime.TimeZones.ZoneInterval.Duration
  id: Duration
  parent: NodaTime.TimeZones.ZoneInterval
  langs:
  - csharp
  - vb
  name: Duration
  nameWithType: ZoneInterval.Duration
  fullName: NodaTime.TimeZones.ZoneInterval.Duration
  type: Property
  source:
    remote:
      path: 2.4.x/src/NodaTime/TimeZones/ZoneInterval.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: Duration
    path: src/NodaTime/TimeZones/ZoneInterval.cs
    startLine: 58
  assemblies:
  - NodaTime
  namespace: NodaTime.TimeZones
  summary: "\nGets the duration of this zone interval.\n"
  remarks: "\nThis is effectively <code>End - Start</code>.\n"
  example: []
  syntax:
    content: public Duration Duration { get; }
    parameters: []
    return:
      type: NodaTime.Duration
      description: The Duration of this zone interval.
    content.vb: Public ReadOnly Property Duration As Duration
  overload: NodaTime.TimeZones.ZoneInterval.Duration*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: This zone extends to the start or end of time.
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: NodaTime.TimeZones.ZoneInterval.HasStart
  commentId: P:NodaTime.TimeZones.ZoneInterval.HasStart
  id: HasStart
  parent: NodaTime.TimeZones.ZoneInterval
  langs:
  - csharp
  - vb
  name: HasStart
  nameWithType: ZoneInterval.HasStart
  fullName: NodaTime.TimeZones.ZoneInterval.HasStart
  type: Property
  source:
    remote:
      path: 2.4.x/src/NodaTime/TimeZones/ZoneInterval.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: HasStart
    path: src/NodaTime/TimeZones/ZoneInterval.cs
    startLine: 69
  assemblies:
  - NodaTime
  namespace: NodaTime.TimeZones
  summary: "\nReturns <code>true</code> if this zone interval has a fixed start point, or <code>false</code> if it\nextends to the beginning of time.\n"
  example: []
  syntax:
    content: public bool HasStart { get; }
    parameters: []
    return:
      type: System.Boolean
      description: >-
        <code>true</code> if this interval has a fixed start point, or <code>false</code> if it
            extends to the beginning of time.
    content.vb: Public ReadOnly Property HasStart As Boolean
  overload: NodaTime.TimeZones.ZoneInterval.HasStart*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: NodaTime.TimeZones.ZoneInterval.End
  commentId: P:NodaTime.TimeZones.ZoneInterval.End
  id: End
  parent: NodaTime.TimeZones.ZoneInterval
  langs:
  - csharp
  - vb
  name: End
  nameWithType: ZoneInterval.End
  fullName: NodaTime.TimeZones.ZoneInterval.End
  type: Property
  source:
    remote:
      path: 2.4.x/src/NodaTime/TimeZones/ZoneInterval.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: End
    path: src/NodaTime/TimeZones/ZoneInterval.cs
    startLine: 75
  assemblies:
  - NodaTime
  namespace: NodaTime.TimeZones
  summary: "\nGets the last Instant (exclusive) that the Offset applies.\n"
  example: []
  syntax:
    content: public Instant End { get; }
    parameters: []
    return:
      type: NodaTime.Instant
      description: The last Instant (exclusive) that the Offset applies.
    content.vb: Public ReadOnly Property End As Instant
  overload: NodaTime.TimeZones.ZoneInterval.End*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: The zone interval extends to the end of time
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: NodaTime.TimeZones.ZoneInterval.HasEnd
  commentId: P:NodaTime.TimeZones.ZoneInterval.HasEnd
  id: HasEnd
  parent: NodaTime.TimeZones.ZoneInterval
  langs:
  - csharp
  - vb
  name: HasEnd
  nameWithType: ZoneInterval.HasEnd
  fullName: NodaTime.TimeZones.ZoneInterval.HasEnd
  type: Property
  source:
    remote:
      path: 2.4.x/src/NodaTime/TimeZones/ZoneInterval.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: HasEnd
    path: src/NodaTime/TimeZones/ZoneInterval.cs
    startLine: 91
  assemblies:
  - NodaTime
  namespace: NodaTime.TimeZones
  summary: "\nReturns <code>true</code> if this zone interval has a fixed end point, or <code>false</code> if it\nextends to the end of time.\n"
  example: []
  syntax:
    content: public bool HasEnd { get; }
    parameters: []
    return:
      type: System.Boolean
      description: >-
        <code>true</code> if this interval has a fixed end point, or <code>false</code> if it
            extends to the end of time.
    content.vb: Public ReadOnly Property HasEnd As Boolean
  overload: NodaTime.TimeZones.ZoneInterval.HasEnd*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: NodaTime.TimeZones.ZoneInterval.IsoLocalStart
  commentId: P:NodaTime.TimeZones.ZoneInterval.IsoLocalStart
  id: IsoLocalStart
  parent: NodaTime.TimeZones.ZoneInterval
  langs:
  - csharp
  - vb
  name: IsoLocalStart
  nameWithType: ZoneInterval.IsoLocalStart
  fullName: NodaTime.TimeZones.ZoneInterval.IsoLocalStart
  type: Property
  source:
    remote:
      path: 2.4.x/src/NodaTime/TimeZones/ZoneInterval.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: IsoLocalStart
    path: src/NodaTime/TimeZones/ZoneInterval.cs
    startLine: 104
  assemblies:
  - NodaTime
  namespace: NodaTime.TimeZones
  summary: "\nGets the local start time of the interval, as a <xref href=\"NodaTime.LocalDateTime\" data-throw-if-not-resolved=\"false\"></xref>\nin the ISO calendar.\n"
  example: []
  syntax:
    content: public LocalDateTime IsoLocalStart { get; }
    parameters: []
    return:
      type: NodaTime.LocalDateTime
      description: >-
        The local start time of the interval in the ISO calendar, with the offset of

        this zone interval.
    content.vb: Public ReadOnly Property IsoLocalStart As LocalDateTime
  overload: NodaTime.TimeZones.ZoneInterval.IsoLocalStart*
  exceptions:
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: The interval starts too early to represent as a `LocalDateTime`.
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: The interval extends to the start of time.
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: NodaTime.TimeZones.ZoneInterval.IsoLocalEnd
  commentId: P:NodaTime.TimeZones.ZoneInterval.IsoLocalEnd
  id: IsoLocalEnd
  parent: NodaTime.TimeZones.ZoneInterval
  langs:
  - csharp
  - vb
  name: IsoLocalEnd
  nameWithType: ZoneInterval.IsoLocalEnd
  fullName: NodaTime.TimeZones.ZoneInterval.IsoLocalEnd
  type: Property
  source:
    remote:
      path: 2.4.x/src/NodaTime/TimeZones/ZoneInterval.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: IsoLocalEnd
    path: src/NodaTime/TimeZones/ZoneInterval.cs
    startLine: 121
  assemblies:
  - NodaTime
  namespace: NodaTime.TimeZones
  summary: "\nGets the local end time of the interval, as a <xref href=\"NodaTime.LocalDateTime\" data-throw-if-not-resolved=\"false\"></xref>\nin the ISO calendar.\n"
  example: []
  syntax:
    content: public LocalDateTime IsoLocalEnd { get; }
    parameters: []
    return:
      type: NodaTime.LocalDateTime
      description: >-
        The local end time of the interval in the ISO calendar, with the offset

        of this zone interval. As the end time is exclusive, by the time this local time

        is reached, the next interval will be in effect and the local time will usually

        have changed (e.g. by adding or subtracting an hour).
    content.vb: Public ReadOnly Property IsoLocalEnd As LocalDateTime
  overload: NodaTime.TimeZones.ZoneInterval.IsoLocalEnd*
  exceptions:
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: The interval ends too late to represent as a `LocalDateTime`.
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: The interval extends to the end of time.
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: NodaTime.TimeZones.ZoneInterval.Name
  commentId: P:NodaTime.TimeZones.ZoneInterval.Name
  id: Name
  parent: NodaTime.TimeZones.ZoneInterval
  langs:
  - csharp
  - vb
  name: Name
  nameWithType: ZoneInterval.Name
  fullName: NodaTime.TimeZones.ZoneInterval.Name
  type: Property
  source:
    remote:
      path: 2.4.x/src/NodaTime/TimeZones/ZoneInterval.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: Name
    path: src/NodaTime/TimeZones/ZoneInterval.cs
    startLine: 133
  assemblies:
  - NodaTime
  namespace: NodaTime.TimeZones
  summary: "\nGets the name of this offset period (e.g. PST or PDT).\n"
  example: []
  syntax:
    content: public string Name { get; }
    parameters: []
    return:
      type: System.String
      description: The name of this offset period (e.g. PST or PDT).
    content.vb: Public ReadOnly Property Name As String
  overload: NodaTime.TimeZones.ZoneInterval.Name*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: NodaTime.TimeZones.ZoneInterval.WallOffset
  commentId: P:NodaTime.TimeZones.ZoneInterval.WallOffset
  id: WallOffset
  parent: NodaTime.TimeZones.ZoneInterval
  langs:
  - csharp
  - vb
  name: WallOffset
  nameWithType: ZoneInterval.WallOffset
  fullName: NodaTime.TimeZones.ZoneInterval.WallOffset
  type: Property
  source:
    remote:
      path: 2.4.x/src/NodaTime/TimeZones/ZoneInterval.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: WallOffset
    path: src/NodaTime/TimeZones/ZoneInterval.cs
    startLine: 139
  assemblies:
  - NodaTime
  namespace: NodaTime.TimeZones
  summary: "\nGets the offset from UTC for this period. This includes any daylight savings value.\n"
  example: []
  syntax:
    content: public Offset WallOffset { get; }
    parameters: []
    return:
      type: NodaTime.Offset
      description: The offset from UTC for this period.
    content.vb: Public ReadOnly Property WallOffset As Offset
  overload: NodaTime.TimeZones.ZoneInterval.WallOffset*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: NodaTime.TimeZones.ZoneInterval.Savings
  commentId: P:NodaTime.TimeZones.ZoneInterval.Savings
  id: Savings
  parent: NodaTime.TimeZones.ZoneInterval
  langs:
  - csharp
  - vb
  name: Savings
  nameWithType: ZoneInterval.Savings
  fullName: NodaTime.TimeZones.ZoneInterval.Savings
  type: Property
  source:
    remote:
      path: 2.4.x/src/NodaTime/TimeZones/ZoneInterval.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: Savings
    path: src/NodaTime/TimeZones/ZoneInterval.cs
    startLine: 145
  assemblies:
  - NodaTime
  namespace: NodaTime.TimeZones
  summary: "\nGets the daylight savings value for this period.\n"
  example: []
  syntax:
    content: public Offset Savings { get; }
    parameters: []
    return:
      type: NodaTime.Offset
      description: The savings value.
    content.vb: Public ReadOnly Property Savings As Offset
  overload: NodaTime.TimeZones.ZoneInterval.Savings*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: NodaTime.TimeZones.ZoneInterval.Start
  commentId: P:NodaTime.TimeZones.ZoneInterval.Start
  id: Start
  parent: NodaTime.TimeZones.ZoneInterval
  langs:
  - csharp
  - vb
  name: Start
  nameWithType: ZoneInterval.Start
  fullName: NodaTime.TimeZones.ZoneInterval.Start
  type: Property
  source:
    remote:
      path: 2.4.x/src/NodaTime/TimeZones/ZoneInterval.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: Start
    path: src/NodaTime/TimeZones/ZoneInterval.cs
    startLine: 151
  assemblies:
  - NodaTime
  namespace: NodaTime.TimeZones
  summary: "\nGets the first Instant that the Offset applies.\n"
  example: []
  syntax:
    content: public Instant Start { get; }
    parameters: []
    return:
      type: NodaTime.Instant
      description: The first Instant that the Offset applies.
    content.vb: Public ReadOnly Property Start As Instant
  overload: NodaTime.TimeZones.ZoneInterval.Start*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: NodaTime.TimeZones.ZoneInterval.#ctor(System.String,System.Nullable{NodaTime.Instant},System.Nullable{NodaTime.Instant},NodaTime.Offset,NodaTime.Offset)
  commentId: M:NodaTime.TimeZones.ZoneInterval.#ctor(System.String,System.Nullable{NodaTime.Instant},System.Nullable{NodaTime.Instant},NodaTime.Offset,NodaTime.Offset)
  id: '#ctor(System.String,System.Nullable{NodaTime.Instant},System.Nullable{NodaTime.Instant},NodaTime.Offset,NodaTime.Offset)'
  parent: NodaTime.TimeZones.ZoneInterval
  langs:
  - csharp
  - vb
  name: ZoneInterval(String, Nullable<Instant>, Nullable<Instant>, Offset, Offset)
  nameWithType: ZoneInterval.ZoneInterval(String, Nullable<Instant>, Nullable<Instant>, Offset, Offset)
  fullName: NodaTime.TimeZones.ZoneInterval.ZoneInterval(System.String, System.Nullable<NodaTime.Instant>, System.Nullable<NodaTime.Instant>, NodaTime.Offset, NodaTime.Offset)
  type: Constructor
  source:
    remote:
      path: 2.4.x/src/NodaTime/TimeZones/ZoneInterval.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: .ctor
    path: src/NodaTime/TimeZones/ZoneInterval.cs
    startLine: 172
  assemblies:
  - NodaTime
  namespace: NodaTime.TimeZones
  summary: "\nInitializes a new instance of the <xref href=\"NodaTime.TimeZones.ZoneInterval\" data-throw-if-not-resolved=\"false\"></xref> class.\n"
  example: []
  syntax:
    content: public ZoneInterval(string name, Instant? start, Instant? end, Offset wallOffset, Offset savings)
    parameters:
    - id: name
      type: System.String
      description: The name of this offset period (e.g. PST or PDT).
    - id: start
      type: System.Nullable{NodaTime.Instant}
      description: >-
        The first <xref href="NodaTime.Instant" data-throw-if-not-resolved="false"></xref> that the <code data-dev-comment-type="paramref" class="paramref">wallOffset</code> applies,

        or <code>null</code> to make the zone interval extend to the start of time.
    - id: end
      type: System.Nullable{NodaTime.Instant}
      description: >-
        The last <xref href="NodaTime.Instant" data-throw-if-not-resolved="false"></xref> (exclusive) that the <code data-dev-comment-type="paramref" class="paramref">wallOffset</code> applies,

        or <code>null</code> to make the zone interval extend to the end of time.
    - id: wallOffset
      type: NodaTime.Offset
      description: The <xref href="NodaTime.TimeZones.ZoneInterval.WallOffset" data-throw-if-not-resolved="false"></xref> from UTC for this period including any daylight savings.
    - id: savings
      type: NodaTime.Offset
      description: The <xref href="NodaTime.TimeZones.ZoneInterval.WallOffset" data-throw-if-not-resolved="false"></xref> daylight savings contribution to the offset.
    content.vb: Public Sub New(name As String, start As Instant?, end As Instant?, wallOffset As Offset, savings As Offset)
  overload: NodaTime.TimeZones.ZoneInterval.#ctor*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: If <code><code data-dev-comment-type="paramref" class="paramref">start</code> >= <code data-dev-comment-type="paramref" class="paramref">end</code></code>.
  nameWithType.vb: ZoneInterval.ZoneInterval(String, Nullable(Of Instant), Nullable(Of Instant), Offset, Offset)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: NodaTime.TimeZones.ZoneInterval.ZoneInterval(System.String, System.Nullable(Of NodaTime.Instant), System.Nullable(Of NodaTime.Instant), NodaTime.Offset, NodaTime.Offset)
  name.vb: ZoneInterval(String, Nullable(Of Instant), Nullable(Of Instant), Offset, Offset)
- uid: NodaTime.TimeZones.ZoneInterval.Contains(NodaTime.Instant)
  commentId: M:NodaTime.TimeZones.ZoneInterval.Contains(NodaTime.Instant)
  id: Contains(NodaTime.Instant)
  parent: NodaTime.TimeZones.ZoneInterval
  langs:
  - csharp
  - vb
  name: Contains(Instant)
  nameWithType: ZoneInterval.Contains(Instant)
  fullName: NodaTime.TimeZones.ZoneInterval.Contains(NodaTime.Instant)
  type: Method
  source:
    remote:
      path: 2.4.x/src/NodaTime/TimeZones/ZoneInterval.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: Contains
    path: src/NodaTime/TimeZones/ZoneInterval.cs
    startLine: 230
  assemblies:
  - NodaTime
  namespace: NodaTime.TimeZones
  summary: "\nDetermines whether this period contains the given Instant in its range.\n"
  remarks: "\nUsually this is half-open, i.e. the end is exclusive, but an interval with an end point of &quot;the end of time&quot; \nis deemed to be inclusive at the end.\n"
  example: []
  syntax:
    content: public bool Contains(Instant instant)
    parameters:
    - id: instant
      type: NodaTime.Instant
      description: The instant to test.
    return:
      type: System.Boolean
      description: "\n<code>true</code> if this period contains the given Instant in its range; otherwise, <code>false</code>.\n"
    content.vb: Public Function Contains(instant As Instant) As Boolean
  overload: NodaTime.TimeZones.ZoneInterval.Contains*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: NodaTime.TimeZones.ZoneInterval.Equals(NodaTime.TimeZones.ZoneInterval)
  commentId: M:NodaTime.TimeZones.ZoneInterval.Equals(NodaTime.TimeZones.ZoneInterval)
  id: Equals(NodaTime.TimeZones.ZoneInterval)
  parent: NodaTime.TimeZones.ZoneInterval
  langs:
  - csharp
  - vb
  name: Equals(ZoneInterval)
  nameWithType: ZoneInterval.Equals(ZoneInterval)
  fullName: NodaTime.TimeZones.ZoneInterval.Equals(NodaTime.TimeZones.ZoneInterval)
  type: Method
  source:
    remote:
      path: 2.4.x/src/NodaTime/TimeZones/ZoneInterval.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: Equals
    path: src/NodaTime/TimeZones/ZoneInterval.cs
    startLine: 263
  assemblies:
  - NodaTime
  namespace: NodaTime.TimeZones
  summary: "\nIndicates whether the current object is equal to another object of the same type.\n"
  example: []
  syntax:
    content: public bool Equals(ZoneInterval other)
    parameters:
    - id: other
      type: NodaTime.TimeZones.ZoneInterval
      description: >
        An object to compare with this object.
    return:
      type: System.Boolean
      description: "\ntrue if the current object is equal to the <code data-dev-comment-type=\"paramref\" class=\"paramref\">other</code> parameter; otherwise, false.\n"
    content.vb: Public Function Equals(other As ZoneInterval) As Boolean
  overload: NodaTime.TimeZones.ZoneInterval.Equals*
  implements:
  - System.IEquatable{NodaTime.TimeZones.ZoneInterval}.Equals(NodaTime.TimeZones.ZoneInterval)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: NodaTime.TimeZones.ZoneInterval.Equals(System.Object)
  commentId: M:NodaTime.TimeZones.ZoneInterval.Equals(System.Object)
  id: Equals(System.Object)
  parent: NodaTime.TimeZones.ZoneInterval
  langs:
  - csharp
  - vb
  name: Equals(Object)
  nameWithType: ZoneInterval.Equals(Object)
  fullName: NodaTime.TimeZones.ZoneInterval.Equals(System.Object)
  type: Method
  source:
    remote:
      path: 2.4.x/src/NodaTime/TimeZones/ZoneInterval.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: Equals
    path: src/NodaTime/TimeZones/ZoneInterval.cs
    startLine: 288
  assemblies:
  - NodaTime
  namespace: NodaTime.TimeZones
  summary: "\nDetermines whether the specified <xref href=\"System.Object\" data-throw-if-not-resolved=\"false\"></xref> is equal to the current <xref href=\"System.Object\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public override bool Equals(object obj)
    parameters:
    - id: obj
      type: System.Object
      description: The <xref href="System.Object" data-throw-if-not-resolved="false"></xref> to compare with the current <xref href="System.Object" data-throw-if-not-resolved="false"></xref>.
    return:
      type: System.Boolean
      description: "\n<code>true</code> if the specified <xref href=\"System.Object\" data-throw-if-not-resolved=\"false\"></xref> is equal to the current <xref href=\"System.Object\" data-throw-if-not-resolved=\"false\"></xref>; otherwise, <code>false</code>.\n"
    content.vb: Public Overrides Function Equals(obj As Object) As Boolean
  overridden: System.Object.Equals(System.Object)
  overload: NodaTime.TimeZones.ZoneInterval.Equals*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: NodaTime.TimeZones.ZoneInterval.GetHashCode
  commentId: M:NodaTime.TimeZones.ZoneInterval.GetHashCode
  id: GetHashCode
  parent: NodaTime.TimeZones.ZoneInterval
  langs:
  - csharp
  - vb
  name: GetHashCode()
  nameWithType: ZoneInterval.GetHashCode()
  fullName: NodaTime.TimeZones.ZoneInterval.GetHashCode()
  type: Method
  source:
    remote:
      path: 2.4.x/src/NodaTime/TimeZones/ZoneInterval.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: GetHashCode
    path: src/NodaTime/TimeZones/ZoneInterval.cs
    startLine: 298
  assemblies:
  - NodaTime
  namespace: NodaTime.TimeZones
  summary: "\nServes as a hash function for a particular type.\n"
  example: []
  syntax:
    content: public override int GetHashCode()
    return:
      type: System.Int32
      description: "\nA hash code for the current <xref href=\"System.Object\" data-throw-if-not-resolved=\"false\"></xref>.\n"
    content.vb: Public Overrides Function GetHashCode As Integer
  overridden: System.Object.GetHashCode
  overload: NodaTime.TimeZones.ZoneInterval.GetHashCode*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: NodaTime.TimeZones.ZoneInterval.ToString
  commentId: M:NodaTime.TimeZones.ZoneInterval.ToString
  id: ToString
  parent: NodaTime.TimeZones.ZoneInterval
  langs:
  - csharp
  - vb
  name: ToString()
  nameWithType: ZoneInterval.ToString()
  fullName: NodaTime.TimeZones.ZoneInterval.ToString()
  type: Method
  source:
    remote:
      path: 2.4.x/src/NodaTime/TimeZones/ZoneInterval.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: ToString
    path: src/NodaTime/TimeZones/ZoneInterval.cs
    startLine: 313
  assemblies:
  - NodaTime
  namespace: NodaTime.TimeZones
  summary: "\nReturns a <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref> that represents this instance.\n"
  example: []
  syntax:
    content: public override string ToString()
    return:
      type: System.String
      description: "\nA <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref> that represents this instance.\n"
    content.vb: Public Overrides Function ToString As String
  overridden: System.Object.ToString
  overload: NodaTime.TimeZones.ZoneInterval.ToString*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
references:
- uid: NodaTime.TimeZones
  commentId: N:NodaTime.TimeZones
  name: NodaTime.TimeZones
  nameWithType: NodaTime.TimeZones
  fullName: NodaTime.TimeZones
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.IEquatable{NodaTime.TimeZones.ZoneInterval}
  commentId: T:System.IEquatable{NodaTime.TimeZones.ZoneInterval}
  parent: System
  definition: System.IEquatable`1
  name: IEquatable<ZoneInterval>
  nameWithType: IEquatable<ZoneInterval>
  fullName: System.IEquatable<NodaTime.TimeZones.ZoneInterval>
  nameWithType.vb: IEquatable(Of ZoneInterval)
  fullName.vb: System.IEquatable(Of NodaTime.TimeZones.ZoneInterval)
  name.vb: IEquatable(Of ZoneInterval)
  spec.csharp:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: NodaTime.TimeZones.ZoneInterval
    name: ZoneInterval
    nameWithType: ZoneInterval
    fullName: NodaTime.TimeZones.ZoneInterval
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: NodaTime.TimeZones.ZoneInterval
    name: ZoneInterval
    nameWithType: ZoneInterval
    fullName: NodaTime.TimeZones.ZoneInterval
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: System.IEquatable`1
  commentId: T:System.IEquatable`1
  isExternal: true
  name: IEquatable<T>
  nameWithType: IEquatable<T>
  fullName: System.IEquatable<T>
  nameWithType.vb: IEquatable(Of T)
  fullName.vb: System.IEquatable(Of T)
  name.vb: IEquatable(Of T)
  spec.csharp:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: NodaTime.TimeZones.ZoneInterval.StandardOffset*
  commentId: Overload:NodaTime.TimeZones.ZoneInterval.StandardOffset
  name: StandardOffset
  nameWithType: ZoneInterval.StandardOffset
  fullName: NodaTime.TimeZones.ZoneInterval.StandardOffset
- uid: NodaTime.Offset
  commentId: T:NodaTime.Offset
  parent: NodaTime
  name: Offset
  nameWithType: Offset
  fullName: NodaTime.Offset
- uid: NodaTime
  commentId: N:NodaTime
  name: NodaTime
  nameWithType: NodaTime
  fullName: NodaTime
- uid: System.InvalidOperationException
  commentId: T:System.InvalidOperationException
  isExternal: true
- uid: NodaTime.TimeZones.ZoneInterval.Duration*
  commentId: Overload:NodaTime.TimeZones.ZoneInterval.Duration
  name: Duration
  nameWithType: ZoneInterval.Duration
  fullName: NodaTime.TimeZones.ZoneInterval.Duration
- uid: NodaTime.Duration
  commentId: T:NodaTime.Duration
  parent: NodaTime
  name: Duration
  nameWithType: Duration
  fullName: NodaTime.Duration
- uid: NodaTime.TimeZones.ZoneInterval.HasStart*
  commentId: Overload:NodaTime.TimeZones.ZoneInterval.HasStart
  name: HasStart
  nameWithType: ZoneInterval.HasStart
  fullName: NodaTime.TimeZones.ZoneInterval.HasStart
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: NodaTime.TimeZones.ZoneInterval.End*
  commentId: Overload:NodaTime.TimeZones.ZoneInterval.End
  name: End
  nameWithType: ZoneInterval.End
  fullName: NodaTime.TimeZones.ZoneInterval.End
- uid: NodaTime.Instant
  commentId: T:NodaTime.Instant
  parent: NodaTime
  name: Instant
  nameWithType: Instant
  fullName: NodaTime.Instant
- uid: NodaTime.TimeZones.ZoneInterval.HasEnd*
  commentId: Overload:NodaTime.TimeZones.ZoneInterval.HasEnd
  name: HasEnd
  nameWithType: ZoneInterval.HasEnd
  fullName: NodaTime.TimeZones.ZoneInterval.HasEnd
- uid: NodaTime.LocalDateTime
  commentId: T:NodaTime.LocalDateTime
  parent: NodaTime
  name: LocalDateTime
  nameWithType: LocalDateTime
  fullName: NodaTime.LocalDateTime
- uid: System.OverflowException
  commentId: T:System.OverflowException
  isExternal: true
- uid: NodaTime.TimeZones.ZoneInterval.IsoLocalStart*
  commentId: Overload:NodaTime.TimeZones.ZoneInterval.IsoLocalStart
  name: IsoLocalStart
  nameWithType: ZoneInterval.IsoLocalStart
  fullName: NodaTime.TimeZones.ZoneInterval.IsoLocalStart
- uid: NodaTime.TimeZones.ZoneInterval.IsoLocalEnd*
  commentId: Overload:NodaTime.TimeZones.ZoneInterval.IsoLocalEnd
  name: IsoLocalEnd
  nameWithType: ZoneInterval.IsoLocalEnd
  fullName: NodaTime.TimeZones.ZoneInterval.IsoLocalEnd
- uid: NodaTime.TimeZones.ZoneInterval.Name*
  commentId: Overload:NodaTime.TimeZones.ZoneInterval.Name
  name: Name
  nameWithType: ZoneInterval.Name
  fullName: NodaTime.TimeZones.ZoneInterval.Name
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: NodaTime.TimeZones.ZoneInterval.WallOffset*
  commentId: Overload:NodaTime.TimeZones.ZoneInterval.WallOffset
  name: WallOffset
  nameWithType: ZoneInterval.WallOffset
  fullName: NodaTime.TimeZones.ZoneInterval.WallOffset
- uid: NodaTime.TimeZones.ZoneInterval.Savings*
  commentId: Overload:NodaTime.TimeZones.ZoneInterval.Savings
  name: Savings
  nameWithType: ZoneInterval.Savings
  fullName: NodaTime.TimeZones.ZoneInterval.Savings
- uid: NodaTime.TimeZones.ZoneInterval.Start*
  commentId: Overload:NodaTime.TimeZones.ZoneInterval.Start
  name: Start
  nameWithType: ZoneInterval.Start
  fullName: NodaTime.TimeZones.ZoneInterval.Start
- uid: NodaTime.TimeZones.ZoneInterval
  commentId: T:NodaTime.TimeZones.ZoneInterval
  parent: NodaTime.TimeZones
  name: ZoneInterval
  nameWithType: ZoneInterval
  fullName: NodaTime.TimeZones.ZoneInterval
- uid: NodaTime.TimeZones.ZoneInterval.WallOffset
  commentId: P:NodaTime.TimeZones.ZoneInterval.WallOffset
  isExternal: true
- uid: System.ArgumentException
  commentId: T:System.ArgumentException
  parent: System
  isExternal: true
  name: ArgumentException
  nameWithType: ArgumentException
  fullName: System.ArgumentException
- uid: NodaTime.TimeZones.ZoneInterval.#ctor*
  commentId: Overload:NodaTime.TimeZones.ZoneInterval.#ctor
  name: ZoneInterval
  nameWithType: ZoneInterval.ZoneInterval
  fullName: NodaTime.TimeZones.ZoneInterval.ZoneInterval
- uid: System.Nullable{NodaTime.Instant}
  commentId: T:System.Nullable{NodaTime.Instant}
  parent: System
  definition: System.Nullable`1
  name: Nullable<Instant>
  nameWithType: Nullable<Instant>
  fullName: System.Nullable<NodaTime.Instant>
  nameWithType.vb: Nullable(Of Instant)
  fullName.vb: System.Nullable(Of NodaTime.Instant)
  name.vb: Nullable(Of Instant)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: NodaTime.Instant
    name: Instant
    nameWithType: Instant
    fullName: NodaTime.Instant
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: NodaTime.Instant
    name: Instant
    nameWithType: Instant
    fullName: NodaTime.Instant
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Nullable`1
  commentId: T:System.Nullable`1
  isExternal: true
  name: Nullable<T>
  nameWithType: Nullable<T>
  fullName: System.Nullable<T>
  nameWithType.vb: Nullable(Of T)
  fullName.vb: System.Nullable(Of T)
  name.vb: Nullable(Of T)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: NodaTime.TimeZones.ZoneInterval.Contains*
  commentId: Overload:NodaTime.TimeZones.ZoneInterval.Contains
  name: Contains
  nameWithType: ZoneInterval.Contains
  fullName: NodaTime.TimeZones.ZoneInterval.Contains
- uid: NodaTime.TimeZones.ZoneInterval.Equals*
  commentId: Overload:NodaTime.TimeZones.ZoneInterval.Equals
  name: Equals
  nameWithType: ZoneInterval.Equals
  fullName: NodaTime.TimeZones.ZoneInterval.Equals
- uid: System.IEquatable{NodaTime.TimeZones.ZoneInterval}.Equals(NodaTime.TimeZones.ZoneInterval)
  commentId: M:System.IEquatable{NodaTime.TimeZones.ZoneInterval}.Equals(NodaTime.TimeZones.ZoneInterval)
  parent: System.IEquatable{NodaTime.TimeZones.ZoneInterval}
  definition: System.IEquatable`1.Equals(`0)
  name: Equals(ZoneInterval)
  nameWithType: IEquatable<ZoneInterval>.Equals(ZoneInterval)
  fullName: System.IEquatable<NodaTime.TimeZones.ZoneInterval>.Equals(NodaTime.TimeZones.ZoneInterval)
  nameWithType.vb: IEquatable(Of ZoneInterval).Equals(ZoneInterval)
  fullName.vb: System.IEquatable(Of NodaTime.TimeZones.ZoneInterval).Equals(NodaTime.TimeZones.ZoneInterval)
  spec.csharp:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    nameWithType: IEquatable<ZoneInterval>.Equals
    fullName: System.IEquatable<NodaTime.TimeZones.ZoneInterval>.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: NodaTime.TimeZones.ZoneInterval
    name: ZoneInterval
    nameWithType: ZoneInterval
    fullName: NodaTime.TimeZones.ZoneInterval
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    nameWithType: IEquatable(Of ZoneInterval).Equals
    fullName: System.IEquatable(Of NodaTime.TimeZones.ZoneInterval).Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: NodaTime.TimeZones.ZoneInterval
    name: ZoneInterval
    nameWithType: ZoneInterval
    fullName: NodaTime.TimeZones.ZoneInterval
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IEquatable`1.Equals(`0)
  commentId: M:System.IEquatable`1.Equals(`0)
  isExternal: true
  name: Equals(T)
  nameWithType: IEquatable<T>.Equals(T)
  fullName: System.IEquatable<T>.Equals(T)
  nameWithType.vb: IEquatable(Of T).Equals(T)
  fullName.vb: System.IEquatable(Of T).Equals(T)
  spec.csharp:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    nameWithType: IEquatable<T>.Equals
    fullName: System.IEquatable<T>.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    nameWithType: IEquatable(Of T).Equals
    fullName: System.IEquatable(Of T).Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: NodaTime.TimeZones.ZoneInterval.GetHashCode*
  commentId: Overload:NodaTime.TimeZones.ZoneInterval.GetHashCode
  name: GetHashCode
  nameWithType: ZoneInterval.GetHashCode
  fullName: NodaTime.TimeZones.ZoneInterval.GetHashCode
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: NodaTime.TimeZones.ZoneInterval.ToString*
  commentId: Overload:NodaTime.TimeZones.ZoneInterval.ToString
  name: ToString
  nameWithType: ZoneInterval.ToString
  fullName: NodaTime.TimeZones.ZoneInterval.ToString
shouldSkipMarkup: true
