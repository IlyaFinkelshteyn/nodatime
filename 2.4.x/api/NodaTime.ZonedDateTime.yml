### YamlMime:ManagedReference
items:
- uid: NodaTime.ZonedDateTime
  commentId: T:NodaTime.ZonedDateTime
  id: ZonedDateTime
  parent: NodaTime
  children:
  - NodaTime.ZonedDateTime.#ctor(NodaTime.Instant,NodaTime.DateTimeZone)
  - NodaTime.ZonedDateTime.#ctor(NodaTime.Instant,NodaTime.DateTimeZone,NodaTime.CalendarSystem)
  - NodaTime.ZonedDateTime.#ctor(NodaTime.LocalDateTime,NodaTime.DateTimeZone,NodaTime.Offset)
  - NodaTime.ZonedDateTime.Add(NodaTime.ZonedDateTime,NodaTime.Duration)
  - NodaTime.ZonedDateTime.Calendar
  - NodaTime.ZonedDateTime.ClockHourOfHalfDay
  - NodaTime.ZonedDateTime.Date
  - NodaTime.ZonedDateTime.Day
  - NodaTime.ZonedDateTime.DayOfWeek
  - NodaTime.ZonedDateTime.DayOfYear
  - NodaTime.ZonedDateTime.Deconstruct(NodaTime.LocalDateTime@,NodaTime.DateTimeZone@,NodaTime.Offset@)
  - NodaTime.ZonedDateTime.Equals(NodaTime.ZonedDateTime)
  - NodaTime.ZonedDateTime.Equals(System.Object)
  - NodaTime.ZonedDateTime.Era
  - NodaTime.ZonedDateTime.FromDateTimeOffset(System.DateTimeOffset)
  - NodaTime.ZonedDateTime.GetHashCode
  - NodaTime.ZonedDateTime.GetZoneInterval
  - NodaTime.ZonedDateTime.Hour
  - NodaTime.ZonedDateTime.IsDaylightSavingTime
  - NodaTime.ZonedDateTime.LocalDateTime
  - NodaTime.ZonedDateTime.Millisecond
  - NodaTime.ZonedDateTime.Minus(NodaTime.Duration)
  - NodaTime.ZonedDateTime.Minus(NodaTime.ZonedDateTime)
  - NodaTime.ZonedDateTime.Minute
  - NodaTime.ZonedDateTime.Month
  - NodaTime.ZonedDateTime.NanosecondOfDay
  - NodaTime.ZonedDateTime.NanosecondOfSecond
  - NodaTime.ZonedDateTime.Offset
  - NodaTime.ZonedDateTime.op_Addition(NodaTime.ZonedDateTime,NodaTime.Duration)
  - NodaTime.ZonedDateTime.op_Equality(NodaTime.ZonedDateTime,NodaTime.ZonedDateTime)
  - NodaTime.ZonedDateTime.op_Inequality(NodaTime.ZonedDateTime,NodaTime.ZonedDateTime)
  - NodaTime.ZonedDateTime.op_Subtraction(NodaTime.ZonedDateTime,NodaTime.Duration)
  - NodaTime.ZonedDateTime.op_Subtraction(NodaTime.ZonedDateTime,NodaTime.ZonedDateTime)
  - NodaTime.ZonedDateTime.Plus(NodaTime.Duration)
  - NodaTime.ZonedDateTime.PlusHours(System.Int32)
  - NodaTime.ZonedDateTime.PlusMilliseconds(System.Int64)
  - NodaTime.ZonedDateTime.PlusMinutes(System.Int32)
  - NodaTime.ZonedDateTime.PlusNanoseconds(System.Int64)
  - NodaTime.ZonedDateTime.PlusSeconds(System.Int64)
  - NodaTime.ZonedDateTime.PlusTicks(System.Int64)
  - NodaTime.ZonedDateTime.Second
  - NodaTime.ZonedDateTime.Subtract(NodaTime.ZonedDateTime,NodaTime.Duration)
  - NodaTime.ZonedDateTime.Subtract(NodaTime.ZonedDateTime,NodaTime.ZonedDateTime)
  - NodaTime.ZonedDateTime.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  - NodaTime.ZonedDateTime.System#Xml#Serialization#IXmlSerializable#GetSchema
  - NodaTime.ZonedDateTime.System#Xml#Serialization#IXmlSerializable#ReadXml(System.Xml.XmlReader)
  - NodaTime.ZonedDateTime.System#Xml#Serialization#IXmlSerializable#WriteXml(System.Xml.XmlWriter)
  - NodaTime.ZonedDateTime.TickOfDay
  - NodaTime.ZonedDateTime.TickOfSecond
  - NodaTime.ZonedDateTime.TimeOfDay
  - NodaTime.ZonedDateTime.ToDateTimeOffset
  - NodaTime.ZonedDateTime.ToDateTimeUnspecified
  - NodaTime.ZonedDateTime.ToDateTimeUtc
  - NodaTime.ZonedDateTime.ToInstant
  - NodaTime.ZonedDateTime.ToOffsetDateTime
  - NodaTime.ZonedDateTime.ToString
  - NodaTime.ZonedDateTime.ToString(System.String,System.IFormatProvider)
  - NodaTime.ZonedDateTime.WithCalendar(NodaTime.CalendarSystem)
  - NodaTime.ZonedDateTime.WithZone(NodaTime.DateTimeZone)
  - NodaTime.ZonedDateTime.Year
  - NodaTime.ZonedDateTime.YearOfEra
  - NodaTime.ZonedDateTime.Zone
  langs:
  - csharp
  - vb
  name: ZonedDateTime
  nameWithType: ZonedDateTime
  fullName: NodaTime.ZonedDateTime
  type: Struct
  source:
    remote:
      path: 2.4.x/src/NodaTime/ZonedDateTime.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: ZonedDateTime
    path: src/NodaTime/ZonedDateTime.cs
    startLine: 43
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nA <xref href=\"NodaTime.LocalDateTime\" data-throw-if-not-resolved=\"false\"></xref> in a specific time zone and with a particular offset to distinguish\nbetween otherwise-ambiguous instants. A <xref href=\"NodaTime.ZonedDateTime\" data-throw-if-not-resolved=\"false\"></xref> is global, in that it maps to a single\n<xref href=\"NodaTime.Instant\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  remarks: "\n<p>Although <xref href=\"NodaTime.ZonedDateTime\" data-throw-if-not-resolved=\"false\"></xref> includes both local and global concepts, it only supports\nduration-based - and not calendar-based - arithmetic. This avoids ambiguities\nand skipped date/time values becoming a problem within a series of calculations; instead,\nthese can be considered just once, at the point of conversion to a <xref href=\"NodaTime.ZonedDateTime\" data-throw-if-not-resolved=\"false\"></xref>.\n</p>\n<p>\n<code>ZonedDateTime</code> does not implement ordered comparison operators, as there is no obvious natural ordering that works in all cases. \nEquality is supported however, requiring equality of zone, calendar and date/time. If you want to sort <code>ZonedDateTime</code>\nvalues, you should explicitly choose one of the orderings provided via the static properties in the\n<xref href=\"NodaTime.ZonedDateTime.Comparer\" data-throw-if-not-resolved=\"false\"></xref> nested class (or implement your own comparison).\n</p>\n"
  example: []
  syntax:
    content: >-
      [Serializable]

      public struct ZonedDateTime : IEquatable<ZonedDateTime>, IFormattable, IXmlSerializable, ISerializable
    content.vb: >-
      <Serializable>

      Public Structure ZonedDateTime
          Implements IEquatable(Of ZonedDateTime), IFormattable, IXmlSerializable, ISerializable
  implements:
  - System.IEquatable{NodaTime.ZonedDateTime}
  - System.IFormattable
  - System.Xml.Serialization.IXmlSerializable
  - System.Runtime.Serialization.ISerializable
  inheritedMembers:
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetType
  attributes:
  - type: System.SerializableAttribute
    ctor: System.SerializableAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - struct
  modifiers.vb:
  - Public
  - Structure
- uid: NodaTime.ZonedDateTime.#ctor(NodaTime.Instant,NodaTime.DateTimeZone,NodaTime.CalendarSystem)
  commentId: M:NodaTime.ZonedDateTime.#ctor(NodaTime.Instant,NodaTime.DateTimeZone,NodaTime.CalendarSystem)
  id: '#ctor(NodaTime.Instant,NodaTime.DateTimeZone,NodaTime.CalendarSystem)'
  parent: NodaTime.ZonedDateTime
  langs:
  - csharp
  - vb
  name: ZonedDateTime(Instant, DateTimeZone, CalendarSystem)
  nameWithType: ZonedDateTime.ZonedDateTime(Instant, DateTimeZone, CalendarSystem)
  fullName: NodaTime.ZonedDateTime.ZonedDateTime(NodaTime.Instant, NodaTime.DateTimeZone, NodaTime.CalendarSystem)
  type: Constructor
  source:
    remote:
      path: 2.4.x/src/NodaTime/ZonedDateTime.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: .ctor
    path: src/NodaTime/ZonedDateTime.cs
    startLine: 68
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nInitializes a new instance of the <xref href=\"NodaTime.ZonedDateTime\" data-throw-if-not-resolved=\"false\"></xref> struct.\n"
  example: []
  syntax:
    content: public ZonedDateTime(Instant instant, DateTimeZone zone, CalendarSystem calendar)
    parameters:
    - id: instant
      type: NodaTime.Instant
      description: The instant.
    - id: zone
      type: NodaTime.DateTimeZone
      description: The time zone.
    - id: calendar
      type: NodaTime.CalendarSystem
      description: The calendar system.
    content.vb: Public Sub New(instant As Instant, zone As DateTimeZone, calendar As CalendarSystem)
  overload: NodaTime.ZonedDateTime.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: NodaTime.ZonedDateTime.#ctor(NodaTime.Instant,NodaTime.DateTimeZone)
  commentId: M:NodaTime.ZonedDateTime.#ctor(NodaTime.Instant,NodaTime.DateTimeZone)
  id: '#ctor(NodaTime.Instant,NodaTime.DateTimeZone)'
  parent: NodaTime.ZonedDateTime
  langs:
  - csharp
  - vb
  name: ZonedDateTime(Instant, DateTimeZone)
  nameWithType: ZonedDateTime.ZonedDateTime(Instant, DateTimeZone)
  fullName: NodaTime.ZonedDateTime.ZonedDateTime(NodaTime.Instant, NodaTime.DateTimeZone)
  type: Constructor
  source:
    remote:
      path: 2.4.x/src/NodaTime/ZonedDateTime.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: .ctor
    path: src/NodaTime/ZonedDateTime.cs
    startLine: 80
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nInitializes a new instance of the <xref href=\"NodaTime.ZonedDateTime\" data-throw-if-not-resolved=\"false\"></xref> struct in the specified time zone\nand the ISO calendar.\n"
  example: []
  syntax:
    content: public ZonedDateTime(Instant instant, DateTimeZone zone)
    parameters:
    - id: instant
      type: NodaTime.Instant
      description: The instant.
    - id: zone
      type: NodaTime.DateTimeZone
      description: The time zone.
    content.vb: Public Sub New(instant As Instant, zone As DateTimeZone)
  overload: NodaTime.ZonedDateTime.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: NodaTime.ZonedDateTime.#ctor(NodaTime.LocalDateTime,NodaTime.DateTimeZone,NodaTime.Offset)
  commentId: M:NodaTime.ZonedDateTime.#ctor(NodaTime.LocalDateTime,NodaTime.DateTimeZone,NodaTime.Offset)
  id: '#ctor(NodaTime.LocalDateTime,NodaTime.DateTimeZone,NodaTime.Offset)'
  parent: NodaTime.ZonedDateTime
  langs:
  - csharp
  - vb
  name: ZonedDateTime(LocalDateTime, DateTimeZone, Offset)
  nameWithType: ZonedDateTime.ZonedDateTime(LocalDateTime, DateTimeZone, Offset)
  fullName: NodaTime.ZonedDateTime.ZonedDateTime(NodaTime.LocalDateTime, NodaTime.DateTimeZone, NodaTime.Offset)
  type: Constructor
  source:
    remote:
      path: 2.4.x/src/NodaTime/ZonedDateTime.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: .ctor
    path: src/NodaTime/ZonedDateTime.cs
    startLine: 97
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nInitializes a new instance of the <xref href=\"NodaTime.ZonedDateTime\" data-throw-if-not-resolved=\"false\"></xref> struct in the specified time zone\nfrom a given local time and offset. The offset is validated to be correct as part of initialization.\nIn most cases a local time can only map to a single instant anyway, but the offset is included here for cases\nwhere the local time is ambiguous, usually due to daylight saving transitions.\n"
  example: []
  syntax:
    content: public ZonedDateTime(LocalDateTime localDateTime, DateTimeZone zone, Offset offset)
    parameters:
    - id: localDateTime
      type: NodaTime.LocalDateTime
      description: The local date and time.
    - id: zone
      type: NodaTime.DateTimeZone
      description: The time zone.
    - id: offset
      type: NodaTime.Offset
      description: The offset between UTC and local time at the desired instant.
    content.vb: Public Sub New(localDateTime As LocalDateTime, zone As DateTimeZone, offset As Offset)
  overload: NodaTime.ZonedDateTime.#ctor*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: >-
      <code data-dev-comment-type="paramref" class="paramref">offset</code> is not a valid offset at the given
          local date and time.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: NodaTime.ZonedDateTime.Offset
  commentId: P:NodaTime.ZonedDateTime.Offset
  id: Offset
  parent: NodaTime.ZonedDateTime
  langs:
  - csharp
  - vb
  name: Offset
  nameWithType: ZonedDateTime.Offset
  fullName: NodaTime.ZonedDateTime.Offset
  type: Property
  source:
    remote:
      path: 2.4.x/src/NodaTime/ZonedDateTime.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: Offset
    path: src/NodaTime/ZonedDateTime.cs
    startLine: 114
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: Gets the offset of the local representation of this value from UTC.
  example: []
  syntax:
    content: public Offset Offset { get; }
    parameters: []
    return:
      type: NodaTime.Offset
      description: The offset of the local representation of this value from UTC.
    content.vb: Public ReadOnly Property Offset As Offset
  overload: NodaTime.ZonedDateTime.Offset*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: NodaTime.ZonedDateTime.Zone
  commentId: P:NodaTime.ZonedDateTime.Zone
  id: Zone
  parent: NodaTime.ZonedDateTime
  langs:
  - csharp
  - vb
  name: Zone
  nameWithType: ZonedDateTime.Zone
  fullName: NodaTime.ZonedDateTime.Zone
  type: Property
  source:
    remote:
      path: 2.4.x/src/NodaTime/ZonedDateTime.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: Zone
    path: src/NodaTime/ZonedDateTime.cs
    startLine: 118
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: Gets the time zone associated with this value.
  example: []
  syntax:
    content: public DateTimeZone Zone { get; }
    parameters: []
    return:
      type: NodaTime.DateTimeZone
      description: The time zone associated with this value.
    content.vb: Public ReadOnly Property Zone As DateTimeZone
  overload: NodaTime.ZonedDateTime.Zone*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: NodaTime.ZonedDateTime.LocalDateTime
  commentId: P:NodaTime.ZonedDateTime.LocalDateTime
  id: LocalDateTime
  parent: NodaTime.ZonedDateTime
  langs:
  - csharp
  - vb
  name: LocalDateTime
  nameWithType: ZonedDateTime.LocalDateTime
  fullName: NodaTime.ZonedDateTime.LocalDateTime
  type: Property
  source:
    remote:
      path: 2.4.x/src/NodaTime/ZonedDateTime.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: LocalDateTime
    path: src/NodaTime/ZonedDateTime.cs
    startLine: 130
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nGets the local date and time represented by this zoned date and time.\n"
  remarks: "\nThe returned\n<xref href=\"NodaTime.LocalDateTime\" data-throw-if-not-resolved=\"false\"></xref> will have the same calendar system and return the same values for\neach of the calendar properties (Year, MonthOfYear and so on), but will not be associated with any\nparticular time zone.\n"
  example: []
  syntax:
    content: public LocalDateTime LocalDateTime { get; }
    parameters: []
    return:
      type: NodaTime.LocalDateTime
      description: The local date and time represented by this zoned date and time.
    content.vb: Public ReadOnly Property LocalDateTime As LocalDateTime
  overload: NodaTime.ZonedDateTime.LocalDateTime*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: NodaTime.ZonedDateTime.Calendar
  commentId: P:NodaTime.ZonedDateTime.Calendar
  id: Calendar
  parent: NodaTime.ZonedDateTime
  langs:
  - csharp
  - vb
  name: Calendar
  nameWithType: ZonedDateTime.Calendar
  fullName: NodaTime.ZonedDateTime.Calendar
  type: Property
  source:
    remote:
      path: 2.4.x/src/NodaTime/ZonedDateTime.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: Calendar
    path: src/NodaTime/ZonedDateTime.cs
    startLine: 134
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: Gets the calendar system associated with this zoned date and time.
  example: []
  syntax:
    content: public CalendarSystem Calendar { get; }
    parameters: []
    return:
      type: NodaTime.CalendarSystem
      description: The calendar system associated with this zoned date and time.
    content.vb: Public ReadOnly Property Calendar As CalendarSystem
  overload: NodaTime.ZonedDateTime.Calendar*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: NodaTime.ZonedDateTime.Date
  commentId: P:NodaTime.ZonedDateTime.Date
  id: Date
  parent: NodaTime.ZonedDateTime
  langs:
  - csharp
  - vb
  name: Date
  nameWithType: ZonedDateTime.Date
  fullName: NodaTime.ZonedDateTime.Date
  type: Property
  source:
    remote:
      path: 2.4.x/src/NodaTime/ZonedDateTime.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: Date
    path: src/NodaTime/ZonedDateTime.cs
    startLine: 145
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nGets the local date represented by this zoned date and time.\n"
  remarks: "\nThe returned <xref href=\"NodaTime.LocalDate\" data-throw-if-not-resolved=\"false\"></xref>\nwill have the same calendar system and return the same values for each of the date-based calendar\nproperties (Year, MonthOfYear and so on), but will not be associated with any particular time zone.\n"
  example: []
  syntax:
    content: public LocalDate Date { get; }
    parameters: []
    return:
      type: NodaTime.LocalDate
      description: The local date represented by this zoned date and time.
    content.vb: Public ReadOnly Property Date As LocalDate
  overload: NodaTime.ZonedDateTime.Date*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: NodaTime.ZonedDateTime.TimeOfDay
  commentId: P:NodaTime.ZonedDateTime.TimeOfDay
  id: TimeOfDay
  parent: NodaTime.ZonedDateTime
  langs:
  - csharp
  - vb
  name: TimeOfDay
  nameWithType: ZonedDateTime.TimeOfDay
  fullName: NodaTime.ZonedDateTime.TimeOfDay
  type: Property
  source:
    remote:
      path: 2.4.x/src/NodaTime/ZonedDateTime.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: TimeOfDay
    path: src/NodaTime/ZonedDateTime.cs
    startLine: 156
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nGets the time portion of this zoned date and time.\n"
  remarks: "\nThe returned <xref href=\"NodaTime.LocalTime\" data-throw-if-not-resolved=\"false\"></xref> will\nreturn the same values for each of the time-based properties (Hour, Minute and so on), but\nwill not be associated with any particular time zone.\n"
  example: []
  syntax:
    content: public LocalTime TimeOfDay { get; }
    parameters: []
    return:
      type: NodaTime.LocalTime
      description: The time portion of this zoned date and time.
    content.vb: Public ReadOnly Property TimeOfDay As LocalTime
  overload: NodaTime.ZonedDateTime.TimeOfDay*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: NodaTime.ZonedDateTime.Era
  commentId: P:NodaTime.ZonedDateTime.Era
  id: Era
  parent: NodaTime.ZonedDateTime
  langs:
  - csharp
  - vb
  name: Era
  nameWithType: ZonedDateTime.Era
  fullName: NodaTime.ZonedDateTime.Era
  type: Property
  source:
    remote:
      path: 2.4.x/src/NodaTime/ZonedDateTime.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: Era
    path: src/NodaTime/ZonedDateTime.cs
    startLine: 160
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: Gets the era for this zoned date and time.
  example: []
  syntax:
    content: public Era Era { get; }
    parameters: []
    return:
      type: NodaTime.Calendars.Era
      description: The era for this zoned date and time.
    content.vb: Public ReadOnly Property Era As Era
  overload: NodaTime.ZonedDateTime.Era*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: NodaTime.ZonedDateTime.Year
  commentId: P:NodaTime.ZonedDateTime.Year
  id: Year
  parent: NodaTime.ZonedDateTime
  langs:
  - csharp
  - vb
  name: Year
  nameWithType: ZonedDateTime.Year
  fullName: NodaTime.ZonedDateTime.Year
  type: Property
  source:
    remote:
      path: 2.4.x/src/NodaTime/ZonedDateTime.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: Year
    path: src/NodaTime/ZonedDateTime.cs
    startLine: 166
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: Gets the year of this zoned date and time.
  remarks: >-
    This returns the &quot;absolute year&quot;, so, for the ISO calendar,

    a value of 0 means 1 BC, for example.
  example: []
  syntax:
    content: public int Year { get; }
    parameters: []
    return:
      type: System.Int32
      description: The year of this zoned date and time.
    content.vb: Public ReadOnly Property Year As Integer
  overload: NodaTime.ZonedDateTime.Year*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: NodaTime.ZonedDateTime.YearOfEra
  commentId: P:NodaTime.ZonedDateTime.YearOfEra
  id: YearOfEra
  parent: NodaTime.ZonedDateTime
  langs:
  - csharp
  - vb
  name: YearOfEra
  nameWithType: ZonedDateTime.YearOfEra
  fullName: NodaTime.ZonedDateTime.YearOfEra
  type: Property
  source:
    remote:
      path: 2.4.x/src/NodaTime/ZonedDateTime.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: YearOfEra
    path: src/NodaTime/ZonedDateTime.cs
    startLine: 170
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: Gets the year of this zoned date and time within its era.
  example: []
  syntax:
    content: public int YearOfEra { get; }
    parameters: []
    return:
      type: System.Int32
      description: The year of this zoned date and time within its era.
    content.vb: Public ReadOnly Property YearOfEra As Integer
  overload: NodaTime.ZonedDateTime.YearOfEra*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: NodaTime.ZonedDateTime.Month
  commentId: P:NodaTime.ZonedDateTime.Month
  id: Month
  parent: NodaTime.ZonedDateTime
  langs:
  - csharp
  - vb
  name: Month
  nameWithType: ZonedDateTime.Month
  fullName: NodaTime.ZonedDateTime.Month
  type: Property
  source:
    remote:
      path: 2.4.x/src/NodaTime/ZonedDateTime.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: Month
    path: src/NodaTime/ZonedDateTime.cs
    startLine: 174
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: Gets the month of this zoned date and time within the year.
  example: []
  syntax:
    content: public int Month { get; }
    parameters: []
    return:
      type: System.Int32
      description: The month of this zoned date and time within the year.
    content.vb: Public ReadOnly Property Month As Integer
  overload: NodaTime.ZonedDateTime.Month*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: NodaTime.ZonedDateTime.DayOfYear
  commentId: P:NodaTime.ZonedDateTime.DayOfYear
  id: DayOfYear
  parent: NodaTime.ZonedDateTime
  langs:
  - csharp
  - vb
  name: DayOfYear
  nameWithType: ZonedDateTime.DayOfYear
  fullName: NodaTime.ZonedDateTime.DayOfYear
  type: Property
  source:
    remote:
      path: 2.4.x/src/NodaTime/ZonedDateTime.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: DayOfYear
    path: src/NodaTime/ZonedDateTime.cs
    startLine: 178
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: Gets the day of this zoned date and time within the year.
  example: []
  syntax:
    content: public int DayOfYear { get; }
    parameters: []
    return:
      type: System.Int32
      description: The day of this zoned date and time within the year.
    content.vb: Public ReadOnly Property DayOfYear As Integer
  overload: NodaTime.ZonedDateTime.DayOfYear*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: NodaTime.ZonedDateTime.Day
  commentId: P:NodaTime.ZonedDateTime.Day
  id: Day
  parent: NodaTime.ZonedDateTime
  langs:
  - csharp
  - vb
  name: Day
  nameWithType: ZonedDateTime.Day
  fullName: NodaTime.ZonedDateTime.Day
  type: Property
  source:
    remote:
      path: 2.4.x/src/NodaTime/ZonedDateTime.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: Day
    path: src/NodaTime/ZonedDateTime.cs
    startLine: 184
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nGets the day of this zoned date and time within the month.\n"
  example: []
  syntax:
    content: public int Day { get; }
    parameters: []
    return:
      type: System.Int32
      description: The day of this zoned date and time within the month.
    content.vb: Public ReadOnly Property Day As Integer
  overload: NodaTime.ZonedDateTime.Day*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: NodaTime.ZonedDateTime.DayOfWeek
  commentId: P:NodaTime.ZonedDateTime.DayOfWeek
  id: DayOfWeek
  parent: NodaTime.ZonedDateTime
  langs:
  - csharp
  - vb
  name: DayOfWeek
  nameWithType: ZonedDateTime.DayOfWeek
  fullName: NodaTime.ZonedDateTime.DayOfWeek
  type: Property
  source:
    remote:
      path: 2.4.x/src/NodaTime/ZonedDateTime.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: DayOfWeek
    path: src/NodaTime/ZonedDateTime.cs
    startLine: 190
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nGets the week day of this zoned date and time expressed as an <xref href=\"NodaTime.IsoDayOfWeek\" data-throw-if-not-resolved=\"false\"></xref> value.\n"
  example: []
  syntax:
    content: public IsoDayOfWeek DayOfWeek { get; }
    parameters: []
    return:
      type: NodaTime.IsoDayOfWeek
      description: The week day of this zoned date and time expressed as an <code>IsoDayOfWeek</code> value.
    content.vb: Public ReadOnly Property DayOfWeek As IsoDayOfWeek
  overload: NodaTime.ZonedDateTime.DayOfWeek*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: NodaTime.ZonedDateTime.Hour
  commentId: P:NodaTime.ZonedDateTime.Hour
  id: Hour
  parent: NodaTime.ZonedDateTime
  langs:
  - csharp
  - vb
  name: Hour
  nameWithType: ZonedDateTime.Hour
  fullName: NodaTime.ZonedDateTime.Hour
  type: Property
  source:
    remote:
      path: 2.4.x/src/NodaTime/ZonedDateTime.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: Hour
    path: src/NodaTime/ZonedDateTime.cs
    startLine: 196
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nGets the hour of day of this zoned date and time, in the range 0 to 23 inclusive.\n"
  example: []
  syntax:
    content: public int Hour { get; }
    parameters: []
    return:
      type: System.Int32
      description: The hour of day of this zoned date and time, in the range 0 to 23 inclusive.
    content.vb: Public ReadOnly Property Hour As Integer
  overload: NodaTime.ZonedDateTime.Hour*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: NodaTime.ZonedDateTime.ClockHourOfHalfDay
  commentId: P:NodaTime.ZonedDateTime.ClockHourOfHalfDay
  id: ClockHourOfHalfDay
  parent: NodaTime.ZonedDateTime
  langs:
  - csharp
  - vb
  name: ClockHourOfHalfDay
  nameWithType: ZonedDateTime.ClockHourOfHalfDay
  fullName: NodaTime.ZonedDateTime.ClockHourOfHalfDay
  type: Property
  source:
    remote:
      path: 2.4.x/src/NodaTime/ZonedDateTime.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: ClockHourOfHalfDay
    path: src/NodaTime/ZonedDateTime.cs
    startLine: 202
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nGets the hour of the half-day of this zoned date and time, in the range 1 to 12 inclusive.\n"
  example: []
  syntax:
    content: public int ClockHourOfHalfDay { get; }
    parameters: []
    return:
      type: System.Int32
      description: The hour of the half-day of this zoned date and time, in the range 1 to 12 inclusive.
    content.vb: Public ReadOnly Property ClockHourOfHalfDay As Integer
  overload: NodaTime.ZonedDateTime.ClockHourOfHalfDay*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: NodaTime.ZonedDateTime.Minute
  commentId: P:NodaTime.ZonedDateTime.Minute
  id: Minute
  parent: NodaTime.ZonedDateTime
  langs:
  - csharp
  - vb
  name: Minute
  nameWithType: ZonedDateTime.Minute
  fullName: NodaTime.ZonedDateTime.Minute
  type: Property
  source:
    remote:
      path: 2.4.x/src/NodaTime/ZonedDateTime.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: Minute
    path: src/NodaTime/ZonedDateTime.cs
    startLine: 208
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nGets the minute of this zoned date and time, in the range 0 to 59 inclusive.\n"
  example: []
  syntax:
    content: public int Minute { get; }
    parameters: []
    return:
      type: System.Int32
      description: The minute of this zoned date and time, in the range 0 to 59 inclusive.
    content.vb: Public ReadOnly Property Minute As Integer
  overload: NodaTime.ZonedDateTime.Minute*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: NodaTime.ZonedDateTime.Second
  commentId: P:NodaTime.ZonedDateTime.Second
  id: Second
  parent: NodaTime.ZonedDateTime
  langs:
  - csharp
  - vb
  name: Second
  nameWithType: ZonedDateTime.Second
  fullName: NodaTime.ZonedDateTime.Second
  type: Property
  source:
    remote:
      path: 2.4.x/src/NodaTime/ZonedDateTime.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: Second
    path: src/NodaTime/ZonedDateTime.cs
    startLine: 214
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nGets the second of this zoned date and time within the minute, in the range 0 to 59 inclusive.\n"
  example: []
  syntax:
    content: public int Second { get; }
    parameters: []
    return:
      type: System.Int32
      description: The second of this zoned date and time within the minute, in the range 0 to 59 inclusive.
    content.vb: Public ReadOnly Property Second As Integer
  overload: NodaTime.ZonedDateTime.Second*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: NodaTime.ZonedDateTime.Millisecond
  commentId: P:NodaTime.ZonedDateTime.Millisecond
  id: Millisecond
  parent: NodaTime.ZonedDateTime
  langs:
  - csharp
  - vb
  name: Millisecond
  nameWithType: ZonedDateTime.Millisecond
  fullName: NodaTime.ZonedDateTime.Millisecond
  type: Property
  source:
    remote:
      path: 2.4.x/src/NodaTime/ZonedDateTime.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: Millisecond
    path: src/NodaTime/ZonedDateTime.cs
    startLine: 220
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nGets the millisecond of this zoned date and time within the second, in the range 0 to 999 inclusive.\n"
  example: []
  syntax:
    content: public int Millisecond { get; }
    parameters: []
    return:
      type: System.Int32
      description: The millisecond of this zoned date and time within the second, in the range 0 to 999 inclusive.
    content.vb: Public ReadOnly Property Millisecond As Integer
  overload: NodaTime.ZonedDateTime.Millisecond*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: NodaTime.ZonedDateTime.TickOfSecond
  commentId: P:NodaTime.ZonedDateTime.TickOfSecond
  id: TickOfSecond
  parent: NodaTime.ZonedDateTime
  langs:
  - csharp
  - vb
  name: TickOfSecond
  nameWithType: ZonedDateTime.TickOfSecond
  fullName: NodaTime.ZonedDateTime.TickOfSecond
  type: Property
  source:
    remote:
      path: 2.4.x/src/NodaTime/ZonedDateTime.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: TickOfSecond
    path: src/NodaTime/ZonedDateTime.cs
    startLine: 226
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nGets the tick of this zoned date and time within the second, in the range 0 to 9,999,999 inclusive.\n"
  example: []
  syntax:
    content: public int TickOfSecond { get; }
    parameters: []
    return:
      type: System.Int32
      description: The tick of this zoned date and time within the second, in the range 0 to 9,999,999 inclusive.
    content.vb: Public ReadOnly Property TickOfSecond As Integer
  overload: NodaTime.ZonedDateTime.TickOfSecond*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: NodaTime.ZonedDateTime.TickOfDay
  commentId: P:NodaTime.ZonedDateTime.TickOfDay
  id: TickOfDay
  parent: NodaTime.ZonedDateTime
  langs:
  - csharp
  - vb
  name: TickOfDay
  nameWithType: ZonedDateTime.TickOfDay
  fullName: NodaTime.ZonedDateTime.TickOfDay
  type: Property
  source:
    remote:
      path: 2.4.x/src/NodaTime/ZonedDateTime.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: TickOfDay
    path: src/NodaTime/ZonedDateTime.cs
    startLine: 236
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nGets the tick of this zoned date and time within the day, in the range 0 to 863,999,999,999 inclusive.\n"
  remarks: "\nThis is the TickOfDay portion of the contained <xref href=\"NodaTime.OffsetDateTime\" data-throw-if-not-resolved=\"false\"></xref>.\nOn daylight saving time transition dates, it may not be the same as the number of ticks elapsed since the beginning of the day.\n"
  example: []
  syntax:
    content: public long TickOfDay { get; }
    parameters: []
    return:
      type: System.Int64
      description: The tick of this zoned date and time within the day, in the range 0 to 863,999,999,999 inclusive.
    content.vb: Public ReadOnly Property TickOfDay As Long
  overload: NodaTime.ZonedDateTime.TickOfDay*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: NodaTime.ZonedDateTime.NanosecondOfSecond
  commentId: P:NodaTime.ZonedDateTime.NanosecondOfSecond
  id: NanosecondOfSecond
  parent: NodaTime.ZonedDateTime
  langs:
  - csharp
  - vb
  name: NanosecondOfSecond
  nameWithType: ZonedDateTime.NanosecondOfSecond
  fullName: NodaTime.ZonedDateTime.NanosecondOfSecond
  type: Property
  source:
    remote:
      path: 2.4.x/src/NodaTime/ZonedDateTime.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: NanosecondOfSecond
    path: src/NodaTime/ZonedDateTime.cs
    startLine: 242
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nGets the nanosecond of this zoned date and time within the second, in the range 0 to 999,999,999 inclusive.\n"
  example: []
  syntax:
    content: public int NanosecondOfSecond { get; }
    parameters: []
    return:
      type: System.Int32
      description: The nanosecond of this zoned date and time within the second, in the range 0 to 999,999,999 inclusive.
    content.vb: Public ReadOnly Property NanosecondOfSecond As Integer
  overload: NodaTime.ZonedDateTime.NanosecondOfSecond*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: NodaTime.ZonedDateTime.NanosecondOfDay
  commentId: P:NodaTime.ZonedDateTime.NanosecondOfDay
  id: NanosecondOfDay
  parent: NodaTime.ZonedDateTime
  langs:
  - csharp
  - vb
  name: NanosecondOfDay
  nameWithType: ZonedDateTime.NanosecondOfDay
  fullName: NodaTime.ZonedDateTime.NanosecondOfDay
  type: Property
  source:
    remote:
      path: 2.4.x/src/NodaTime/ZonedDateTime.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: NanosecondOfDay
    path: src/NodaTime/ZonedDateTime.cs
    startLine: 252
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nGets the nanosecond of this zoned date and time within the day, in the range 0 to 86,399,999,999,999 inclusive.\n"
  remarks: "\nThis is the NanosecondOfDay portion of the contained <xref href=\"NodaTime.OffsetDateTime\" data-throw-if-not-resolved=\"false\"></xref>.\nOn daylight saving time transition dates, it may not be the same as the number of nanoseconds elapsed since the beginning of the day.\n"
  example: []
  syntax:
    content: public long NanosecondOfDay { get; }
    parameters: []
    return:
      type: System.Int64
      description: The nanosecond of this zoned date and time within the day, in the range 0 to 86,399,999,999,999 inclusive.
    content.vb: Public ReadOnly Property NanosecondOfDay As Long
  overload: NodaTime.ZonedDateTime.NanosecondOfDay*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: NodaTime.ZonedDateTime.ToInstant
  commentId: M:NodaTime.ZonedDateTime.ToInstant
  id: ToInstant
  parent: NodaTime.ZonedDateTime
  langs:
  - csharp
  - vb
  name: ToInstant()
  nameWithType: ZonedDateTime.ToInstant()
  fullName: NodaTime.ZonedDateTime.ToInstant()
  type: Method
  source:
    remote:
      path: 2.4.x/src/NodaTime/ZonedDateTime.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: ToInstant
    path: src/NodaTime/ZonedDateTime.cs
    startLine: 264
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nConverts this value to the instant it represents on the time line.\n"
  remarks: "\nThis is always an unambiguous conversion. Any difficulties due to daylight saving\ntransitions or other changes in time zone are handled when converting from a\n<xref href=\"NodaTime.LocalDateTime\" data-throw-if-not-resolved=\"false\"></xref> to a <xref href=\"NodaTime.ZonedDateTime\" data-throw-if-not-resolved=\"false\"></xref>; the <code>ZonedDateTime</code> remembers\nthe actual offset from UTC to local time, so it always knows the exact instant represented.\n"
  example: []
  syntax:
    content: public Instant ToInstant()
    return:
      type: NodaTime.Instant
      description: The instant corresponding to this value.
    content.vb: Public Function ToInstant As Instant
  overload: NodaTime.ZonedDateTime.ToInstant*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: NodaTime.ZonedDateTime.WithZone(NodaTime.DateTimeZone)
  commentId: M:NodaTime.ZonedDateTime.WithZone(NodaTime.DateTimeZone)
  id: WithZone(NodaTime.DateTimeZone)
  parent: NodaTime.ZonedDateTime
  langs:
  - csharp
  - vb
  name: WithZone(DateTimeZone)
  nameWithType: ZonedDateTime.WithZone(DateTimeZone)
  fullName: NodaTime.ZonedDateTime.WithZone(NodaTime.DateTimeZone)
  type: Method
  source:
    remote:
      path: 2.4.x/src/NodaTime/ZonedDateTime.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: WithZone
    path: src/NodaTime/ZonedDateTime.cs
    startLine: 273
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nCreates a new <xref href=\"NodaTime.ZonedDateTime\" data-throw-if-not-resolved=\"false\"></xref> representing the same instant in time, in the\nsame calendar but a different time zone.\n"
  example: []
  syntax:
    content: public ZonedDateTime WithZone(DateTimeZone targetZone)
    parameters:
    - id: targetZone
      type: NodaTime.DateTimeZone
      description: The target time zone to convert to.
    return:
      type: NodaTime.ZonedDateTime
      description: A new value in the target time zone.
    content.vb: Public Function WithZone(targetZone As DateTimeZone) As ZonedDateTime
  overload: NodaTime.ZonedDateTime.WithZone*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: NodaTime.ZonedDateTime.WithCalendar(NodaTime.CalendarSystem)
  commentId: M:NodaTime.ZonedDateTime.WithCalendar(NodaTime.CalendarSystem)
  id: WithCalendar(NodaTime.CalendarSystem)
  parent: NodaTime.ZonedDateTime
  langs:
  - csharp
  - vb
  name: WithCalendar(CalendarSystem)
  nameWithType: ZonedDateTime.WithCalendar(CalendarSystem)
  fullName: NodaTime.ZonedDateTime.WithCalendar(NodaTime.CalendarSystem)
  type: Method
  source:
    remote:
      path: 2.4.x/src/NodaTime/ZonedDateTime.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: WithCalendar
    path: src/NodaTime/ZonedDateTime.cs
    startLine: 287
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nCreates a new ZonedDateTime representing the same physical date, time and offset, but in a different calendar.\nThe returned ZonedDateTime is likely to have different date field values to this one.\nFor example, January 1st 1970 in the Gregorian calendar was December 19th 1969 in the Julian calendar.\n"
  example: []
  syntax:
    content: public ZonedDateTime WithCalendar(CalendarSystem calendar)
    parameters:
    - id: calendar
      type: NodaTime.CalendarSystem
      description: The calendar system to convert this zoned date and time to.
    return:
      type: NodaTime.ZonedDateTime
      description: The converted ZonedDateTime.
    content.vb: Public Function WithCalendar(calendar As CalendarSystem) As ZonedDateTime
  overload: NodaTime.ZonedDateTime.WithCalendar*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: NodaTime.ZonedDateTime.Equals(NodaTime.ZonedDateTime)
  commentId: M:NodaTime.ZonedDateTime.Equals(NodaTime.ZonedDateTime)
  id: Equals(NodaTime.ZonedDateTime)
  parent: NodaTime.ZonedDateTime
  langs:
  - csharp
  - vb
  name: Equals(ZonedDateTime)
  nameWithType: ZonedDateTime.Equals(ZonedDateTime)
  fullName: NodaTime.ZonedDateTime.Equals(NodaTime.ZonedDateTime)
  type: Method
  source:
    remote:
      path: 2.4.x/src/NodaTime/ZonedDateTime.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: Equals
    path: src/NodaTime/ZonedDateTime.cs
    startLine: 302
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nIndicates whether the current object is equal to another object of the same type.\n"
  example: []
  syntax:
    content: public bool Equals(ZonedDateTime other)
    parameters:
    - id: other
      type: NodaTime.ZonedDateTime
      description: An object to compare with this object.
    return:
      type: System.Boolean
      description: "\ntrue if the current object is equal to the <code data-dev-comment-type=\"paramref\" class=\"paramref\">other</code> parameter; otherwise, false.\n"
    content.vb: Public Function Equals(other As ZonedDateTime) As Boolean
  overload: NodaTime.ZonedDateTime.Equals*
  implements:
  - System.IEquatable{NodaTime.ZonedDateTime}.Equals(NodaTime.ZonedDateTime)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: NodaTime.ZonedDateTime.Equals(System.Object)
  commentId: M:NodaTime.ZonedDateTime.Equals(System.Object)
  id: Equals(System.Object)
  parent: NodaTime.ZonedDateTime
  langs:
  - csharp
  - vb
  name: Equals(Object)
  nameWithType: ZonedDateTime.Equals(Object)
  fullName: NodaTime.ZonedDateTime.Equals(System.Object)
  type: Method
  source:
    remote:
      path: 2.4.x/src/NodaTime/ZonedDateTime.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: Equals
    path: src/NodaTime/ZonedDateTime.cs
    startLine: 313
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nIndicates whether this instance and a specified object are equal.\n"
  example: []
  syntax:
    content: public override bool Equals(object obj)
    parameters:
    - id: obj
      type: System.Object
      description: Another object to compare to.
    return:
      type: System.Boolean
      description: "\ntrue if <code data-dev-comment-type=\"paramref\" class=\"paramref\">obj</code> and this instance are the same type and represent the same value; otherwise, false.\n"
    content.vb: Public Overrides Function Equals(obj As Object) As Boolean
  overridden: System.ValueType.Equals(System.Object)
  overload: NodaTime.ZonedDateTime.Equals*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: NodaTime.ZonedDateTime.GetHashCode
  commentId: M:NodaTime.ZonedDateTime.GetHashCode
  id: GetHashCode
  parent: NodaTime.ZonedDateTime
  langs:
  - csharp
  - vb
  name: GetHashCode()
  nameWithType: ZonedDateTime.GetHashCode()
  fullName: NodaTime.ZonedDateTime.GetHashCode()
  type: Method
  source:
    remote:
      path: 2.4.x/src/NodaTime/ZonedDateTime.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: GetHashCode
    path: src/NodaTime/ZonedDateTime.cs
    startLine: 322
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nComputes the hash code for this instance.\n"
  example: []
  syntax:
    content: public override int GetHashCode()
    return:
      type: System.Int32
      description: "\nA 32-bit signed integer that is the hash code for this instance.\n"
    content.vb: Public Overrides Function GetHashCode As Integer
  overridden: System.ValueType.GetHashCode
  overload: NodaTime.ZonedDateTime.GetHashCode*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: NodaTime.ZonedDateTime.op_Equality(NodaTime.ZonedDateTime,NodaTime.ZonedDateTime)
  commentId: M:NodaTime.ZonedDateTime.op_Equality(NodaTime.ZonedDateTime,NodaTime.ZonedDateTime)
  id: op_Equality(NodaTime.ZonedDateTime,NodaTime.ZonedDateTime)
  parent: NodaTime.ZonedDateTime
  langs:
  - csharp
  - vb
  name: Equality(ZonedDateTime, ZonedDateTime)
  nameWithType: ZonedDateTime.Equality(ZonedDateTime, ZonedDateTime)
  fullName: NodaTime.ZonedDateTime.Equality(NodaTime.ZonedDateTime, NodaTime.ZonedDateTime)
  type: Operator
  source:
    remote:
      path: 2.4.x/src/NodaTime/ZonedDateTime.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: op_Equality
    path: src/NodaTime/ZonedDateTime.cs
    startLine: 332
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nImplements the operator ==.\n"
  example: []
  syntax:
    content: public static bool operator ==(ZonedDateTime left, ZonedDateTime right)
    parameters:
    - id: left
      type: NodaTime.ZonedDateTime
      description: The first value to compare
    - id: right
      type: NodaTime.ZonedDateTime
      description: The second value to compare
    return:
      type: System.Boolean
      description: True if the two operands are equal according to <xref href="NodaTime.ZonedDateTime.Equals(NodaTime.ZonedDateTime)" data-throw-if-not-resolved="false"></xref>; false otherwise
    content.vb: Public Shared Operator =(left As ZonedDateTime, right As ZonedDateTime) As Boolean
  overload: NodaTime.ZonedDateTime.op_Equality*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: NodaTime.ZonedDateTime.op_Inequality(NodaTime.ZonedDateTime,NodaTime.ZonedDateTime)
  commentId: M:NodaTime.ZonedDateTime.op_Inequality(NodaTime.ZonedDateTime,NodaTime.ZonedDateTime)
  id: op_Inequality(NodaTime.ZonedDateTime,NodaTime.ZonedDateTime)
  parent: NodaTime.ZonedDateTime
  langs:
  - csharp
  - vb
  name: Inequality(ZonedDateTime, ZonedDateTime)
  nameWithType: ZonedDateTime.Inequality(ZonedDateTime, ZonedDateTime)
  fullName: NodaTime.ZonedDateTime.Inequality(NodaTime.ZonedDateTime, NodaTime.ZonedDateTime)
  type: Operator
  source:
    remote:
      path: 2.4.x/src/NodaTime/ZonedDateTime.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: op_Inequality
    path: src/NodaTime/ZonedDateTime.cs
    startLine: 340
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nImplements the operator !=.\n"
  example: []
  syntax:
    content: public static bool operator !=(ZonedDateTime left, ZonedDateTime right)
    parameters:
    - id: left
      type: NodaTime.ZonedDateTime
      description: The first value to compare
    - id: right
      type: NodaTime.ZonedDateTime
      description: The second value to compare
    return:
      type: System.Boolean
      description: False if the two operands are equal according to <xref href="NodaTime.ZonedDateTime.Equals(NodaTime.ZonedDateTime)" data-throw-if-not-resolved="false"></xref>; true otherwise
    content.vb: Public Shared Operator <>(left As ZonedDateTime, right As ZonedDateTime) As Boolean
  overload: NodaTime.ZonedDateTime.op_Inequality*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: NodaTime.ZonedDateTime.Add(NodaTime.ZonedDateTime,NodaTime.Duration)
  commentId: M:NodaTime.ZonedDateTime.Add(NodaTime.ZonedDateTime,NodaTime.Duration)
  id: Add(NodaTime.ZonedDateTime,NodaTime.Duration)
  parent: NodaTime.ZonedDateTime
  langs:
  - csharp
  - vb
  name: Add(ZonedDateTime, Duration)
  nameWithType: ZonedDateTime.Add(ZonedDateTime, Duration)
  fullName: NodaTime.ZonedDateTime.Add(NodaTime.ZonedDateTime, NodaTime.Duration)
  type: Method
  source:
    remote:
      path: 2.4.x/src/NodaTime/ZonedDateTime.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: Add
    path: src/NodaTime/ZonedDateTime.cs
    startLine: 351
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nAdds a duration to a zoned date and time.\n"
  remarks: "\nThis is an alternative way of calling <xref href=\"NodaTime.ZonedDateTime.op_Addition(NodaTime.ZonedDateTime%2cNodaTime.Duration)\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public static ZonedDateTime Add(ZonedDateTime zonedDateTime, Duration duration)
    parameters:
    - id: zonedDateTime
      type: NodaTime.ZonedDateTime
      description: The value to add the duration to.
    - id: duration
      type: NodaTime.Duration
      description: The duration to add
    return:
      type: NodaTime.ZonedDateTime
      description: A new value with the time advanced by the given duration, in the same calendar system and time zone.
    content.vb: Public Shared Function Add(zonedDateTime As ZonedDateTime, duration As Duration) As ZonedDateTime
  overload: NodaTime.ZonedDateTime.Add*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: NodaTime.ZonedDateTime.Plus(NodaTime.Duration)
  commentId: M:NodaTime.ZonedDateTime.Plus(NodaTime.Duration)
  id: Plus(NodaTime.Duration)
  parent: NodaTime.ZonedDateTime
  langs:
  - csharp
  - vb
  name: Plus(Duration)
  nameWithType: ZonedDateTime.Plus(Duration)
  fullName: NodaTime.ZonedDateTime.Plus(NodaTime.Duration)
  type: Method
  source:
    remote:
      path: 2.4.x/src/NodaTime/ZonedDateTime.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: Plus
    path: src/NodaTime/ZonedDateTime.cs
    startLine: 361
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nReturns the result of adding a duration to this zoned date and time.\n"
  remarks: "\nThis is an alternative way of calling <xref href=\"NodaTime.ZonedDateTime.op_Addition(NodaTime.ZonedDateTime%2cNodaTime.Duration)\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public ZonedDateTime Plus(Duration duration)
    parameters:
    - id: duration
      type: NodaTime.Duration
      description: The duration to add
    return:
      type: NodaTime.ZonedDateTime
      description: A new <xref href="NodaTime.ZonedDateTime" data-throw-if-not-resolved="false"></xref> representing the result of the addition.
    content.vb: Public Function Plus(duration As Duration) As ZonedDateTime
  overload: NodaTime.ZonedDateTime.Plus*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: NodaTime.ZonedDateTime.PlusHours(System.Int32)
  commentId: M:NodaTime.ZonedDateTime.PlusHours(System.Int32)
  id: PlusHours(System.Int32)
  parent: NodaTime.ZonedDateTime
  langs:
  - csharp
  - vb
  name: PlusHours(Int32)
  nameWithType: ZonedDateTime.PlusHours(Int32)
  fullName: NodaTime.ZonedDateTime.PlusHours(System.Int32)
  type: Method
  source:
    remote:
      path: 2.4.x/src/NodaTime/ZonedDateTime.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: PlusHours
    path: src/NodaTime/ZonedDateTime.cs
    startLine: 369
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nReturns the result of adding a increment of hours to this zoned date and time\n"
  example: []
  syntax:
    content: public ZonedDateTime PlusHours(int hours)
    parameters:
    - id: hours
      type: System.Int32
      description: The number of hours to add
    return:
      type: NodaTime.ZonedDateTime
      description: A new <xref href="NodaTime.ZonedDateTime" data-throw-if-not-resolved="false"></xref> representing the result of the addition.
    content.vb: Public Function PlusHours(hours As Integer) As ZonedDateTime
  overload: NodaTime.ZonedDateTime.PlusHours*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: NodaTime.ZonedDateTime.PlusMinutes(System.Int32)
  commentId: M:NodaTime.ZonedDateTime.PlusMinutes(System.Int32)
  id: PlusMinutes(System.Int32)
  parent: NodaTime.ZonedDateTime
  langs:
  - csharp
  - vb
  name: PlusMinutes(Int32)
  nameWithType: ZonedDateTime.PlusMinutes(Int32)
  fullName: NodaTime.ZonedDateTime.PlusMinutes(System.Int32)
  type: Method
  source:
    remote:
      path: 2.4.x/src/NodaTime/ZonedDateTime.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: PlusMinutes
    path: src/NodaTime/ZonedDateTime.cs
    startLine: 377
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nReturns the result of adding an increment of minutes to this zoned date and time\n"
  example: []
  syntax:
    content: public ZonedDateTime PlusMinutes(int minutes)
    parameters:
    - id: minutes
      type: System.Int32
      description: The number of minutes to add
    return:
      type: NodaTime.ZonedDateTime
      description: A new <xref href="NodaTime.ZonedDateTime" data-throw-if-not-resolved="false"></xref> representing the result of the addition.
    content.vb: Public Function PlusMinutes(minutes As Integer) As ZonedDateTime
  overload: NodaTime.ZonedDateTime.PlusMinutes*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: NodaTime.ZonedDateTime.PlusSeconds(System.Int64)
  commentId: M:NodaTime.ZonedDateTime.PlusSeconds(System.Int64)
  id: PlusSeconds(System.Int64)
  parent: NodaTime.ZonedDateTime
  langs:
  - csharp
  - vb
  name: PlusSeconds(Int64)
  nameWithType: ZonedDateTime.PlusSeconds(Int64)
  fullName: NodaTime.ZonedDateTime.PlusSeconds(System.Int64)
  type: Method
  source:
    remote:
      path: 2.4.x/src/NodaTime/ZonedDateTime.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: PlusSeconds
    path: src/NodaTime/ZonedDateTime.cs
    startLine: 385
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nReturns the result of adding an increment of seconds to this zoned date and time\n"
  example: []
  syntax:
    content: public ZonedDateTime PlusSeconds(long seconds)
    parameters:
    - id: seconds
      type: System.Int64
      description: The number of seconds to add
    return:
      type: NodaTime.ZonedDateTime
      description: A new <xref href="NodaTime.ZonedDateTime" data-throw-if-not-resolved="false"></xref> representing the result of the addition.
    content.vb: Public Function PlusSeconds(seconds As Long) As ZonedDateTime
  overload: NodaTime.ZonedDateTime.PlusSeconds*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: NodaTime.ZonedDateTime.PlusMilliseconds(System.Int64)
  commentId: M:NodaTime.ZonedDateTime.PlusMilliseconds(System.Int64)
  id: PlusMilliseconds(System.Int64)
  parent: NodaTime.ZonedDateTime
  langs:
  - csharp
  - vb
  name: PlusMilliseconds(Int64)
  nameWithType: ZonedDateTime.PlusMilliseconds(Int64)
  fullName: NodaTime.ZonedDateTime.PlusMilliseconds(System.Int64)
  type: Method
  source:
    remote:
      path: 2.4.x/src/NodaTime/ZonedDateTime.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: PlusMilliseconds
    path: src/NodaTime/ZonedDateTime.cs
    startLine: 393
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nReturns the result of adding an increment of milliseconds to this zoned date and time\n"
  example: []
  syntax:
    content: public ZonedDateTime PlusMilliseconds(long milliseconds)
    parameters:
    - id: milliseconds
      type: System.Int64
      description: The number of milliseconds to add
    return:
      type: NodaTime.ZonedDateTime
      description: A new <xref href="NodaTime.ZonedDateTime" data-throw-if-not-resolved="false"></xref> representing the result of the addition.
    content.vb: Public Function PlusMilliseconds(milliseconds As Long) As ZonedDateTime
  overload: NodaTime.ZonedDateTime.PlusMilliseconds*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: NodaTime.ZonedDateTime.PlusTicks(System.Int64)
  commentId: M:NodaTime.ZonedDateTime.PlusTicks(System.Int64)
  id: PlusTicks(System.Int64)
  parent: NodaTime.ZonedDateTime
  langs:
  - csharp
  - vb
  name: PlusTicks(Int64)
  nameWithType: ZonedDateTime.PlusTicks(Int64)
  fullName: NodaTime.ZonedDateTime.PlusTicks(System.Int64)
  type: Method
  source:
    remote:
      path: 2.4.x/src/NodaTime/ZonedDateTime.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: PlusTicks
    path: src/NodaTime/ZonedDateTime.cs
    startLine: 401
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nReturns the result of adding an increment of ticks to this zoned date and time\n"
  example: []
  syntax:
    content: public ZonedDateTime PlusTicks(long ticks)
    parameters:
    - id: ticks
      type: System.Int64
      description: The number of ticks to add
    return:
      type: NodaTime.ZonedDateTime
      description: A new <xref href="NodaTime.ZonedDateTime" data-throw-if-not-resolved="false"></xref> representing the result of the addition.
    content.vb: Public Function PlusTicks(ticks As Long) As ZonedDateTime
  overload: NodaTime.ZonedDateTime.PlusTicks*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: NodaTime.ZonedDateTime.PlusNanoseconds(System.Int64)
  commentId: M:NodaTime.ZonedDateTime.PlusNanoseconds(System.Int64)
  id: PlusNanoseconds(System.Int64)
  parent: NodaTime.ZonedDateTime
  langs:
  - csharp
  - vb
  name: PlusNanoseconds(Int64)
  nameWithType: ZonedDateTime.PlusNanoseconds(Int64)
  fullName: NodaTime.ZonedDateTime.PlusNanoseconds(System.Int64)
  type: Method
  source:
    remote:
      path: 2.4.x/src/NodaTime/ZonedDateTime.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: PlusNanoseconds
    path: src/NodaTime/ZonedDateTime.cs
    startLine: 409
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nReturns the result of adding an increment of nanoseconds to this zoned date and time\n"
  example: []
  syntax:
    content: public ZonedDateTime PlusNanoseconds(long nanoseconds)
    parameters:
    - id: nanoseconds
      type: System.Int64
      description: The number of nanoseconds to add
    return:
      type: NodaTime.ZonedDateTime
      description: A new <xref href="NodaTime.ZonedDateTime" data-throw-if-not-resolved="false"></xref> representing the result of the addition.
    content.vb: Public Function PlusNanoseconds(nanoseconds As Long) As ZonedDateTime
  overload: NodaTime.ZonedDateTime.PlusNanoseconds*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: NodaTime.ZonedDateTime.op_Addition(NodaTime.ZonedDateTime,NodaTime.Duration)
  commentId: M:NodaTime.ZonedDateTime.op_Addition(NodaTime.ZonedDateTime,NodaTime.Duration)
  id: op_Addition(NodaTime.ZonedDateTime,NodaTime.Duration)
  parent: NodaTime.ZonedDateTime
  langs:
  - csharp
  - vb
  name: Addition(ZonedDateTime, Duration)
  nameWithType: ZonedDateTime.Addition(ZonedDateTime, Duration)
  fullName: NodaTime.ZonedDateTime.Addition(NodaTime.ZonedDateTime, NodaTime.Duration)
  type: Operator
  source:
    remote:
      path: 2.4.x/src/NodaTime/ZonedDateTime.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: op_Addition
    path: src/NodaTime/ZonedDateTime.cs
    startLine: 422
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nReturns a new <xref href=\"NodaTime.ZonedDateTime\" data-throw-if-not-resolved=\"false\"></xref> with the time advanced by the given duration. Note that\ndue to daylight saving time changes this may not advance the local time by the same amount.\n"
  remarks: "\nThe returned value retains the calendar system and time zone of <code data-dev-comment-type=\"paramref\" class=\"paramref\">zonedDateTime</code>.\n"
  example: []
  syntax:
    content: public static ZonedDateTime operator +(ZonedDateTime zonedDateTime, Duration duration)
    parameters:
    - id: zonedDateTime
      type: NodaTime.ZonedDateTime
      description: The <xref href="NodaTime.ZonedDateTime" data-throw-if-not-resolved="false"></xref> to add the duration to.
    - id: duration
      type: NodaTime.Duration
      description: The duration to add.
    return:
      type: NodaTime.ZonedDateTime
      description: A new value with the time advanced by the given duration, in the same calendar system and time zone.
    content.vb: Public Shared Operator +(zonedDateTime As ZonedDateTime, duration As Duration) As ZonedDateTime
  overload: NodaTime.ZonedDateTime.op_Addition*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: NodaTime.ZonedDateTime.Subtract(NodaTime.ZonedDateTime,NodaTime.Duration)
  commentId: M:NodaTime.ZonedDateTime.Subtract(NodaTime.ZonedDateTime,NodaTime.Duration)
  id: Subtract(NodaTime.ZonedDateTime,NodaTime.Duration)
  parent: NodaTime.ZonedDateTime
  langs:
  - csharp
  - vb
  name: Subtract(ZonedDateTime, Duration)
  nameWithType: ZonedDateTime.Subtract(ZonedDateTime, Duration)
  fullName: NodaTime.ZonedDateTime.Subtract(NodaTime.ZonedDateTime, NodaTime.Duration)
  type: Method
  source:
    remote:
      path: 2.4.x/src/NodaTime/ZonedDateTime.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: Subtract
    path: src/NodaTime/ZonedDateTime.cs
    startLine: 434
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nSubtracts a duration from a zoned date and time.\n"
  remarks: "\nThis is an alternative way of calling <xref href=\"NodaTime.ZonedDateTime.op_Subtraction(NodaTime.ZonedDateTime%2cNodaTime.Duration)\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public static ZonedDateTime Subtract(ZonedDateTime zonedDateTime, Duration duration)
    parameters:
    - id: zonedDateTime
      type: NodaTime.ZonedDateTime
      description: The value to subtract the duration from.
    - id: duration
      type: NodaTime.Duration
      description: The duration to subtract.
    return:
      type: NodaTime.ZonedDateTime
      description: A new value with the time &quot;rewound&quot; by the given duration, in the same calendar system and time zone.
    content.vb: Public Shared Function Subtract(zonedDateTime As ZonedDateTime, duration As Duration) As ZonedDateTime
  overload: NodaTime.ZonedDateTime.Subtract*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: NodaTime.ZonedDateTime.Minus(NodaTime.Duration)
  commentId: M:NodaTime.ZonedDateTime.Minus(NodaTime.Duration)
  id: Minus(NodaTime.Duration)
  parent: NodaTime.ZonedDateTime
  langs:
  - csharp
  - vb
  name: Minus(Duration)
  nameWithType: ZonedDateTime.Minus(Duration)
  fullName: NodaTime.ZonedDateTime.Minus(NodaTime.Duration)
  type: Method
  source:
    remote:
      path: 2.4.x/src/NodaTime/ZonedDateTime.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: Minus
    path: src/NodaTime/ZonedDateTime.cs
    startLine: 442
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nReturns the result of subtracting a duration from this zoned date and time, for a fluent alternative to\n<xref href=\"NodaTime.ZonedDateTime.op_Subtraction(NodaTime.ZonedDateTime%2cNodaTime.Duration)\" data-throw-if-not-resolved=\"false\"></xref>\n"
  example: []
  syntax:
    content: public ZonedDateTime Minus(Duration duration)
    parameters:
    - id: duration
      type: NodaTime.Duration
      description: The duration to subtract
    return:
      type: NodaTime.ZonedDateTime
      description: A new <xref href="NodaTime.ZonedDateTime" data-throw-if-not-resolved="false"></xref> representing the result of the subtraction.
    content.vb: Public Function Minus(duration As Duration) As ZonedDateTime
  overload: NodaTime.ZonedDateTime.Minus*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: NodaTime.ZonedDateTime.op_Subtraction(NodaTime.ZonedDateTime,NodaTime.Duration)
  commentId: M:NodaTime.ZonedDateTime.op_Subtraction(NodaTime.ZonedDateTime,NodaTime.Duration)
  id: op_Subtraction(NodaTime.ZonedDateTime,NodaTime.Duration)
  parent: NodaTime.ZonedDateTime
  langs:
  - csharp
  - vb
  name: Subtraction(ZonedDateTime, Duration)
  nameWithType: ZonedDateTime.Subtraction(ZonedDateTime, Duration)
  fullName: NodaTime.ZonedDateTime.Subtraction(NodaTime.ZonedDateTime, NodaTime.Duration)
  type: Operator
  source:
    remote:
      path: 2.4.x/src/NodaTime/ZonedDateTime.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: op_Subtraction
    path: src/NodaTime/ZonedDateTime.cs
    startLine: 455
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nReturns a new <xref href=\"NodaTime.ZonedDateTime\" data-throw-if-not-resolved=\"false\"></xref> with the duration subtracted. Note that\ndue to daylight saving time changes this may not change the local time by the same amount.\n"
  remarks: "\nThe returned value retains the calendar system and time zone of <code data-dev-comment-type=\"paramref\" class=\"paramref\">zonedDateTime</code>.\n"
  example: []
  syntax:
    content: public static ZonedDateTime operator -(ZonedDateTime zonedDateTime, Duration duration)
    parameters:
    - id: zonedDateTime
      type: NodaTime.ZonedDateTime
      description: The value to subtract the duration from.
    - id: duration
      type: NodaTime.Duration
      description: The duration to subtract.
    return:
      type: NodaTime.ZonedDateTime
      description: A new value with the time &quot;rewound&quot; by the given duration, in the same calendar system and time zone.
    content.vb: Public Shared Operator -(zonedDateTime As ZonedDateTime, duration As Duration) As ZonedDateTime
  overload: NodaTime.ZonedDateTime.op_Subtraction*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: NodaTime.ZonedDateTime.Subtract(NodaTime.ZonedDateTime,NodaTime.ZonedDateTime)
  commentId: M:NodaTime.ZonedDateTime.Subtract(NodaTime.ZonedDateTime,NodaTime.ZonedDateTime)
  id: Subtract(NodaTime.ZonedDateTime,NodaTime.ZonedDateTime)
  parent: NodaTime.ZonedDateTime
  langs:
  - csharp
  - vb
  name: Subtract(ZonedDateTime, ZonedDateTime)
  nameWithType: ZonedDateTime.Subtract(ZonedDateTime, ZonedDateTime)
  fullName: NodaTime.ZonedDateTime.Subtract(NodaTime.ZonedDateTime, NodaTime.ZonedDateTime)
  type: Method
  source:
    remote:
      path: 2.4.x/src/NodaTime/ZonedDateTime.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: Subtract
    path: src/NodaTime/ZonedDateTime.cs
    startLine: 468
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nSubtracts one zoned date and time from another, returning an elapsed duration.\n"
  remarks: "\nThis is an alternative way of calling <xref href=\"NodaTime.ZonedDateTime.op_Subtraction(NodaTime.ZonedDateTime%2cNodaTime.ZonedDateTime)\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public static Duration Subtract(ZonedDateTime end, ZonedDateTime start)
    parameters:
    - id: end
      type: NodaTime.ZonedDateTime
      description: >-
        The zoned date and time value to subtract from; if this is later than <code data-dev-comment-type="paramref" class="paramref">start</code>

        then the result will be positive.
    - id: start
      type: NodaTime.ZonedDateTime
      description: The zoned date and time to subtract from <code data-dev-comment-type="paramref" class="paramref">end</code>.
    return:
      type: NodaTime.Duration
      description: The elapsed duration from <code data-dev-comment-type="paramref" class="paramref">start</code> to <code data-dev-comment-type="paramref" class="paramref">end</code>.
    content.vb: Public Shared Function Subtract(end As ZonedDateTime, start As ZonedDateTime) As Duration
  overload: NodaTime.ZonedDateTime.Subtract*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: NodaTime.ZonedDateTime.Minus(NodaTime.ZonedDateTime)
  commentId: M:NodaTime.ZonedDateTime.Minus(NodaTime.ZonedDateTime)
  id: Minus(NodaTime.ZonedDateTime)
  parent: NodaTime.ZonedDateTime
  langs:
  - csharp
  - vb
  name: Minus(ZonedDateTime)
  nameWithType: ZonedDateTime.Minus(ZonedDateTime)
  fullName: NodaTime.ZonedDateTime.Minus(NodaTime.ZonedDateTime)
  type: Method
  source:
    remote:
      path: 2.4.x/src/NodaTime/ZonedDateTime.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: Minus
    path: src/NodaTime/ZonedDateTime.cs
    startLine: 479
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nReturns the result of subtracting another zoned date and time from this one, resulting in the elapsed duration\nbetween the two instants represented in the values.\n"
  remarks: "\nThis is an alternative way of calling <xref href=\"NodaTime.ZonedDateTime.op_Subtraction(NodaTime.ZonedDateTime%2cNodaTime.ZonedDateTime)\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public Duration Minus(ZonedDateTime other)
    parameters:
    - id: other
      type: NodaTime.ZonedDateTime
      description: The zoned date and time to subtract from this one.
    return:
      type: NodaTime.Duration
      description: The elapsed duration from <code data-dev-comment-type="paramref" class="paramref">other</code> to this value.
    content.vb: Public Function Minus(other As ZonedDateTime) As Duration
  overload: NodaTime.ZonedDateTime.Minus*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: NodaTime.ZonedDateTime.op_Subtraction(NodaTime.ZonedDateTime,NodaTime.ZonedDateTime)
  commentId: M:NodaTime.ZonedDateTime.op_Subtraction(NodaTime.ZonedDateTime,NodaTime.ZonedDateTime)
  id: op_Subtraction(NodaTime.ZonedDateTime,NodaTime.ZonedDateTime)
  parent: NodaTime.ZonedDateTime
  langs:
  - csharp
  - vb
  name: Subtraction(ZonedDateTime, ZonedDateTime)
  nameWithType: ZonedDateTime.Subtraction(ZonedDateTime, ZonedDateTime)
  fullName: NodaTime.ZonedDateTime.Subtraction(NodaTime.ZonedDateTime, NodaTime.ZonedDateTime)
  type: Operator
  source:
    remote:
      path: 2.4.x/src/NodaTime/ZonedDateTime.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: op_Subtraction
    path: src/NodaTime/ZonedDateTime.cs
    startLine: 498
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nSubtracts one <xref href=\"NodaTime.ZonedDateTime\" data-throw-if-not-resolved=\"false\"></xref> from another, resulting in the elapsed time between\nthe two values.\n"
  remarks: "\nThis is equivalent to <code>end.ToInstant() - start.ToInstant()</code>; in particular:\n<ul><li>The two values can use different calendar systems</li><li>The two values can be in different time zones</li><li>The two values can have different UTC offsets</li></ul>\n"
  example: []
  syntax:
    content: public static Duration operator -(ZonedDateTime end, ZonedDateTime start)
    parameters:
    - id: end
      type: NodaTime.ZonedDateTime
      description: >-
        The zoned date and time value to subtract from; if this is later than <code data-dev-comment-type="paramref" class="paramref">start</code>

        then the result will be positive.
    - id: start
      type: NodaTime.ZonedDateTime
      description: The zoned date and time to subtract from <code data-dev-comment-type="paramref" class="paramref">end</code>.
    return:
      type: NodaTime.Duration
      description: The elapsed duration from <code data-dev-comment-type="paramref" class="paramref">start</code> to <code data-dev-comment-type="paramref" class="paramref">end</code>.
    content.vb: Public Shared Operator -(end As ZonedDateTime, start As ZonedDateTime) As Duration
  overload: NodaTime.ZonedDateTime.op_Subtraction*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: NodaTime.ZonedDateTime.GetZoneInterval
  commentId: M:NodaTime.ZonedDateTime.GetZoneInterval
  id: GetZoneInterval
  parent: NodaTime.ZonedDateTime
  langs:
  - csharp
  - vb
  name: GetZoneInterval()
  nameWithType: ZonedDateTime.GetZoneInterval()
  fullName: NodaTime.ZonedDateTime.GetZoneInterval()
  type: Method
  source:
    remote:
      path: 2.4.x/src/NodaTime/ZonedDateTime.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: GetZoneInterval
    path: src/NodaTime/ZonedDateTime.cs
    startLine: 511
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nReturns the <xref href=\"NodaTime.TimeZones.ZoneInterval\" data-throw-if-not-resolved=\"false\"></xref> containing this value, in the time zone this\nvalue refers to.\n"
  remarks: "\nThis is simply a convenience method - it is logically equivalent to converting this\nvalue to an <xref href=\"NodaTime.Instant\" data-throw-if-not-resolved=\"false\"></xref> and then asking the appropriate <xref href=\"NodaTime.DateTimeZone\" data-throw-if-not-resolved=\"false\"></xref>\nfor the <code>ZoneInterval</code> containing that instant.\n"
  example: []
  syntax:
    content: public ZoneInterval GetZoneInterval()
    return:
      type: NodaTime.TimeZones.ZoneInterval
      description: The <code>ZoneInterval</code> containing this value.
    content.vb: Public Function GetZoneInterval As ZoneInterval
  overload: NodaTime.ZonedDateTime.GetZoneInterval*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: NodaTime.ZonedDateTime.IsDaylightSavingTime
  commentId: M:NodaTime.ZonedDateTime.IsDaylightSavingTime
  id: IsDaylightSavingTime
  parent: NodaTime.ZonedDateTime
  langs:
  - csharp
  - vb
  name: IsDaylightSavingTime()
  nameWithType: ZonedDateTime.IsDaylightSavingTime()
  fullName: NodaTime.ZonedDateTime.IsDaylightSavingTime()
  type: Method
  source:
    remote:
      path: 2.4.x/src/NodaTime/ZonedDateTime.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: IsDaylightSavingTime
    path: src/NodaTime/ZonedDateTime.cs
    startLine: 523
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nIndicates whether or not this <xref href=\"NodaTime.ZonedDateTime\" data-throw-if-not-resolved=\"false\"></xref> is in daylight saving time\nfor its time zone. This is determined by checking the <xref href=\"NodaTime.TimeZones.ZoneInterval.Savings\" data-throw-if-not-resolved=\"false\"></xref> property\nof the zone interval containing this value.\n"
  example: []
  syntax:
    content: public bool IsDaylightSavingTime()
    return:
      type: System.Boolean
      description: >-
        <code>true</code> if the zone interval containing this value has a non-zero savings
            component; <code>false</code> otherwise.
    content.vb: Public Function IsDaylightSavingTime As Boolean
  overload: NodaTime.ZonedDateTime.IsDaylightSavingTime*
  seealso:
  - linkId: NodaTime.ZonedDateTime.GetZoneInterval
    commentId: M:NodaTime.ZonedDateTime.GetZoneInterval
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: NodaTime.ZonedDateTime.ToString
  commentId: M:NodaTime.ZonedDateTime.ToString
  id: ToString
  parent: NodaTime.ZonedDateTime
  langs:
  - csharp
  - vb
  name: ToString()
  nameWithType: ZonedDateTime.ToString()
  fullName: NodaTime.ZonedDateTime.ToString()
  type: Method
  source:
    remote:
      path: 2.4.x/src/NodaTime/ZonedDateTime.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: ToString
    path: src/NodaTime/ZonedDateTime.cs
    startLine: 534
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nReturns a <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref> that represents this instance.\n"
  example: []
  syntax:
    content: public override string ToString()
    return:
      type: System.String
      description: "\nThe value of the current instance in the default format pattern (&quot;G&quot;), using the current thread&apos;s\nculture to obtain a format provider.\n"
    content.vb: Public Overrides Function ToString As String
  overridden: System.ValueType.ToString
  overload: NodaTime.ZonedDateTime.ToString*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: NodaTime.ZonedDateTime.ToString(System.String,System.IFormatProvider)
  commentId: M:NodaTime.ZonedDateTime.ToString(System.String,System.IFormatProvider)
  id: ToString(System.String,System.IFormatProvider)
  parent: NodaTime.ZonedDateTime
  langs:
  - csharp
  - vb
  name: ToString(String, IFormatProvider)
  nameWithType: ZonedDateTime.ToString(String, IFormatProvider)
  fullName: NodaTime.ZonedDateTime.ToString(System.String, System.IFormatProvider)
  type: Method
  source:
    remote:
      path: 2.4.x/src/NodaTime/ZonedDateTime.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: ToString
    path: src/NodaTime/ZonedDateTime.cs
    startLine: 550
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nFormats the value of the current instance using the specified pattern.\n"
  example: []
  syntax:
    content: public string ToString(string patternText, IFormatProvider formatProvider)
    parameters:
    - id: patternText
      type: System.String
      description: >
        The <xref href="System.String" data-throw-if-not-resolved="false"></xref> specifying the pattern to use,

        or null to use the default format pattern (&quot;G&quot;).
    - id: formatProvider
      type: System.IFormatProvider
      description: >
        The <xref href="System.IFormatProvider" data-throw-if-not-resolved="false"></xref> to use when formatting the value,

        or null to use the current thread&apos;s culture to obtain a format provider.
    return:
      type: System.String
      description: "\nA <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref> containing the value of the current instance in the specified format.\n"
    content.vb: Public Function ToString(patternText As String, formatProvider As IFormatProvider) As String
  overload: NodaTime.ZonedDateTime.ToString*
  implements:
  - System.IFormattable.ToString(System.String,System.IFormatProvider)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: NodaTime.ZonedDateTime.ToDateTimeOffset
  commentId: M:NodaTime.ZonedDateTime.ToDateTimeOffset
  id: ToDateTimeOffset
  parent: NodaTime.ZonedDateTime
  langs:
  - csharp
  - vb
  name: ToDateTimeOffset()
  nameWithType: ZonedDateTime.ToDateTimeOffset()
  fullName: NodaTime.ZonedDateTime.ToDateTimeOffset()
  type: Method
  source:
    remote:
      path: 2.4.x/src/NodaTime/ZonedDateTime.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: ToDateTimeOffset
    path: src/NodaTime/ZonedDateTime.cs
    startLine: 577
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nConstructs a <xref href=\"System.DateTimeOffset\" data-throw-if-not-resolved=\"false\"></xref> value with the same local time and offset from\nUTC as this value.\n"
  remarks: "\n<p>\nAn offset does not convey as much information as a time zone; a <xref href=\"System.DateTimeOffset\" data-throw-if-not-resolved=\"false\"></xref>\nrepresents an instant in time along with an associated local time, but it doesn&apos;t allow you\nto find out what the local time would be for another instant.\n</p>\n<p>\nIf the date and time is not on a tick boundary (the unit of granularity of DateTime) the value will be truncated\ntowards the start of time.\n</p>\n<p>\nIf the offset has a non-zero second component, this is truncated as <code>DateTimeOffset</code> has an offset\ngranularity of minutes.\n</p>\n"
  example: []
  syntax:
    content: public DateTimeOffset ToDateTimeOffset()
    return:
      type: System.DateTimeOffset
      description: >-
        A <code>DateTimeOffset</code> with the same local date/time and offset as this. The <xref href="System.DateTime" data-throw-if-not-resolved="false"></xref> part of

        the result always has a &quot;kind&quot; of Unspecified.
    content.vb: Public Function ToDateTimeOffset As DateTimeOffset
  overload: NodaTime.ZonedDateTime.ToDateTimeOffset*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: >-
      The date/time is outside the range of <code>DateTimeOffset</code>,

      or the offset is outside the range of +/-14 hours (the range supported by <code>DateTimeOffset</code>).
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: NodaTime.ZonedDateTime.FromDateTimeOffset(System.DateTimeOffset)
  commentId: M:NodaTime.ZonedDateTime.FromDateTimeOffset(System.DateTimeOffset)
  id: FromDateTimeOffset(System.DateTimeOffset)
  parent: NodaTime.ZonedDateTime
  langs:
  - csharp
  - vb
  name: FromDateTimeOffset(DateTimeOffset)
  nameWithType: ZonedDateTime.FromDateTimeOffset(DateTimeOffset)
  fullName: NodaTime.ZonedDateTime.FromDateTimeOffset(System.DateTimeOffset)
  type: Method
  source:
    remote:
      path: 2.4.x/src/NodaTime/ZonedDateTime.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: FromDateTimeOffset
    path: src/NodaTime/ZonedDateTime.cs
    startLine: 587
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nReturns a new <xref href=\"NodaTime.ZonedDateTime\" data-throw-if-not-resolved=\"false\"></xref> representing the same instant in time as the given\n<xref href=\"System.DateTimeOffset\" data-throw-if-not-resolved=\"false\"></xref>.\nThe time zone used will be a fixed time zone, which uses the same offset throughout time.\n"
  example: []
  syntax:
    content: public static ZonedDateTime FromDateTimeOffset(DateTimeOffset dateTimeOffset)
    parameters:
    - id: dateTimeOffset
      type: System.DateTimeOffset
      description: Date and time value with an offset.
    return:
      type: NodaTime.ZonedDateTime
      description: A <xref href="NodaTime.ZonedDateTime" data-throw-if-not-resolved="false"></xref> value representing the same instant in time as the given <xref href="System.DateTimeOffset" data-throw-if-not-resolved="false"></xref>.
    content.vb: Public Shared Function FromDateTimeOffset(dateTimeOffset As DateTimeOffset) As ZonedDateTime
  overload: NodaTime.ZonedDateTime.FromDateTimeOffset*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: NodaTime.ZonedDateTime.ToDateTimeUtc
  commentId: M:NodaTime.ZonedDateTime.ToDateTimeUtc
  id: ToDateTimeUtc
  parent: NodaTime.ZonedDateTime
  langs:
  - csharp
  - vb
  name: ToDateTimeUtc()
  nameWithType: ZonedDateTime.ToDateTimeUtc()
  fullName: NodaTime.ZonedDateTime.ToDateTimeUtc()
  type: Method
  source:
    remote:
      path: 2.4.x/src/NodaTime/ZonedDateTime.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: ToDateTimeUtc
    path: src/NodaTime/ZonedDateTime.cs
    startLine: 605
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nConstructs a <xref href=\"System.DateTime\" data-throw-if-not-resolved=\"false\"></xref> from this <xref href=\"NodaTime.ZonedDateTime\" data-throw-if-not-resolved=\"false\"></xref> which has a\n<xref href=\"System.DateTime.Kind\" data-throw-if-not-resolved=\"false\"></xref> of <xref href=\"System.DateTimeKind.Utc\" data-throw-if-not-resolved=\"false\"></xref> and represents the same instant of time as\nthis value rather than the same local time.\n"
  remarks: "\n<p>\nIf the date and time is not on a tick boundary (the unit of granularity of DateTime) the value will be truncated\ntowards the start of time.\n</p>\n"
  example: []
  syntax:
    content: public DateTime ToDateTimeUtc()
    return:
      type: System.DateTime
      description: >-
        A <xref href="System.DateTime" data-throw-if-not-resolved="false"></xref> representation of this value with a &quot;universal&quot; kind, with the same

        instant of time as this value.
    content.vb: Public Function ToDateTimeUtc As Date
  overload: NodaTime.ZonedDateTime.ToDateTimeUtc*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: The final date/time is outside the range of <code>DateTime</code>.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: NodaTime.ZonedDateTime.ToDateTimeUnspecified
  commentId: M:NodaTime.ZonedDateTime.ToDateTimeUnspecified
  id: ToDateTimeUnspecified
  parent: NodaTime.ZonedDateTime
  langs:
  - csharp
  - vb
  name: ToDateTimeUnspecified()
  nameWithType: ZonedDateTime.ToDateTimeUnspecified()
  fullName: NodaTime.ZonedDateTime.ToDateTimeUnspecified()
  type: Method
  source:
    remote:
      path: 2.4.x/src/NodaTime/ZonedDateTime.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: ToDateTimeUnspecified
    path: src/NodaTime/ZonedDateTime.cs
    startLine: 627
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nConstructs a <xref href=\"System.DateTime\" data-throw-if-not-resolved=\"false\"></xref> from this <xref href=\"NodaTime.ZonedDateTime\" data-throw-if-not-resolved=\"false\"></xref> which has a\n<xref href=\"System.DateTime.Kind\" data-throw-if-not-resolved=\"false\"></xref> of <xref href=\"System.DateTimeKind.Unspecified\" data-throw-if-not-resolved=\"false\"></xref> and represents the same local time as\nthis value rather than the same instant in time.\n"
  remarks: "\n<p>\n<xref href=\"System.DateTimeKind.Unspecified\" data-throw-if-not-resolved=\"false\"></xref> is slightly odd - it can be treated as UTC if you use <xref href=\"System.DateTime.ToLocalTime\" data-throw-if-not-resolved=\"false\"></xref>\nor as system local time if you use <xref href=\"System.DateTime.ToUniversalTime\" data-throw-if-not-resolved=\"false\"></xref>, but it&apos;s the only kind which allows\nyou to construct a <xref href=\"System.DateTimeOffset\" data-throw-if-not-resolved=\"false\"></xref> with an arbitrary offset.\n</p>\n<p>\nIf the date and time is not on a tick boundary (the unit of granularity of DateTime) the value will be truncated\ntowards the start of time.\n</p>\n"
  example: []
  syntax:
    content: public DateTime ToDateTimeUnspecified()
    return:
      type: System.DateTime
      description: >-
        A <xref href="System.DateTime" data-throw-if-not-resolved="false"></xref> representation of this value with an &quot;unspecified&quot; kind, with the same

        local date and time as this value.
    content.vb: Public Function ToDateTimeUnspecified As Date
  overload: NodaTime.ZonedDateTime.ToDateTimeUnspecified*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: The date/time is outside the range of <code>DateTime</code>.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: NodaTime.ZonedDateTime.ToOffsetDateTime
  commentId: M:NodaTime.ZonedDateTime.ToOffsetDateTime
  id: ToOffsetDateTime
  parent: NodaTime.ZonedDateTime
  langs:
  - csharp
  - vb
  name: ToOffsetDateTime()
  nameWithType: ZonedDateTime.ToOffsetDateTime()
  fullName: NodaTime.ZonedDateTime.ToOffsetDateTime()
  type: Method
  source:
    remote:
      path: 2.4.x/src/NodaTime/ZonedDateTime.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: ToOffsetDateTime
    path: src/NodaTime/ZonedDateTime.cs
    startLine: 635
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nConstructs an <xref href=\"NodaTime.OffsetDateTime\" data-throw-if-not-resolved=\"false\"></xref> with the same local date and time, and the same offset\nas this zoned date and time, effectively just &quot;removing&quot; the time zone itself.\n"
  example: []
  syntax:
    content: public OffsetDateTime ToOffsetDateTime()
    return:
      type: NodaTime.OffsetDateTime
      description: An OffsetDateTime with the same local date/time and offset as this value.
    content.vb: Public Function ToOffsetDateTime As OffsetDateTime
  overload: NodaTime.ZonedDateTime.ToOffsetDateTime*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: NodaTime.ZonedDateTime.Deconstruct(NodaTime.LocalDateTime@,NodaTime.DateTimeZone@,NodaTime.Offset@)
  commentId: M:NodaTime.ZonedDateTime.Deconstruct(NodaTime.LocalDateTime@,NodaTime.DateTimeZone@,NodaTime.Offset@)
  id: Deconstruct(NodaTime.LocalDateTime@,NodaTime.DateTimeZone@,NodaTime.Offset@)
  parent: NodaTime.ZonedDateTime
  langs:
  - csharp
  - vb
  name: Deconstruct(out LocalDateTime, out DateTimeZone, out Offset)
  nameWithType: ZonedDateTime.Deconstruct(out LocalDateTime, out DateTimeZone, out Offset)
  fullName: NodaTime.ZonedDateTime.Deconstruct(out NodaTime.LocalDateTime, out NodaTime.DateTimeZone, out NodaTime.Offset)
  type: Method
  source:
    remote:
      path: 2.4.x/src/NodaTime/ZonedDateTime.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: Deconstruct
    path: src/NodaTime/ZonedDateTime.cs
    startLine: 644
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nDeconstruct this <xref href=\"NodaTime.ZonedDateTime\" data-throw-if-not-resolved=\"false\"></xref> into its components.\n"
  example: []
  syntax:
    content: public void Deconstruct(out LocalDateTime localDateTime, out DateTimeZone dateTimeZone, out Offset offset)
    parameters:
    - id: localDateTime
      type: NodaTime.LocalDateTime
      description: The <xref href="NodaTime.ZonedDateTime.LocalDateTime" data-throw-if-not-resolved="false"></xref> component.
    - id: dateTimeZone
      type: NodaTime.DateTimeZone
      description: The <xref href="NodaTime.DateTimeZone" data-throw-if-not-resolved="false"></xref> component.
    - id: offset
      type: NodaTime.Offset
      description: The <xref href="NodaTime.ZonedDateTime.Offset" data-throw-if-not-resolved="false"></xref> component.
    content.vb: Public Sub Deconstruct(ByRef localDateTime As LocalDateTime, ByRef dateTimeZone As DateTimeZone, ByRef offset As Offset)
  overload: NodaTime.ZonedDateTime.Deconstruct*
  nameWithType.vb: ZonedDateTime.Deconstruct(ByRef LocalDateTime, ByRef DateTimeZone, ByRef Offset)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: NodaTime.ZonedDateTime.Deconstruct(ByRef NodaTime.LocalDateTime, ByRef NodaTime.DateTimeZone, ByRef NodaTime.Offset)
  name.vb: Deconstruct(ByRef LocalDateTime, ByRef DateTimeZone, ByRef Offset)
- uid: NodaTime.ZonedDateTime.System#Xml#Serialization#IXmlSerializable#GetSchema
  commentId: M:NodaTime.ZonedDateTime.System#Xml#Serialization#IXmlSerializable#GetSchema
  id: System#Xml#Serialization#IXmlSerializable#GetSchema
  isEii: true
  parent: NodaTime.ZonedDateTime
  langs:
  - csharp
  - vb
  name: IXmlSerializable.GetSchema()
  nameWithType: ZonedDateTime.IXmlSerializable.GetSchema()
  fullName: NodaTime.ZonedDateTime.System.Xml.Serialization.IXmlSerializable.GetSchema()
  type: Method
  source:
    remote:
      path: 2.4.x/src/NodaTime/ZonedDateTime.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: System.Xml.Serialization.IXmlSerializable.GetSchema
    path: src/NodaTime/ZonedDateTime.cs
    startLine: 793
  assemblies:
  - NodaTime
  namespace: NodaTime
  example: []
  syntax:
    content: XmlSchema IXmlSerializable.GetSchema()
    return:
      type: System.Xml.Schema.XmlSchema
    content.vb: Function System.Xml.Serialization.IXmlSerializable.GetSchema As XmlSchema Implements IXmlSerializable.GetSchema
  overload: NodaTime.ZonedDateTime.System#Xml#Serialization#IXmlSerializable#GetSchema*
  implements:
  - System.Xml.Serialization.IXmlSerializable.GetSchema
  nameWithType.vb: ZonedDateTime.System.Xml.Serialization.IXmlSerializable.GetSchema()
  name.vb: System.Xml.Serialization.IXmlSerializable.GetSchema()
- uid: NodaTime.ZonedDateTime.System#Xml#Serialization#IXmlSerializable#ReadXml(System.Xml.XmlReader)
  commentId: M:NodaTime.ZonedDateTime.System#Xml#Serialization#IXmlSerializable#ReadXml(System.Xml.XmlReader)
  id: System#Xml#Serialization#IXmlSerializable#ReadXml(System.Xml.XmlReader)
  isEii: true
  parent: NodaTime.ZonedDateTime
  langs:
  - csharp
  - vb
  name: IXmlSerializable.ReadXml(XmlReader)
  nameWithType: ZonedDateTime.IXmlSerializable.ReadXml(XmlReader)
  fullName: NodaTime.ZonedDateTime.System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)
  type: Method
  source:
    remote:
      path: 2.4.x/src/NodaTime/ZonedDateTime.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: System.Xml.Serialization.IXmlSerializable.ReadXml
    path: src/NodaTime/ZonedDateTime.cs
    startLine: 796
  assemblies:
  - NodaTime
  namespace: NodaTime
  example: []
  syntax:
    content: void IXmlSerializable.ReadXml(XmlReader reader)
    parameters:
    - id: reader
      type: System.Xml.XmlReader
    content.vb: Sub System.Xml.Serialization.IXmlSerializable.ReadXml(reader As XmlReader) Implements IXmlSerializable.ReadXml
  overload: NodaTime.ZonedDateTime.System#Xml#Serialization#IXmlSerializable#ReadXml*
  implements:
  - System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)
  nameWithType.vb: ZonedDateTime.System.Xml.Serialization.IXmlSerializable.ReadXml(XmlReader)
  name.vb: System.Xml.Serialization.IXmlSerializable.ReadXml(XmlReader)
- uid: NodaTime.ZonedDateTime.System#Xml#Serialization#IXmlSerializable#WriteXml(System.Xml.XmlWriter)
  commentId: M:NodaTime.ZonedDateTime.System#Xml#Serialization#IXmlSerializable#WriteXml(System.Xml.XmlWriter)
  id: System#Xml#Serialization#IXmlSerializable#WriteXml(System.Xml.XmlWriter)
  isEii: true
  parent: NodaTime.ZonedDateTime
  langs:
  - csharp
  - vb
  name: IXmlSerializable.WriteXml(XmlWriter)
  nameWithType: ZonedDateTime.IXmlSerializable.WriteXml(XmlWriter)
  fullName: NodaTime.ZonedDateTime.System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)
  type: Method
  source:
    remote:
      path: 2.4.x/src/NodaTime/ZonedDateTime.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: System.Xml.Serialization.IXmlSerializable.WriteXml
    path: src/NodaTime/ZonedDateTime.cs
    startLine: 825
  assemblies:
  - NodaTime
  namespace: NodaTime
  example: []
  syntax:
    content: void IXmlSerializable.WriteXml(XmlWriter writer)
    parameters:
    - id: writer
      type: System.Xml.XmlWriter
    content.vb: Sub System.Xml.Serialization.IXmlSerializable.WriteXml(writer As XmlWriter) Implements IXmlSerializable.WriteXml
  overload: NodaTime.ZonedDateTime.System#Xml#Serialization#IXmlSerializable#WriteXml*
  implements:
  - System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)
  nameWithType.vb: ZonedDateTime.System.Xml.Serialization.IXmlSerializable.WriteXml(XmlWriter)
  name.vb: System.Xml.Serialization.IXmlSerializable.WriteXml(XmlWriter)
- uid: NodaTime.ZonedDateTime.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  commentId: M:NodaTime.ZonedDateTime.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  id: System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  isEii: true
  parent: NodaTime.ZonedDateTime
  langs:
  - csharp
  - vb
  name: ISerializable.GetObjectData(SerializationInfo, StreamingContext)
  nameWithType: ZonedDateTime.ISerializable.GetObjectData(SerializationInfo, StreamingContext)
  fullName: NodaTime.ZonedDateTime.System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext)
  type: Method
  source:
    remote:
      path: 2.4.x/src/NodaTime/ZonedDateTime.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: System.Runtime.Serialization.ISerializable.GetObjectData
    path: src/NodaTime/ZonedDateTime.cs
    startLine: 858
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nImplementation of <xref href=\"System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo%2cSystem.Runtime.Serialization.StreamingContext)\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: >-
      [SecurityCritical]

      void ISerializable.GetObjectData(SerializationInfo info, StreamingContext context)
    parameters:
    - id: info
      type: System.Runtime.Serialization.SerializationInfo
      description: The <xref href="System.Runtime.Serialization.SerializationInfo" data-throw-if-not-resolved="false"></xref> to populate with data.
    - id: context
      type: System.Runtime.Serialization.StreamingContext
      description: The destination for this serialization.
    content.vb: >-
      <SecurityCritical>

      Sub System.Runtime.Serialization.ISerializable.GetObjectData(info As SerializationInfo, context As StreamingContext) Implements ISerializable.GetObjectData
  overload: NodaTime.ZonedDateTime.System#Runtime#Serialization#ISerializable#GetObjectData*
  implements:
  - System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  attributes:
  - type: System.Security.SecurityCriticalAttribute
    ctor: System.Security.SecurityCriticalAttribute.#ctor
    arguments: []
  nameWithType.vb: ZonedDateTime.System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo, StreamingContext)
  name.vb: System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo, StreamingContext)
references:
- uid: NodaTime.LocalDateTime
  commentId: T:NodaTime.LocalDateTime
  parent: NodaTime
  name: LocalDateTime
  nameWithType: LocalDateTime
  fullName: NodaTime.LocalDateTime
- uid: NodaTime.ZonedDateTime
  commentId: T:NodaTime.ZonedDateTime
  parent: NodaTime
  name: ZonedDateTime
  nameWithType: ZonedDateTime
  fullName: NodaTime.ZonedDateTime
- uid: NodaTime.Instant
  commentId: T:NodaTime.Instant
  parent: NodaTime
  name: Instant
  nameWithType: Instant
  fullName: NodaTime.Instant
- uid: NodaTime.ZonedDateTime.Comparer
  commentId: T:NodaTime.ZonedDateTime.Comparer
  parent: NodaTime
  name: ZonedDateTime.Comparer
  nameWithType: ZonedDateTime.Comparer
  fullName: NodaTime.ZonedDateTime.Comparer
- uid: NodaTime
  commentId: N:NodaTime
  name: NodaTime
  nameWithType: NodaTime
  fullName: NodaTime
- uid: System.IEquatable{NodaTime.ZonedDateTime}
  commentId: T:System.IEquatable{NodaTime.ZonedDateTime}
  parent: System
  definition: System.IEquatable`1
  name: IEquatable<ZonedDateTime>
  nameWithType: IEquatable<ZonedDateTime>
  fullName: System.IEquatable<NodaTime.ZonedDateTime>
  nameWithType.vb: IEquatable(Of ZonedDateTime)
  fullName.vb: System.IEquatable(Of NodaTime.ZonedDateTime)
  name.vb: IEquatable(Of ZonedDateTime)
  spec.csharp:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: NodaTime.ZonedDateTime
    name: ZonedDateTime
    nameWithType: ZonedDateTime
    fullName: NodaTime.ZonedDateTime
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: NodaTime.ZonedDateTime
    name: ZonedDateTime
    nameWithType: ZonedDateTime
    fullName: NodaTime.ZonedDateTime
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IFormattable
  commentId: T:System.IFormattable
  parent: System
  isExternal: true
  name: IFormattable
  nameWithType: IFormattable
  fullName: System.IFormattable
- uid: System.Xml.Serialization.IXmlSerializable
  commentId: T:System.Xml.Serialization.IXmlSerializable
  parent: System.Xml.Serialization
  isExternal: true
  name: IXmlSerializable
  nameWithType: IXmlSerializable
  fullName: System.Xml.Serialization.IXmlSerializable
- uid: System.Runtime.Serialization.ISerializable
  commentId: T:System.Runtime.Serialization.ISerializable
  parent: System.Runtime.Serialization
  isExternal: true
  name: ISerializable
  nameWithType: ISerializable
  fullName: System.Runtime.Serialization.ISerializable
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IEquatable`1
  commentId: T:System.IEquatable`1
  isExternal: true
  name: IEquatable<T>
  nameWithType: IEquatable<T>
  fullName: System.IEquatable<T>
  nameWithType.vb: IEquatable(Of T)
  fullName.vb: System.IEquatable(Of T)
  name.vb: IEquatable(Of T)
  spec.csharp:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: System.Xml.Serialization
  commentId: N:System.Xml.Serialization
  isExternal: true
  name: System.Xml.Serialization
  nameWithType: System.Xml.Serialization
  fullName: System.Xml.Serialization
- uid: System.Runtime.Serialization
  commentId: N:System.Runtime.Serialization
  isExternal: true
  name: System.Runtime.Serialization
  nameWithType: System.Runtime.Serialization
  fullName: System.Runtime.Serialization
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: NodaTime.ZonedDateTime.#ctor*
  commentId: Overload:NodaTime.ZonedDateTime.#ctor
  name: ZonedDateTime
  nameWithType: ZonedDateTime.ZonedDateTime
  fullName: NodaTime.ZonedDateTime.ZonedDateTime
- uid: NodaTime.DateTimeZone
  commentId: T:NodaTime.DateTimeZone
  parent: NodaTime
  name: DateTimeZone
  nameWithType: DateTimeZone
  fullName: NodaTime.DateTimeZone
- uid: NodaTime.CalendarSystem
  commentId: T:NodaTime.CalendarSystem
  parent: NodaTime
  name: CalendarSystem
  nameWithType: CalendarSystem
  fullName: NodaTime.CalendarSystem
- uid: System.ArgumentException
  commentId: T:System.ArgumentException
  parent: System
  isExternal: true
  name: ArgumentException
  nameWithType: ArgumentException
  fullName: System.ArgumentException
- uid: NodaTime.Offset
  commentId: T:NodaTime.Offset
  parent: NodaTime
  name: Offset
  nameWithType: Offset
  fullName: NodaTime.Offset
- uid: NodaTime.ZonedDateTime.Offset*
  commentId: Overload:NodaTime.ZonedDateTime.Offset
  name: Offset
  nameWithType: ZonedDateTime.Offset
  fullName: NodaTime.ZonedDateTime.Offset
- uid: NodaTime.ZonedDateTime.Zone*
  commentId: Overload:NodaTime.ZonedDateTime.Zone
  name: Zone
  nameWithType: ZonedDateTime.Zone
  fullName: NodaTime.ZonedDateTime.Zone
- uid: NodaTime.ZonedDateTime.LocalDateTime*
  commentId: Overload:NodaTime.ZonedDateTime.LocalDateTime
  name: LocalDateTime
  nameWithType: ZonedDateTime.LocalDateTime
  fullName: NodaTime.ZonedDateTime.LocalDateTime
- uid: NodaTime.ZonedDateTime.Calendar*
  commentId: Overload:NodaTime.ZonedDateTime.Calendar
  name: Calendar
  nameWithType: ZonedDateTime.Calendar
  fullName: NodaTime.ZonedDateTime.Calendar
- uid: NodaTime.LocalDate
  commentId: T:NodaTime.LocalDate
  parent: NodaTime
  name: LocalDate
  nameWithType: LocalDate
  fullName: NodaTime.LocalDate
- uid: NodaTime.ZonedDateTime.Date*
  commentId: Overload:NodaTime.ZonedDateTime.Date
  name: Date
  nameWithType: ZonedDateTime.Date
  fullName: NodaTime.ZonedDateTime.Date
- uid: NodaTime.LocalTime
  commentId: T:NodaTime.LocalTime
  parent: NodaTime
  name: LocalTime
  nameWithType: LocalTime
  fullName: NodaTime.LocalTime
- uid: NodaTime.ZonedDateTime.TimeOfDay*
  commentId: Overload:NodaTime.ZonedDateTime.TimeOfDay
  name: TimeOfDay
  nameWithType: ZonedDateTime.TimeOfDay
  fullName: NodaTime.ZonedDateTime.TimeOfDay
- uid: NodaTime.ZonedDateTime.Era*
  commentId: Overload:NodaTime.ZonedDateTime.Era
  name: Era
  nameWithType: ZonedDateTime.Era
  fullName: NodaTime.ZonedDateTime.Era
- uid: NodaTime.Calendars.Era
  commentId: T:NodaTime.Calendars.Era
  parent: NodaTime.Calendars
  name: Era
  nameWithType: Era
  fullName: NodaTime.Calendars.Era
- uid: NodaTime.Calendars
  commentId: N:NodaTime.Calendars
  name: NodaTime.Calendars
  nameWithType: NodaTime.Calendars
  fullName: NodaTime.Calendars
- uid: NodaTime.ZonedDateTime.Year*
  commentId: Overload:NodaTime.ZonedDateTime.Year
  name: Year
  nameWithType: ZonedDateTime.Year
  fullName: NodaTime.ZonedDateTime.Year
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: NodaTime.ZonedDateTime.YearOfEra*
  commentId: Overload:NodaTime.ZonedDateTime.YearOfEra
  name: YearOfEra
  nameWithType: ZonedDateTime.YearOfEra
  fullName: NodaTime.ZonedDateTime.YearOfEra
- uid: NodaTime.ZonedDateTime.Month*
  commentId: Overload:NodaTime.ZonedDateTime.Month
  name: Month
  nameWithType: ZonedDateTime.Month
  fullName: NodaTime.ZonedDateTime.Month
- uid: NodaTime.ZonedDateTime.DayOfYear*
  commentId: Overload:NodaTime.ZonedDateTime.DayOfYear
  name: DayOfYear
  nameWithType: ZonedDateTime.DayOfYear
  fullName: NodaTime.ZonedDateTime.DayOfYear
- uid: NodaTime.ZonedDateTime.Day*
  commentId: Overload:NodaTime.ZonedDateTime.Day
  name: Day
  nameWithType: ZonedDateTime.Day
  fullName: NodaTime.ZonedDateTime.Day
- uid: NodaTime.IsoDayOfWeek
  commentId: T:NodaTime.IsoDayOfWeek
  parent: NodaTime
  name: IsoDayOfWeek
  nameWithType: IsoDayOfWeek
  fullName: NodaTime.IsoDayOfWeek
- uid: NodaTime.ZonedDateTime.DayOfWeek*
  commentId: Overload:NodaTime.ZonedDateTime.DayOfWeek
  name: DayOfWeek
  nameWithType: ZonedDateTime.DayOfWeek
  fullName: NodaTime.ZonedDateTime.DayOfWeek
- uid: NodaTime.ZonedDateTime.Hour*
  commentId: Overload:NodaTime.ZonedDateTime.Hour
  name: Hour
  nameWithType: ZonedDateTime.Hour
  fullName: NodaTime.ZonedDateTime.Hour
- uid: NodaTime.ZonedDateTime.ClockHourOfHalfDay*
  commentId: Overload:NodaTime.ZonedDateTime.ClockHourOfHalfDay
  name: ClockHourOfHalfDay
  nameWithType: ZonedDateTime.ClockHourOfHalfDay
  fullName: NodaTime.ZonedDateTime.ClockHourOfHalfDay
- uid: NodaTime.ZonedDateTime.Minute*
  commentId: Overload:NodaTime.ZonedDateTime.Minute
  name: Minute
  nameWithType: ZonedDateTime.Minute
  fullName: NodaTime.ZonedDateTime.Minute
- uid: NodaTime.ZonedDateTime.Second*
  commentId: Overload:NodaTime.ZonedDateTime.Second
  name: Second
  nameWithType: ZonedDateTime.Second
  fullName: NodaTime.ZonedDateTime.Second
- uid: NodaTime.ZonedDateTime.Millisecond*
  commentId: Overload:NodaTime.ZonedDateTime.Millisecond
  name: Millisecond
  nameWithType: ZonedDateTime.Millisecond
  fullName: NodaTime.ZonedDateTime.Millisecond
- uid: NodaTime.ZonedDateTime.TickOfSecond*
  commentId: Overload:NodaTime.ZonedDateTime.TickOfSecond
  name: TickOfSecond
  nameWithType: ZonedDateTime.TickOfSecond
  fullName: NodaTime.ZonedDateTime.TickOfSecond
- uid: NodaTime.OffsetDateTime
  commentId: T:NodaTime.OffsetDateTime
  parent: NodaTime
  name: OffsetDateTime
  nameWithType: OffsetDateTime
  fullName: NodaTime.OffsetDateTime
- uid: NodaTime.ZonedDateTime.TickOfDay*
  commentId: Overload:NodaTime.ZonedDateTime.TickOfDay
  name: TickOfDay
  nameWithType: ZonedDateTime.TickOfDay
  fullName: NodaTime.ZonedDateTime.TickOfDay
- uid: System.Int64
  commentId: T:System.Int64
  parent: System
  isExternal: true
  name: Int64
  nameWithType: Int64
  fullName: System.Int64
- uid: NodaTime.ZonedDateTime.NanosecondOfSecond*
  commentId: Overload:NodaTime.ZonedDateTime.NanosecondOfSecond
  name: NanosecondOfSecond
  nameWithType: ZonedDateTime.NanosecondOfSecond
  fullName: NodaTime.ZonedDateTime.NanosecondOfSecond
- uid: NodaTime.ZonedDateTime.NanosecondOfDay*
  commentId: Overload:NodaTime.ZonedDateTime.NanosecondOfDay
  name: NanosecondOfDay
  nameWithType: ZonedDateTime.NanosecondOfDay
  fullName: NodaTime.ZonedDateTime.NanosecondOfDay
- uid: NodaTime.ZonedDateTime.ToInstant*
  commentId: Overload:NodaTime.ZonedDateTime.ToInstant
  name: ToInstant
  nameWithType: ZonedDateTime.ToInstant
  fullName: NodaTime.ZonedDateTime.ToInstant
- uid: NodaTime.ZonedDateTime.WithZone*
  commentId: Overload:NodaTime.ZonedDateTime.WithZone
  name: WithZone
  nameWithType: ZonedDateTime.WithZone
  fullName: NodaTime.ZonedDateTime.WithZone
- uid: NodaTime.ZonedDateTime.WithCalendar*
  commentId: Overload:NodaTime.ZonedDateTime.WithCalendar
  name: WithCalendar
  nameWithType: ZonedDateTime.WithCalendar
  fullName: NodaTime.ZonedDateTime.WithCalendar
- uid: NodaTime.ZonedDateTime.Equals*
  commentId: Overload:NodaTime.ZonedDateTime.Equals
  name: Equals
  nameWithType: ZonedDateTime.Equals
  fullName: NodaTime.ZonedDateTime.Equals
- uid: System.IEquatable{NodaTime.ZonedDateTime}.Equals(NodaTime.ZonedDateTime)
  commentId: M:System.IEquatable{NodaTime.ZonedDateTime}.Equals(NodaTime.ZonedDateTime)
  parent: System.IEquatable{NodaTime.ZonedDateTime}
  definition: System.IEquatable`1.Equals(`0)
  name: Equals(ZonedDateTime)
  nameWithType: IEquatable<ZonedDateTime>.Equals(ZonedDateTime)
  fullName: System.IEquatable<NodaTime.ZonedDateTime>.Equals(NodaTime.ZonedDateTime)
  nameWithType.vb: IEquatable(Of ZonedDateTime).Equals(ZonedDateTime)
  fullName.vb: System.IEquatable(Of NodaTime.ZonedDateTime).Equals(NodaTime.ZonedDateTime)
  spec.csharp:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    nameWithType: IEquatable<ZonedDateTime>.Equals
    fullName: System.IEquatable<NodaTime.ZonedDateTime>.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: NodaTime.ZonedDateTime
    name: ZonedDateTime
    nameWithType: ZonedDateTime
    fullName: NodaTime.ZonedDateTime
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    nameWithType: IEquatable(Of ZonedDateTime).Equals
    fullName: System.IEquatable(Of NodaTime.ZonedDateTime).Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: NodaTime.ZonedDateTime
    name: ZonedDateTime
    nameWithType: ZonedDateTime
    fullName: NodaTime.ZonedDateTime
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.IEquatable`1.Equals(`0)
  commentId: M:System.IEquatable`1.Equals(`0)
  isExternal: true
  name: Equals(T)
  nameWithType: IEquatable<T>.Equals(T)
  fullName: System.IEquatable<T>.Equals(T)
  nameWithType.vb: IEquatable(Of T).Equals(T)
  fullName.vb: System.IEquatable(Of T).Equals(T)
  spec.csharp:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    nameWithType: IEquatable<T>.Equals
    fullName: System.IEquatable<T>.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    nameWithType: IEquatable(Of T).Equals
    fullName: System.IEquatable(Of T).Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.ValueType.Equals(System.Object)
  commentId: M:System.ValueType.Equals(System.Object)
  parent: System.ValueType
  isExternal: true
  name: Equals(Object)
  nameWithType: ValueType.Equals(Object)
  fullName: System.ValueType.Equals(System.Object)
  spec.csharp:
  - uid: System.ValueType.Equals(System.Object)
    name: Equals
    nameWithType: ValueType.Equals
    fullName: System.ValueType.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.ValueType.Equals(System.Object)
    name: Equals
    nameWithType: ValueType.Equals
    fullName: System.ValueType.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.ValueType
  commentId: T:System.ValueType
  parent: System
  isExternal: true
  name: ValueType
  nameWithType: ValueType
  fullName: System.ValueType
- uid: System.ValueType.GetHashCode
  commentId: M:System.ValueType.GetHashCode
  parent: System.ValueType
  isExternal: true
  name: GetHashCode()
  nameWithType: ValueType.GetHashCode()
  fullName: System.ValueType.GetHashCode()
  spec.csharp:
  - uid: System.ValueType.GetHashCode
    name: GetHashCode
    nameWithType: ValueType.GetHashCode
    fullName: System.ValueType.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.ValueType.GetHashCode
    name: GetHashCode
    nameWithType: ValueType.GetHashCode
    fullName: System.ValueType.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: NodaTime.ZonedDateTime.GetHashCode*
  commentId: Overload:NodaTime.ZonedDateTime.GetHashCode
  name: GetHashCode
  nameWithType: ZonedDateTime.GetHashCode
  fullName: NodaTime.ZonedDateTime.GetHashCode
- uid: NodaTime.ZonedDateTime.Equals(NodaTime.ZonedDateTime)
  commentId: M:NodaTime.ZonedDateTime.Equals(NodaTime.ZonedDateTime)
  isExternal: true
- uid: NodaTime.ZonedDateTime.op_Equality*
  commentId: Overload:NodaTime.ZonedDateTime.op_Equality
  name: Equality
  nameWithType: ZonedDateTime.Equality
  fullName: NodaTime.ZonedDateTime.Equality
- uid: NodaTime.ZonedDateTime.op_Inequality*
  commentId: Overload:NodaTime.ZonedDateTime.op_Inequality
  name: Inequality
  nameWithType: ZonedDateTime.Inequality
  fullName: NodaTime.ZonedDateTime.Inequality
- uid: NodaTime.ZonedDateTime.op_Addition(NodaTime.ZonedDateTime,NodaTime.Duration)
  commentId: M:NodaTime.ZonedDateTime.op_Addition(NodaTime.ZonedDateTime,NodaTime.Duration)
  isExternal: true
- uid: NodaTime.ZonedDateTime.Add*
  commentId: Overload:NodaTime.ZonedDateTime.Add
  name: Add
  nameWithType: ZonedDateTime.Add
  fullName: NodaTime.ZonedDateTime.Add
- uid: NodaTime.Duration
  commentId: T:NodaTime.Duration
  parent: NodaTime
  name: Duration
  nameWithType: Duration
  fullName: NodaTime.Duration
- uid: NodaTime.ZonedDateTime.Plus*
  commentId: Overload:NodaTime.ZonedDateTime.Plus
  name: Plus
  nameWithType: ZonedDateTime.Plus
  fullName: NodaTime.ZonedDateTime.Plus
- uid: NodaTime.ZonedDateTime.PlusHours*
  commentId: Overload:NodaTime.ZonedDateTime.PlusHours
  name: PlusHours
  nameWithType: ZonedDateTime.PlusHours
  fullName: NodaTime.ZonedDateTime.PlusHours
- uid: NodaTime.ZonedDateTime.PlusMinutes*
  commentId: Overload:NodaTime.ZonedDateTime.PlusMinutes
  name: PlusMinutes
  nameWithType: ZonedDateTime.PlusMinutes
  fullName: NodaTime.ZonedDateTime.PlusMinutes
- uid: NodaTime.ZonedDateTime.PlusSeconds*
  commentId: Overload:NodaTime.ZonedDateTime.PlusSeconds
  name: PlusSeconds
  nameWithType: ZonedDateTime.PlusSeconds
  fullName: NodaTime.ZonedDateTime.PlusSeconds
- uid: NodaTime.ZonedDateTime.PlusMilliseconds*
  commentId: Overload:NodaTime.ZonedDateTime.PlusMilliseconds
  name: PlusMilliseconds
  nameWithType: ZonedDateTime.PlusMilliseconds
  fullName: NodaTime.ZonedDateTime.PlusMilliseconds
- uid: NodaTime.ZonedDateTime.PlusTicks*
  commentId: Overload:NodaTime.ZonedDateTime.PlusTicks
  name: PlusTicks
  nameWithType: ZonedDateTime.PlusTicks
  fullName: NodaTime.ZonedDateTime.PlusTicks
- uid: NodaTime.ZonedDateTime.PlusNanoseconds*
  commentId: Overload:NodaTime.ZonedDateTime.PlusNanoseconds
  name: PlusNanoseconds
  nameWithType: ZonedDateTime.PlusNanoseconds
  fullName: NodaTime.ZonedDateTime.PlusNanoseconds
- uid: NodaTime.ZonedDateTime.op_Addition*
  commentId: Overload:NodaTime.ZonedDateTime.op_Addition
  name: Addition
  nameWithType: ZonedDateTime.Addition
  fullName: NodaTime.ZonedDateTime.Addition
- uid: NodaTime.ZonedDateTime.op_Subtraction(NodaTime.ZonedDateTime,NodaTime.Duration)
  commentId: M:NodaTime.ZonedDateTime.op_Subtraction(NodaTime.ZonedDateTime,NodaTime.Duration)
  isExternal: true
- uid: NodaTime.ZonedDateTime.Subtract*
  commentId: Overload:NodaTime.ZonedDateTime.Subtract
  name: Subtract
  nameWithType: ZonedDateTime.Subtract
  fullName: NodaTime.ZonedDateTime.Subtract
- uid: NodaTime.ZonedDateTime.Minus*
  commentId: Overload:NodaTime.ZonedDateTime.Minus
  name: Minus
  nameWithType: ZonedDateTime.Minus
  fullName: NodaTime.ZonedDateTime.Minus
- uid: NodaTime.ZonedDateTime.op_Subtraction*
  commentId: Overload:NodaTime.ZonedDateTime.op_Subtraction
  name: Subtraction
  nameWithType: ZonedDateTime.Subtraction
  fullName: NodaTime.ZonedDateTime.Subtraction
- uid: NodaTime.ZonedDateTime.op_Subtraction(NodaTime.ZonedDateTime,NodaTime.ZonedDateTime)
  commentId: M:NodaTime.ZonedDateTime.op_Subtraction(NodaTime.ZonedDateTime,NodaTime.ZonedDateTime)
  isExternal: true
- uid: NodaTime.TimeZones.ZoneInterval
  commentId: T:NodaTime.TimeZones.ZoneInterval
  parent: NodaTime.TimeZones
  name: ZoneInterval
  nameWithType: ZoneInterval
  fullName: NodaTime.TimeZones.ZoneInterval
- uid: NodaTime.ZonedDateTime.GetZoneInterval*
  commentId: Overload:NodaTime.ZonedDateTime.GetZoneInterval
  name: GetZoneInterval
  nameWithType: ZonedDateTime.GetZoneInterval
  fullName: NodaTime.ZonedDateTime.GetZoneInterval
- uid: NodaTime.TimeZones
  commentId: N:NodaTime.TimeZones
  name: NodaTime.TimeZones
  nameWithType: NodaTime.TimeZones
  fullName: NodaTime.TimeZones
- uid: NodaTime.TimeZones.ZoneInterval.Savings
  commentId: P:NodaTime.TimeZones.ZoneInterval.Savings
  isExternal: true
- uid: NodaTime.ZonedDateTime.GetZoneInterval
  commentId: M:NodaTime.ZonedDateTime.GetZoneInterval
  isExternal: true
- uid: NodaTime.ZonedDateTime.IsDaylightSavingTime*
  commentId: Overload:NodaTime.ZonedDateTime.IsDaylightSavingTime
  name: IsDaylightSavingTime
  nameWithType: ZonedDateTime.IsDaylightSavingTime
  fullName: NodaTime.ZonedDateTime.IsDaylightSavingTime
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.ValueType.ToString
  commentId: M:System.ValueType.ToString
  parent: System.ValueType
  isExternal: true
  name: ToString()
  nameWithType: ValueType.ToString()
  fullName: System.ValueType.ToString()
  spec.csharp:
  - uid: System.ValueType.ToString
    name: ToString
    nameWithType: ValueType.ToString
    fullName: System.ValueType.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.ValueType.ToString
    name: ToString
    nameWithType: ValueType.ToString
    fullName: System.ValueType.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: NodaTime.ZonedDateTime.ToString*
  commentId: Overload:NodaTime.ZonedDateTime.ToString
  name: ToString
  nameWithType: ZonedDateTime.ToString
  fullName: NodaTime.ZonedDateTime.ToString
- uid: System.IFormatProvider
  commentId: T:System.IFormatProvider
  parent: System
  isExternal: true
  name: IFormatProvider
  nameWithType: IFormatProvider
  fullName: System.IFormatProvider
- uid: System.IFormattable.ToString(System.String,System.IFormatProvider)
  commentId: M:System.IFormattable.ToString(System.String,System.IFormatProvider)
  parent: System.IFormattable
  isExternal: true
  name: ToString(String, IFormatProvider)
  nameWithType: IFormattable.ToString(String, IFormatProvider)
  fullName: System.IFormattable.ToString(System.String, System.IFormatProvider)
  spec.csharp:
  - uid: System.IFormattable.ToString(System.String,System.IFormatProvider)
    name: ToString
    nameWithType: IFormattable.ToString
    fullName: System.IFormattable.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.IFormatProvider
    name: IFormatProvider
    nameWithType: IFormatProvider
    fullName: System.IFormatProvider
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IFormattable.ToString(System.String,System.IFormatProvider)
    name: ToString
    nameWithType: IFormattable.ToString
    fullName: System.IFormattable.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.IFormatProvider
    name: IFormatProvider
    nameWithType: IFormatProvider
    fullName: System.IFormatProvider
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.DateTimeOffset
  commentId: T:System.DateTimeOffset
  parent: System
  isExternal: true
  name: DateTimeOffset
  nameWithType: DateTimeOffset
  fullName: System.DateTimeOffset
- uid: System.DateTime
  commentId: T:System.DateTime
  parent: System
  isExternal: true
  name: DateTime
  nameWithType: DateTime
  fullName: System.DateTime
- uid: System.InvalidOperationException
  commentId: T:System.InvalidOperationException
  isExternal: true
- uid: NodaTime.ZonedDateTime.ToDateTimeOffset*
  commentId: Overload:NodaTime.ZonedDateTime.ToDateTimeOffset
  name: ToDateTimeOffset
  nameWithType: ZonedDateTime.ToDateTimeOffset
  fullName: NodaTime.ZonedDateTime.ToDateTimeOffset
- uid: NodaTime.ZonedDateTime.FromDateTimeOffset*
  commentId: Overload:NodaTime.ZonedDateTime.FromDateTimeOffset
  name: FromDateTimeOffset
  nameWithType: ZonedDateTime.FromDateTimeOffset
  fullName: NodaTime.ZonedDateTime.FromDateTimeOffset
- uid: System.DateTime.Kind
  commentId: P:System.DateTime.Kind
  isExternal: true
- uid: System.DateTimeKind.Utc
  commentId: F:System.DateTimeKind.Utc
  isExternal: true
- uid: NodaTime.ZonedDateTime.ToDateTimeUtc*
  commentId: Overload:NodaTime.ZonedDateTime.ToDateTimeUtc
  name: ToDateTimeUtc
  nameWithType: ZonedDateTime.ToDateTimeUtc
  fullName: NodaTime.ZonedDateTime.ToDateTimeUtc
- uid: System.DateTimeKind.Unspecified
  commentId: F:System.DateTimeKind.Unspecified
  isExternal: true
- uid: System.DateTime.ToLocalTime
  commentId: M:System.DateTime.ToLocalTime
  isExternal: true
- uid: System.DateTime.ToUniversalTime
  commentId: M:System.DateTime.ToUniversalTime
  isExternal: true
- uid: NodaTime.ZonedDateTime.ToDateTimeUnspecified*
  commentId: Overload:NodaTime.ZonedDateTime.ToDateTimeUnspecified
  name: ToDateTimeUnspecified
  nameWithType: ZonedDateTime.ToDateTimeUnspecified
  fullName: NodaTime.ZonedDateTime.ToDateTimeUnspecified
- uid: NodaTime.ZonedDateTime.ToOffsetDateTime*
  commentId: Overload:NodaTime.ZonedDateTime.ToOffsetDateTime
  name: ToOffsetDateTime
  nameWithType: ZonedDateTime.ToOffsetDateTime
  fullName: NodaTime.ZonedDateTime.ToOffsetDateTime
- uid: NodaTime.ZonedDateTime.LocalDateTime
  commentId: P:NodaTime.ZonedDateTime.LocalDateTime
  isExternal: true
- uid: NodaTime.ZonedDateTime.Offset
  commentId: P:NodaTime.ZonedDateTime.Offset
  isExternal: true
- uid: NodaTime.ZonedDateTime.Deconstruct*
  commentId: Overload:NodaTime.ZonedDateTime.Deconstruct
  name: Deconstruct
  nameWithType: ZonedDateTime.Deconstruct
  fullName: NodaTime.ZonedDateTime.Deconstruct
- uid: NodaTime.ZonedDateTime.System#Xml#Serialization#IXmlSerializable#GetSchema*
  commentId: Overload:NodaTime.ZonedDateTime.System#Xml#Serialization#IXmlSerializable#GetSchema
  name: IXmlSerializable.GetSchema
  nameWithType: ZonedDateTime.IXmlSerializable.GetSchema
  fullName: NodaTime.ZonedDateTime.System.Xml.Serialization.IXmlSerializable.GetSchema
  nameWithType.vb: ZonedDateTime.System.Xml.Serialization.IXmlSerializable.GetSchema
  name.vb: System.Xml.Serialization.IXmlSerializable.GetSchema
- uid: System.Xml.Serialization.IXmlSerializable.GetSchema
  commentId: M:System.Xml.Serialization.IXmlSerializable.GetSchema
  parent: System.Xml.Serialization.IXmlSerializable
  isExternal: true
  name: GetSchema()
  nameWithType: IXmlSerializable.GetSchema()
  fullName: System.Xml.Serialization.IXmlSerializable.GetSchema()
  spec.csharp:
  - uid: System.Xml.Serialization.IXmlSerializable.GetSchema
    name: GetSchema
    nameWithType: IXmlSerializable.GetSchema
    fullName: System.Xml.Serialization.IXmlSerializable.GetSchema
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Xml.Serialization.IXmlSerializable.GetSchema
    name: GetSchema
    nameWithType: IXmlSerializable.GetSchema
    fullName: System.Xml.Serialization.IXmlSerializable.GetSchema
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Xml.Schema.XmlSchema
  commentId: T:System.Xml.Schema.XmlSchema
  parent: System.Xml.Schema
  isExternal: true
  name: XmlSchema
  nameWithType: XmlSchema
  fullName: System.Xml.Schema.XmlSchema
- uid: System.Xml.Schema
  commentId: N:System.Xml.Schema
  isExternal: true
  name: System.Xml.Schema
  nameWithType: System.Xml.Schema
  fullName: System.Xml.Schema
- uid: NodaTime.ZonedDateTime.System#Xml#Serialization#IXmlSerializable#ReadXml*
  commentId: Overload:NodaTime.ZonedDateTime.System#Xml#Serialization#IXmlSerializable#ReadXml
  name: IXmlSerializable.ReadXml
  nameWithType: ZonedDateTime.IXmlSerializable.ReadXml
  fullName: NodaTime.ZonedDateTime.System.Xml.Serialization.IXmlSerializable.ReadXml
  nameWithType.vb: ZonedDateTime.System.Xml.Serialization.IXmlSerializable.ReadXml
  name.vb: System.Xml.Serialization.IXmlSerializable.ReadXml
- uid: System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)
  commentId: M:System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)
  parent: System.Xml.Serialization.IXmlSerializable
  isExternal: true
  name: ReadXml(XmlReader)
  nameWithType: IXmlSerializable.ReadXml(XmlReader)
  fullName: System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)
  spec.csharp:
  - uid: System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)
    name: ReadXml
    nameWithType: IXmlSerializable.ReadXml
    fullName: System.Xml.Serialization.IXmlSerializable.ReadXml
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Xml.XmlReader
    name: XmlReader
    nameWithType: XmlReader
    fullName: System.Xml.XmlReader
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)
    name: ReadXml
    nameWithType: IXmlSerializable.ReadXml
    fullName: System.Xml.Serialization.IXmlSerializable.ReadXml
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Xml.XmlReader
    name: XmlReader
    nameWithType: XmlReader
    fullName: System.Xml.XmlReader
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Xml.XmlReader
  commentId: T:System.Xml.XmlReader
  parent: System.Xml
  isExternal: true
  name: XmlReader
  nameWithType: XmlReader
  fullName: System.Xml.XmlReader
- uid: System.Xml
  commentId: N:System.Xml
  isExternal: true
  name: System.Xml
  nameWithType: System.Xml
  fullName: System.Xml
- uid: NodaTime.ZonedDateTime.System#Xml#Serialization#IXmlSerializable#WriteXml*
  commentId: Overload:NodaTime.ZonedDateTime.System#Xml#Serialization#IXmlSerializable#WriteXml
  name: IXmlSerializable.WriteXml
  nameWithType: ZonedDateTime.IXmlSerializable.WriteXml
  fullName: NodaTime.ZonedDateTime.System.Xml.Serialization.IXmlSerializable.WriteXml
  nameWithType.vb: ZonedDateTime.System.Xml.Serialization.IXmlSerializable.WriteXml
  name.vb: System.Xml.Serialization.IXmlSerializable.WriteXml
- uid: System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)
  commentId: M:System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)
  parent: System.Xml.Serialization.IXmlSerializable
  isExternal: true
  name: WriteXml(XmlWriter)
  nameWithType: IXmlSerializable.WriteXml(XmlWriter)
  fullName: System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)
  spec.csharp:
  - uid: System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)
    name: WriteXml
    nameWithType: IXmlSerializable.WriteXml
    fullName: System.Xml.Serialization.IXmlSerializable.WriteXml
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Xml.XmlWriter
    name: XmlWriter
    nameWithType: XmlWriter
    fullName: System.Xml.XmlWriter
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)
    name: WriteXml
    nameWithType: IXmlSerializable.WriteXml
    fullName: System.Xml.Serialization.IXmlSerializable.WriteXml
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Xml.XmlWriter
    name: XmlWriter
    nameWithType: XmlWriter
    fullName: System.Xml.XmlWriter
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Xml.XmlWriter
  commentId: T:System.Xml.XmlWriter
  parent: System.Xml
  isExternal: true
  name: XmlWriter
  nameWithType: XmlWriter
  fullName: System.Xml.XmlWriter
- uid: System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  commentId: M:System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  parent: System.Runtime.Serialization.ISerializable
  isExternal: true
  name: GetObjectData(SerializationInfo, StreamingContext)
  nameWithType: ISerializable.GetObjectData(SerializationInfo, StreamingContext)
  fullName: System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext)
  spec.csharp:
  - uid: System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
    name: GetObjectData
    nameWithType: ISerializable.GetObjectData
    fullName: System.Runtime.Serialization.ISerializable.GetObjectData
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Runtime.Serialization.SerializationInfo
    name: SerializationInfo
    nameWithType: SerializationInfo
    fullName: System.Runtime.Serialization.SerializationInfo
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Runtime.Serialization.StreamingContext
    name: StreamingContext
    nameWithType: StreamingContext
    fullName: System.Runtime.Serialization.StreamingContext
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
    name: GetObjectData
    nameWithType: ISerializable.GetObjectData
    fullName: System.Runtime.Serialization.ISerializable.GetObjectData
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Runtime.Serialization.SerializationInfo
    name: SerializationInfo
    nameWithType: SerializationInfo
    fullName: System.Runtime.Serialization.SerializationInfo
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Runtime.Serialization.StreamingContext
    name: StreamingContext
    nameWithType: StreamingContext
    fullName: System.Runtime.Serialization.StreamingContext
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Runtime.Serialization.SerializationInfo
  commentId: T:System.Runtime.Serialization.SerializationInfo
  parent: System.Runtime.Serialization
  isExternal: true
  name: SerializationInfo
  nameWithType: SerializationInfo
  fullName: System.Runtime.Serialization.SerializationInfo
- uid: NodaTime.ZonedDateTime.System#Runtime#Serialization#ISerializable#GetObjectData*
  commentId: Overload:NodaTime.ZonedDateTime.System#Runtime#Serialization#ISerializable#GetObjectData
  name: ISerializable.GetObjectData
  nameWithType: ZonedDateTime.ISerializable.GetObjectData
  fullName: NodaTime.ZonedDateTime.System.Runtime.Serialization.ISerializable.GetObjectData
  nameWithType.vb: ZonedDateTime.System.Runtime.Serialization.ISerializable.GetObjectData
  name.vb: System.Runtime.Serialization.ISerializable.GetObjectData
- uid: System.Runtime.Serialization.StreamingContext
  commentId: T:System.Runtime.Serialization.StreamingContext
  parent: System.Runtime.Serialization
  isExternal: true
  name: StreamingContext
  nameWithType: StreamingContext
  fullName: System.Runtime.Serialization.StreamingContext
shouldSkipMarkup: true
