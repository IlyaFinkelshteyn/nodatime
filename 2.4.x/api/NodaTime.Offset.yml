### YamlMime:ManagedReference
items:
- uid: NodaTime.Offset
  commentId: T:NodaTime.Offset
  id: Offset
  parent: NodaTime
  children:
  - NodaTime.Offset.Add(NodaTime.Offset,NodaTime.Offset)
  - NodaTime.Offset.CompareTo(NodaTime.Offset)
  - NodaTime.Offset.Equals(NodaTime.Offset)
  - NodaTime.Offset.Equals(System.Object)
  - NodaTime.Offset.FromHours(System.Int32)
  - NodaTime.Offset.FromHoursAndMinutes(System.Int32,System.Int32)
  - NodaTime.Offset.FromMilliseconds(System.Int32)
  - NodaTime.Offset.FromNanoseconds(System.Int64)
  - NodaTime.Offset.FromSeconds(System.Int32)
  - NodaTime.Offset.FromTicks(System.Int64)
  - NodaTime.Offset.FromTimeSpan(System.TimeSpan)
  - NodaTime.Offset.GetHashCode
  - NodaTime.Offset.Max(NodaTime.Offset,NodaTime.Offset)
  - NodaTime.Offset.MaxValue
  - NodaTime.Offset.Milliseconds
  - NodaTime.Offset.Min(NodaTime.Offset,NodaTime.Offset)
  - NodaTime.Offset.Minus(NodaTime.Offset)
  - NodaTime.Offset.MinValue
  - NodaTime.Offset.Nanoseconds
  - NodaTime.Offset.Negate(NodaTime.Offset)
  - NodaTime.Offset.op_Addition(NodaTime.Offset,NodaTime.Offset)
  - NodaTime.Offset.op_Equality(NodaTime.Offset,NodaTime.Offset)
  - NodaTime.Offset.op_GreaterThan(NodaTime.Offset,NodaTime.Offset)
  - NodaTime.Offset.op_GreaterThanOrEqual(NodaTime.Offset,NodaTime.Offset)
  - NodaTime.Offset.op_Inequality(NodaTime.Offset,NodaTime.Offset)
  - NodaTime.Offset.op_LessThan(NodaTime.Offset,NodaTime.Offset)
  - NodaTime.Offset.op_LessThanOrEqual(NodaTime.Offset,NodaTime.Offset)
  - NodaTime.Offset.op_Subtraction(NodaTime.Offset,NodaTime.Offset)
  - NodaTime.Offset.op_UnaryNegation(NodaTime.Offset)
  - NodaTime.Offset.op_UnaryPlus(NodaTime.Offset)
  - NodaTime.Offset.Plus(NodaTime.Offset)
  - NodaTime.Offset.Seconds
  - NodaTime.Offset.Subtract(NodaTime.Offset,NodaTime.Offset)
  - NodaTime.Offset.System#IComparable#CompareTo(System.Object)
  - NodaTime.Offset.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  - NodaTime.Offset.System#Xml#Serialization#IXmlSerializable#GetSchema
  - NodaTime.Offset.System#Xml#Serialization#IXmlSerializable#ReadXml(System.Xml.XmlReader)
  - NodaTime.Offset.System#Xml#Serialization#IXmlSerializable#WriteXml(System.Xml.XmlWriter)
  - NodaTime.Offset.Ticks
  - NodaTime.Offset.ToString
  - NodaTime.Offset.ToString(System.String,System.IFormatProvider)
  - NodaTime.Offset.ToTimeSpan
  - NodaTime.Offset.Zero
  langs:
  - csharp
  - vb
  name: Offset
  nameWithType: Offset
  fullName: NodaTime.Offset
  type: Struct
  source:
    remote:
      path: 2.4.x/src/NodaTime/Offset.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: Offset
    path: src/NodaTime/Offset.cs
    startLine: 38
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nAn offset from UTC in seconds. A positive value means that the local time is\nahead of UTC (e.g. for Europe); a negative value means that the local time is behind\nUTC (e.g. for America).\n"
  remarks: "\n<p>\nOffsets are always in the range of [-18, +18] hours. (Note that the ends are inclusive,\nso an offset of 18 hours can be represented, but an offset of 18 hours and one second cannot.)\nThis allows all offsets within TZDB to be represented. The BCL <xref href=\"System.DateTimeOffset\" data-throw-if-not-resolved=\"false\"></xref> type\nonly allows offsets up to 14 hours, which means some historical data within TZDB could not be\nrepresented.\n</p>\n<p>Offsets are represented with a granularity of one second. This allows all offsets within TZDB\nto be represented. It is possible that it could present issues to some other time zone data sources,\nbut only in very rare historical cases (or fictional ones).</p>\n"
  example: []
  syntax:
    content: >-
      [Serializable]

      public struct Offset : IEquatable<Offset>, IComparable<Offset>, IFormattable, IComparable, IXmlSerializable, ISerializable
    content.vb: >-
      <Serializable>

      Public Structure Offset
          Implements IEquatable(Of Offset), IComparable(Of Offset), IFormattable, IComparable, IXmlSerializable, ISerializable
  implements:
  - System.IEquatable{NodaTime.Offset}
  - System.IComparable{NodaTime.Offset}
  - System.IFormattable
  - System.IComparable
  - System.Xml.Serialization.IXmlSerializable
  - System.Runtime.Serialization.ISerializable
  inheritedMembers:
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetType
  attributes:
  - type: System.SerializableAttribute
    ctor: System.SerializableAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - struct
  modifiers.vb:
  - Public
  - Structure
- uid: NodaTime.Offset.Zero
  commentId: F:NodaTime.Offset.Zero
  id: Zero
  parent: NodaTime.Offset
  langs:
  - csharp
  - vb
  name: Zero
  nameWithType: Offset.Zero
  fullName: NodaTime.Offset.Zero
  type: Field
  source:
    remote:
      path: 2.4.x/src/NodaTime/Offset.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: Zero
    path: src/NodaTime/Offset.cs
    startLine: 48
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nAn offset of zero seconds - effectively the permanent offset for UTC.\n"
  example: []
  syntax:
    content: public static readonly Offset Zero
    return:
      type: NodaTime.Offset
    content.vb: Public Shared ReadOnly Zero As Offset
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: NodaTime.Offset.MinValue
  commentId: F:NodaTime.Offset.MinValue
  id: MinValue
  parent: NodaTime.Offset
  langs:
  - csharp
  - vb
  name: MinValue
  nameWithType: Offset.MinValue
  fullName: NodaTime.Offset.MinValue
  type: Field
  source:
    remote:
      path: 2.4.x/src/NodaTime/Offset.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: MinValue
    path: src/NodaTime/Offset.cs
    startLine: 53
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nThe minimum permitted offset; 18 hours before UTC.\n"
  example: []
  syntax:
    content: public static readonly Offset MinValue
    return:
      type: NodaTime.Offset
    content.vb: Public Shared ReadOnly MinValue As Offset
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: NodaTime.Offset.MaxValue
  commentId: F:NodaTime.Offset.MaxValue
  id: MaxValue
  parent: NodaTime.Offset
  langs:
  - csharp
  - vb
  name: MaxValue
  nameWithType: Offset.MaxValue
  fullName: NodaTime.Offset.MaxValue
  type: Field
  source:
    remote:
      path: 2.4.x/src/NodaTime/Offset.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: MaxValue
    path: src/NodaTime/Offset.cs
    startLine: 57
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nThe maximum permitted offset; 18 hours after UTC.\n"
  example: []
  syntax:
    content: public static readonly Offset MaxValue
    return:
      type: NodaTime.Offset
    content.vb: Public Shared ReadOnly MaxValue As Offset
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: NodaTime.Offset.Seconds
  commentId: P:NodaTime.Offset.Seconds
  id: Seconds
  parent: NodaTime.Offset
  langs:
  - csharp
  - vb
  name: Seconds
  nameWithType: Offset.Seconds
  fullName: NodaTime.Offset.Seconds
  type: Property
  source:
    remote:
      path: 2.4.x/src/NodaTime/Offset.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: Seconds
    path: src/NodaTime/Offset.cs
    startLine: 86
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nGets the number of seconds represented by this offset, which may be negative.\n"
  example: []
  syntax:
    content: public int Seconds { get; }
    parameters: []
    return:
      type: System.Int32
      description: The number of seconds represented by this offset, which may be negative.
    content.vb: Public ReadOnly Property Seconds As Integer
  overload: NodaTime.Offset.Seconds*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: NodaTime.Offset.Milliseconds
  commentId: P:NodaTime.Offset.Milliseconds
  id: Milliseconds
  parent: NodaTime.Offset
  langs:
  - csharp
  - vb
  name: Milliseconds
  nameWithType: Offset.Milliseconds
  fullName: NodaTime.Offset.Milliseconds
  type: Property
  source:
    remote:
      path: 2.4.x/src/NodaTime/Offset.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: Milliseconds
    path: src/NodaTime/Offset.cs
    startLine: 96
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nGets the number of milliseconds represented by this offset, which may be negative.\n"
  remarks: "\nOffsets are only accurate to second precision; the number of seconds is simply multiplied\nby 1,000 to give the number of milliseconds.\n"
  example: []
  syntax:
    content: public int Milliseconds { get; }
    parameters: []
    return:
      type: System.Int32
      description: The number of milliseconds represented by this offset, which may be negative.
    content.vb: Public ReadOnly Property Milliseconds As Integer
  overload: NodaTime.Offset.Milliseconds*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: NodaTime.Offset.Ticks
  commentId: P:NodaTime.Offset.Ticks
  id: Ticks
  parent: NodaTime.Offset
  langs:
  - csharp
  - vb
  name: Ticks
  nameWithType: Offset.Ticks
  fullName: NodaTime.Offset.Ticks
  type: Property
  source:
    remote:
      path: 2.4.x/src/NodaTime/Offset.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: Ticks
    path: src/NodaTime/Offset.cs
    startLine: 106
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nGets the number of ticks represented by this offset, which may be negative.\n"
  remarks: "\nOffsets are only accurate to second precision; the number of seconds is simply multiplied\nby 10,000,000 to give the number of ticks.\n"
  example: []
  syntax:
    content: public long Ticks { get; }
    parameters: []
    return:
      type: System.Int64
      description: The number of ticks.
    content.vb: Public ReadOnly Property Ticks As Long
  overload: NodaTime.Offset.Ticks*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: NodaTime.Offset.Nanoseconds
  commentId: P:NodaTime.Offset.Nanoseconds
  id: Nanoseconds
  parent: NodaTime.Offset
  langs:
  - csharp
  - vb
  name: Nanoseconds
  nameWithType: Offset.Nanoseconds
  fullName: NodaTime.Offset.Nanoseconds
  type: Property
  source:
    remote:
      path: 2.4.x/src/NodaTime/Offset.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: Nanoseconds
    path: src/NodaTime/Offset.cs
    startLine: 116
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nGets the number of nanoseconds represented by this offset, which may be negative.\n"
  remarks: "\nOffsets are only accurate to second precision; the number of seconds is simply multiplied\nby 1,000,000,000 to give the number of nanoseconds.\n"
  example: []
  syntax:
    content: public long Nanoseconds { get; }
    parameters: []
    return:
      type: System.Int64
      description: The number of nanoseconds.
    content.vb: Public ReadOnly Property Nanoseconds As Long
  overload: NodaTime.Offset.Nanoseconds*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: NodaTime.Offset.Max(NodaTime.Offset,NodaTime.Offset)
  commentId: M:NodaTime.Offset.Max(NodaTime.Offset,NodaTime.Offset)
  id: Max(NodaTime.Offset,NodaTime.Offset)
  parent: NodaTime.Offset
  langs:
  - csharp
  - vb
  name: Max(Offset, Offset)
  nameWithType: Offset.Max(Offset, Offset)
  fullName: NodaTime.Offset.Max(NodaTime.Offset, NodaTime.Offset)
  type: Method
  source:
    remote:
      path: 2.4.x/src/NodaTime/Offset.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: Max
    path: src/NodaTime/Offset.cs
    startLine: 125
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nReturns the greater offset of the given two, i.e. the one which will give a later local\ntime when added to an instant.\n"
  example: []
  syntax:
    content: public static Offset Max(Offset x, Offset y)
    parameters:
    - id: x
      type: NodaTime.Offset
      description: The first offset
    - id: y
      type: NodaTime.Offset
      description: The second offset
    return:
      type: NodaTime.Offset
      description: The greater offset of <code data-dev-comment-type="paramref" class="paramref">x</code> and <code data-dev-comment-type="paramref" class="paramref">y</code>.
    content.vb: Public Shared Function Max(x As Offset, y As Offset) As Offset
  overload: NodaTime.Offset.Max*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: NodaTime.Offset.Min(NodaTime.Offset,NodaTime.Offset)
  commentId: M:NodaTime.Offset.Min(NodaTime.Offset,NodaTime.Offset)
  id: Min(NodaTime.Offset,NodaTime.Offset)
  parent: NodaTime.Offset
  langs:
  - csharp
  - vb
  name: Min(Offset, Offset)
  nameWithType: Offset.Min(Offset, Offset)
  fullName: NodaTime.Offset.Min(NodaTime.Offset, NodaTime.Offset)
  type: Method
  source:
    remote:
      path: 2.4.x/src/NodaTime/Offset.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: Min
    path: src/NodaTime/Offset.cs
    startLine: 134
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nReturns the lower offset of the given two, i.e. the one which will give an earlier local\ntime when added to an instant.\n"
  example: []
  syntax:
    content: public static Offset Min(Offset x, Offset y)
    parameters:
    - id: x
      type: NodaTime.Offset
      description: The first offset
    - id: y
      type: NodaTime.Offset
      description: The second offset
    return:
      type: NodaTime.Offset
      description: The lower offset of <code data-dev-comment-type="paramref" class="paramref">x</code> and <code data-dev-comment-type="paramref" class="paramref">y</code>.
    content.vb: Public Shared Function Min(x As Offset, y As Offset) As Offset
  overload: NodaTime.Offset.Min*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: NodaTime.Offset.op_UnaryNegation(NodaTime.Offset)
  commentId: M:NodaTime.Offset.op_UnaryNegation(NodaTime.Offset)
  id: op_UnaryNegation(NodaTime.Offset)
  parent: NodaTime.Offset
  langs:
  - csharp
  - vb
  name: UnaryNegation(Offset)
  nameWithType: Offset.UnaryNegation(Offset)
  fullName: NodaTime.Offset.UnaryNegation(NodaTime.Offset)
  type: Operator
  source:
    remote:
      path: 2.4.x/src/NodaTime/Offset.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: op_UnaryNegation
    path: src/NodaTime/Offset.cs
    startLine: 142
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nImplements the unary operator - (negation).\n"
  example: []
  syntax:
    content: public static Offset operator -(Offset offset)
    parameters:
    - id: offset
      type: NodaTime.Offset
      description: The offset to negate.
    return:
      type: NodaTime.Offset
      description: A new <xref href="NodaTime.Offset" data-throw-if-not-resolved="false"></xref> instance with a negated value.
    content.vb: Public Shared Operator -(offset As Offset) As Offset
  overload: NodaTime.Offset.op_UnaryNegation*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: NodaTime.Offset.Negate(NodaTime.Offset)
  commentId: M:NodaTime.Offset.Negate(NodaTime.Offset)
  id: Negate(NodaTime.Offset)
  parent: NodaTime.Offset
  langs:
  - csharp
  - vb
  name: Negate(Offset)
  nameWithType: Offset.Negate(Offset)
  fullName: NodaTime.Offset.Negate(NodaTime.Offset)
  type: Method
  source:
    remote:
      path: 2.4.x/src/NodaTime/Offset.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: Negate
    path: src/NodaTime/Offset.cs
    startLine: 151
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nReturns the negation of the specified offset. This is the method form of the unary minus operator.\n"
  example: []
  syntax:
    content: public static Offset Negate(Offset offset)
    parameters:
    - id: offset
      type: NodaTime.Offset
      description: The offset to negate.
    return:
      type: NodaTime.Offset
      description: The negation of the specified offset.
    content.vb: Public Shared Function Negate(offset As Offset) As Offset
  overload: NodaTime.Offset.Negate*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: NodaTime.Offset.op_UnaryPlus(NodaTime.Offset)
  commentId: M:NodaTime.Offset.op_UnaryPlus(NodaTime.Offset)
  id: op_UnaryPlus(NodaTime.Offset)
  parent: NodaTime.Offset
  langs:
  - csharp
  - vb
  name: UnaryPlus(Offset)
  nameWithType: Offset.UnaryPlus(Offset)
  fullName: NodaTime.Offset.UnaryPlus(NodaTime.Offset)
  type: Operator
  source:
    remote:
      path: 2.4.x/src/NodaTime/Offset.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: op_UnaryPlus
    path: src/NodaTime/Offset.cs
    startLine: 160
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nImplements the unary operator + .\n"
  remarks: >-
    There is no method form of this operator; the <xref href="NodaTime.Offset.Plus(NodaTime.Offset)" data-throw-if-not-resolved="false"></xref> method is an instance

    method for addition, and is more useful than a method form of this would be.
  example: []
  syntax:
    content: public static Offset operator +(Offset offset)
    parameters:
    - id: offset
      type: NodaTime.Offset
      description: The operand.
    return:
      type: NodaTime.Offset
      description: The same <xref href="NodaTime.Offset" data-throw-if-not-resolved="false"></xref> instance
    content.vb: Public Shared Operator +(offset As Offset) As Offset
  overload: NodaTime.Offset.op_UnaryPlus*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: NodaTime.Offset.op_Addition(NodaTime.Offset,NodaTime.Offset)
  commentId: M:NodaTime.Offset.op_Addition(NodaTime.Offset,NodaTime.Offset)
  id: op_Addition(NodaTime.Offset,NodaTime.Offset)
  parent: NodaTime.Offset
  langs:
  - csharp
  - vb
  name: Addition(Offset, Offset)
  nameWithType: Offset.Addition(Offset, Offset)
  fullName: NodaTime.Offset.Addition(NodaTime.Offset, NodaTime.Offset)
  type: Operator
  source:
    remote:
      path: 2.4.x/src/NodaTime/Offset.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: op_Addition
    path: src/NodaTime/Offset.cs
    startLine: 170
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nImplements the operator + (addition).\n"
  example: []
  syntax:
    content: public static Offset operator +(Offset left, Offset right)
    parameters:
    - id: left
      type: NodaTime.Offset
      description: The left hand side of the operator.
    - id: right
      type: NodaTime.Offset
      description: The right hand side of the operator.
    return:
      type: NodaTime.Offset
      description: A new <xref href="NodaTime.Offset" data-throw-if-not-resolved="false"></xref> representing the sum of the given values.
    content.vb: Public Shared Operator +(left As Offset, right As Offset) As Offset
  overload: NodaTime.Offset.op_Addition*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: The result of the operation is outside the range of Offset.
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: The result of the operation is outside the range of Offset.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: NodaTime.Offset.Add(NodaTime.Offset,NodaTime.Offset)
  commentId: M:NodaTime.Offset.Add(NodaTime.Offset,NodaTime.Offset)
  id: Add(NodaTime.Offset,NodaTime.Offset)
  parent: NodaTime.Offset
  langs:
  - csharp
  - vb
  name: Add(Offset, Offset)
  nameWithType: Offset.Add(Offset, Offset)
  fullName: NodaTime.Offset.Add(NodaTime.Offset, NodaTime.Offset)
  type: Method
  source:
    remote:
      path: 2.4.x/src/NodaTime/Offset.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: Add
    path: src/NodaTime/Offset.cs
    startLine: 180
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nAdds one Offset to another. Friendly alternative to <code>operator+()</code>.\n"
  example: []
  syntax:
    content: public static Offset Add(Offset left, Offset right)
    parameters:
    - id: left
      type: NodaTime.Offset
      description: The left hand side of the operator.
    - id: right
      type: NodaTime.Offset
      description: The right hand side of the operator.
    return:
      type: NodaTime.Offset
      description: A new <xref href="NodaTime.Offset" data-throw-if-not-resolved="false"></xref> representing the sum of the given values.
    content.vb: Public Shared Function Add(left As Offset, right As Offset) As Offset
  overload: NodaTime.Offset.Add*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: The result of the operation is outside the range of Offset.
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: The result of the operation is outside the range of Offset.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: NodaTime.Offset.Plus(NodaTime.Offset)
  commentId: M:NodaTime.Offset.Plus(NodaTime.Offset)
  id: Plus(NodaTime.Offset)
  parent: NodaTime.Offset
  langs:
  - csharp
  - vb
  name: Plus(Offset)
  nameWithType: Offset.Plus(Offset)
  fullName: NodaTime.Offset.Plus(NodaTime.Offset)
  type: Method
  source:
    remote:
      path: 2.4.x/src/NodaTime/Offset.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: Plus
    path: src/NodaTime/Offset.cs
    startLine: 188
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nReturns the result of adding another Offset to this one, for a fluent alternative to <code>operator+()</code>.\n"
  example: []
  syntax:
    content: public Offset Plus(Offset other)
    parameters:
    - id: other
      type: NodaTime.Offset
      description: The offset to add
    return:
      type: NodaTime.Offset
      description: The result of adding the other offset to this one.
    content.vb: Public Function Plus(other As Offset) As Offset
  overload: NodaTime.Offset.Plus*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: The result of the operation is outside the range of Offset.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: NodaTime.Offset.op_Subtraction(NodaTime.Offset,NodaTime.Offset)
  commentId: M:NodaTime.Offset.op_Subtraction(NodaTime.Offset,NodaTime.Offset)
  id: op_Subtraction(NodaTime.Offset,NodaTime.Offset)
  parent: NodaTime.Offset
  langs:
  - csharp
  - vb
  name: Subtraction(Offset, Offset)
  nameWithType: Offset.Subtraction(Offset, Offset)
  fullName: NodaTime.Offset.Subtraction(NodaTime.Offset, NodaTime.Offset)
  type: Operator
  source:
    remote:
      path: 2.4.x/src/NodaTime/Offset.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: op_Subtraction
    path: src/NodaTime/Offset.cs
    startLine: 199
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nImplements the operator - (subtraction).\n"
  example: []
  syntax:
    content: public static Offset operator -(Offset minuend, Offset subtrahend)
    parameters:
    - id: minuend
      type: NodaTime.Offset
      description: The left hand side of the operator.
    - id: subtrahend
      type: NodaTime.Offset
      description: The right hand side of the operator.
    return:
      type: NodaTime.Offset
      description: A new <xref href="NodaTime.Offset" data-throw-if-not-resolved="false"></xref> representing the difference of the given values.
    content.vb: Public Shared Operator -(minuend As Offset, subtrahend As Offset) As Offset
  overload: NodaTime.Offset.op_Subtraction*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: The result of the operation is outside the range of Offset.
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: The result of the operation is outside the range of Offset.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: NodaTime.Offset.Subtract(NodaTime.Offset,NodaTime.Offset)
  commentId: M:NodaTime.Offset.Subtract(NodaTime.Offset,NodaTime.Offset)
  id: Subtract(NodaTime.Offset,NodaTime.Offset)
  parent: NodaTime.Offset
  langs:
  - csharp
  - vb
  name: Subtract(Offset, Offset)
  nameWithType: Offset.Subtract(Offset, Offset)
  fullName: NodaTime.Offset.Subtract(NodaTime.Offset, NodaTime.Offset)
  type: Method
  source:
    remote:
      path: 2.4.x/src/NodaTime/Offset.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: Subtract
    path: src/NodaTime/Offset.cs
    startLine: 210
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nSubtracts one Offset from another. Friendly alternative to <code>operator-()</code>.\n"
  example: []
  syntax:
    content: public static Offset Subtract(Offset minuend, Offset subtrahend)
    parameters:
    - id: minuend
      type: NodaTime.Offset
      description: The left hand side of the operator.
    - id: subtrahend
      type: NodaTime.Offset
      description: The right hand side of the operator.
    return:
      type: NodaTime.Offset
      description: A new <xref href="NodaTime.Offset" data-throw-if-not-resolved="false"></xref> representing the difference of the given values.
    content.vb: Public Shared Function Subtract(minuend As Offset, subtrahend As Offset) As Offset
  overload: NodaTime.Offset.Subtract*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: The result of the operation is outside the range of Offset.
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: The result of the operation is outside the range of Offset.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: NodaTime.Offset.Minus(NodaTime.Offset)
  commentId: M:NodaTime.Offset.Minus(NodaTime.Offset)
  id: Minus(NodaTime.Offset)
  parent: NodaTime.Offset
  langs:
  - csharp
  - vb
  name: Minus(Offset)
  nameWithType: Offset.Minus(Offset)
  fullName: NodaTime.Offset.Minus(NodaTime.Offset)
  type: Method
  source:
    remote:
      path: 2.4.x/src/NodaTime/Offset.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: Minus
    path: src/NodaTime/Offset.cs
    startLine: 218
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nReturns the result of subtracting another Offset from this one, for a fluent alternative to <code>operator-()</code>.\n"
  example: []
  syntax:
    content: public Offset Minus(Offset other)
    parameters:
    - id: other
      type: NodaTime.Offset
      description: The offset to subtract
    return:
      type: NodaTime.Offset
      description: The result of subtracting the other offset from this one.
    content.vb: Public Function Minus(other As Offset) As Offset
  overload: NodaTime.Offset.Minus*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: The result of the operation is outside the range of Offset.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: NodaTime.Offset.op_Equality(NodaTime.Offset,NodaTime.Offset)
  commentId: M:NodaTime.Offset.op_Equality(NodaTime.Offset,NodaTime.Offset)
  id: op_Equality(NodaTime.Offset,NodaTime.Offset)
  parent: NodaTime.Offset
  langs:
  - csharp
  - vb
  name: Equality(Offset, Offset)
  nameWithType: Offset.Equality(Offset, Offset)
  fullName: NodaTime.Offset.Equality(NodaTime.Offset, NodaTime.Offset)
  type: Operator
  source:
    remote:
      path: 2.4.x/src/NodaTime/Offset.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: op_Equality
    path: src/NodaTime/Offset.cs
    startLine: 227
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nImplements the operator == (equality).\n"
  example: []
  syntax:
    content: public static bool operator ==(Offset left, Offset right)
    parameters:
    - id: left
      type: NodaTime.Offset
      description: The left hand side of the operator.
    - id: right
      type: NodaTime.Offset
      description: The right hand side of the operator.
    return:
      type: System.Boolean
      description: <code>true</code> if values are equal to each other, otherwise <code>false</code>.
    content.vb: Public Shared Operator =(left As Offset, right As Offset) As Boolean
  overload: NodaTime.Offset.op_Equality*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: NodaTime.Offset.op_Inequality(NodaTime.Offset,NodaTime.Offset)
  commentId: M:NodaTime.Offset.op_Inequality(NodaTime.Offset,NodaTime.Offset)
  id: op_Inequality(NodaTime.Offset,NodaTime.Offset)
  parent: NodaTime.Offset
  langs:
  - csharp
  - vb
  name: Inequality(Offset, Offset)
  nameWithType: Offset.Inequality(Offset, Offset)
  fullName: NodaTime.Offset.Inequality(NodaTime.Offset, NodaTime.Offset)
  type: Operator
  source:
    remote:
      path: 2.4.x/src/NodaTime/Offset.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: op_Inequality
    path: src/NodaTime/Offset.cs
    startLine: 235
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nImplements the operator != (inequality).\n"
  example: []
  syntax:
    content: public static bool operator !=(Offset left, Offset right)
    parameters:
    - id: left
      type: NodaTime.Offset
      description: The left hand side of the operator.
    - id: right
      type: NodaTime.Offset
      description: The right hand side of the operator.
    return:
      type: System.Boolean
      description: <code>true</code> if values are not equal to each other, otherwise <code>false</code>.
    content.vb: Public Shared Operator <>(left As Offset, right As Offset) As Boolean
  overload: NodaTime.Offset.op_Inequality*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: NodaTime.Offset.op_LessThan(NodaTime.Offset,NodaTime.Offset)
  commentId: M:NodaTime.Offset.op_LessThan(NodaTime.Offset,NodaTime.Offset)
  id: op_LessThan(NodaTime.Offset,NodaTime.Offset)
  parent: NodaTime.Offset
  langs:
  - csharp
  - vb
  name: LessThan(Offset, Offset)
  nameWithType: Offset.LessThan(Offset, Offset)
  fullName: NodaTime.Offset.LessThan(NodaTime.Offset, NodaTime.Offset)
  type: Operator
  source:
    remote:
      path: 2.4.x/src/NodaTime/Offset.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: op_LessThan
    path: src/NodaTime/Offset.cs
    startLine: 243
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nImplements the operator &lt; (less than).\n"
  example: []
  syntax:
    content: public static bool operator <(Offset left, Offset right)
    parameters:
    - id: left
      type: NodaTime.Offset
      description: The left hand side of the operator.
    - id: right
      type: NodaTime.Offset
      description: The right hand side of the operator.
    return:
      type: System.Boolean
      description: <code>true</code> if the left value is less than the right value, otherwise <code>false</code>.
    content.vb: Public Shared Operator <(left As Offset, right As Offset) As Boolean
  overload: NodaTime.Offset.op_LessThan*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: NodaTime.Offset.op_LessThanOrEqual(NodaTime.Offset,NodaTime.Offset)
  commentId: M:NodaTime.Offset.op_LessThanOrEqual(NodaTime.Offset,NodaTime.Offset)
  id: op_LessThanOrEqual(NodaTime.Offset,NodaTime.Offset)
  parent: NodaTime.Offset
  langs:
  - csharp
  - vb
  name: LessThanOrEqual(Offset, Offset)
  nameWithType: Offset.LessThanOrEqual(Offset, Offset)
  fullName: NodaTime.Offset.LessThanOrEqual(NodaTime.Offset, NodaTime.Offset)
  type: Operator
  source:
    remote:
      path: 2.4.x/src/NodaTime/Offset.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: op_LessThanOrEqual
    path: src/NodaTime/Offset.cs
    startLine: 251
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nImplements the operator &lt;= (less than or equal).\n"
  example: []
  syntax:
    content: public static bool operator <=(Offset left, Offset right)
    parameters:
    - id: left
      type: NodaTime.Offset
      description: The left hand side of the operator.
    - id: right
      type: NodaTime.Offset
      description: The right hand side of the operator.
    return:
      type: System.Boolean
      description: <code>true</code> if the left value is less than or equal to the right value, otherwise <code>false</code>.
    content.vb: Public Shared Operator <=(left As Offset, right As Offset) As Boolean
  overload: NodaTime.Offset.op_LessThanOrEqual*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: NodaTime.Offset.op_GreaterThan(NodaTime.Offset,NodaTime.Offset)
  commentId: M:NodaTime.Offset.op_GreaterThan(NodaTime.Offset,NodaTime.Offset)
  id: op_GreaterThan(NodaTime.Offset,NodaTime.Offset)
  parent: NodaTime.Offset
  langs:
  - csharp
  - vb
  name: GreaterThan(Offset, Offset)
  nameWithType: Offset.GreaterThan(Offset, Offset)
  fullName: NodaTime.Offset.GreaterThan(NodaTime.Offset, NodaTime.Offset)
  type: Operator
  source:
    remote:
      path: 2.4.x/src/NodaTime/Offset.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: op_GreaterThan
    path: src/NodaTime/Offset.cs
    startLine: 259
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nImplements the operator > (greater than).\n"
  example: []
  syntax:
    content: public static bool operator>(Offset left, Offset right)
    parameters:
    - id: left
      type: NodaTime.Offset
      description: The left hand side of the operator.
    - id: right
      type: NodaTime.Offset
      description: The right hand side of the operator.
    return:
      type: System.Boolean
      description: <code>true</code> if the left value is greater than the right value, otherwise <code>false</code>.
    content.vb: Public Shared Operator>(left As Offset, right As Offset) As Boolean
  overload: NodaTime.Offset.op_GreaterThan*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: NodaTime.Offset.op_GreaterThanOrEqual(NodaTime.Offset,NodaTime.Offset)
  commentId: M:NodaTime.Offset.op_GreaterThanOrEqual(NodaTime.Offset,NodaTime.Offset)
  id: op_GreaterThanOrEqual(NodaTime.Offset,NodaTime.Offset)
  parent: NodaTime.Offset
  langs:
  - csharp
  - vb
  name: GreaterThanOrEqual(Offset, Offset)
  nameWithType: Offset.GreaterThanOrEqual(Offset, Offset)
  fullName: NodaTime.Offset.GreaterThanOrEqual(NodaTime.Offset, NodaTime.Offset)
  type: Operator
  source:
    remote:
      path: 2.4.x/src/NodaTime/Offset.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: op_GreaterThanOrEqual
    path: src/NodaTime/Offset.cs
    startLine: 267
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nImplements the operator >= (greater than or equal).\n"
  example: []
  syntax:
    content: public static bool operator >=(Offset left, Offset right)
    parameters:
    - id: left
      type: NodaTime.Offset
      description: The left hand side of the operator.
    - id: right
      type: NodaTime.Offset
      description: The right hand side of the operator.
    return:
      type: System.Boolean
      description: <code>true</code> if the left value is greater than or equal to the right value, otherwise <code>false</code>.
    content.vb: Public Shared Operator >=(left As Offset, right As Offset) As Boolean
  overload: NodaTime.Offset.op_GreaterThanOrEqual*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: NodaTime.Offset.CompareTo(NodaTime.Offset)
  commentId: M:NodaTime.Offset.CompareTo(NodaTime.Offset)
  id: CompareTo(NodaTime.Offset)
  parent: NodaTime.Offset
  langs:
  - csharp
  - vb
  name: CompareTo(Offset)
  nameWithType: Offset.CompareTo(Offset)
  fullName: NodaTime.Offset.CompareTo(NodaTime.Offset)
  type: Method
  source:
    remote:
      path: 2.4.x/src/NodaTime/Offset.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: CompareTo
    path: src/NodaTime/Offset.cs
    startLine: 297
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nCompares the current object with another object of the same type.\n"
  example: []
  syntax:
    content: public int CompareTo(Offset other)
    parameters:
    - id: other
      type: NodaTime.Offset
      description: An object to compare with this object.
    return:
      type: System.Int32
      description: "\nA 32-bit signed integer that indicates the relative order of the objects being compared.\nThe return value has the following meanings:\n<table><thead><tr><th>Value</th><th>Meaning</th></tr></thead><tbody><tr><td>&lt; 0</td><td>This object is less than the <code data-dev-comment-type=\"paramref\" class=\"paramref\">other</code> parameter.</td></tr><tr><td>0</td><td>This object is equal to <code data-dev-comment-type=\"paramref\" class=\"paramref\">other</code>.</td></tr><tr><td>> 0</td><td>This object is greater than <code data-dev-comment-type=\"paramref\" class=\"paramref\">other</code>.</td></tr></tbody></table>\n"
    content.vb: Public Function CompareTo(other As Offset) As Integer
  overload: NodaTime.Offset.CompareTo*
  implements:
  - System.IComparable{NodaTime.Offset}.CompareTo(NodaTime.Offset)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: NodaTime.Offset.System#IComparable#CompareTo(System.Object)
  commentId: M:NodaTime.Offset.System#IComparable#CompareTo(System.Object)
  id: System#IComparable#CompareTo(System.Object)
  isEii: true
  parent: NodaTime.Offset
  langs:
  - csharp
  - vb
  name: IComparable.CompareTo(Object)
  nameWithType: Offset.IComparable.CompareTo(Object)
  fullName: NodaTime.Offset.System.IComparable.CompareTo(System.Object)
  type: Method
  source:
    remote:
      path: 2.4.x/src/NodaTime/Offset.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: System.IComparable.CompareTo
    path: src/NodaTime/Offset.cs
    startLine: 310
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nImplementation of <xref href=\"System.IComparable.CompareTo(System.Object)\" data-throw-if-not-resolved=\"false\"></xref> to compare two offsets.\n"
  remarks: "\nThis uses explicit interface implementation to avoid it being called accidentally. The generic implementation should usually be preferred.\n"
  example: []
  syntax:
    content: int IComparable.CompareTo(object obj)
    parameters:
    - id: obj
      type: System.Object
      description: The object to compare this value with.
    return:
      type: System.Int32
      description: >
        The result of comparing this instant with another one; see <xref href="NodaTime.Offset.CompareTo(NodaTime.Offset)" data-throw-if-not-resolved="false"></xref> for general details.

        If <code data-dev-comment-type="paramref" class="paramref">obj</code> is null, this method returns a value greater than 0.
    content.vb: Function System.IComparable.CompareTo(obj As Object) As Integer Implements IComparable.CompareTo
  overload: NodaTime.Offset.System#IComparable#CompareTo*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: <code data-dev-comment-type="paramref" class="paramref">obj</code> is non-null but does not refer to an instance of <xref href="NodaTime.Offset" data-throw-if-not-resolved="false"></xref>.
  implements:
  - System.IComparable.CompareTo(System.Object)
  nameWithType.vb: Offset.System.IComparable.CompareTo(Object)
  name.vb: System.IComparable.CompareTo(Object)
- uid: NodaTime.Offset.Equals(NodaTime.Offset)
  commentId: M:NodaTime.Offset.Equals(NodaTime.Offset)
  id: Equals(NodaTime.Offset)
  parent: NodaTime.Offset
  langs:
  - csharp
  - vb
  name: Equals(Offset)
  nameWithType: Offset.Equals(Offset)
  fullName: NodaTime.Offset.Equals(NodaTime.Offset)
  type: Method
  source:
    remote:
      path: 2.4.x/src/NodaTime/Offset.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: Equals
    path: src/NodaTime/Offset.cs
    startLine: 330
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nIndicates whether the current object is equal to another object of the same type.\n"
  example: []
  syntax:
    content: public bool Equals(Offset other)
    parameters:
    - id: other
      type: NodaTime.Offset
      description: An object to compare with this object.
    return:
      type: System.Boolean
      description: "\ntrue if the current object is equal to the <code data-dev-comment-type=\"paramref\" class=\"paramref\">other</code> parameter;\notherwise, false.\n"
    content.vb: Public Function Equals(other As Offset) As Boolean
  overload: NodaTime.Offset.Equals*
  implements:
  - System.IEquatable{NodaTime.Offset}.Equals(NodaTime.Offset)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: NodaTime.Offset.Equals(System.Object)
  commentId: M:NodaTime.Offset.Equals(System.Object)
  id: Equals(System.Object)
  parent: NodaTime.Offset
  langs:
  - csharp
  - vb
  name: Equals(Object)
  nameWithType: Offset.Equals(Object)
  fullName: NodaTime.Offset.Equals(System.Object)
  type: Method
  source:
    remote:
      path: 2.4.x/src/NodaTime/Offset.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: Equals
    path: src/NodaTime/Offset.cs
    startLine: 342
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nDetermines whether the specified <xref href=\"System.Object\" data-throw-if-not-resolved=\"false\"></xref> is equal to this instance.\n"
  example: []
  syntax:
    content: public override bool Equals(object obj)
    parameters:
    - id: obj
      type: System.Object
      description: The <xref href="System.Object" data-throw-if-not-resolved="false"></xref> to compare with this instance.
    return:
      type: System.Boolean
      description: "\n<code>true</code> if the specified <xref href=\"System.Object\" data-throw-if-not-resolved=\"false\"></xref> is equal to this instance;\notherwise, <code>false</code>.\n"
    content.vb: Public Overrides Function Equals(obj As Object) As Boolean
  overridden: System.ValueType.Equals(System.Object)
  overload: NodaTime.Offset.Equals*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: NodaTime.Offset.GetHashCode
  commentId: M:NodaTime.Offset.GetHashCode
  id: GetHashCode
  parent: NodaTime.Offset
  langs:
  - csharp
  - vb
  name: GetHashCode()
  nameWithType: Offset.GetHashCode()
  fullName: NodaTime.Offset.GetHashCode()
  type: Method
  source:
    remote:
      path: 2.4.x/src/NodaTime/Offset.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: GetHashCode
    path: src/NodaTime/Offset.cs
    startLine: 351
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nReturns a hash code for this instance.\n"
  example: []
  syntax:
    content: public override int GetHashCode()
    return:
      type: System.Int32
      description: "\nA hash code for this instance, suitable for use in hashing algorithms and data\nstructures like a hash table. \n"
    content.vb: Public Overrides Function GetHashCode As Integer
  overridden: System.ValueType.GetHashCode
  overload: NodaTime.Offset.GetHashCode*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: NodaTime.Offset.ToString
  commentId: M:NodaTime.Offset.ToString
  id: ToString
  parent: NodaTime.Offset
  langs:
  - csharp
  - vb
  name: ToString()
  nameWithType: Offset.ToString()
  fullName: NodaTime.Offset.ToString()
  type: Method
  source:
    remote:
      path: 2.4.x/src/NodaTime/Offset.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: ToString
    path: src/NodaTime/Offset.cs
    startLine: 362
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nReturns a <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref> that represents this instance.\n"
  example: []
  syntax:
    content: public override string ToString()
    return:
      type: System.String
      description: "\nThe value of the current instance in the default format pattern (&quot;g&quot;), using the current thread&apos;s\nculture to obtain a format provider.\n"
    content.vb: Public Overrides Function ToString As String
  overridden: System.ValueType.ToString
  overload: NodaTime.Offset.ToString*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: NodaTime.Offset.ToString(System.String,System.IFormatProvider)
  commentId: M:NodaTime.Offset.ToString(System.String,System.IFormatProvider)
  id: ToString(System.String,System.IFormatProvider)
  parent: NodaTime.Offset
  langs:
  - csharp
  - vb
  name: ToString(String, IFormatProvider)
  nameWithType: Offset.ToString(String, IFormatProvider)
  fullName: NodaTime.Offset.ToString(System.String, System.IFormatProvider)
  type: Method
  source:
    remote:
      path: 2.4.x/src/NodaTime/Offset.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: ToString
    path: src/NodaTime/Offset.cs
    startLine: 377
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nFormats the value of the current instance using the specified pattern.\n"
  example: []
  syntax:
    content: public string ToString(string patternText, IFormatProvider formatProvider)
    parameters:
    - id: patternText
      type: System.String
      description: >
        The <xref href="System.String" data-throw-if-not-resolved="false"></xref> specifying the pattern to use,

        or null to use the default format pattern (&quot;g&quot;).
    - id: formatProvider
      type: System.IFormatProvider
      description: >
        The <xref href="System.IFormatProvider" data-throw-if-not-resolved="false"></xref> to use when formatting the value,

        or null to use the current thread&apos;s culture to obtain a format provider.
    return:
      type: System.String
      description: "\nA <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref> containing the value of the current instance in the specified format.\n"
    content.vb: Public Function ToString(patternText As String, formatProvider As IFormatProvider) As String
  overload: NodaTime.Offset.ToString*
  implements:
  - System.IFormattable.ToString(System.String,System.IFormatProvider)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: NodaTime.Offset.FromSeconds(System.Int32)
  commentId: M:NodaTime.Offset.FromSeconds(System.Int32)
  id: FromSeconds(System.Int32)
  parent: NodaTime.Offset
  langs:
  - csharp
  - vb
  name: FromSeconds(Int32)
  nameWithType: Offset.FromSeconds(Int32)
  fullName: NodaTime.Offset.FromSeconds(System.Int32)
  type: Method
  source:
    remote:
      path: 2.4.x/src/NodaTime/Offset.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: FromSeconds
    path: src/NodaTime/Offset.cs
    startLine: 389
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nReturns an offset for the given seconds value, which may be negative.\n"
  example: []
  syntax:
    content: public static Offset FromSeconds(int seconds)
    parameters:
    - id: seconds
      type: System.Int32
      description: The int seconds value.
    return:
      type: NodaTime.Offset
      description: An offset representing the given number of seconds.
    content.vb: Public Shared Function FromSeconds(seconds As Integer) As Offset
  overload: NodaTime.Offset.FromSeconds*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: >-
      The specified number of seconds is outside the range of

      [-18, +18] hours.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: NodaTime.Offset.FromMilliseconds(System.Int32)
  commentId: M:NodaTime.Offset.FromMilliseconds(System.Int32)
  id: FromMilliseconds(System.Int32)
  parent: NodaTime.Offset
  langs:
  - csharp
  - vb
  name: FromMilliseconds(Int32)
  nameWithType: Offset.FromMilliseconds(Int32)
  fullName: NodaTime.Offset.FromMilliseconds(System.Int32)
  type: Method
  source:
    remote:
      path: 2.4.x/src/NodaTime/Offset.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: FromMilliseconds
    path: src/NodaTime/Offset.cs
    startLine: 406
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nReturns an offset for the given milliseconds value, which may be negative.\n"
  remarks: "\nOffsets are only accurate to second precision; the given number of milliseconds is simply divided\nby 1,000 to give the number of seconds - any remainder is truncated.\n"
  example: []
  syntax:
    content: public static Offset FromMilliseconds(int milliseconds)
    parameters:
    - id: milliseconds
      type: System.Int32
      description: The int milliseconds value.
    return:
      type: NodaTime.Offset
      description: An offset representing the given number of milliseconds, to the (truncated) second.
    content.vb: Public Shared Function FromMilliseconds(milliseconds As Integer) As Offset
  overload: NodaTime.Offset.FromMilliseconds*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: >-
      The specified number of milliseconds is outside the range of

      [-18, +18] hours.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: NodaTime.Offset.FromTicks(System.Int64)
  commentId: M:NodaTime.Offset.FromTicks(System.Int64)
  id: FromTicks(System.Int64)
  parent: NodaTime.Offset
  langs:
  - csharp
  - vb
  name: FromTicks(Int64)
  nameWithType: Offset.FromTicks(Int64)
  fullName: NodaTime.Offset.FromTicks(System.Int64)
  type: Method
  source:
    remote:
      path: 2.4.x/src/NodaTime/Offset.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: FromTicks
    path: src/NodaTime/Offset.cs
    startLine: 423
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nReturns an offset for the given number of ticks, which may be negative.\n"
  remarks: "\nOffsets are only accurate to second precision; the given number of ticks is simply divided\nby 10,000,000 to give the number of seconds - any remainder is truncated.\n"
  example: []
  syntax:
    content: public static Offset FromTicks(long ticks)
    parameters:
    - id: ticks
      type: System.Int64
      description: The number of ticks specifying the length of the new offset.
    return:
      type: NodaTime.Offset
      description: An offset representing the given number of ticks, to the (truncated) second.
    content.vb: Public Shared Function FromTicks(ticks As Long) As Offset
  overload: NodaTime.Offset.FromTicks*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: >-
      The specified number of ticks is outside the range of

      [-18, +18] hours.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: NodaTime.Offset.FromNanoseconds(System.Int64)
  commentId: M:NodaTime.Offset.FromNanoseconds(System.Int64)
  id: FromNanoseconds(System.Int64)
  parent: NodaTime.Offset
  langs:
  - csharp
  - vb
  name: FromNanoseconds(Int64)
  nameWithType: Offset.FromNanoseconds(Int64)
  fullName: NodaTime.Offset.FromNanoseconds(System.Int64)
  type: Method
  source:
    remote:
      path: 2.4.x/src/NodaTime/Offset.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: FromNanoseconds
    path: src/NodaTime/Offset.cs
    startLine: 440
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nReturns an offset for the given number of nanoseconds, which may be negative.\n"
  remarks: "\nOffsets are only accurate to second precision; the given number of nanoseconds is simply divided\nby 1,000,000,000 to give the number of seconds - any remainder is truncated towards zero.\n"
  example: []
  syntax:
    content: public static Offset FromNanoseconds(long nanoseconds)
    parameters:
    - id: nanoseconds
      type: System.Int64
      description: The number of nanoseconds specifying the length of the new offset.
    return:
      type: NodaTime.Offset
      description: An offset representing the given number of nanoseconds, to the (truncated) second.
    content.vb: Public Shared Function FromNanoseconds(nanoseconds As Long) As Offset
  overload: NodaTime.Offset.FromNanoseconds*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: >-
      The specified number of nanoseconds is outside the range of

      [-18, +18] hours.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: NodaTime.Offset.FromHours(System.Int32)
  commentId: M:NodaTime.Offset.FromHours(System.Int32)
  id: FromHours(System.Int32)
  parent: NodaTime.Offset
  langs:
  - csharp
  - vb
  name: FromHours(Int32)
  nameWithType: Offset.FromHours(Int32)
  fullName: NodaTime.Offset.FromHours(System.Int32)
  type: Method
  source:
    remote:
      path: 2.4.x/src/NodaTime/Offset.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: FromHours
    path: src/NodaTime/Offset.cs
    startLine: 453
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nReturns an offset for the specified number of hours, which may be negative.\n"
  example: []
  syntax:
    content: public static Offset FromHours(int hours)
    parameters:
    - id: hours
      type: System.Int32
      description: The number of hours to represent in the new offset.
    return:
      type: NodaTime.Offset
      description: An offset representing the given value.
    content.vb: Public Shared Function FromHours(hours As Integer) As Offset
  overload: NodaTime.Offset.FromHours*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: >-
      The specified number of hours is outside the range of

      [-18, +18].
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: NodaTime.Offset.FromHoursAndMinutes(System.Int32,System.Int32)
  commentId: M:NodaTime.Offset.FromHoursAndMinutes(System.Int32,System.Int32)
  id: FromHoursAndMinutes(System.Int32,System.Int32)
  parent: NodaTime.Offset
  langs:
  - csharp
  - vb
  name: FromHoursAndMinutes(Int32, Int32)
  nameWithType: Offset.FromHoursAndMinutes(Int32, Int32)
  fullName: NodaTime.Offset.FromHoursAndMinutes(System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: 2.4.x/src/NodaTime/Offset.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: FromHoursAndMinutes
    path: src/NodaTime/Offset.cs
    startLine: 472
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nReturns an offset for the specified number of hours and minutes.\n"
  remarks: "\nThe result simply takes the hours and minutes and converts each component into milliseconds\nseparately. As a result, a negative offset should usually be obtained by making both arguments\nnegative. For example, to obtain &quot;three hours and ten minutes behind UTC&quot; you might call\n<code>Offset.FromHoursAndMinutes(-3, -10)</code>.\n"
  example: []
  syntax:
    content: public static Offset FromHoursAndMinutes(int hours, int minutes)
    parameters:
    - id: hours
      type: System.Int32
      description: The number of hours to represent in the new offset.
    - id: minutes
      type: System.Int32
      description: The number of minutes to represent in the new offset.
    return:
      type: NodaTime.Offset
      description: An offset representing the given value.
    content.vb: Public Shared Function FromHoursAndMinutes(hours As Integer, minutes As Integer) As Offset
  overload: NodaTime.Offset.FromHoursAndMinutes*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: The result of the operation is outside the range of Offset.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: NodaTime.Offset.ToTimeSpan
  commentId: M:NodaTime.Offset.ToTimeSpan
  id: ToTimeSpan
  parent: NodaTime.Offset
  langs:
  - csharp
  - vb
  name: ToTimeSpan()
  nameWithType: Offset.ToTimeSpan()
  fullName: NodaTime.Offset.ToTimeSpan()
  type: Method
  source:
    remote:
      path: 2.4.x/src/NodaTime/Offset.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: ToTimeSpan
    path: src/NodaTime/Offset.cs
    startLine: 481
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nConverts this offset to a .NET standard <xref href=\"System.TimeSpan\" data-throw-if-not-resolved=\"false\"></xref> value.\n"
  example: []
  syntax:
    content: public TimeSpan ToTimeSpan()
    return:
      type: System.TimeSpan
      description: An equivalent <xref href="System.TimeSpan" data-throw-if-not-resolved="false"></xref> to this value.
    content.vb: Public Function ToTimeSpan As TimeSpan
  overload: NodaTime.Offset.ToTimeSpan*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: NodaTime.Offset.FromTimeSpan(System.TimeSpan)
  commentId: M:NodaTime.Offset.FromTimeSpan(System.TimeSpan)
  id: FromTimeSpan(System.TimeSpan)
  parent: NodaTime.Offset
  langs:
  - csharp
  - vb
  name: FromTimeSpan(TimeSpan)
  nameWithType: Offset.FromTimeSpan(TimeSpan)
  fullName: NodaTime.Offset.FromTimeSpan(System.TimeSpan)
  type: Method
  source:
    remote:
      path: 2.4.x/src/NodaTime/Offset.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: FromTimeSpan
    path: src/NodaTime/Offset.cs
    startLine: 490
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nConverts the given <xref href=\"System.TimeSpan\" data-throw-if-not-resolved=\"false\"></xref> to an offset, with fractional seconds truncated.\n"
  example: []
  syntax:
    content: public static Offset FromTimeSpan(TimeSpan timeSpan)
    parameters:
    - id: timeSpan
      type: System.TimeSpan
      description: The timespan to convert
    return:
      type: NodaTime.Offset
      description: An offset for the same time as the given time span.
    content.vb: Public Shared Function FromTimeSpan(timeSpan As TimeSpan) As Offset
  overload: NodaTime.Offset.FromTimeSpan*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: The given time span falls outside the range of +/- 18 hours.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: NodaTime.Offset.System#Xml#Serialization#IXmlSerializable#GetSchema
  commentId: M:NodaTime.Offset.System#Xml#Serialization#IXmlSerializable#GetSchema
  id: System#Xml#Serialization#IXmlSerializable#GetSchema
  isEii: true
  parent: NodaTime.Offset
  langs:
  - csharp
  - vb
  name: IXmlSerializable.GetSchema()
  nameWithType: Offset.IXmlSerializable.GetSchema()
  fullName: NodaTime.Offset.System.Xml.Serialization.IXmlSerializable.GetSchema()
  type: Method
  source:
    remote:
      path: 2.4.x/src/NodaTime/Offset.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: System.Xml.Serialization.IXmlSerializable.GetSchema
    path: src/NodaTime/Offset.cs
    startLine: 500
  assemblies:
  - NodaTime
  namespace: NodaTime
  example: []
  syntax:
    content: XmlSchema IXmlSerializable.GetSchema()
    return:
      type: System.Xml.Schema.XmlSchema
    content.vb: Function System.Xml.Serialization.IXmlSerializable.GetSchema As XmlSchema Implements IXmlSerializable.GetSchema
  overload: NodaTime.Offset.System#Xml#Serialization#IXmlSerializable#GetSchema*
  implements:
  - System.Xml.Serialization.IXmlSerializable.GetSchema
  nameWithType.vb: Offset.System.Xml.Serialization.IXmlSerializable.GetSchema()
  name.vb: System.Xml.Serialization.IXmlSerializable.GetSchema()
- uid: NodaTime.Offset.System#Xml#Serialization#IXmlSerializable#ReadXml(System.Xml.XmlReader)
  commentId: M:NodaTime.Offset.System#Xml#Serialization#IXmlSerializable#ReadXml(System.Xml.XmlReader)
  id: System#Xml#Serialization#IXmlSerializable#ReadXml(System.Xml.XmlReader)
  isEii: true
  parent: NodaTime.Offset
  langs:
  - csharp
  - vb
  name: IXmlSerializable.ReadXml(XmlReader)
  nameWithType: Offset.IXmlSerializable.ReadXml(XmlReader)
  fullName: NodaTime.Offset.System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)
  type: Method
  source:
    remote:
      path: 2.4.x/src/NodaTime/Offset.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: System.Xml.Serialization.IXmlSerializable.ReadXml
    path: src/NodaTime/Offset.cs
    startLine: 503
  assemblies:
  - NodaTime
  namespace: NodaTime
  example: []
  syntax:
    content: void IXmlSerializable.ReadXml(XmlReader reader)
    parameters:
    - id: reader
      type: System.Xml.XmlReader
    content.vb: Sub System.Xml.Serialization.IXmlSerializable.ReadXml(reader As XmlReader) Implements IXmlSerializable.ReadXml
  overload: NodaTime.Offset.System#Xml#Serialization#IXmlSerializable#ReadXml*
  implements:
  - System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)
  nameWithType.vb: Offset.System.Xml.Serialization.IXmlSerializable.ReadXml(XmlReader)
  name.vb: System.Xml.Serialization.IXmlSerializable.ReadXml(XmlReader)
- uid: NodaTime.Offset.System#Xml#Serialization#IXmlSerializable#WriteXml(System.Xml.XmlWriter)
  commentId: M:NodaTime.Offset.System#Xml#Serialization#IXmlSerializable#WriteXml(System.Xml.XmlWriter)
  id: System#Xml#Serialization#IXmlSerializable#WriteXml(System.Xml.XmlWriter)
  isEii: true
  parent: NodaTime.Offset
  langs:
  - csharp
  - vb
  name: IXmlSerializable.WriteXml(XmlWriter)
  nameWithType: Offset.IXmlSerializable.WriteXml(XmlWriter)
  fullName: NodaTime.Offset.System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)
  type: Method
  source:
    remote:
      path: 2.4.x/src/NodaTime/Offset.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: System.Xml.Serialization.IXmlSerializable.WriteXml
    path: src/NodaTime/Offset.cs
    startLine: 512
  assemblies:
  - NodaTime
  namespace: NodaTime
  example: []
  syntax:
    content: void IXmlSerializable.WriteXml(XmlWriter writer)
    parameters:
    - id: writer
      type: System.Xml.XmlWriter
    content.vb: Sub System.Xml.Serialization.IXmlSerializable.WriteXml(writer As XmlWriter) Implements IXmlSerializable.WriteXml
  overload: NodaTime.Offset.System#Xml#Serialization#IXmlSerializable#WriteXml*
  implements:
  - System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)
  nameWithType.vb: Offset.System.Xml.Serialization.IXmlSerializable.WriteXml(XmlWriter)
  name.vb: System.Xml.Serialization.IXmlSerializable.WriteXml(XmlWriter)
- uid: NodaTime.Offset.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  commentId: M:NodaTime.Offset.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  id: System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  isEii: true
  parent: NodaTime.Offset
  langs:
  - csharp
  - vb
  name: ISerializable.GetObjectData(SerializationInfo, StreamingContext)
  nameWithType: Offset.ISerializable.GetObjectData(SerializationInfo, StreamingContext)
  fullName: NodaTime.Offset.System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext)
  type: Method
  source:
    remote:
      path: 2.4.x/src/NodaTime/Offset.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: System.Runtime.Serialization.ISerializable.GetObjectData
    path: src/NodaTime/Offset.cs
    startLine: 551
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nImplementation of <xref href=\"System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo%2cSystem.Runtime.Serialization.StreamingContext)\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: >-
      [SecurityCritical]

      void ISerializable.GetObjectData(SerializationInfo info, StreamingContext context)
    parameters:
    - id: info
      type: System.Runtime.Serialization.SerializationInfo
      description: The <xref href="System.Runtime.Serialization.SerializationInfo" data-throw-if-not-resolved="false"></xref> to populate with data.
    - id: context
      type: System.Runtime.Serialization.StreamingContext
      description: The destination for this serialization.
    content.vb: >-
      <SecurityCritical>

      Sub System.Runtime.Serialization.ISerializable.GetObjectData(info As SerializationInfo, context As StreamingContext) Implements ISerializable.GetObjectData
  overload: NodaTime.Offset.System#Runtime#Serialization#ISerializable#GetObjectData*
  implements:
  - System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  attributes:
  - type: System.Security.SecurityCriticalAttribute
    ctor: System.Security.SecurityCriticalAttribute.#ctor
    arguments: []
  nameWithType.vb: Offset.System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo, StreamingContext)
  name.vb: System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo, StreamingContext)
references:
- uid: System.DateTimeOffset
  commentId: T:System.DateTimeOffset
  parent: System
  isExternal: true
  name: DateTimeOffset
  nameWithType: DateTimeOffset
  fullName: System.DateTimeOffset
- uid: NodaTime
  commentId: N:NodaTime
  name: NodaTime
  nameWithType: NodaTime
  fullName: NodaTime
- uid: System.IEquatable{NodaTime.Offset}
  commentId: T:System.IEquatable{NodaTime.Offset}
  parent: System
  definition: System.IEquatable`1
  name: IEquatable<Offset>
  nameWithType: IEquatable<Offset>
  fullName: System.IEquatable<NodaTime.Offset>
  nameWithType.vb: IEquatable(Of Offset)
  fullName.vb: System.IEquatable(Of NodaTime.Offset)
  name.vb: IEquatable(Of Offset)
  spec.csharp:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: NodaTime.Offset
    name: Offset
    nameWithType: Offset
    fullName: NodaTime.Offset
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: NodaTime.Offset
    name: Offset
    nameWithType: Offset
    fullName: NodaTime.Offset
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IComparable{NodaTime.Offset}
  commentId: T:System.IComparable{NodaTime.Offset}
  parent: System
  definition: System.IComparable`1
  name: IComparable<Offset>
  nameWithType: IComparable<Offset>
  fullName: System.IComparable<NodaTime.Offset>
  nameWithType.vb: IComparable(Of Offset)
  fullName.vb: System.IComparable(Of NodaTime.Offset)
  name.vb: IComparable(Of Offset)
  spec.csharp:
  - uid: System.IComparable`1
    name: IComparable
    nameWithType: IComparable
    fullName: System.IComparable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: NodaTime.Offset
    name: Offset
    nameWithType: Offset
    fullName: NodaTime.Offset
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.IComparable`1
    name: IComparable
    nameWithType: IComparable
    fullName: System.IComparable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: NodaTime.Offset
    name: Offset
    nameWithType: Offset
    fullName: NodaTime.Offset
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IFormattable
  commentId: T:System.IFormattable
  parent: System
  isExternal: true
  name: IFormattable
  nameWithType: IFormattable
  fullName: System.IFormattable
- uid: System.IComparable
  commentId: T:System.IComparable
  parent: System
  isExternal: true
  name: IComparable
  nameWithType: IComparable
  fullName: System.IComparable
- uid: System.Xml.Serialization.IXmlSerializable
  commentId: T:System.Xml.Serialization.IXmlSerializable
  parent: System.Xml.Serialization
  isExternal: true
  name: IXmlSerializable
  nameWithType: IXmlSerializable
  fullName: System.Xml.Serialization.IXmlSerializable
- uid: System.Runtime.Serialization.ISerializable
  commentId: T:System.Runtime.Serialization.ISerializable
  parent: System.Runtime.Serialization
  isExternal: true
  name: ISerializable
  nameWithType: ISerializable
  fullName: System.Runtime.Serialization.ISerializable
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: System.IEquatable`1
  commentId: T:System.IEquatable`1
  isExternal: true
  name: IEquatable<T>
  nameWithType: IEquatable<T>
  fullName: System.IEquatable<T>
  nameWithType.vb: IEquatable(Of T)
  fullName.vb: System.IEquatable(Of T)
  name.vb: IEquatable(Of T)
  spec.csharp:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IComparable`1
  commentId: T:System.IComparable`1
  isExternal: true
  name: IComparable<T>
  nameWithType: IComparable<T>
  fullName: System.IComparable<T>
  nameWithType.vb: IComparable(Of T)
  fullName.vb: System.IComparable(Of T)
  name.vb: IComparable(Of T)
  spec.csharp:
  - uid: System.IComparable`1
    name: IComparable
    nameWithType: IComparable
    fullName: System.IComparable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.IComparable`1
    name: IComparable
    nameWithType: IComparable
    fullName: System.IComparable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Xml.Serialization
  commentId: N:System.Xml.Serialization
  isExternal: true
  name: System.Xml.Serialization
  nameWithType: System.Xml.Serialization
  fullName: System.Xml.Serialization
- uid: System.Runtime.Serialization
  commentId: N:System.Runtime.Serialization
  isExternal: true
  name: System.Runtime.Serialization
  nameWithType: System.Runtime.Serialization
  fullName: System.Runtime.Serialization
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: NodaTime.Offset
  commentId: T:NodaTime.Offset
  parent: NodaTime
  name: Offset
  nameWithType: Offset
  fullName: NodaTime.Offset
- uid: NodaTime.Offset.Seconds*
  commentId: Overload:NodaTime.Offset.Seconds
  name: Seconds
  nameWithType: Offset.Seconds
  fullName: NodaTime.Offset.Seconds
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: NodaTime.Offset.Milliseconds*
  commentId: Overload:NodaTime.Offset.Milliseconds
  name: Milliseconds
  nameWithType: Offset.Milliseconds
  fullName: NodaTime.Offset.Milliseconds
- uid: NodaTime.Offset.Ticks*
  commentId: Overload:NodaTime.Offset.Ticks
  name: Ticks
  nameWithType: Offset.Ticks
  fullName: NodaTime.Offset.Ticks
- uid: System.Int64
  commentId: T:System.Int64
  parent: System
  isExternal: true
  name: Int64
  nameWithType: Int64
  fullName: System.Int64
- uid: NodaTime.Offset.Nanoseconds*
  commentId: Overload:NodaTime.Offset.Nanoseconds
  name: Nanoseconds
  nameWithType: Offset.Nanoseconds
  fullName: NodaTime.Offset.Nanoseconds
- uid: NodaTime.Offset.Max*
  commentId: Overload:NodaTime.Offset.Max
  name: Max
  nameWithType: Offset.Max
  fullName: NodaTime.Offset.Max
- uid: NodaTime.Offset.Min*
  commentId: Overload:NodaTime.Offset.Min
  name: Min
  nameWithType: Offset.Min
  fullName: NodaTime.Offset.Min
- uid: NodaTime.Offset.op_UnaryNegation*
  commentId: Overload:NodaTime.Offset.op_UnaryNegation
  name: UnaryNegation
  nameWithType: Offset.UnaryNegation
  fullName: NodaTime.Offset.UnaryNegation
- uid: NodaTime.Offset.Negate*
  commentId: Overload:NodaTime.Offset.Negate
  name: Negate
  nameWithType: Offset.Negate
  fullName: NodaTime.Offset.Negate
- uid: NodaTime.Offset.Plus(NodaTime.Offset)
  commentId: M:NodaTime.Offset.Plus(NodaTime.Offset)
  isExternal: true
- uid: NodaTime.Offset.op_UnaryPlus*
  commentId: Overload:NodaTime.Offset.op_UnaryPlus
  name: UnaryPlus
  nameWithType: Offset.UnaryPlus
  fullName: NodaTime.Offset.UnaryPlus
- uid: System.ArgumentOutOfRangeException
  commentId: T:System.ArgumentOutOfRangeException
  parent: System
  isExternal: true
  name: ArgumentOutOfRangeException
  nameWithType: ArgumentOutOfRangeException
  fullName: System.ArgumentOutOfRangeException
- uid: NodaTime.Offset.op_Addition*
  commentId: Overload:NodaTime.Offset.op_Addition
  name: Addition
  nameWithType: Offset.Addition
  fullName: NodaTime.Offset.Addition
- uid: NodaTime.Offset.Add*
  commentId: Overload:NodaTime.Offset.Add
  name: Add
  nameWithType: Offset.Add
  fullName: NodaTime.Offset.Add
- uid: NodaTime.Offset.Plus*
  commentId: Overload:NodaTime.Offset.Plus
  name: Plus
  nameWithType: Offset.Plus
  fullName: NodaTime.Offset.Plus
- uid: NodaTime.Offset.op_Subtraction*
  commentId: Overload:NodaTime.Offset.op_Subtraction
  name: Subtraction
  nameWithType: Offset.Subtraction
  fullName: NodaTime.Offset.Subtraction
- uid: NodaTime.Offset.Subtract*
  commentId: Overload:NodaTime.Offset.Subtract
  name: Subtract
  nameWithType: Offset.Subtract
  fullName: NodaTime.Offset.Subtract
- uid: NodaTime.Offset.Minus*
  commentId: Overload:NodaTime.Offset.Minus
  name: Minus
  nameWithType: Offset.Minus
  fullName: NodaTime.Offset.Minus
- uid: NodaTime.Offset.op_Equality*
  commentId: Overload:NodaTime.Offset.op_Equality
  name: Equality
  nameWithType: Offset.Equality
  fullName: NodaTime.Offset.Equality
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: NodaTime.Offset.op_Inequality*
  commentId: Overload:NodaTime.Offset.op_Inequality
  name: Inequality
  nameWithType: Offset.Inequality
  fullName: NodaTime.Offset.Inequality
- uid: NodaTime.Offset.op_LessThan*
  commentId: Overload:NodaTime.Offset.op_LessThan
  name: LessThan
  nameWithType: Offset.LessThan
  fullName: NodaTime.Offset.LessThan
- uid: NodaTime.Offset.op_LessThanOrEqual*
  commentId: Overload:NodaTime.Offset.op_LessThanOrEqual
  name: LessThanOrEqual
  nameWithType: Offset.LessThanOrEqual
  fullName: NodaTime.Offset.LessThanOrEqual
- uid: NodaTime.Offset.op_GreaterThan*
  commentId: Overload:NodaTime.Offset.op_GreaterThan
  name: GreaterThan
  nameWithType: Offset.GreaterThan
  fullName: NodaTime.Offset.GreaterThan
- uid: NodaTime.Offset.op_GreaterThanOrEqual*
  commentId: Overload:NodaTime.Offset.op_GreaterThanOrEqual
  name: GreaterThanOrEqual
  nameWithType: Offset.GreaterThanOrEqual
  fullName: NodaTime.Offset.GreaterThanOrEqual
- uid: NodaTime.Offset.CompareTo*
  commentId: Overload:NodaTime.Offset.CompareTo
  name: CompareTo
  nameWithType: Offset.CompareTo
  fullName: NodaTime.Offset.CompareTo
- uid: System.IComparable{NodaTime.Offset}.CompareTo(NodaTime.Offset)
  commentId: M:System.IComparable{NodaTime.Offset}.CompareTo(NodaTime.Offset)
  parent: System.IComparable{NodaTime.Offset}
  definition: System.IComparable`1.CompareTo(`0)
  name: CompareTo(Offset)
  nameWithType: IComparable<Offset>.CompareTo(Offset)
  fullName: System.IComparable<NodaTime.Offset>.CompareTo(NodaTime.Offset)
  nameWithType.vb: IComparable(Of Offset).CompareTo(Offset)
  fullName.vb: System.IComparable(Of NodaTime.Offset).CompareTo(NodaTime.Offset)
  spec.csharp:
  - uid: System.IComparable`1.CompareTo(`0)
    name: CompareTo
    nameWithType: IComparable<Offset>.CompareTo
    fullName: System.IComparable<NodaTime.Offset>.CompareTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: NodaTime.Offset
    name: Offset
    nameWithType: Offset
    fullName: NodaTime.Offset
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IComparable`1.CompareTo(`0)
    name: CompareTo
    nameWithType: IComparable(Of Offset).CompareTo
    fullName: System.IComparable(Of NodaTime.Offset).CompareTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: NodaTime.Offset
    name: Offset
    nameWithType: Offset
    fullName: NodaTime.Offset
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IComparable`1.CompareTo(`0)
  commentId: M:System.IComparable`1.CompareTo(`0)
  isExternal: true
  name: CompareTo(T)
  nameWithType: IComparable<T>.CompareTo(T)
  fullName: System.IComparable<T>.CompareTo(T)
  nameWithType.vb: IComparable(Of T).CompareTo(T)
  fullName.vb: System.IComparable(Of T).CompareTo(T)
  spec.csharp:
  - uid: System.IComparable`1.CompareTo(`0)
    name: CompareTo
    nameWithType: IComparable<T>.CompareTo
    fullName: System.IComparable<T>.CompareTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IComparable`1.CompareTo(`0)
    name: CompareTo
    nameWithType: IComparable(Of T).CompareTo
    fullName: System.IComparable(Of T).CompareTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IComparable.CompareTo(System.Object)
  commentId: M:System.IComparable.CompareTo(System.Object)
  parent: System.IComparable
  isExternal: true
  name: CompareTo(Object)
  nameWithType: IComparable.CompareTo(Object)
  fullName: System.IComparable.CompareTo(System.Object)
  spec.csharp:
  - uid: System.IComparable.CompareTo(System.Object)
    name: CompareTo
    nameWithType: IComparable.CompareTo
    fullName: System.IComparable.CompareTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IComparable.CompareTo(System.Object)
    name: CompareTo
    nameWithType: IComparable.CompareTo
    fullName: System.IComparable.CompareTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: NodaTime.Offset.CompareTo(NodaTime.Offset)
  commentId: M:NodaTime.Offset.CompareTo(NodaTime.Offset)
  isExternal: true
- uid: System.ArgumentException
  commentId: T:System.ArgumentException
  parent: System
  isExternal: true
  name: ArgumentException
  nameWithType: ArgumentException
  fullName: System.ArgumentException
- uid: NodaTime.Offset.System#IComparable#CompareTo*
  commentId: Overload:NodaTime.Offset.System#IComparable#CompareTo
  name: IComparable.CompareTo
  nameWithType: Offset.IComparable.CompareTo
  fullName: NodaTime.Offset.System.IComparable.CompareTo
  nameWithType.vb: Offset.System.IComparable.CompareTo
  name.vb: System.IComparable.CompareTo
- uid: NodaTime.Offset.Equals*
  commentId: Overload:NodaTime.Offset.Equals
  name: Equals
  nameWithType: Offset.Equals
  fullName: NodaTime.Offset.Equals
- uid: System.IEquatable{NodaTime.Offset}.Equals(NodaTime.Offset)
  commentId: M:System.IEquatable{NodaTime.Offset}.Equals(NodaTime.Offset)
  parent: System.IEquatable{NodaTime.Offset}
  definition: System.IEquatable`1.Equals(`0)
  name: Equals(Offset)
  nameWithType: IEquatable<Offset>.Equals(Offset)
  fullName: System.IEquatable<NodaTime.Offset>.Equals(NodaTime.Offset)
  nameWithType.vb: IEquatable(Of Offset).Equals(Offset)
  fullName.vb: System.IEquatable(Of NodaTime.Offset).Equals(NodaTime.Offset)
  spec.csharp:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    nameWithType: IEquatable<Offset>.Equals
    fullName: System.IEquatable<NodaTime.Offset>.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: NodaTime.Offset
    name: Offset
    nameWithType: Offset
    fullName: NodaTime.Offset
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    nameWithType: IEquatable(Of Offset).Equals
    fullName: System.IEquatable(Of NodaTime.Offset).Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: NodaTime.Offset
    name: Offset
    nameWithType: Offset
    fullName: NodaTime.Offset
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IEquatable`1.Equals(`0)
  commentId: M:System.IEquatable`1.Equals(`0)
  isExternal: true
  name: Equals(T)
  nameWithType: IEquatable<T>.Equals(T)
  fullName: System.IEquatable<T>.Equals(T)
  nameWithType.vb: IEquatable(Of T).Equals(T)
  fullName.vb: System.IEquatable(Of T).Equals(T)
  spec.csharp:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    nameWithType: IEquatable<T>.Equals
    fullName: System.IEquatable<T>.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    nameWithType: IEquatable(Of T).Equals
    fullName: System.IEquatable(Of T).Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.ValueType.Equals(System.Object)
  commentId: M:System.ValueType.Equals(System.Object)
  parent: System.ValueType
  isExternal: true
  name: Equals(Object)
  nameWithType: ValueType.Equals(Object)
  fullName: System.ValueType.Equals(System.Object)
  spec.csharp:
  - uid: System.ValueType.Equals(System.Object)
    name: Equals
    nameWithType: ValueType.Equals
    fullName: System.ValueType.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.ValueType.Equals(System.Object)
    name: Equals
    nameWithType: ValueType.Equals
    fullName: System.ValueType.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.ValueType
  commentId: T:System.ValueType
  parent: System
  isExternal: true
  name: ValueType
  nameWithType: ValueType
  fullName: System.ValueType
- uid: System.ValueType.GetHashCode
  commentId: M:System.ValueType.GetHashCode
  parent: System.ValueType
  isExternal: true
  name: GetHashCode()
  nameWithType: ValueType.GetHashCode()
  fullName: System.ValueType.GetHashCode()
  spec.csharp:
  - uid: System.ValueType.GetHashCode
    name: GetHashCode
    nameWithType: ValueType.GetHashCode
    fullName: System.ValueType.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.ValueType.GetHashCode
    name: GetHashCode
    nameWithType: ValueType.GetHashCode
    fullName: System.ValueType.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: NodaTime.Offset.GetHashCode*
  commentId: Overload:NodaTime.Offset.GetHashCode
  name: GetHashCode
  nameWithType: Offset.GetHashCode
  fullName: NodaTime.Offset.GetHashCode
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.ValueType.ToString
  commentId: M:System.ValueType.ToString
  parent: System.ValueType
  isExternal: true
  name: ToString()
  nameWithType: ValueType.ToString()
  fullName: System.ValueType.ToString()
  spec.csharp:
  - uid: System.ValueType.ToString
    name: ToString
    nameWithType: ValueType.ToString
    fullName: System.ValueType.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.ValueType.ToString
    name: ToString
    nameWithType: ValueType.ToString
    fullName: System.ValueType.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: NodaTime.Offset.ToString*
  commentId: Overload:NodaTime.Offset.ToString
  name: ToString
  nameWithType: Offset.ToString
  fullName: NodaTime.Offset.ToString
- uid: System.IFormatProvider
  commentId: T:System.IFormatProvider
  parent: System
  isExternal: true
  name: IFormatProvider
  nameWithType: IFormatProvider
  fullName: System.IFormatProvider
- uid: System.IFormattable.ToString(System.String,System.IFormatProvider)
  commentId: M:System.IFormattable.ToString(System.String,System.IFormatProvider)
  parent: System.IFormattable
  isExternal: true
  name: ToString(String, IFormatProvider)
  nameWithType: IFormattable.ToString(String, IFormatProvider)
  fullName: System.IFormattable.ToString(System.String, System.IFormatProvider)
  spec.csharp:
  - uid: System.IFormattable.ToString(System.String,System.IFormatProvider)
    name: ToString
    nameWithType: IFormattable.ToString
    fullName: System.IFormattable.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.IFormatProvider
    name: IFormatProvider
    nameWithType: IFormatProvider
    fullName: System.IFormatProvider
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IFormattable.ToString(System.String,System.IFormatProvider)
    name: ToString
    nameWithType: IFormattable.ToString
    fullName: System.IFormattable.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.IFormatProvider
    name: IFormatProvider
    nameWithType: IFormatProvider
    fullName: System.IFormatProvider
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: NodaTime.Offset.FromSeconds*
  commentId: Overload:NodaTime.Offset.FromSeconds
  name: FromSeconds
  nameWithType: Offset.FromSeconds
  fullName: NodaTime.Offset.FromSeconds
- uid: NodaTime.Offset.FromMilliseconds*
  commentId: Overload:NodaTime.Offset.FromMilliseconds
  name: FromMilliseconds
  nameWithType: Offset.FromMilliseconds
  fullName: NodaTime.Offset.FromMilliseconds
- uid: NodaTime.Offset.FromTicks*
  commentId: Overload:NodaTime.Offset.FromTicks
  name: FromTicks
  nameWithType: Offset.FromTicks
  fullName: NodaTime.Offset.FromTicks
- uid: NodaTime.Offset.FromNanoseconds*
  commentId: Overload:NodaTime.Offset.FromNanoseconds
  name: FromNanoseconds
  nameWithType: Offset.FromNanoseconds
  fullName: NodaTime.Offset.FromNanoseconds
- uid: NodaTime.Offset.FromHours*
  commentId: Overload:NodaTime.Offset.FromHours
  name: FromHours
  nameWithType: Offset.FromHours
  fullName: NodaTime.Offset.FromHours
- uid: NodaTime.Offset.FromHoursAndMinutes*
  commentId: Overload:NodaTime.Offset.FromHoursAndMinutes
  name: FromHoursAndMinutes
  nameWithType: Offset.FromHoursAndMinutes
  fullName: NodaTime.Offset.FromHoursAndMinutes
- uid: System.TimeSpan
  commentId: T:System.TimeSpan
  parent: System
  isExternal: true
  name: TimeSpan
  nameWithType: TimeSpan
  fullName: System.TimeSpan
- uid: NodaTime.Offset.ToTimeSpan*
  commentId: Overload:NodaTime.Offset.ToTimeSpan
  name: ToTimeSpan
  nameWithType: Offset.ToTimeSpan
  fullName: NodaTime.Offset.ToTimeSpan
- uid: NodaTime.Offset.FromTimeSpan*
  commentId: Overload:NodaTime.Offset.FromTimeSpan
  name: FromTimeSpan
  nameWithType: Offset.FromTimeSpan
  fullName: NodaTime.Offset.FromTimeSpan
- uid: NodaTime.Offset.System#Xml#Serialization#IXmlSerializable#GetSchema*
  commentId: Overload:NodaTime.Offset.System#Xml#Serialization#IXmlSerializable#GetSchema
  name: IXmlSerializable.GetSchema
  nameWithType: Offset.IXmlSerializable.GetSchema
  fullName: NodaTime.Offset.System.Xml.Serialization.IXmlSerializable.GetSchema
  nameWithType.vb: Offset.System.Xml.Serialization.IXmlSerializable.GetSchema
  name.vb: System.Xml.Serialization.IXmlSerializable.GetSchema
- uid: System.Xml.Serialization.IXmlSerializable.GetSchema
  commentId: M:System.Xml.Serialization.IXmlSerializable.GetSchema
  parent: System.Xml.Serialization.IXmlSerializable
  isExternal: true
  name: GetSchema()
  nameWithType: IXmlSerializable.GetSchema()
  fullName: System.Xml.Serialization.IXmlSerializable.GetSchema()
  spec.csharp:
  - uid: System.Xml.Serialization.IXmlSerializable.GetSchema
    name: GetSchema
    nameWithType: IXmlSerializable.GetSchema
    fullName: System.Xml.Serialization.IXmlSerializable.GetSchema
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Xml.Serialization.IXmlSerializable.GetSchema
    name: GetSchema
    nameWithType: IXmlSerializable.GetSchema
    fullName: System.Xml.Serialization.IXmlSerializable.GetSchema
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Xml.Schema.XmlSchema
  commentId: T:System.Xml.Schema.XmlSchema
  parent: System.Xml.Schema
  isExternal: true
  name: XmlSchema
  nameWithType: XmlSchema
  fullName: System.Xml.Schema.XmlSchema
- uid: System.Xml.Schema
  commentId: N:System.Xml.Schema
  isExternal: true
  name: System.Xml.Schema
  nameWithType: System.Xml.Schema
  fullName: System.Xml.Schema
- uid: NodaTime.Offset.System#Xml#Serialization#IXmlSerializable#ReadXml*
  commentId: Overload:NodaTime.Offset.System#Xml#Serialization#IXmlSerializable#ReadXml
  name: IXmlSerializable.ReadXml
  nameWithType: Offset.IXmlSerializable.ReadXml
  fullName: NodaTime.Offset.System.Xml.Serialization.IXmlSerializable.ReadXml
  nameWithType.vb: Offset.System.Xml.Serialization.IXmlSerializable.ReadXml
  name.vb: System.Xml.Serialization.IXmlSerializable.ReadXml
- uid: System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)
  commentId: M:System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)
  parent: System.Xml.Serialization.IXmlSerializable
  isExternal: true
  name: ReadXml(XmlReader)
  nameWithType: IXmlSerializable.ReadXml(XmlReader)
  fullName: System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)
  spec.csharp:
  - uid: System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)
    name: ReadXml
    nameWithType: IXmlSerializable.ReadXml
    fullName: System.Xml.Serialization.IXmlSerializable.ReadXml
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Xml.XmlReader
    name: XmlReader
    nameWithType: XmlReader
    fullName: System.Xml.XmlReader
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)
    name: ReadXml
    nameWithType: IXmlSerializable.ReadXml
    fullName: System.Xml.Serialization.IXmlSerializable.ReadXml
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Xml.XmlReader
    name: XmlReader
    nameWithType: XmlReader
    fullName: System.Xml.XmlReader
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Xml.XmlReader
  commentId: T:System.Xml.XmlReader
  parent: System.Xml
  isExternal: true
  name: XmlReader
  nameWithType: XmlReader
  fullName: System.Xml.XmlReader
- uid: System.Xml
  commentId: N:System.Xml
  isExternal: true
  name: System.Xml
  nameWithType: System.Xml
  fullName: System.Xml
- uid: NodaTime.Offset.System#Xml#Serialization#IXmlSerializable#WriteXml*
  commentId: Overload:NodaTime.Offset.System#Xml#Serialization#IXmlSerializable#WriteXml
  name: IXmlSerializable.WriteXml
  nameWithType: Offset.IXmlSerializable.WriteXml
  fullName: NodaTime.Offset.System.Xml.Serialization.IXmlSerializable.WriteXml
  nameWithType.vb: Offset.System.Xml.Serialization.IXmlSerializable.WriteXml
  name.vb: System.Xml.Serialization.IXmlSerializable.WriteXml
- uid: System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)
  commentId: M:System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)
  parent: System.Xml.Serialization.IXmlSerializable
  isExternal: true
  name: WriteXml(XmlWriter)
  nameWithType: IXmlSerializable.WriteXml(XmlWriter)
  fullName: System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)
  spec.csharp:
  - uid: System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)
    name: WriteXml
    nameWithType: IXmlSerializable.WriteXml
    fullName: System.Xml.Serialization.IXmlSerializable.WriteXml
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Xml.XmlWriter
    name: XmlWriter
    nameWithType: XmlWriter
    fullName: System.Xml.XmlWriter
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)
    name: WriteXml
    nameWithType: IXmlSerializable.WriteXml
    fullName: System.Xml.Serialization.IXmlSerializable.WriteXml
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Xml.XmlWriter
    name: XmlWriter
    nameWithType: XmlWriter
    fullName: System.Xml.XmlWriter
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Xml.XmlWriter
  commentId: T:System.Xml.XmlWriter
  parent: System.Xml
  isExternal: true
  name: XmlWriter
  nameWithType: XmlWriter
  fullName: System.Xml.XmlWriter
- uid: System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  commentId: M:System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  parent: System.Runtime.Serialization.ISerializable
  isExternal: true
  name: GetObjectData(SerializationInfo, StreamingContext)
  nameWithType: ISerializable.GetObjectData(SerializationInfo, StreamingContext)
  fullName: System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext)
  spec.csharp:
  - uid: System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
    name: GetObjectData
    nameWithType: ISerializable.GetObjectData
    fullName: System.Runtime.Serialization.ISerializable.GetObjectData
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Runtime.Serialization.SerializationInfo
    name: SerializationInfo
    nameWithType: SerializationInfo
    fullName: System.Runtime.Serialization.SerializationInfo
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Runtime.Serialization.StreamingContext
    name: StreamingContext
    nameWithType: StreamingContext
    fullName: System.Runtime.Serialization.StreamingContext
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
    name: GetObjectData
    nameWithType: ISerializable.GetObjectData
    fullName: System.Runtime.Serialization.ISerializable.GetObjectData
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Runtime.Serialization.SerializationInfo
    name: SerializationInfo
    nameWithType: SerializationInfo
    fullName: System.Runtime.Serialization.SerializationInfo
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Runtime.Serialization.StreamingContext
    name: StreamingContext
    nameWithType: StreamingContext
    fullName: System.Runtime.Serialization.StreamingContext
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Runtime.Serialization.SerializationInfo
  commentId: T:System.Runtime.Serialization.SerializationInfo
  parent: System.Runtime.Serialization
  isExternal: true
  name: SerializationInfo
  nameWithType: SerializationInfo
  fullName: System.Runtime.Serialization.SerializationInfo
- uid: NodaTime.Offset.System#Runtime#Serialization#ISerializable#GetObjectData*
  commentId: Overload:NodaTime.Offset.System#Runtime#Serialization#ISerializable#GetObjectData
  name: ISerializable.GetObjectData
  nameWithType: Offset.ISerializable.GetObjectData
  fullName: NodaTime.Offset.System.Runtime.Serialization.ISerializable.GetObjectData
  nameWithType.vb: Offset.System.Runtime.Serialization.ISerializable.GetObjectData
  name.vb: System.Runtime.Serialization.ISerializable.GetObjectData
- uid: System.Runtime.Serialization.StreamingContext
  commentId: T:System.Runtime.Serialization.StreamingContext
  parent: System.Runtime.Serialization
  isExternal: true
  name: StreamingContext
  nameWithType: StreamingContext
  fullName: System.Runtime.Serialization.StreamingContext
shouldSkipMarkup: true
