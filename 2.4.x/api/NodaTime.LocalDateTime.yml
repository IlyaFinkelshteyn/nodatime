### YamlMime:ManagedReference
items:
- uid: NodaTime.LocalDateTime
  commentId: T:NodaTime.LocalDateTime
  id: LocalDateTime
  parent: NodaTime
  children:
  - NodaTime.LocalDateTime.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)
  - NodaTime.LocalDateTime.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,NodaTime.CalendarSystem)
  - NodaTime.LocalDateTime.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)
  - NodaTime.LocalDateTime.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,NodaTime.CalendarSystem)
  - NodaTime.LocalDateTime.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)
  - NodaTime.LocalDateTime.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,NodaTime.CalendarSystem)
  - NodaTime.LocalDateTime.Add(NodaTime.LocalDateTime,NodaTime.Period)
  - NodaTime.LocalDateTime.Calendar
  - NodaTime.LocalDateTime.ClockHourOfHalfDay
  - NodaTime.LocalDateTime.CompareTo(NodaTime.LocalDateTime)
  - NodaTime.LocalDateTime.Date
  - NodaTime.LocalDateTime.Day
  - NodaTime.LocalDateTime.DayOfWeek
  - NodaTime.LocalDateTime.DayOfYear
  - NodaTime.LocalDateTime.Deconstruct(NodaTime.LocalDate@,NodaTime.LocalTime@)
  - NodaTime.LocalDateTime.Equals(NodaTime.LocalDateTime)
  - NodaTime.LocalDateTime.Equals(System.Object)
  - NodaTime.LocalDateTime.Era
  - NodaTime.LocalDateTime.FromDateTime(System.DateTime)
  - NodaTime.LocalDateTime.FromDateTime(System.DateTime,NodaTime.CalendarSystem)
  - NodaTime.LocalDateTime.GetHashCode
  - NodaTime.LocalDateTime.Hour
  - NodaTime.LocalDateTime.InUtc
  - NodaTime.LocalDateTime.InZone(NodaTime.DateTimeZone,NodaTime.TimeZones.ZoneLocalMappingResolver)
  - NodaTime.LocalDateTime.InZoneLeniently(NodaTime.DateTimeZone)
  - NodaTime.LocalDateTime.InZoneStrictly(NodaTime.DateTimeZone)
  - NodaTime.LocalDateTime.Max(NodaTime.LocalDateTime,NodaTime.LocalDateTime)
  - NodaTime.LocalDateTime.Millisecond
  - NodaTime.LocalDateTime.Min(NodaTime.LocalDateTime,NodaTime.LocalDateTime)
  - NodaTime.LocalDateTime.Minus(NodaTime.LocalDateTime)
  - NodaTime.LocalDateTime.Minus(NodaTime.Period)
  - NodaTime.LocalDateTime.Minute
  - NodaTime.LocalDateTime.Month
  - NodaTime.LocalDateTime.NanosecondOfDay
  - NodaTime.LocalDateTime.NanosecondOfSecond
  - NodaTime.LocalDateTime.Next(NodaTime.IsoDayOfWeek)
  - NodaTime.LocalDateTime.op_Addition(NodaTime.LocalDateTime,NodaTime.Period)
  - NodaTime.LocalDateTime.op_Equality(NodaTime.LocalDateTime,NodaTime.LocalDateTime)
  - NodaTime.LocalDateTime.op_GreaterThan(NodaTime.LocalDateTime,NodaTime.LocalDateTime)
  - NodaTime.LocalDateTime.op_GreaterThanOrEqual(NodaTime.LocalDateTime,NodaTime.LocalDateTime)
  - NodaTime.LocalDateTime.op_Inequality(NodaTime.LocalDateTime,NodaTime.LocalDateTime)
  - NodaTime.LocalDateTime.op_LessThan(NodaTime.LocalDateTime,NodaTime.LocalDateTime)
  - NodaTime.LocalDateTime.op_LessThanOrEqual(NodaTime.LocalDateTime,NodaTime.LocalDateTime)
  - NodaTime.LocalDateTime.op_Subtraction(NodaTime.LocalDateTime,NodaTime.LocalDateTime)
  - NodaTime.LocalDateTime.op_Subtraction(NodaTime.LocalDateTime,NodaTime.Period)
  - NodaTime.LocalDateTime.Plus(NodaTime.Period)
  - NodaTime.LocalDateTime.PlusDays(System.Int32)
  - NodaTime.LocalDateTime.PlusHours(System.Int64)
  - NodaTime.LocalDateTime.PlusMilliseconds(System.Int64)
  - NodaTime.LocalDateTime.PlusMinutes(System.Int64)
  - NodaTime.LocalDateTime.PlusMonths(System.Int32)
  - NodaTime.LocalDateTime.PlusNanoseconds(System.Int64)
  - NodaTime.LocalDateTime.PlusSeconds(System.Int64)
  - NodaTime.LocalDateTime.PlusTicks(System.Int64)
  - NodaTime.LocalDateTime.PlusWeeks(System.Int32)
  - NodaTime.LocalDateTime.PlusYears(System.Int32)
  - NodaTime.LocalDateTime.Previous(NodaTime.IsoDayOfWeek)
  - NodaTime.LocalDateTime.Second
  - NodaTime.LocalDateTime.Subtract(NodaTime.LocalDateTime,NodaTime.LocalDateTime)
  - NodaTime.LocalDateTime.Subtract(NodaTime.LocalDateTime,NodaTime.Period)
  - NodaTime.LocalDateTime.System#IComparable#CompareTo(System.Object)
  - NodaTime.LocalDateTime.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  - NodaTime.LocalDateTime.System#Xml#Serialization#IXmlSerializable#GetSchema
  - NodaTime.LocalDateTime.System#Xml#Serialization#IXmlSerializable#ReadXml(System.Xml.XmlReader)
  - NodaTime.LocalDateTime.System#Xml#Serialization#IXmlSerializable#WriteXml(System.Xml.XmlWriter)
  - NodaTime.LocalDateTime.TickOfDay
  - NodaTime.LocalDateTime.TickOfSecond
  - NodaTime.LocalDateTime.TimeOfDay
  - NodaTime.LocalDateTime.ToDateTimeUnspecified
  - NodaTime.LocalDateTime.ToString
  - NodaTime.LocalDateTime.ToString(System.String,System.IFormatProvider)
  - NodaTime.LocalDateTime.With(System.Func{NodaTime.LocalDate,NodaTime.LocalDate})
  - NodaTime.LocalDateTime.With(System.Func{NodaTime.LocalTime,NodaTime.LocalTime})
  - NodaTime.LocalDateTime.WithCalendar(NodaTime.CalendarSystem)
  - NodaTime.LocalDateTime.WithOffset(NodaTime.Offset)
  - NodaTime.LocalDateTime.Year
  - NodaTime.LocalDateTime.YearOfEra
  langs:
  - csharp
  - vb
  name: LocalDateTime
  nameWithType: LocalDateTime
  fullName: NodaTime.LocalDateTime
  type: Struct
  source:
    remote:
      path: 2.4.x/src/NodaTime/LocalDateTime.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: LocalDateTime
    path: src/NodaTime/LocalDateTime.cs
    startLine: 41
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nA date and time in a particular calendar system. A LocalDateTime value does not represent an\ninstant on the global time line, because it has no associated time zone: &quot;November 12th 2009 7pm, ISO calendar&quot;\noccurred at different instants for different people around the world.\n"
  remarks: "\n<p>\nThis type defaults to using the ISO calendar system unless a different calendar system is\nspecified.\n</p>\n<p>\nValues can freely be compared for equality: a value in a different calendar system is not equal to\na value in a different calendar system. However, ordering comparisons (either via the <xref href=\"NodaTime.LocalDateTime.CompareTo(NodaTime.LocalDateTime)\" data-throw-if-not-resolved=\"false\"></xref> method\nor via operators) fail with <xref href=\"System.ArgumentException\" data-throw-if-not-resolved=\"false\"></xref>; attempting to compare values in different calendars\nalmost always indicates a bug in the calling code.\n</p>\n"
  example: []
  syntax:
    content: >-
      [Serializable]

      public struct LocalDateTime : IEquatable<LocalDateTime>, IComparable<LocalDateTime>, IComparable, IFormattable, IXmlSerializable, ISerializable
    content.vb: >-
      <Serializable>

      Public Structure LocalDateTime
          Implements IEquatable(Of LocalDateTime), IComparable(Of LocalDateTime), IComparable, IFormattable, IXmlSerializable, ISerializable
  implements:
  - System.IEquatable{NodaTime.LocalDateTime}
  - System.IComparable{NodaTime.LocalDateTime}
  - System.IComparable
  - System.IFormattable
  - System.Xml.Serialization.IXmlSerializable
  - System.Runtime.Serialization.ISerializable
  inheritedMembers:
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetType
  attributes:
  - type: System.SerializableAttribute
    ctor: System.SerializableAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - struct
  modifiers.vb:
  - Public
  - Structure
- uid: NodaTime.LocalDateTime.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)
  commentId: M:NodaTime.LocalDateTime.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)
  id: '#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)'
  parent: NodaTime.LocalDateTime
  langs:
  - csharp
  - vb
  name: LocalDateTime(Int32, Int32, Int32, Int32, Int32)
  nameWithType: LocalDateTime.LocalDateTime(Int32, Int32, Int32, Int32, Int32)
  fullName: NodaTime.LocalDateTime.LocalDateTime(System.Int32, System.Int32, System.Int32, System.Int32, System.Int32)
  type: Constructor
  source:
    remote:
      path: 2.4.x/src/NodaTime/LocalDateTime.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: .ctor
    path: src/NodaTime/LocalDateTime.cs
    startLine: 74
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nInitializes a new instance of the <xref href=\"NodaTime.LocalDateTime\" data-throw-if-not-resolved=\"false\"></xref> struct using the ISO calendar system.\n"
  example: []
  syntax:
    content: public LocalDateTime(int year, int month, int day, int hour, int minute)
    parameters:
    - id: year
      type: System.Int32
      description: >-
        The year. This is the &quot;absolute year&quot;,

        so a value of 0 means 1 BC, for example.
    - id: month
      type: System.Int32
      description: The month of year.
    - id: day
      type: System.Int32
      description: The day of month.
    - id: hour
      type: System.Int32
      description: The hour.
    - id: minute
      type: System.Int32
      description: The minute.
    content.vb: Public Sub New(year As Integer, month As Integer, day As Integer, hour As Integer, minute As Integer)
  overload: NodaTime.LocalDateTime.#ctor*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: The parameters do not form a valid date/time.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: NodaTime.LocalDateTime.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,NodaTime.CalendarSystem)
  commentId: M:NodaTime.LocalDateTime.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,NodaTime.CalendarSystem)
  id: '#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,NodaTime.CalendarSystem)'
  parent: NodaTime.LocalDateTime
  langs:
  - csharp
  - vb
  name: LocalDateTime(Int32, Int32, Int32, Int32, Int32, CalendarSystem)
  nameWithType: LocalDateTime.LocalDateTime(Int32, Int32, Int32, Int32, Int32, CalendarSystem)
  fullName: NodaTime.LocalDateTime.LocalDateTime(System.Int32, System.Int32, System.Int32, System.Int32, System.Int32, NodaTime.CalendarSystem)
  type: Constructor
  source:
    remote:
      path: 2.4.x/src/NodaTime/LocalDateTime.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: .ctor
    path: src/NodaTime/LocalDateTime.cs
    startLine: 92
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nInitializes a new instance of the <xref href=\"NodaTime.LocalDateTime\" data-throw-if-not-resolved=\"false\"></xref> struct.\n"
  example: []
  syntax:
    content: public LocalDateTime(int year, int month, int day, int hour, int minute, CalendarSystem calendar)
    parameters:
    - id: year
      type: System.Int32
      description: >-
        The year. This is the &quot;absolute year&quot;, so, for

        the ISO calendar, a value of 0 means 1 BC, for example.
    - id: month
      type: System.Int32
      description: The month of year.
    - id: day
      type: System.Int32
      description: The day of month.
    - id: hour
      type: System.Int32
      description: The hour.
    - id: minute
      type: System.Int32
      description: The minute.
    - id: calendar
      type: NodaTime.CalendarSystem
      description: The calendar.
    content.vb: Public Sub New(year As Integer, month As Integer, day As Integer, hour As Integer, minute As Integer, calendar As CalendarSystem)
  overload: NodaTime.LocalDateTime.#ctor*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: The parameters do not form a valid date/time.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: NodaTime.LocalDateTime.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)
  commentId: M:NodaTime.LocalDateTime.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)
  id: '#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)'
  parent: NodaTime.LocalDateTime
  langs:
  - csharp
  - vb
  name: LocalDateTime(Int32, Int32, Int32, Int32, Int32, Int32)
  nameWithType: LocalDateTime.LocalDateTime(Int32, Int32, Int32, Int32, Int32, Int32)
  fullName: NodaTime.LocalDateTime.LocalDateTime(System.Int32, System.Int32, System.Int32, System.Int32, System.Int32, System.Int32)
  type: Constructor
  source:
    remote:
      path: 2.4.x/src/NodaTime/LocalDateTime.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: .ctor
    path: src/NodaTime/LocalDateTime.cs
    startLine: 110
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nInitializes a new instance of the <xref href=\"NodaTime.LocalDateTime\" data-throw-if-not-resolved=\"false\"></xref> struct using the ISO calendar system.\n"
  example: []
  syntax:
    content: public LocalDateTime(int year, int month, int day, int hour, int minute, int second)
    parameters:
    - id: year
      type: System.Int32
      description: >-
        The year. This is the &quot;absolute year&quot;,

        so a value of 0 means 1 BC, for example.
    - id: month
      type: System.Int32
      description: The month of year.
    - id: day
      type: System.Int32
      description: The day of month.
    - id: hour
      type: System.Int32
      description: The hour.
    - id: minute
      type: System.Int32
      description: The minute.
    - id: second
      type: System.Int32
      description: The second.
    content.vb: Public Sub New(year As Integer, month As Integer, day As Integer, hour As Integer, minute As Integer, second As Integer)
  overload: NodaTime.LocalDateTime.#ctor*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: The parameters do not form a valid date/time.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: NodaTime.LocalDateTime.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,NodaTime.CalendarSystem)
  commentId: M:NodaTime.LocalDateTime.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,NodaTime.CalendarSystem)
  id: '#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,NodaTime.CalendarSystem)'
  parent: NodaTime.LocalDateTime
  langs:
  - csharp
  - vb
  name: LocalDateTime(Int32, Int32, Int32, Int32, Int32, Int32, CalendarSystem)
  nameWithType: LocalDateTime.LocalDateTime(Int32, Int32, Int32, Int32, Int32, Int32, CalendarSystem)
  fullName: NodaTime.LocalDateTime.LocalDateTime(System.Int32, System.Int32, System.Int32, System.Int32, System.Int32, System.Int32, NodaTime.CalendarSystem)
  type: Constructor
  source:
    remote:
      path: 2.4.x/src/NodaTime/LocalDateTime.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: .ctor
    path: src/NodaTime/LocalDateTime.cs
    startLine: 129
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nInitializes a new instance of the <xref href=\"NodaTime.LocalDateTime\" data-throw-if-not-resolved=\"false\"></xref> struct.\n"
  example: []
  syntax:
    content: public LocalDateTime(int year, int month, int day, int hour, int minute, int second, CalendarSystem calendar)
    parameters:
    - id: year
      type: System.Int32
      description: >-
        The year. This is the &quot;absolute year&quot;, so, for

        the ISO calendar, a value of 0 means 1 BC, for example.
    - id: month
      type: System.Int32
      description: The month of year.
    - id: day
      type: System.Int32
      description: The day of month.
    - id: hour
      type: System.Int32
      description: The hour.
    - id: minute
      type: System.Int32
      description: The minute.
    - id: second
      type: System.Int32
      description: The second.
    - id: calendar
      type: NodaTime.CalendarSystem
      description: The calendar.
    content.vb: Public Sub New(year As Integer, month As Integer, day As Integer, hour As Integer, minute As Integer, second As Integer, calendar As CalendarSystem)
  overload: NodaTime.LocalDateTime.#ctor*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: The parameters do not form a valid date/time.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: NodaTime.LocalDateTime.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)
  commentId: M:NodaTime.LocalDateTime.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)
  id: '#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)'
  parent: NodaTime.LocalDateTime
  langs:
  - csharp
  - vb
  name: LocalDateTime(Int32, Int32, Int32, Int32, Int32, Int32, Int32)
  nameWithType: LocalDateTime.LocalDateTime(Int32, Int32, Int32, Int32, Int32, Int32, Int32)
  fullName: NodaTime.LocalDateTime.LocalDateTime(System.Int32, System.Int32, System.Int32, System.Int32, System.Int32, System.Int32, System.Int32)
  type: Constructor
  source:
    remote:
      path: 2.4.x/src/NodaTime/LocalDateTime.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: .ctor
    path: src/NodaTime/LocalDateTime.cs
    startLine: 148
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nInitializes a new instance of the <xref href=\"NodaTime.LocalDateTime\" data-throw-if-not-resolved=\"false\"></xref> struct using the ISO calendar system.\n"
  example: []
  syntax:
    content: public LocalDateTime(int year, int month, int day, int hour, int minute, int second, int millisecond)
    parameters:
    - id: year
      type: System.Int32
      description: >-
        The year. This is the &quot;absolute year&quot;,

        so a value of 0 means 1 BC, for example.
    - id: month
      type: System.Int32
      description: The month of year.
    - id: day
      type: System.Int32
      description: The day of month.
    - id: hour
      type: System.Int32
      description: The hour.
    - id: minute
      type: System.Int32
      description: The minute.
    - id: second
      type: System.Int32
      description: The second.
    - id: millisecond
      type: System.Int32
      description: The millisecond.
    content.vb: Public Sub New(year As Integer, month As Integer, day As Integer, hour As Integer, minute As Integer, second As Integer, millisecond As Integer)
  overload: NodaTime.LocalDateTime.#ctor*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: The parameters do not form a valid date/time.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: NodaTime.LocalDateTime.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,NodaTime.CalendarSystem)
  commentId: M:NodaTime.LocalDateTime.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,NodaTime.CalendarSystem)
  id: '#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,NodaTime.CalendarSystem)'
  parent: NodaTime.LocalDateTime
  langs:
  - csharp
  - vb
  name: LocalDateTime(Int32, Int32, Int32, Int32, Int32, Int32, Int32, CalendarSystem)
  nameWithType: LocalDateTime.LocalDateTime(Int32, Int32, Int32, Int32, Int32, Int32, Int32, CalendarSystem)
  fullName: NodaTime.LocalDateTime.LocalDateTime(System.Int32, System.Int32, System.Int32, System.Int32, System.Int32, System.Int32, System.Int32, NodaTime.CalendarSystem)
  type: Constructor
  source:
    remote:
      path: 2.4.x/src/NodaTime/LocalDateTime.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: .ctor
    path: src/NodaTime/LocalDateTime.cs
    startLine: 168
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nInitializes a new instance of the <xref href=\"NodaTime.LocalDateTime\" data-throw-if-not-resolved=\"false\"></xref> struct.\n"
  example: []
  syntax:
    content: public LocalDateTime(int year, int month, int day, int hour, int minute, int second, int millisecond, CalendarSystem calendar)
    parameters:
    - id: year
      type: System.Int32
      description: >-
        The year. This is the &quot;absolute year&quot;, so, for

        the ISO calendar, a value of 0 means 1 BC, for example.
    - id: month
      type: System.Int32
      description: The month of year.
    - id: day
      type: System.Int32
      description: The day of month.
    - id: hour
      type: System.Int32
      description: The hour.
    - id: minute
      type: System.Int32
      description: The minute.
    - id: second
      type: System.Int32
      description: The second.
    - id: millisecond
      type: System.Int32
      description: The millisecond.
    - id: calendar
      type: NodaTime.CalendarSystem
      description: The calendar.
    content.vb: Public Sub New(year As Integer, month As Integer, day As Integer, hour As Integer, minute As Integer, second As Integer, millisecond As Integer, calendar As CalendarSystem)
  overload: NodaTime.LocalDateTime.#ctor*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: The parameters do not form a valid date/time.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: NodaTime.LocalDateTime.Calendar
  commentId: P:NodaTime.LocalDateTime.Calendar
  id: Calendar
  parent: NodaTime.LocalDateTime
  langs:
  - csharp
  - vb
  name: Calendar
  nameWithType: LocalDateTime.Calendar
  fullName: NodaTime.LocalDateTime.Calendar
  type: Property
  source:
    remote:
      path: 2.4.x/src/NodaTime/LocalDateTime.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: Calendar
    path: src/NodaTime/LocalDateTime.cs
    startLine: 182
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: Gets the calendar system associated with this local date and time.
  example: []
  syntax:
    content: public CalendarSystem Calendar { get; }
    parameters: []
    return:
      type: NodaTime.CalendarSystem
      description: The calendar system associated with this local date and time.
    content.vb: Public ReadOnly Property Calendar As CalendarSystem
  overload: NodaTime.LocalDateTime.Calendar*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: NodaTime.LocalDateTime.Year
  commentId: P:NodaTime.LocalDateTime.Year
  id: Year
  parent: NodaTime.LocalDateTime
  langs:
  - csharp
  - vb
  name: Year
  nameWithType: LocalDateTime.Year
  fullName: NodaTime.LocalDateTime.Year
  type: Property
  source:
    remote:
      path: 2.4.x/src/NodaTime/LocalDateTime.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: Year
    path: src/NodaTime/LocalDateTime.cs
    startLine: 188
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: Gets the year of this local date and time.
  remarks: >-
    This returns the &quot;absolute year&quot;, so, for the ISO calendar,

    a value of 0 means 1 BC, for example.
  example: []
  syntax:
    content: public int Year { get; }
    parameters: []
    return:
      type: System.Int32
      description: The year of this local date and time.
    content.vb: Public ReadOnly Property Year As Integer
  overload: NodaTime.LocalDateTime.Year*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: NodaTime.LocalDateTime.YearOfEra
  commentId: P:NodaTime.LocalDateTime.YearOfEra
  id: YearOfEra
  parent: NodaTime.LocalDateTime
  langs:
  - csharp
  - vb
  name: YearOfEra
  nameWithType: LocalDateTime.YearOfEra
  fullName: NodaTime.LocalDateTime.YearOfEra
  type: Property
  source:
    remote:
      path: 2.4.x/src/NodaTime/LocalDateTime.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: YearOfEra
    path: src/NodaTime/LocalDateTime.cs
    startLine: 192
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: Gets the year of this local date and time within its era.
  example: []
  syntax:
    content: public int YearOfEra { get; }
    parameters: []
    return:
      type: System.Int32
      description: The year of this local date and time within its era.
    content.vb: Public ReadOnly Property YearOfEra As Integer
  overload: NodaTime.LocalDateTime.YearOfEra*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: NodaTime.LocalDateTime.Era
  commentId: P:NodaTime.LocalDateTime.Era
  id: Era
  parent: NodaTime.LocalDateTime
  langs:
  - csharp
  - vb
  name: Era
  nameWithType: LocalDateTime.Era
  fullName: NodaTime.LocalDateTime.Era
  type: Property
  source:
    remote:
      path: 2.4.x/src/NodaTime/LocalDateTime.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: Era
    path: src/NodaTime/LocalDateTime.cs
    startLine: 196
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: Gets the era of this local date and time.
  example: []
  syntax:
    content: public Era Era { get; }
    parameters: []
    return:
      type: NodaTime.Calendars.Era
      description: The era of this local date and time.
    content.vb: Public ReadOnly Property Era As Era
  overload: NodaTime.LocalDateTime.Era*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: NodaTime.LocalDateTime.Month
  commentId: P:NodaTime.LocalDateTime.Month
  id: Month
  parent: NodaTime.LocalDateTime
  langs:
  - csharp
  - vb
  name: Month
  nameWithType: LocalDateTime.Month
  fullName: NodaTime.LocalDateTime.Month
  type: Property
  source:
    remote:
      path: 2.4.x/src/NodaTime/LocalDateTime.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: Month
    path: src/NodaTime/LocalDateTime.cs
    startLine: 202
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nGets the month of this local date and time within the year.\n"
  example: []
  syntax:
    content: public int Month { get; }
    parameters: []
    return:
      type: System.Int32
      description: The month of this local date and time within the year.
    content.vb: Public ReadOnly Property Month As Integer
  overload: NodaTime.LocalDateTime.Month*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: NodaTime.LocalDateTime.DayOfYear
  commentId: P:NodaTime.LocalDateTime.DayOfYear
  id: DayOfYear
  parent: NodaTime.LocalDateTime
  langs:
  - csharp
  - vb
  name: DayOfYear
  nameWithType: LocalDateTime.DayOfYear
  fullName: NodaTime.LocalDateTime.DayOfYear
  type: Property
  source:
    remote:
      path: 2.4.x/src/NodaTime/LocalDateTime.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: DayOfYear
    path: src/NodaTime/LocalDateTime.cs
    startLine: 208
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nGets the day of this local date and time within the year.\n"
  example: []
  syntax:
    content: public int DayOfYear { get; }
    parameters: []
    return:
      type: System.Int32
      description: The day of this local date and time within the year.
    content.vb: Public ReadOnly Property DayOfYear As Integer
  overload: NodaTime.LocalDateTime.DayOfYear*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: NodaTime.LocalDateTime.Day
  commentId: P:NodaTime.LocalDateTime.Day
  id: Day
  parent: NodaTime.LocalDateTime
  langs:
  - csharp
  - vb
  name: Day
  nameWithType: LocalDateTime.Day
  fullName: NodaTime.LocalDateTime.Day
  type: Property
  source:
    remote:
      path: 2.4.x/src/NodaTime/LocalDateTime.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: Day
    path: src/NodaTime/LocalDateTime.cs
    startLine: 214
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nGets the day of this local date and time within the month.\n"
  example: []
  syntax:
    content: public int Day { get; }
    parameters: []
    return:
      type: System.Int32
      description: The day of this local date and time within the month.
    content.vb: Public ReadOnly Property Day As Integer
  overload: NodaTime.LocalDateTime.Day*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: NodaTime.LocalDateTime.DayOfWeek
  commentId: P:NodaTime.LocalDateTime.DayOfWeek
  id: DayOfWeek
  parent: NodaTime.LocalDateTime
  langs:
  - csharp
  - vb
  name: DayOfWeek
  nameWithType: LocalDateTime.DayOfWeek
  fullName: NodaTime.LocalDateTime.DayOfWeek
  type: Property
  source:
    remote:
      path: 2.4.x/src/NodaTime/LocalDateTime.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: DayOfWeek
    path: src/NodaTime/LocalDateTime.cs
    startLine: 220
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nGets the week day of this local date and time expressed as an <xref href=\"NodaTime.IsoDayOfWeek\" data-throw-if-not-resolved=\"false\"></xref> value.\n"
  example: []
  syntax:
    content: public IsoDayOfWeek DayOfWeek { get; }
    parameters: []
    return:
      type: NodaTime.IsoDayOfWeek
      description: The week day of this local date and time expressed as an <code>IsoDayOfWeek</code>.
    content.vb: Public ReadOnly Property DayOfWeek As IsoDayOfWeek
  overload: NodaTime.LocalDateTime.DayOfWeek*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: NodaTime.LocalDateTime.Hour
  commentId: P:NodaTime.LocalDateTime.Hour
  id: Hour
  parent: NodaTime.LocalDateTime
  langs:
  - csharp
  - vb
  name: Hour
  nameWithType: LocalDateTime.Hour
  fullName: NodaTime.LocalDateTime.Hour
  type: Property
  source:
    remote:
      path: 2.4.x/src/NodaTime/LocalDateTime.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: Hour
    path: src/NodaTime/LocalDateTime.cs
    startLine: 226
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nGets the hour of day of this local date and time, in the range 0 to 23 inclusive.\n"
  example: []
  syntax:
    content: public int Hour { get; }
    parameters: []
    return:
      type: System.Int32
      description: The hour of day of this local date and time, in the range 0 to 23 inclusive.
    content.vb: Public ReadOnly Property Hour As Integer
  overload: NodaTime.LocalDateTime.Hour*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: NodaTime.LocalDateTime.ClockHourOfHalfDay
  commentId: P:NodaTime.LocalDateTime.ClockHourOfHalfDay
  id: ClockHourOfHalfDay
  parent: NodaTime.LocalDateTime
  langs:
  - csharp
  - vb
  name: ClockHourOfHalfDay
  nameWithType: LocalDateTime.ClockHourOfHalfDay
  fullName: NodaTime.LocalDateTime.ClockHourOfHalfDay
  type: Property
  source:
    remote:
      path: 2.4.x/src/NodaTime/LocalDateTime.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: ClockHourOfHalfDay
    path: src/NodaTime/LocalDateTime.cs
    startLine: 232
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nGets the hour of the half-day of this local date and time, in the range 1 to 12 inclusive.\n"
  example: []
  syntax:
    content: public int ClockHourOfHalfDay { get; }
    parameters: []
    return:
      type: System.Int32
      description: The hour of the half-day of this local date and time, in the range 1 to 12 inclusive.
    content.vb: Public ReadOnly Property ClockHourOfHalfDay As Integer
  overload: NodaTime.LocalDateTime.ClockHourOfHalfDay*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: NodaTime.LocalDateTime.Minute
  commentId: P:NodaTime.LocalDateTime.Minute
  id: Minute
  parent: NodaTime.LocalDateTime
  langs:
  - csharp
  - vb
  name: Minute
  nameWithType: LocalDateTime.Minute
  fullName: NodaTime.LocalDateTime.Minute
  type: Property
  source:
    remote:
      path: 2.4.x/src/NodaTime/LocalDateTime.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: Minute
    path: src/NodaTime/LocalDateTime.cs
    startLine: 238
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nGets the minute of this local date and time, in the range 0 to 59 inclusive.\n"
  example: []
  syntax:
    content: public int Minute { get; }
    parameters: []
    return:
      type: System.Int32
      description: The minute of this local date and time, in the range 0 to 59 inclusive.
    content.vb: Public ReadOnly Property Minute As Integer
  overload: NodaTime.LocalDateTime.Minute*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: NodaTime.LocalDateTime.Second
  commentId: P:NodaTime.LocalDateTime.Second
  id: Second
  parent: NodaTime.LocalDateTime
  langs:
  - csharp
  - vb
  name: Second
  nameWithType: LocalDateTime.Second
  fullName: NodaTime.LocalDateTime.Second
  type: Property
  source:
    remote:
      path: 2.4.x/src/NodaTime/LocalDateTime.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: Second
    path: src/NodaTime/LocalDateTime.cs
    startLine: 244
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nGets the second of this local date and time within the minute, in the range 0 to 59 inclusive.\n"
  example: []
  syntax:
    content: public int Second { get; }
    parameters: []
    return:
      type: System.Int32
      description: The second of this local date and time within the minute, in the range 0 to 59 inclusive.
    content.vb: Public ReadOnly Property Second As Integer
  overload: NodaTime.LocalDateTime.Second*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: NodaTime.LocalDateTime.Millisecond
  commentId: P:NodaTime.LocalDateTime.Millisecond
  id: Millisecond
  parent: NodaTime.LocalDateTime
  langs:
  - csharp
  - vb
  name: Millisecond
  nameWithType: LocalDateTime.Millisecond
  fullName: NodaTime.LocalDateTime.Millisecond
  type: Property
  source:
    remote:
      path: 2.4.x/src/NodaTime/LocalDateTime.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: Millisecond
    path: src/NodaTime/LocalDateTime.cs
    startLine: 250
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nGets the millisecond of this local date and time within the second, in the range 0 to 999 inclusive.\n"
  example: []
  syntax:
    content: public int Millisecond { get; }
    parameters: []
    return:
      type: System.Int32
      description: The millisecond of this local date and time within the second, in the range 0 to 999 inclusive.
    content.vb: Public ReadOnly Property Millisecond As Integer
  overload: NodaTime.LocalDateTime.Millisecond*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: NodaTime.LocalDateTime.TickOfSecond
  commentId: P:NodaTime.LocalDateTime.TickOfSecond
  id: TickOfSecond
  parent: NodaTime.LocalDateTime
  langs:
  - csharp
  - vb
  name: TickOfSecond
  nameWithType: LocalDateTime.TickOfSecond
  fullName: NodaTime.LocalDateTime.TickOfSecond
  type: Property
  source:
    remote:
      path: 2.4.x/src/NodaTime/LocalDateTime.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: TickOfSecond
    path: src/NodaTime/LocalDateTime.cs
    startLine: 256
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nGets the tick of this local time within the second, in the range 0 to 9,999,999 inclusive.\n"
  example: []
  syntax:
    content: public int TickOfSecond { get; }
    parameters: []
    return:
      type: System.Int32
      description: The tick of this local time within the second, in the range 0 to 9,999,999 inclusive.
    content.vb: Public ReadOnly Property TickOfSecond As Integer
  overload: NodaTime.LocalDateTime.TickOfSecond*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: NodaTime.LocalDateTime.TickOfDay
  commentId: P:NodaTime.LocalDateTime.TickOfDay
  id: TickOfDay
  parent: NodaTime.LocalDateTime
  langs:
  - csharp
  - vb
  name: TickOfDay
  nameWithType: LocalDateTime.TickOfDay
  fullName: NodaTime.LocalDateTime.TickOfDay
  type: Property
  source:
    remote:
      path: 2.4.x/src/NodaTime/LocalDateTime.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: TickOfDay
    path: src/NodaTime/LocalDateTime.cs
    startLine: 262
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nGets the tick of this local date and time within the day, in the range 0 to 863,999,999,999 inclusive.\n"
  example: []
  syntax:
    content: public long TickOfDay { get; }
    parameters: []
    return:
      type: System.Int64
      description: The tick of this local date and time within the day, in the range 0 to 863,999,999,999 inclusive.
    content.vb: Public ReadOnly Property TickOfDay As Long
  overload: NodaTime.LocalDateTime.TickOfDay*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: NodaTime.LocalDateTime.NanosecondOfSecond
  commentId: P:NodaTime.LocalDateTime.NanosecondOfSecond
  id: NanosecondOfSecond
  parent: NodaTime.LocalDateTime
  langs:
  - csharp
  - vb
  name: NanosecondOfSecond
  nameWithType: LocalDateTime.NanosecondOfSecond
  fullName: NodaTime.LocalDateTime.NanosecondOfSecond
  type: Property
  source:
    remote:
      path: 2.4.x/src/NodaTime/LocalDateTime.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: NanosecondOfSecond
    path: src/NodaTime/LocalDateTime.cs
    startLine: 268
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nGets the nanosecond of this local time within the second, in the range 0 to 999,999,999 inclusive.\n"
  example: []
  syntax:
    content: public int NanosecondOfSecond { get; }
    parameters: []
    return:
      type: System.Int32
      description: The nanosecond of this local time within the second, in the range 0 to 999,999,999 inclusive.
    content.vb: Public ReadOnly Property NanosecondOfSecond As Integer
  overload: NodaTime.LocalDateTime.NanosecondOfSecond*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: NodaTime.LocalDateTime.NanosecondOfDay
  commentId: P:NodaTime.LocalDateTime.NanosecondOfDay
  id: NanosecondOfDay
  parent: NodaTime.LocalDateTime
  langs:
  - csharp
  - vb
  name: NanosecondOfDay
  nameWithType: LocalDateTime.NanosecondOfDay
  fullName: NodaTime.LocalDateTime.NanosecondOfDay
  type: Property
  source:
    remote:
      path: 2.4.x/src/NodaTime/LocalDateTime.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: NanosecondOfDay
    path: src/NodaTime/LocalDateTime.cs
    startLine: 274
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nGets the nanosecond of this local date and time within the day, in the range 0 to 86,399,999,999,999 inclusive.\n"
  example: []
  syntax:
    content: public long NanosecondOfDay { get; }
    parameters: []
    return:
      type: System.Int64
      description: The nanosecond of this local date and time within the day, in the range 0 to 86,399,999,999,999 inclusive.
    content.vb: Public ReadOnly Property NanosecondOfDay As Long
  overload: NodaTime.LocalDateTime.NanosecondOfDay*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: NodaTime.LocalDateTime.TimeOfDay
  commentId: P:NodaTime.LocalDateTime.TimeOfDay
  id: TimeOfDay
  parent: NodaTime.LocalDateTime
  langs:
  - csharp
  - vb
  name: TimeOfDay
  nameWithType: LocalDateTime.TimeOfDay
  fullName: NodaTime.LocalDateTime.TimeOfDay
  type: Property
  source:
    remote:
      path: 2.4.x/src/NodaTime/LocalDateTime.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: TimeOfDay
    path: src/NodaTime/LocalDateTime.cs
    startLine: 280
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nGets the time portion of this local date and time as a <xref href=\"NodaTime.LocalTime\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public LocalTime TimeOfDay { get; }
    parameters: []
    return:
      type: NodaTime.LocalTime
      description: The time portion of this local date and time as a <code>LocalTime</code>.
    content.vb: Public ReadOnly Property TimeOfDay As LocalTime
  overload: NodaTime.LocalDateTime.TimeOfDay*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: NodaTime.LocalDateTime.Date
  commentId: P:NodaTime.LocalDateTime.Date
  id: Date
  parent: NodaTime.LocalDateTime
  langs:
  - csharp
  - vb
  name: Date
  nameWithType: LocalDateTime.Date
  fullName: NodaTime.LocalDateTime.Date
  type: Property
  source:
    remote:
      path: 2.4.x/src/NodaTime/LocalDateTime.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: Date
    path: src/NodaTime/LocalDateTime.cs
    startLine: 286
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nGets the date portion of this local date and time as a <xref href=\"NodaTime.LocalDate\" data-throw-if-not-resolved=\"false\"></xref> in the same calendar system as this value.\n"
  example: []
  syntax:
    content: public LocalDate Date { get; }
    parameters: []
    return:
      type: NodaTime.LocalDate
      description: The date portion of this local date and time as a <code>LocalDate</code> in the same calendar system as this value.
    content.vb: Public ReadOnly Property Date As LocalDate
  overload: NodaTime.LocalDateTime.Date*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: NodaTime.LocalDateTime.ToDateTimeUnspecified
  commentId: M:NodaTime.LocalDateTime.ToDateTimeUnspecified
  id: ToDateTimeUnspecified
  parent: NodaTime.LocalDateTime
  langs:
  - csharp
  - vb
  name: ToDateTimeUnspecified()
  nameWithType: LocalDateTime.ToDateTimeUnspecified()
  fullName: NodaTime.LocalDateTime.ToDateTimeUnspecified()
  type: Method
  source:
    remote:
      path: 2.4.x/src/NodaTime/LocalDateTime.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: ToDateTimeUnspecified
    path: src/NodaTime/LocalDateTime.cs
    startLine: 306
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nConstructs a <xref href=\"System.DateTime\" data-throw-if-not-resolved=\"false\"></xref> from this value which has a <xref href=\"System.DateTime.Kind\" data-throw-if-not-resolved=\"false\"></xref>\nof <xref href=\"System.DateTimeKind.Unspecified\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  remarks: "\n<p>\n<xref href=\"System.DateTimeKind.Unspecified\" data-throw-if-not-resolved=\"false\"></xref> is slightly odd - it can be treated as UTC if you use <xref href=\"System.DateTime.ToLocalTime\" data-throw-if-not-resolved=\"false\"></xref>\nor as system local time if you use <xref href=\"System.DateTime.ToUniversalTime\" data-throw-if-not-resolved=\"false\"></xref>, but it&apos;s the only kind which allows\nyou to construct a <xref href=\"System.DateTimeOffset\" data-throw-if-not-resolved=\"false\"></xref> with an arbitrary offset, which makes it as close to\nthe Noda Time non-system-specific &quot;local&quot; concept as exists in .NET.\n</p>\n<p>\nIf the date and time is not on a tick boundary (the unit of granularity of DateTime) the value will be truncated\ntowards the start of time.\n</p>\n"
  example: []
  syntax:
    content: public DateTime ToDateTimeUnspecified()
    return:
      type: System.DateTime
      description: A <xref href="System.DateTime" data-throw-if-not-resolved="false"></xref> value for the same date and time as this value.
    content.vb: Public Function ToDateTimeUnspecified As Date
  overload: NodaTime.LocalDateTime.ToDateTimeUnspecified*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: The date/time is outside the range of <code>DateTime</code>.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: NodaTime.LocalDateTime.FromDateTime(System.DateTime)
  commentId: M:NodaTime.LocalDateTime.FromDateTime(System.DateTime)
  id: FromDateTime(System.DateTime)
  parent: NodaTime.LocalDateTime
  langs:
  - csharp
  - vb
  name: FromDateTime(DateTime)
  nameWithType: LocalDateTime.FromDateTime(DateTime)
  fullName: NodaTime.LocalDateTime.FromDateTime(System.DateTime)
  type: Method
  source:
    remote:
      path: 2.4.x/src/NodaTime/LocalDateTime.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: FromDateTime
    path: src/NodaTime/LocalDateTime.cs
    startLine: 327
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nConverts a <xref href=\"System.DateTime\" data-throw-if-not-resolved=\"false\"></xref> of any kind to a LocalDateTime in the ISO calendar. This does not perform\nany time zone conversions, so a DateTime with a <xref href=\"System.DateTime.Kind\" data-throw-if-not-resolved=\"false\"></xref> of <xref href=\"System.DateTimeKind.Utc\" data-throw-if-not-resolved=\"false\"></xref>\nwill still have the same day/hour/minute etc - it won&apos;t be converted into the local system time.\n"
  example: []
  syntax:
    content: public static LocalDateTime FromDateTime(DateTime dateTime)
    parameters:
    - id: dateTime
      type: System.DateTime
      description: Value to convert into a Noda Time local date and time
    return:
      type: NodaTime.LocalDateTime
      description: A new <xref href="NodaTime.LocalDateTime" data-throw-if-not-resolved="false"></xref> with the same values as the specified <code>DateTime</code>.
    content.vb: Public Shared Function FromDateTime(dateTime As Date) As LocalDateTime
  overload: NodaTime.LocalDateTime.FromDateTime*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: NodaTime.LocalDateTime.FromDateTime(System.DateTime,NodaTime.CalendarSystem)
  commentId: M:NodaTime.LocalDateTime.FromDateTime(System.DateTime,NodaTime.CalendarSystem)
  id: FromDateTime(System.DateTime,NodaTime.CalendarSystem)
  parent: NodaTime.LocalDateTime
  langs:
  - csharp
  - vb
  name: FromDateTime(DateTime, CalendarSystem)
  nameWithType: LocalDateTime.FromDateTime(DateTime, CalendarSystem)
  fullName: NodaTime.LocalDateTime.FromDateTime(System.DateTime, NodaTime.CalendarSystem)
  type: Method
  source:
    remote:
      path: 2.4.x/src/NodaTime/LocalDateTime.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: FromDateTime
    path: src/NodaTime/LocalDateTime.cs
    startLine: 341
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nConverts a <xref href=\"System.DateTime\" data-throw-if-not-resolved=\"false\"></xref> of any kind to a LocalDateTime in the specified calendar. This does not perform\nany time zone conversions, so a DateTime with a <xref href=\"System.DateTime.Kind\" data-throw-if-not-resolved=\"false\"></xref> of <xref href=\"System.DateTimeKind.Utc\" data-throw-if-not-resolved=\"false\"></xref>\nwill still have the same day/hour/minute etc - it won&apos;t be converted into the local system time.\n"
  example: []
  syntax:
    content: public static LocalDateTime FromDateTime(DateTime dateTime, CalendarSystem calendar)
    parameters:
    - id: dateTime
      type: System.DateTime
      description: Value to convert into a Noda Time local date and time
    - id: calendar
      type: NodaTime.CalendarSystem
      description: The calendar system to convert into
    return:
      type: NodaTime.LocalDateTime
      description: A new <xref href="NodaTime.LocalDateTime" data-throw-if-not-resolved="false"></xref> with the same values as the specified <code>DateTime</code>.
    content.vb: Public Shared Function FromDateTime(dateTime As Date, calendar As CalendarSystem) As LocalDateTime
  overload: NodaTime.LocalDateTime.FromDateTime*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: NodaTime.LocalDateTime.Equals(NodaTime.LocalDateTime)
  commentId: M:NodaTime.LocalDateTime.Equals(NodaTime.LocalDateTime)
  id: Equals(NodaTime.LocalDateTime)
  parent: NodaTime.LocalDateTime
  langs:
  - csharp
  - vb
  name: Equals(LocalDateTime)
  nameWithType: LocalDateTime.Equals(LocalDateTime)
  fullName: NodaTime.LocalDateTime.Equals(NodaTime.LocalDateTime)
  type: Method
  source:
    remote:
      path: 2.4.x/src/NodaTime/LocalDateTime.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: Equals
    path: src/NodaTime/LocalDateTime.cs
    startLine: 355
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nIndicates whether the current object is equal to another object of the same type.\n"
  example: []
  syntax:
    content: public bool Equals(LocalDateTime other)
    parameters:
    - id: other
      type: NodaTime.LocalDateTime
      description: An object to compare with this object.
    return:
      type: System.Boolean
      description: "\ntrue if the current object is equal to the <code data-dev-comment-type=\"paramref\" class=\"paramref\">other</code> parameter; otherwise, false.\n"
    content.vb: Public Function Equals(other As LocalDateTime) As Boolean
  overload: NodaTime.LocalDateTime.Equals*
  implements:
  - System.IEquatable{NodaTime.LocalDateTime}.Equals(NodaTime.LocalDateTime)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: NodaTime.LocalDateTime.op_Equality(NodaTime.LocalDateTime,NodaTime.LocalDateTime)
  commentId: M:NodaTime.LocalDateTime.op_Equality(NodaTime.LocalDateTime,NodaTime.LocalDateTime)
  id: op_Equality(NodaTime.LocalDateTime,NodaTime.LocalDateTime)
  parent: NodaTime.LocalDateTime
  langs:
  - csharp
  - vb
  name: Equality(LocalDateTime, LocalDateTime)
  nameWithType: LocalDateTime.Equality(LocalDateTime, LocalDateTime)
  fullName: NodaTime.LocalDateTime.Equality(NodaTime.LocalDateTime, NodaTime.LocalDateTime)
  type: Operator
  source:
    remote:
      path: 2.4.x/src/NodaTime/LocalDateTime.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: op_Equality
    path: src/NodaTime/LocalDateTime.cs
    startLine: 365
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nImplements the operator == (equality).\n"
  example: []
  syntax:
    content: public static bool operator ==(LocalDateTime left, LocalDateTime right)
    parameters:
    - id: left
      type: NodaTime.LocalDateTime
      description: The left hand side of the operator.
    - id: right
      type: NodaTime.LocalDateTime
      description: The right hand side of the operator.
    return:
      type: System.Boolean
      description: <code>true</code> if values are equal to each other, otherwise <code>false</code>.
    content.vb: Public Shared Operator =(left As LocalDateTime, right As LocalDateTime) As Boolean
  overload: NodaTime.LocalDateTime.op_Equality*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: NodaTime.LocalDateTime.op_Inequality(NodaTime.LocalDateTime,NodaTime.LocalDateTime)
  commentId: M:NodaTime.LocalDateTime.op_Inequality(NodaTime.LocalDateTime,NodaTime.LocalDateTime)
  id: op_Inequality(NodaTime.LocalDateTime,NodaTime.LocalDateTime)
  parent: NodaTime.LocalDateTime
  langs:
  - csharp
  - vb
  name: Inequality(LocalDateTime, LocalDateTime)
  nameWithType: LocalDateTime.Inequality(LocalDateTime, LocalDateTime)
  fullName: NodaTime.LocalDateTime.Inequality(NodaTime.LocalDateTime, NodaTime.LocalDateTime)
  type: Operator
  source:
    remote:
      path: 2.4.x/src/NodaTime/LocalDateTime.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: op_Inequality
    path: src/NodaTime/LocalDateTime.cs
    startLine: 373
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nImplements the operator != (inequality).\n"
  example: []
  syntax:
    content: public static bool operator !=(LocalDateTime left, LocalDateTime right)
    parameters:
    - id: left
      type: NodaTime.LocalDateTime
      description: The left hand side of the operator.
    - id: right
      type: NodaTime.LocalDateTime
      description: The right hand side of the operator.
    return:
      type: System.Boolean
      description: <code>true</code> if values are not equal to each other, otherwise <code>false</code>.
    content.vb: Public Shared Operator <>(left As LocalDateTime, right As LocalDateTime) As Boolean
  overload: NodaTime.LocalDateTime.op_Inequality*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: NodaTime.LocalDateTime.op_LessThan(NodaTime.LocalDateTime,NodaTime.LocalDateTime)
  commentId: M:NodaTime.LocalDateTime.op_LessThan(NodaTime.LocalDateTime,NodaTime.LocalDateTime)
  id: op_LessThan(NodaTime.LocalDateTime,NodaTime.LocalDateTime)
  parent: NodaTime.LocalDateTime
  langs:
  - csharp
  - vb
  name: LessThan(LocalDateTime, LocalDateTime)
  nameWithType: LocalDateTime.LessThan(LocalDateTime, LocalDateTime)
  fullName: NodaTime.LocalDateTime.LessThan(NodaTime.LocalDateTime, NodaTime.LocalDateTime)
  type: Operator
  source:
    remote:
      path: 2.4.x/src/NodaTime/LocalDateTime.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: op_LessThan
    path: src/NodaTime/LocalDateTime.cs
    startLine: 388
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nCompares two LocalDateTime values to see if the left one is strictly earlier than the right\none.\n"
  remarks: "\nOnly values with the same calendar system can be compared. See the top-level type\ndocumentation for more information about comparisons.\n"
  example: []
  syntax:
    content: public static bool operator <(LocalDateTime lhs, LocalDateTime rhs)
    parameters:
    - id: lhs
      type: NodaTime.LocalDateTime
      description: First operand of the comparison
    - id: rhs
      type: NodaTime.LocalDateTime
      description: Second operand of the comparison
    return:
      type: System.Boolean
      description: true if the <code data-dev-comment-type="paramref" class="paramref">lhs</code> is strictly earlier than <code data-dev-comment-type="paramref" class="paramref">rhs</code>, false otherwise.
    content.vb: Public Shared Operator <(lhs As LocalDateTime, rhs As LocalDateTime) As Boolean
  overload: NodaTime.LocalDateTime.op_LessThan*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: >-
      The calendar system of <code data-dev-comment-type="paramref" class="paramref">rhs</code> is not the same

      as the calendar of <code data-dev-comment-type="paramref" class="paramref">lhs</code>.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: NodaTime.LocalDateTime.op_LessThanOrEqual(NodaTime.LocalDateTime,NodaTime.LocalDateTime)
  commentId: M:NodaTime.LocalDateTime.op_LessThanOrEqual(NodaTime.LocalDateTime,NodaTime.LocalDateTime)
  id: op_LessThanOrEqual(NodaTime.LocalDateTime,NodaTime.LocalDateTime)
  parent: NodaTime.LocalDateTime
  langs:
  - csharp
  - vb
  name: LessThanOrEqual(LocalDateTime, LocalDateTime)
  nameWithType: LocalDateTime.LessThanOrEqual(LocalDateTime, LocalDateTime)
  fullName: NodaTime.LocalDateTime.LessThanOrEqual(NodaTime.LocalDateTime, NodaTime.LocalDateTime)
  type: Operator
  source:
    remote:
      path: 2.4.x/src/NodaTime/LocalDateTime.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: op_LessThanOrEqual
    path: src/NodaTime/LocalDateTime.cs
    startLine: 407
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nCompares two LocalDateTime values to see if the left one is earlier than or equal to the right\none.\n"
  remarks: "\nOnly values with the same calendar system can be compared. See the top-level type\ndocumentation for more information about comparisons.\n"
  example: []
  syntax:
    content: public static bool operator <=(LocalDateTime lhs, LocalDateTime rhs)
    parameters:
    - id: lhs
      type: NodaTime.LocalDateTime
      description: First operand of the comparison
    - id: rhs
      type: NodaTime.LocalDateTime
      description: Second operand of the comparison
    return:
      type: System.Boolean
      description: true if the <code data-dev-comment-type="paramref" class="paramref">lhs</code> is earlier than or equal to <code data-dev-comment-type="paramref" class="paramref">rhs</code>, false otherwise.
    content.vb: Public Shared Operator <=(lhs As LocalDateTime, rhs As LocalDateTime) As Boolean
  overload: NodaTime.LocalDateTime.op_LessThanOrEqual*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: >-
      The calendar system of <code data-dev-comment-type="paramref" class="paramref">rhs</code> is not the same

      as the calendar of <code data-dev-comment-type="paramref" class="paramref">lhs</code>.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: NodaTime.LocalDateTime.op_GreaterThan(NodaTime.LocalDateTime,NodaTime.LocalDateTime)
  commentId: M:NodaTime.LocalDateTime.op_GreaterThan(NodaTime.LocalDateTime,NodaTime.LocalDateTime)
  id: op_GreaterThan(NodaTime.LocalDateTime,NodaTime.LocalDateTime)
  parent: NodaTime.LocalDateTime
  langs:
  - csharp
  - vb
  name: GreaterThan(LocalDateTime, LocalDateTime)
  nameWithType: LocalDateTime.GreaterThan(LocalDateTime, LocalDateTime)
  fullName: NodaTime.LocalDateTime.GreaterThan(NodaTime.LocalDateTime, NodaTime.LocalDateTime)
  type: Operator
  source:
    remote:
      path: 2.4.x/src/NodaTime/LocalDateTime.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: op_GreaterThan
    path: src/NodaTime/LocalDateTime.cs
    startLine: 426
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nCompares two LocalDateTime values to see if the left one is strictly later than the right\none.\n"
  remarks: "\nOnly values with the same calendar system can be compared. See the top-level type\ndocumentation for more information about comparisons.\n"
  example: []
  syntax:
    content: public static bool operator>(LocalDateTime lhs, LocalDateTime rhs)
    parameters:
    - id: lhs
      type: NodaTime.LocalDateTime
      description: First operand of the comparison
    - id: rhs
      type: NodaTime.LocalDateTime
      description: Second operand of the comparison
    return:
      type: System.Boolean
      description: true if the <code data-dev-comment-type="paramref" class="paramref">lhs</code> is strictly later than <code data-dev-comment-type="paramref" class="paramref">rhs</code>, false otherwise.
    content.vb: Public Shared Operator>(lhs As LocalDateTime, rhs As LocalDateTime) As Boolean
  overload: NodaTime.LocalDateTime.op_GreaterThan*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: >-
      The calendar system of <code data-dev-comment-type="paramref" class="paramref">rhs</code> is not the same

      as the calendar of <code data-dev-comment-type="paramref" class="paramref">lhs</code>.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: NodaTime.LocalDateTime.op_GreaterThanOrEqual(NodaTime.LocalDateTime,NodaTime.LocalDateTime)
  commentId: M:NodaTime.LocalDateTime.op_GreaterThanOrEqual(NodaTime.LocalDateTime,NodaTime.LocalDateTime)
  id: op_GreaterThanOrEqual(NodaTime.LocalDateTime,NodaTime.LocalDateTime)
  parent: NodaTime.LocalDateTime
  langs:
  - csharp
  - vb
  name: GreaterThanOrEqual(LocalDateTime, LocalDateTime)
  nameWithType: LocalDateTime.GreaterThanOrEqual(LocalDateTime, LocalDateTime)
  fullName: NodaTime.LocalDateTime.GreaterThanOrEqual(NodaTime.LocalDateTime, NodaTime.LocalDateTime)
  type: Operator
  source:
    remote:
      path: 2.4.x/src/NodaTime/LocalDateTime.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: op_GreaterThanOrEqual
    path: src/NodaTime/LocalDateTime.cs
    startLine: 445
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nCompares two LocalDateTime values to see if the left one is later than or equal to the right\none.\n"
  remarks: "\nOnly values with the same calendar system can be compared. See the top-level type\ndocumentation for more information about comparisons.\n"
  example: []
  syntax:
    content: public static bool operator >=(LocalDateTime lhs, LocalDateTime rhs)
    parameters:
    - id: lhs
      type: NodaTime.LocalDateTime
      description: First operand of the comparison
    - id: rhs
      type: NodaTime.LocalDateTime
      description: Second operand of the comparison
    return:
      type: System.Boolean
      description: true if the <code data-dev-comment-type="paramref" class="paramref">lhs</code> is later than or equal to <code data-dev-comment-type="paramref" class="paramref">rhs</code>, false otherwise.
    content.vb: Public Shared Operator >=(lhs As LocalDateTime, rhs As LocalDateTime) As Boolean
  overload: NodaTime.LocalDateTime.op_GreaterThanOrEqual*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: >-
      The calendar system of <code data-dev-comment-type="paramref" class="paramref">rhs</code> is not the same

      as the calendar of <code data-dev-comment-type="paramref" class="paramref">lhs</code>.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: NodaTime.LocalDateTime.CompareTo(NodaTime.LocalDateTime)
  commentId: M:NodaTime.LocalDateTime.CompareTo(NodaTime.LocalDateTime)
  id: CompareTo(NodaTime.LocalDateTime)
  parent: NodaTime.LocalDateTime
  langs:
  - csharp
  - vb
  name: CompareTo(LocalDateTime)
  nameWithType: LocalDateTime.CompareTo(LocalDateTime)
  fullName: NodaTime.LocalDateTime.CompareTo(NodaTime.LocalDateTime)
  type: Method
  source:
    remote:
      path: 2.4.x/src/NodaTime/LocalDateTime.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: CompareTo
    path: src/NodaTime/LocalDateTime.cs
    startLine: 465
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nIndicates whether this date/time is earlier, later or the same as another one.\n"
  remarks: "\nOnly date/time values within the same calendar systems can be compared with this method. Attempting to compare\nvalues within different calendars will fail with an <xref href=\"System.ArgumentException\" data-throw-if-not-resolved=\"false\"></xref>. Ideally, comparisons\nis almost always preferable to continuing.\n"
  example: []
  syntax:
    content: public int CompareTo(LocalDateTime other)
    parameters:
    - id: other
      type: NodaTime.LocalDateTime
      description: The other local date/time to compare with this value.
    return:
      type: System.Int32
      description: >-
        A value less than zero if this date/time is earlier than <code data-dev-comment-type="paramref" class="paramref">other</code>;

        zero if this date/time is the same as <code data-dev-comment-type="paramref" class="paramref">other</code>; a value greater than zero if this date/time is

        later than <code data-dev-comment-type="paramref" class="paramref">other</code>.
    content.vb: Public Function CompareTo(other As LocalDateTime) As Integer
  overload: NodaTime.LocalDateTime.CompareTo*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: >-
      The calendar system of <code data-dev-comment-type="paramref" class="paramref">other</code> is not the

      same as the calendar system of this value.
  implements:
  - System.IComparable{NodaTime.LocalDateTime}.CompareTo(NodaTime.LocalDateTime)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: NodaTime.LocalDateTime.System#IComparable#CompareTo(System.Object)
  commentId: M:NodaTime.LocalDateTime.System#IComparable#CompareTo(System.Object)
  id: System#IComparable#CompareTo(System.Object)
  isEii: true
  parent: NodaTime.LocalDateTime
  langs:
  - csharp
  - vb
  name: IComparable.CompareTo(Object)
  nameWithType: LocalDateTime.IComparable.CompareTo(Object)
  fullName: NodaTime.LocalDateTime.System.IComparable.CompareTo(System.Object)
  type: Method
  source:
    remote:
      path: 2.4.x/src/NodaTime/LocalDateTime.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: System.IComparable.CompareTo
    path: src/NodaTime/LocalDateTime.cs
    startLine: 488
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nImplementation of <xref href=\"System.IComparable.CompareTo(System.Object)\" data-throw-if-not-resolved=\"false\"></xref> to compare two LocalDateTimes.\n"
  remarks: "\nThis uses explicit interface implementation to avoid it being called accidentally. The generic implementation should usually be preferred.\n"
  example: []
  syntax:
    content: int IComparable.CompareTo(object obj)
    parameters:
    - id: obj
      type: System.Object
      description: The object to compare this value with.
    return:
      type: System.Int32
      description: >
        The result of comparing this LocalDateTime with another one; see <xref href="NodaTime.LocalDateTime.CompareTo(NodaTime.LocalDateTime)" data-throw-if-not-resolved="false"></xref> for general details.

        If <code data-dev-comment-type="paramref" class="paramref">obj</code> is null, this method returns a value greater than 0.
    content.vb: Function System.IComparable.CompareTo(obj As Object) As Integer Implements IComparable.CompareTo
  overload: NodaTime.LocalDateTime.System#IComparable#CompareTo*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: >-
      <code data-dev-comment-type="paramref" class="paramref">obj</code> is non-null but does not refer to an instance of <xref href="NodaTime.LocalDateTime" data-throw-if-not-resolved="false"></xref>,
          or refers to a adate/time in a different calendar system.
  implements:
  - System.IComparable.CompareTo(System.Object)
  nameWithType.vb: LocalDateTime.System.IComparable.CompareTo(Object)
  name.vb: System.IComparable.CompareTo(Object)
- uid: NodaTime.LocalDateTime.op_Addition(NodaTime.LocalDateTime,NodaTime.Period)
  commentId: M:NodaTime.LocalDateTime.op_Addition(NodaTime.LocalDateTime,NodaTime.Period)
  id: op_Addition(NodaTime.LocalDateTime,NodaTime.Period)
  parent: NodaTime.LocalDateTime
  langs:
  - csharp
  - vb
  name: Addition(LocalDateTime, Period)
  nameWithType: LocalDateTime.Addition(LocalDateTime, Period)
  fullName: NodaTime.LocalDateTime.Addition(NodaTime.LocalDateTime, NodaTime.Period)
  type: Operator
  source:
    remote:
      path: 2.4.x/src/NodaTime/LocalDateTime.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: op_Addition
    path: src/NodaTime/LocalDateTime.cs
    startLine: 506
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nAdds a period to a local date/time.\nFields are added in descending order of significance (years first, then months, and so on).\nThis is a convenience operator over the <xref href=\"NodaTime.LocalDateTime.Plus(NodaTime.Period)\" data-throw-if-not-resolved=\"false\"></xref> method.\n"
  example: []
  syntax:
    content: public static LocalDateTime operator +(LocalDateTime localDateTime, Period period)
    parameters:
    - id: localDateTime
      type: NodaTime.LocalDateTime
      description: Initial local date and time
    - id: period
      type: NodaTime.Period
      description: Period to add
    return:
      type: NodaTime.LocalDateTime
      description: The resulting local date and time
    content.vb: Public Shared Operator +(localDateTime As LocalDateTime, period As Period) As LocalDateTime
  overload: NodaTime.LocalDateTime.op_Addition*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: NodaTime.LocalDateTime.Add(NodaTime.LocalDateTime,NodaTime.Period)
  commentId: M:NodaTime.LocalDateTime.Add(NodaTime.LocalDateTime,NodaTime.Period)
  id: Add(NodaTime.LocalDateTime,NodaTime.Period)
  parent: NodaTime.LocalDateTime
  langs:
  - csharp
  - vb
  name: Add(LocalDateTime, Period)
  nameWithType: LocalDateTime.Add(LocalDateTime, Period)
  fullName: NodaTime.LocalDateTime.Add(NodaTime.LocalDateTime, NodaTime.Period)
  type: Method
  source:
    remote:
      path: 2.4.x/src/NodaTime/LocalDateTime.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: Add
    path: src/NodaTime/LocalDateTime.cs
    startLine: 516
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nAdd the specified period to the date and time.\nFields are added in descending order of significance (years first, then months, and so on).\nFriendly alternative to <code>operator+()</code>.\n"
  example: []
  syntax:
    content: public static LocalDateTime Add(LocalDateTime localDateTime, Period period)
    parameters:
    - id: localDateTime
      type: NodaTime.LocalDateTime
      description: Initial local date and time
    - id: period
      type: NodaTime.Period
      description: Period to add
    return:
      type: NodaTime.LocalDateTime
      description: The resulting local date and time
    content.vb: Public Shared Function Add(localDateTime As LocalDateTime, period As Period) As LocalDateTime
  overload: NodaTime.LocalDateTime.Add*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: NodaTime.LocalDateTime.Plus(NodaTime.Period)
  commentId: M:NodaTime.LocalDateTime.Plus(NodaTime.Period)
  id: Plus(NodaTime.Period)
  parent: NodaTime.LocalDateTime
  langs:
  - csharp
  - vb
  name: Plus(Period)
  nameWithType: LocalDateTime.Plus(Period)
  fullName: NodaTime.LocalDateTime.Plus(NodaTime.Period)
  type: Method
  source:
    remote:
      path: 2.4.x/src/NodaTime/LocalDateTime.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: Plus
    path: src/NodaTime/LocalDateTime.cs
    startLine: 524
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nAdds a period to this local date/time.\nFields are added in descending order of significance (years first, then months, and so on).\n"
  example: []
  syntax:
    content: public LocalDateTime Plus(Period period)
    parameters:
    - id: period
      type: NodaTime.Period
      description: Period to add
    return:
      type: NodaTime.LocalDateTime
      description: The resulting local date and time
    content.vb: Public Function Plus(period As Period) As LocalDateTime
  overload: NodaTime.LocalDateTime.Plus*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: NodaTime.LocalDateTime.op_Subtraction(NodaTime.LocalDateTime,NodaTime.Period)
  commentId: M:NodaTime.LocalDateTime.op_Subtraction(NodaTime.LocalDateTime,NodaTime.Period)
  id: op_Subtraction(NodaTime.LocalDateTime,NodaTime.Period)
  parent: NodaTime.LocalDateTime
  langs:
  - csharp
  - vb
  name: Subtraction(LocalDateTime, Period)
  nameWithType: LocalDateTime.Subtraction(LocalDateTime, Period)
  fullName: NodaTime.LocalDateTime.Subtraction(NodaTime.LocalDateTime, NodaTime.Period)
  type: Operator
  source:
    remote:
      path: 2.4.x/src/NodaTime/LocalDateTime.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: op_Subtraction
    path: src/NodaTime/LocalDateTime.cs
    startLine: 539
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nSubtracts a period from a local date/time.\nFields are subtracted in descending order of significance (years first, then months, and so on).\nThis is a convenience operator over the <xref href=\"NodaTime.LocalDateTime.Minus(NodaTime.Period)\" data-throw-if-not-resolved=\"false\"></xref> method.\n"
  example: []
  syntax:
    content: public static LocalDateTime operator -(LocalDateTime localDateTime, Period period)
    parameters:
    - id: localDateTime
      type: NodaTime.LocalDateTime
      description: Initial local date and time
    - id: period
      type: NodaTime.Period
      description: Period to subtract
    return:
      type: NodaTime.LocalDateTime
      description: The resulting local date and time
    content.vb: Public Shared Operator -(localDateTime As LocalDateTime, period As Period) As LocalDateTime
  overload: NodaTime.LocalDateTime.op_Subtraction*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: NodaTime.LocalDateTime.Subtract(NodaTime.LocalDateTime,NodaTime.Period)
  commentId: M:NodaTime.LocalDateTime.Subtract(NodaTime.LocalDateTime,NodaTime.Period)
  id: Subtract(NodaTime.LocalDateTime,NodaTime.Period)
  parent: NodaTime.LocalDateTime
  langs:
  - csharp
  - vb
  name: Subtract(LocalDateTime, Period)
  nameWithType: LocalDateTime.Subtract(LocalDateTime, Period)
  fullName: NodaTime.LocalDateTime.Subtract(NodaTime.LocalDateTime, NodaTime.Period)
  type: Method
  source:
    remote:
      path: 2.4.x/src/NodaTime/LocalDateTime.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: Subtract
    path: src/NodaTime/LocalDateTime.cs
    startLine: 547
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nSubtracts the specified period from the date and time. Friendly alternative to <code>operator-()</code>.\n"
  example: []
  syntax:
    content: public static LocalDateTime Subtract(LocalDateTime localDateTime, Period period)
    parameters:
    - id: localDateTime
      type: NodaTime.LocalDateTime
      description: Initial local date and time
    - id: period
      type: NodaTime.Period
      description: Period to subtract
    return:
      type: NodaTime.LocalDateTime
      description: The resulting local date and time
    content.vb: Public Shared Function Subtract(localDateTime As LocalDateTime, period As Period) As LocalDateTime
  overload: NodaTime.LocalDateTime.Subtract*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: NodaTime.LocalDateTime.Minus(NodaTime.Period)
  commentId: M:NodaTime.LocalDateTime.Minus(NodaTime.Period)
  id: Minus(NodaTime.Period)
  parent: NodaTime.LocalDateTime
  langs:
  - csharp
  - vb
  name: Minus(Period)
  nameWithType: LocalDateTime.Minus(Period)
  fullName: NodaTime.LocalDateTime.Minus(NodaTime.Period)
  type: Method
  source:
    remote:
      path: 2.4.x/src/NodaTime/LocalDateTime.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: Minus
    path: src/NodaTime/LocalDateTime.cs
    startLine: 555
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nSubtracts a period from a local date/time.\nFields are subtracted in descending order of significance (years first, then months, and so on).\n"
  example: []
  syntax:
    content: public LocalDateTime Minus(Period period)
    parameters:
    - id: period
      type: NodaTime.Period
      description: Period to subtract
    return:
      type: NodaTime.LocalDateTime
      description: The resulting local date and time
    content.vb: Public Function Minus(period As Period) As LocalDateTime
  overload: NodaTime.LocalDateTime.Minus*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: NodaTime.LocalDateTime.op_Subtraction(NodaTime.LocalDateTime,NodaTime.LocalDateTime)
  commentId: M:NodaTime.LocalDateTime.op_Subtraction(NodaTime.LocalDateTime,NodaTime.LocalDateTime)
  id: op_Subtraction(NodaTime.LocalDateTime,NodaTime.LocalDateTime)
  parent: NodaTime.LocalDateTime
  langs:
  - csharp
  - vb
  name: Subtraction(LocalDateTime, LocalDateTime)
  nameWithType: LocalDateTime.Subtraction(LocalDateTime, LocalDateTime)
  fullName: NodaTime.LocalDateTime.Subtraction(NodaTime.LocalDateTime, NodaTime.LocalDateTime)
  type: Operator
  source:
    remote:
      path: 2.4.x/src/NodaTime/LocalDateTime.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: op_Subtraction
    path: src/NodaTime/LocalDateTime.cs
    startLine: 572
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nSubtracts one date/time from another, returning the result as a <xref href=\"NodaTime.Period\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  remarks: "\nThis is simply a convenience operator for calling <xref href=\"NodaTime.Period.Between(NodaTime.LocalDateTime%2cNodaTime.LocalDateTime)\" data-throw-if-not-resolved=\"false\"></xref>.\nThe calendar systems of the two date/times must be the same.\n"
  example: []
  syntax:
    content: public static Period operator -(LocalDateTime lhs, LocalDateTime rhs)
    parameters:
    - id: lhs
      type: NodaTime.LocalDateTime
      description: The date/time to subtract from
    - id: rhs
      type: NodaTime.LocalDateTime
      description: The date/time to subtract
    return:
      type: NodaTime.Period
      description: The result of subtracting one date/time from another.
    content.vb: Public Shared Operator -(lhs As LocalDateTime, rhs As LocalDateTime) As Period
  overload: NodaTime.LocalDateTime.op_Subtraction*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: NodaTime.LocalDateTime.Subtract(NodaTime.LocalDateTime,NodaTime.LocalDateTime)
  commentId: M:NodaTime.LocalDateTime.Subtract(NodaTime.LocalDateTime,NodaTime.LocalDateTime)
  id: Subtract(NodaTime.LocalDateTime,NodaTime.LocalDateTime)
  parent: NodaTime.LocalDateTime
  langs:
  - csharp
  - vb
  name: Subtract(LocalDateTime, LocalDateTime)
  nameWithType: LocalDateTime.Subtract(LocalDateTime, LocalDateTime)
  fullName: NodaTime.LocalDateTime.Subtract(NodaTime.LocalDateTime, NodaTime.LocalDateTime)
  type: Method
  source:
    remote:
      path: 2.4.x/src/NodaTime/LocalDateTime.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: Subtract
    path: src/NodaTime/LocalDateTime.cs
    startLine: 584
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nSubtracts one date/time from another, returning the result as a <xref href=\"NodaTime.Period\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  remarks: "\nThis is simply a convenience method for calling <xref href=\"NodaTime.Period.Between(NodaTime.LocalDateTime%2cNodaTime.LocalDateTime)\" data-throw-if-not-resolved=\"false\"></xref>.\nThe calendar systems of the two date/times must be the same.\n"
  example: []
  syntax:
    content: public static Period Subtract(LocalDateTime lhs, LocalDateTime rhs)
    parameters:
    - id: lhs
      type: NodaTime.LocalDateTime
      description: The date/time to subtract from
    - id: rhs
      type: NodaTime.LocalDateTime
      description: The date/time to subtract
    return:
      type: NodaTime.Period
      description: The result of subtracting one date/time from another.
    content.vb: Public Shared Function Subtract(lhs As LocalDateTime, rhs As LocalDateTime) As Period
  overload: NodaTime.LocalDateTime.Subtract*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: NodaTime.LocalDateTime.Minus(NodaTime.LocalDateTime)
  commentId: M:NodaTime.LocalDateTime.Minus(NodaTime.LocalDateTime)
  id: Minus(NodaTime.LocalDateTime)
  parent: NodaTime.LocalDateTime
  langs:
  - csharp
  - vb
  name: Minus(LocalDateTime)
  nameWithType: LocalDateTime.Minus(LocalDateTime)
  fullName: NodaTime.LocalDateTime.Minus(NodaTime.LocalDateTime)
  type: Method
  source:
    remote:
      path: 2.4.x/src/NodaTime/LocalDateTime.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: Minus
    path: src/NodaTime/LocalDateTime.cs
    startLine: 593
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nSubtracts the specified date/time from this date/time, returning the result as a <xref href=\"NodaTime.Period\" data-throw-if-not-resolved=\"false\"></xref>.\nFluent alternative to <code>operator-()</code>.\n"
  remarks: The specified date/time must be in the same calendar system as this.
  example: []
  syntax:
    content: public Period Minus(LocalDateTime localDateTime)
    parameters:
    - id: localDateTime
      type: NodaTime.LocalDateTime
      description: The date/time to subtract from this
    return:
      type: NodaTime.Period
      description: The difference between the specified date/time and this one
    content.vb: Public Function Minus(localDateTime As LocalDateTime) As Period
  overload: NodaTime.LocalDateTime.Minus*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: NodaTime.LocalDateTime.Equals(System.Object)
  commentId: M:NodaTime.LocalDateTime.Equals(System.Object)
  id: Equals(System.Object)
  parent: NodaTime.LocalDateTime
  langs:
  - csharp
  - vb
  name: Equals(Object)
  nameWithType: LocalDateTime.Equals(Object)
  fullName: NodaTime.LocalDateTime.Equals(System.Object)
  type: Method
  source:
    remote:
      path: 2.4.x/src/NodaTime/LocalDateTime.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: Equals
    path: src/NodaTime/LocalDateTime.cs
    startLine: 607
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nDetermines whether the specified <xref href=\"System.Object\" data-throw-if-not-resolved=\"false\"></xref> is equal to this instance.\n"
  example: []
  syntax:
    content: public override bool Equals(object obj)
    parameters:
    - id: obj
      type: System.Object
      description: The <xref href="System.Object" data-throw-if-not-resolved="false"></xref> to compare with this instance.
    return:
      type: System.Boolean
      description: "\n<code>true</code> if the specified <xref href=\"System.Object\" data-throw-if-not-resolved=\"false\"></xref> is equal to this instance;\notherwise, <code>false</code>.\n"
    content.vb: Public Overrides Function Equals(obj As Object) As Boolean
  overridden: System.ValueType.Equals(System.Object)
  overload: NodaTime.LocalDateTime.Equals*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: NodaTime.LocalDateTime.GetHashCode
  commentId: M:NodaTime.LocalDateTime.GetHashCode
  id: GetHashCode
  parent: NodaTime.LocalDateTime
  langs:
  - csharp
  - vb
  name: GetHashCode()
  nameWithType: LocalDateTime.GetHashCode()
  fullName: NodaTime.LocalDateTime.GetHashCode()
  type: Method
  source:
    remote:
      path: 2.4.x/src/NodaTime/LocalDateTime.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: GetHashCode
    path: src/NodaTime/LocalDateTime.cs
    startLine: 616
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nReturns a hash code for this instance.\n"
  example: []
  syntax:
    content: public override int GetHashCode()
    return:
      type: System.Int32
      description: "\nA hash code for this instance, suitable for use in hashing algorithms and data\nstructures like a hash table. \n"
    content.vb: Public Overrides Function GetHashCode As Integer
  overridden: System.ValueType.GetHashCode
  overload: NodaTime.LocalDateTime.GetHashCode*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: NodaTime.LocalDateTime.With(System.Func{NodaTime.LocalDate,NodaTime.LocalDate})
  commentId: M:NodaTime.LocalDateTime.With(System.Func{NodaTime.LocalDate,NodaTime.LocalDate})
  id: With(System.Func{NodaTime.LocalDate,NodaTime.LocalDate})
  parent: NodaTime.LocalDateTime
  langs:
  - csharp
  - vb
  name: With(Func<LocalDate, LocalDate>)
  nameWithType: LocalDateTime.With(Func<LocalDate, LocalDate>)
  fullName: NodaTime.LocalDateTime.With(System.Func<NodaTime.LocalDate, NodaTime.LocalDate>)
  type: Method
  source:
    remote:
      path: 2.4.x/src/NodaTime/LocalDateTime.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: With
    path: src/NodaTime/LocalDateTime.cs
    startLine: 628
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nReturns this date/time, with the given date adjuster applied to it, maintaing the existing time of day.\n"
  remarks: "\nIf the adjuster attempts to construct an\ninvalid date (such as by trying to set a day-of-month of 30 in February), any exception thrown by\nthat construction attempt will be propagated through this method.\n"
  example: []
  syntax:
    content: public LocalDateTime With(Func<LocalDate, LocalDate> adjuster)
    parameters:
    - id: adjuster
      type: System.Func{NodaTime.LocalDate,NodaTime.LocalDate}
      description: The adjuster to apply.
    return:
      type: NodaTime.LocalDateTime
      description: The adjusted date/time.
    content.vb: Public Function With(adjuster As Func(Of LocalDate, LocalDate)) As LocalDateTime
  overload: NodaTime.LocalDateTime.With*
  nameWithType.vb: LocalDateTime.With(Func(Of LocalDate, LocalDate))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: NodaTime.LocalDateTime.With(System.Func(Of NodaTime.LocalDate, NodaTime.LocalDate))
  name.vb: With(Func(Of LocalDate, LocalDate))
- uid: NodaTime.LocalDateTime.With(System.Func{NodaTime.LocalTime,NodaTime.LocalTime})
  commentId: M:NodaTime.LocalDateTime.With(System.Func{NodaTime.LocalTime,NodaTime.LocalTime})
  id: With(System.Func{NodaTime.LocalTime,NodaTime.LocalTime})
  parent: NodaTime.LocalDateTime
  langs:
  - csharp
  - vb
  name: With(Func<LocalTime, LocalTime>)
  nameWithType: LocalDateTime.With(Func<LocalTime, LocalTime>)
  fullName: NodaTime.LocalDateTime.With(System.Func<NodaTime.LocalTime, NodaTime.LocalTime>)
  type: Method
  source:
    remote:
      path: 2.4.x/src/NodaTime/LocalDateTime.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: With
    path: src/NodaTime/LocalDateTime.cs
    startLine: 641
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nReturns this date/time, with the given time adjuster applied to it, maintaining the existing date.\n"
  remarks: "\nIf the adjuster attempts to construct an invalid time, any exception thrown by\nthat construction attempt will be propagated through this method.\n"
  example: []
  syntax:
    content: public LocalDateTime With(Func<LocalTime, LocalTime> adjuster)
    parameters:
    - id: adjuster
      type: System.Func{NodaTime.LocalTime,NodaTime.LocalTime}
      description: The adjuster to apply.
    return:
      type: NodaTime.LocalDateTime
      description: The adjusted date/time.
    content.vb: Public Function With(adjuster As Func(Of LocalTime, LocalTime)) As LocalDateTime
  overload: NodaTime.LocalDateTime.With*
  nameWithType.vb: LocalDateTime.With(Func(Of LocalTime, LocalTime))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: NodaTime.LocalDateTime.With(System.Func(Of NodaTime.LocalTime, NodaTime.LocalTime))
  name.vb: With(Func(Of LocalTime, LocalTime))
- uid: NodaTime.LocalDateTime.WithCalendar(NodaTime.CalendarSystem)
  commentId: M:NodaTime.LocalDateTime.WithCalendar(NodaTime.CalendarSystem)
  id: WithCalendar(NodaTime.CalendarSystem)
  parent: NodaTime.LocalDateTime
  langs:
  - csharp
  - vb
  name: WithCalendar(CalendarSystem)
  nameWithType: LocalDateTime.WithCalendar(CalendarSystem)
  fullName: NodaTime.LocalDateTime.WithCalendar(NodaTime.CalendarSystem)
  type: Method
  source:
    remote:
      path: 2.4.x/src/NodaTime/LocalDateTime.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: WithCalendar
    path: src/NodaTime/LocalDateTime.cs
    startLine: 652
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nCreates a new LocalDateTime representing the same physical date and time, but in a different calendar.\nThe returned LocalDateTime is likely to have different date field values to this one.\nFor example, January 1st 1970 in the Gregorian calendar was December 19th 1969 in the Julian calendar.\n"
  example: []
  syntax:
    content: public LocalDateTime WithCalendar(CalendarSystem calendar)
    parameters:
    - id: calendar
      type: NodaTime.CalendarSystem
      description: The calendar system to convert this local date to.
    return:
      type: NodaTime.LocalDateTime
      description: The converted LocalDateTime.
    content.vb: Public Function WithCalendar(calendar As CalendarSystem) As LocalDateTime
  overload: NodaTime.LocalDateTime.WithCalendar*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: NodaTime.LocalDateTime.PlusYears(System.Int32)
  commentId: M:NodaTime.LocalDateTime.PlusYears(System.Int32)
  id: PlusYears(System.Int32)
  parent: NodaTime.LocalDateTime
  langs:
  - csharp
  - vb
  name: PlusYears(Int32)
  nameWithType: LocalDateTime.PlusYears(Int32)
  fullName: NodaTime.LocalDateTime.PlusYears(System.Int32)
  type: Method
  source:
    remote:
      path: 2.4.x/src/NodaTime/LocalDateTime.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: PlusYears
    path: src/NodaTime/LocalDateTime.cs
    startLine: 669
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nReturns a new LocalDateTime representing the current value with the given number of years added.\n"
  remarks: "\nIf the resulting date is invalid, lower fields (typically the day of month) are reduced to find a valid value.\nFor example, adding one year to February 29th 2012 will return February 28th 2013; subtracting one year from\nFebruary 29th 2012 will return February 28th 2011.\n"
  example: []
  syntax:
    content: public LocalDateTime PlusYears(int years)
    parameters:
    - id: years
      type: System.Int32
      description: The number of years to add
    return:
      type: NodaTime.LocalDateTime
      description: The current value plus the given number of years.
    content.vb: Public Function PlusYears(years As Integer) As LocalDateTime
  overload: NodaTime.LocalDateTime.PlusYears*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: NodaTime.LocalDateTime.PlusMonths(System.Int32)
  commentId: M:NodaTime.LocalDateTime.PlusMonths(System.Int32)
  id: PlusMonths(System.Int32)
  parent: NodaTime.LocalDateTime
  langs:
  - csharp
  - vb
  name: PlusMonths(Int32)
  nameWithType: LocalDateTime.PlusMonths(Int32)
  fullName: NodaTime.LocalDateTime.PlusMonths(System.Int32)
  type: Method
  source:
    remote:
      path: 2.4.x/src/NodaTime/LocalDateTime.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: PlusMonths
    path: src/NodaTime/LocalDateTime.cs
    startLine: 688
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nReturns a new LocalDateTime representing the current value with the given number of months added.\n"
  remarks: "\n<p>\nThis method does not try to maintain the year of the current value, so adding four months to a value in \nOctober will result in a value in the following February.\n</p>\n<p>\nIf the resulting date is invalid, the day of month is reduced to find a valid value.\nFor example, adding one month to January 30th 2011 will return February 28th 2011; subtracting one month from\nMarch 30th 2011 will return February 28th 2011.\n</p>\n"
  example: []
  syntax:
    content: public LocalDateTime PlusMonths(int months)
    parameters:
    - id: months
      type: System.Int32
      description: The number of months to add
    return:
      type: NodaTime.LocalDateTime
      description: The current value plus the given number of months.
    content.vb: Public Function PlusMonths(months As Integer) As LocalDateTime
  overload: NodaTime.LocalDateTime.PlusMonths*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: NodaTime.LocalDateTime.PlusDays(System.Int32)
  commentId: M:NodaTime.LocalDateTime.PlusDays(System.Int32)
  id: PlusDays(System.Int32)
  parent: NodaTime.LocalDateTime
  langs:
  - csharp
  - vb
  name: PlusDays(Int32)
  nameWithType: LocalDateTime.PlusDays(Int32)
  fullName: NodaTime.LocalDateTime.PlusDays(System.Int32)
  type: Method
  source:
    remote:
      path: 2.4.x/src/NodaTime/LocalDateTime.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: PlusDays
    path: src/NodaTime/LocalDateTime.cs
    startLine: 702
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nReturns a new LocalDateTime representing the current value with the given number of days added.\n"
  remarks: "\n<p>\nThis method does not try to maintain the month or year of the current value, so adding 3 days to a value on January 30th\nwill result in a value on February 2nd.\n</p>\n"
  example: []
  syntax:
    content: public LocalDateTime PlusDays(int days)
    parameters:
    - id: days
      type: System.Int32
      description: The number of days to add
    return:
      type: NodaTime.LocalDateTime
      description: The current value plus the given number of days.
    content.vb: Public Function PlusDays(days As Integer) As LocalDateTime
  overload: NodaTime.LocalDateTime.PlusDays*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: NodaTime.LocalDateTime.PlusWeeks(System.Int32)
  commentId: M:NodaTime.LocalDateTime.PlusWeeks(System.Int32)
  id: PlusWeeks(System.Int32)
  parent: NodaTime.LocalDateTime
  langs:
  - csharp
  - vb
  name: PlusWeeks(Int32)
  nameWithType: LocalDateTime.PlusWeeks(Int32)
  fullName: NodaTime.LocalDateTime.PlusWeeks(System.Int32)
  type: Method
  source:
    remote:
      path: 2.4.x/src/NodaTime/LocalDateTime.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: PlusWeeks
    path: src/NodaTime/LocalDateTime.cs
    startLine: 710
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nReturns a new LocalDateTime representing the current value with the given number of weeks added.\n"
  example: []
  syntax:
    content: public LocalDateTime PlusWeeks(int weeks)
    parameters:
    - id: weeks
      type: System.Int32
      description: The number of weeks to add
    return:
      type: NodaTime.LocalDateTime
      description: The current value plus the given number of weeks.
    content.vb: Public Function PlusWeeks(weeks As Integer) As LocalDateTime
  overload: NodaTime.LocalDateTime.PlusWeeks*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: NodaTime.LocalDateTime.PlusHours(System.Int64)
  commentId: M:NodaTime.LocalDateTime.PlusHours(System.Int64)
  id: PlusHours(System.Int64)
  parent: NodaTime.LocalDateTime
  langs:
  - csharp
  - vb
  name: PlusHours(Int64)
  nameWithType: LocalDateTime.PlusHours(Int64)
  fullName: NodaTime.LocalDateTime.PlusHours(System.Int64)
  type: Method
  source:
    remote:
      path: 2.4.x/src/NodaTime/LocalDateTime.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: PlusHours
    path: src/NodaTime/LocalDateTime.cs
    startLine: 718
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nReturns a new LocalDateTime representing the current value with the given number of hours added.\n"
  example: []
  syntax:
    content: public LocalDateTime PlusHours(long hours)
    parameters:
    - id: hours
      type: System.Int64
      description: The number of hours to add
    return:
      type: NodaTime.LocalDateTime
      description: The current value plus the given number of hours.
    content.vb: Public Function PlusHours(hours As Long) As LocalDateTime
  overload: NodaTime.LocalDateTime.PlusHours*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: NodaTime.LocalDateTime.PlusMinutes(System.Int64)
  commentId: M:NodaTime.LocalDateTime.PlusMinutes(System.Int64)
  id: PlusMinutes(System.Int64)
  parent: NodaTime.LocalDateTime
  langs:
  - csharp
  - vb
  name: PlusMinutes(Int64)
  nameWithType: LocalDateTime.PlusMinutes(Int64)
  fullName: NodaTime.LocalDateTime.PlusMinutes(System.Int64)
  type: Method
  source:
    remote:
      path: 2.4.x/src/NodaTime/LocalDateTime.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: PlusMinutes
    path: src/NodaTime/LocalDateTime.cs
    startLine: 726
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nReturns a new LocalDateTime representing the current value with the given number of minutes added.\n"
  example: []
  syntax:
    content: public LocalDateTime PlusMinutes(long minutes)
    parameters:
    - id: minutes
      type: System.Int64
      description: The number of minutes to add
    return:
      type: NodaTime.LocalDateTime
      description: The current value plus the given number of minutes.
    content.vb: Public Function PlusMinutes(minutes As Long) As LocalDateTime
  overload: NodaTime.LocalDateTime.PlusMinutes*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: NodaTime.LocalDateTime.PlusSeconds(System.Int64)
  commentId: M:NodaTime.LocalDateTime.PlusSeconds(System.Int64)
  id: PlusSeconds(System.Int64)
  parent: NodaTime.LocalDateTime
  langs:
  - csharp
  - vb
  name: PlusSeconds(Int64)
  nameWithType: LocalDateTime.PlusSeconds(Int64)
  fullName: NodaTime.LocalDateTime.PlusSeconds(System.Int64)
  type: Method
  source:
    remote:
      path: 2.4.x/src/NodaTime/LocalDateTime.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: PlusSeconds
    path: src/NodaTime/LocalDateTime.cs
    startLine: 734
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nReturns a new LocalDateTime representing the current value with the given number of seconds added.\n"
  example: []
  syntax:
    content: public LocalDateTime PlusSeconds(long seconds)
    parameters:
    - id: seconds
      type: System.Int64
      description: The number of seconds to add
    return:
      type: NodaTime.LocalDateTime
      description: The current value plus the given number of seconds.
    content.vb: Public Function PlusSeconds(seconds As Long) As LocalDateTime
  overload: NodaTime.LocalDateTime.PlusSeconds*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: NodaTime.LocalDateTime.PlusMilliseconds(System.Int64)
  commentId: M:NodaTime.LocalDateTime.PlusMilliseconds(System.Int64)
  id: PlusMilliseconds(System.Int64)
  parent: NodaTime.LocalDateTime
  langs:
  - csharp
  - vb
  name: PlusMilliseconds(Int64)
  nameWithType: LocalDateTime.PlusMilliseconds(Int64)
  fullName: NodaTime.LocalDateTime.PlusMilliseconds(System.Int64)
  type: Method
  source:
    remote:
      path: 2.4.x/src/NodaTime/LocalDateTime.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: PlusMilliseconds
    path: src/NodaTime/LocalDateTime.cs
    startLine: 742
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nReturns a new LocalDateTime representing the current value with the given number of milliseconds added.\n"
  example: []
  syntax:
    content: public LocalDateTime PlusMilliseconds(long milliseconds)
    parameters:
    - id: milliseconds
      type: System.Int64
      description: The number of milliseconds to add
    return:
      type: NodaTime.LocalDateTime
      description: The current value plus the given number of milliseconds.
    content.vb: Public Function PlusMilliseconds(milliseconds As Long) As LocalDateTime
  overload: NodaTime.LocalDateTime.PlusMilliseconds*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: NodaTime.LocalDateTime.PlusTicks(System.Int64)
  commentId: M:NodaTime.LocalDateTime.PlusTicks(System.Int64)
  id: PlusTicks(System.Int64)
  parent: NodaTime.LocalDateTime
  langs:
  - csharp
  - vb
  name: PlusTicks(Int64)
  nameWithType: LocalDateTime.PlusTicks(Int64)
  fullName: NodaTime.LocalDateTime.PlusTicks(System.Int64)
  type: Method
  source:
    remote:
      path: 2.4.x/src/NodaTime/LocalDateTime.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: PlusTicks
    path: src/NodaTime/LocalDateTime.cs
    startLine: 751
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nReturns a new LocalDateTime representing the current value with the given number of ticks added.\n"
  example: []
  syntax:
    content: public LocalDateTime PlusTicks(long ticks)
    parameters:
    - id: ticks
      type: System.Int64
      description: The number of ticks to add
    return:
      type: NodaTime.LocalDateTime
      description: The current value plus the given number of ticks.
    content.vb: Public Function PlusTicks(ticks As Long) As LocalDateTime
  overload: NodaTime.LocalDateTime.PlusTicks*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: NodaTime.LocalDateTime.PlusNanoseconds(System.Int64)
  commentId: M:NodaTime.LocalDateTime.PlusNanoseconds(System.Int64)
  id: PlusNanoseconds(System.Int64)
  parent: NodaTime.LocalDateTime
  langs:
  - csharp
  - vb
  name: PlusNanoseconds(Int64)
  nameWithType: LocalDateTime.PlusNanoseconds(Int64)
  fullName: NodaTime.LocalDateTime.PlusNanoseconds(System.Int64)
  type: Method
  source:
    remote:
      path: 2.4.x/src/NodaTime/LocalDateTime.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: PlusNanoseconds
    path: src/NodaTime/LocalDateTime.cs
    startLine: 759
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nReturns a new LocalDateTime representing the current value with the given number of nanoseconds added.\n"
  example: []
  syntax:
    content: public LocalDateTime PlusNanoseconds(long nanoseconds)
    parameters:
    - id: nanoseconds
      type: System.Int64
      description: The number of nanoseconds to add
    return:
      type: NodaTime.LocalDateTime
      description: The current value plus the given number of nanoseconds.
    content.vb: Public Function PlusNanoseconds(nanoseconds As Long) As LocalDateTime
  overload: NodaTime.LocalDateTime.PlusNanoseconds*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: NodaTime.LocalDateTime.Next(NodaTime.IsoDayOfWeek)
  commentId: M:NodaTime.LocalDateTime.Next(NodaTime.IsoDayOfWeek)
  id: Next(NodaTime.IsoDayOfWeek)
  parent: NodaTime.LocalDateTime
  langs:
  - csharp
  - vb
  name: Next(IsoDayOfWeek)
  nameWithType: LocalDateTime.Next(IsoDayOfWeek)
  fullName: NodaTime.LocalDateTime.Next(NodaTime.IsoDayOfWeek)
  type: Method
  source:
    remote:
      path: 2.4.x/src/NodaTime/LocalDateTime.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: Next
    path: src/NodaTime/LocalDateTime.cs
    startLine: 773
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nReturns the next <xref href=\"NodaTime.LocalDateTime\" data-throw-if-not-resolved=\"false\"></xref> falling on the specified <xref href=\"NodaTime.IsoDayOfWeek\" data-throw-if-not-resolved=\"false\"></xref>,\nat the same time of day as this value.\nThis is a strict &quot;next&quot; - if this value on already falls on the target\nday of the week, the returned value will be a week later.\n"
  example: []
  syntax:
    content: public LocalDateTime Next(IsoDayOfWeek targetDayOfWeek)
    parameters:
    - id: targetDayOfWeek
      type: NodaTime.IsoDayOfWeek
      description: The ISO day of the week to return the next date of.
    return:
      type: NodaTime.LocalDateTime
      description: The next <xref href="NodaTime.LocalDateTime" data-throw-if-not-resolved="false"></xref> falling on the specified day of the week.
    content.vb: Public Function Next(targetDayOfWeek As IsoDayOfWeek) As LocalDateTime
  overload: NodaTime.LocalDateTime.Next*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: The underlying calendar doesn&apos;t use ISO days of the week.
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: >-
      <code data-dev-comment-type="paramref" class="paramref">targetDayOfWeek</code> is not a valid day of the
          week (Monday to Sunday).
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: NodaTime.LocalDateTime.Previous(NodaTime.IsoDayOfWeek)
  commentId: M:NodaTime.LocalDateTime.Previous(NodaTime.IsoDayOfWeek)
  id: Previous(NodaTime.IsoDayOfWeek)
  parent: NodaTime.LocalDateTime
  langs:
  - csharp
  - vb
  name: Previous(IsoDayOfWeek)
  nameWithType: LocalDateTime.Previous(IsoDayOfWeek)
  fullName: NodaTime.LocalDateTime.Previous(NodaTime.IsoDayOfWeek)
  type: Method
  source:
    remote:
      path: 2.4.x/src/NodaTime/LocalDateTime.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: Previous
    path: src/NodaTime/LocalDateTime.cs
    startLine: 787
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nReturns the previous <xref href=\"NodaTime.LocalDateTime\" data-throw-if-not-resolved=\"false\"></xref> falling on the specified <xref href=\"NodaTime.IsoDayOfWeek\" data-throw-if-not-resolved=\"false\"></xref>,\nat the same time of day as this value.\nThis is a strict &quot;previous&quot; - if this value on already falls on the target\nday of the week, the returned value will be a week earlier.\n"
  example: []
  syntax:
    content: public LocalDateTime Previous(IsoDayOfWeek targetDayOfWeek)
    parameters:
    - id: targetDayOfWeek
      type: NodaTime.IsoDayOfWeek
      description: The ISO day of the week to return the previous date of.
    return:
      type: NodaTime.LocalDateTime
      description: The previous <xref href="NodaTime.LocalDateTime" data-throw-if-not-resolved="false"></xref> falling on the specified day of the week.
    content.vb: Public Function Previous(targetDayOfWeek As IsoDayOfWeek) As LocalDateTime
  overload: NodaTime.LocalDateTime.Previous*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: The underlying calendar doesn&apos;t use ISO days of the week.
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: >-
      <code data-dev-comment-type="paramref" class="paramref">targetDayOfWeek</code> is not a valid day of the
          week (Monday to Sunday).
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: NodaTime.LocalDateTime.WithOffset(NodaTime.Offset)
  commentId: M:NodaTime.LocalDateTime.WithOffset(NodaTime.Offset)
  id: WithOffset(NodaTime.Offset)
  parent: NodaTime.LocalDateTime
  langs:
  - csharp
  - vb
  name: WithOffset(Offset)
  nameWithType: LocalDateTime.WithOffset(Offset)
  fullName: NodaTime.LocalDateTime.WithOffset(NodaTime.Offset)
  type: Method
  source:
    remote:
      path: 2.4.x/src/NodaTime/LocalDateTime.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: WithOffset
    path: src/NodaTime/LocalDateTime.cs
    startLine: 796
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nReturns an <xref href=\"NodaTime.OffsetDateTime\" data-throw-if-not-resolved=\"false\"></xref> for this local date/time with the given offset.\n"
  remarks: This method is purely a convenient alternative to calling the <xref href="NodaTime.OffsetDateTime" data-throw-if-not-resolved="false"></xref> constructor directly.
  example: []
  syntax:
    content: public OffsetDateTime WithOffset(Offset offset)
    parameters:
    - id: offset
      type: NodaTime.Offset
      description: The offset to apply.
    return:
      type: NodaTime.OffsetDateTime
      description: The result of this local date/time offset by the given amount.
    content.vb: Public Function WithOffset(offset As Offset) As OffsetDateTime
  overload: NodaTime.LocalDateTime.WithOffset*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: NodaTime.LocalDateTime.InUtc
  commentId: M:NodaTime.LocalDateTime.InUtc
  id: InUtc
  parent: NodaTime.LocalDateTime
  langs:
  - csharp
  - vb
  name: InUtc()
  nameWithType: LocalDateTime.InUtc()
  fullName: NodaTime.LocalDateTime.InUtc()
  type: Method
  source:
    remote:
      path: 2.4.x/src/NodaTime/LocalDateTime.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: InUtc
    path: src/NodaTime/LocalDateTime.cs
    startLine: 804
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nReturns the mapping of this local date/time within <xref href=\"NodaTime.DateTimeZone.Utc\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  remarks: As UTC is a fixed time zone, there is no chance that this local date/time is ambiguous or skipped.
  example: []
  syntax:
    content: public ZonedDateTime InUtc()
    return:
      type: NodaTime.ZonedDateTime
      description: The result of mapping this local date/time in UTC.
    content.vb: Public Function InUtc As ZonedDateTime
  overload: NodaTime.LocalDateTime.InUtc*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: NodaTime.LocalDateTime.InZoneStrictly(NodaTime.DateTimeZone)
  commentId: M:NodaTime.LocalDateTime.InZoneStrictly(NodaTime.DateTimeZone)
  id: InZoneStrictly(NodaTime.DateTimeZone)
  parent: NodaTime.LocalDateTime
  langs:
  - csharp
  - vb
  name: InZoneStrictly(DateTimeZone)
  nameWithType: LocalDateTime.InZoneStrictly(DateTimeZone)
  fullName: NodaTime.LocalDateTime.InZoneStrictly(NodaTime.DateTimeZone)
  type: Method
  source:
    remote:
      path: 2.4.x/src/NodaTime/LocalDateTime.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: InZoneStrictly
    path: src/NodaTime/LocalDateTime.cs
    startLine: 823
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nReturns the mapping of this local date/time within the given <xref href=\"NodaTime.DateTimeZone\" data-throw-if-not-resolved=\"false\"></xref>,\nwith &quot;strict&quot; rules applied such that an exception is thrown if either the mapping is\nambiguous or the time is skipped.\n"
  remarks: "\nSee <xref href=\"NodaTime.LocalDateTime.InZoneLeniently(NodaTime.DateTimeZone)\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"NodaTime.LocalDateTime.InZone(NodaTime.DateTimeZone%2cNodaTime.TimeZones.ZoneLocalMappingResolver)\" data-throw-if-not-resolved=\"false\"></xref> for alternative ways to map a local time to a\nspecific instant.\nThis is solely a convenience method for calling <xref href=\"NodaTime.DateTimeZone.AtStrictly(NodaTime.LocalDateTime)\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public ZonedDateTime InZoneStrictly(DateTimeZone zone)
    parameters:
    - id: zone
      type: NodaTime.DateTimeZone
      description: The time zone in which to map this local date/time.
    return:
      type: NodaTime.ZonedDateTime
      description: The result of mapping this local date/time in the given time zone.
    content.vb: Public Function InZoneStrictly(zone As DateTimeZone) As ZonedDateTime
  overload: NodaTime.LocalDateTime.InZoneStrictly*
  exceptions:
  - type: NodaTime.SkippedTimeException
    commentId: T:NodaTime.SkippedTimeException
    description: This local date/time is skipped in the given time zone.
  - type: NodaTime.AmbiguousTimeException
    commentId: T:NodaTime.AmbiguousTimeException
    description: This local date/time is ambiguous in the given time zone.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: NodaTime.LocalDateTime.InZoneLeniently(NodaTime.DateTimeZone)
  commentId: M:NodaTime.LocalDateTime.InZoneLeniently(NodaTime.DateTimeZone)
  id: InZoneLeniently(NodaTime.DateTimeZone)
  parent: NodaTime.LocalDateTime
  langs:
  - csharp
  - vb
  name: InZoneLeniently(DateTimeZone)
  nameWithType: LocalDateTime.InZoneLeniently(DateTimeZone)
  fullName: NodaTime.LocalDateTime.InZoneLeniently(NodaTime.DateTimeZone)
  type: Method
  source:
    remote:
      path: 2.4.x/src/NodaTime/LocalDateTime.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: InZoneLeniently
    path: src/NodaTime/LocalDateTime.cs
    startLine: 847
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nReturns the mapping of this local date/time within the given <xref href=\"NodaTime.DateTimeZone\" data-throw-if-not-resolved=\"false\"></xref>,\nwith &quot;lenient&quot; rules applied such that ambiguous values map to the earlier of the alternatives, and\n&quot;skipped&quot; values are shifted forward by the duration of the &quot;gap&quot;.\n"
  remarks: "\nSee <xref href=\"NodaTime.LocalDateTime.InZoneStrictly(NodaTime.DateTimeZone)\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"NodaTime.LocalDateTime.InZone(NodaTime.DateTimeZone%2cNodaTime.TimeZones.ZoneLocalMappingResolver)\" data-throw-if-not-resolved=\"false\"></xref> for alternative ways to map a local time to a\nspecific instant.\nThis is solely a convenience method for calling <xref href=\"NodaTime.DateTimeZone.AtLeniently(NodaTime.LocalDateTime)\" data-throw-if-not-resolved=\"false\"></xref>.\n<p>Note: The behavior of this method was changed in version 2.0 to fit the most commonly seen real-world\nusage pattern.  Previous versions returned the later instance of ambiguous values, and returned the start of\nthe zone interval after the gap for skipped value.  The previous functionality can still be used if desired,\nby using <xref href=\"NodaTime.LocalDateTime.InZone(NodaTime.DateTimeZone%2cNodaTime.TimeZones.ZoneLocalMappingResolver)\" data-throw-if-not-resolved=\"false\"></xref> and passing a resolver that combines the\n<xref href=\"NodaTime.TimeZones.Resolvers.ReturnLater\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"NodaTime.TimeZones.Resolvers.ReturnStartOfIntervalAfter\" data-throw-if-not-resolved=\"false\"></xref> resolvers.</p>\n"
  example: []
  syntax:
    content: public ZonedDateTime InZoneLeniently(DateTimeZone zone)
    parameters:
    - id: zone
      type: NodaTime.DateTimeZone
      description: The time zone in which to map this local date/time.
    return:
      type: NodaTime.ZonedDateTime
      description: The result of mapping this local date/time in the given time zone.
    content.vb: Public Function InZoneLeniently(zone As DateTimeZone) As ZonedDateTime
  overload: NodaTime.LocalDateTime.InZoneLeniently*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: NodaTime.LocalDateTime.InZone(NodaTime.DateTimeZone,NodaTime.TimeZones.ZoneLocalMappingResolver)
  commentId: M:NodaTime.LocalDateTime.InZone(NodaTime.DateTimeZone,NodaTime.TimeZones.ZoneLocalMappingResolver)
  id: InZone(NodaTime.DateTimeZone,NodaTime.TimeZones.ZoneLocalMappingResolver)
  parent: NodaTime.LocalDateTime
  langs:
  - csharp
  - vb
  name: InZone(DateTimeZone, ZoneLocalMappingResolver)
  nameWithType: LocalDateTime.InZone(DateTimeZone, ZoneLocalMappingResolver)
  fullName: NodaTime.LocalDateTime.InZone(NodaTime.DateTimeZone, NodaTime.TimeZones.ZoneLocalMappingResolver)
  type: Method
  source:
    remote:
      path: 2.4.x/src/NodaTime/LocalDateTime.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: InZone
    path: src/NodaTime/LocalDateTime.cs
    startLine: 866
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nResolves this local date and time into a <xref href=\"NodaTime.ZonedDateTime\" data-throw-if-not-resolved=\"false\"></xref> in the given time zone, following\nthe given <xref href=\"NodaTime.TimeZones.ZoneLocalMappingResolver\" data-throw-if-not-resolved=\"false\"></xref> to handle ambiguity and skipped times.\n"
  remarks: "\nSee <xref href=\"NodaTime.LocalDateTime.InZoneStrictly(NodaTime.DateTimeZone)\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"NodaTime.LocalDateTime.InZoneLeniently(NodaTime.DateTimeZone)\" data-throw-if-not-resolved=\"false\"></xref> for alternative ways to map a local time\nto a specific instant.\nThis is a convenience method for calling <xref href=\"NodaTime.DateTimeZone.ResolveLocal(NodaTime.LocalDateTime%2cNodaTime.TimeZones.ZoneLocalMappingResolver)\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public ZonedDateTime InZone(DateTimeZone zone, ZoneLocalMappingResolver resolver)
    parameters:
    - id: zone
      type: NodaTime.DateTimeZone
      description: The time zone to map this local date and time into
    - id: resolver
      type: NodaTime.TimeZones.ZoneLocalMappingResolver
      description: The resolver to apply to the mapping.
    return:
      type: NodaTime.ZonedDateTime
      description: The result of resolving the mapping.
    content.vb: Public Function InZone(zone As DateTimeZone, resolver As ZoneLocalMappingResolver) As ZonedDateTime
  overload: NodaTime.LocalDateTime.InZone*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: NodaTime.LocalDateTime.Deconstruct(NodaTime.LocalDate@,NodaTime.LocalTime@)
  commentId: M:NodaTime.LocalDateTime.Deconstruct(NodaTime.LocalDate@,NodaTime.LocalTime@)
  id: Deconstruct(NodaTime.LocalDate@,NodaTime.LocalTime@)
  parent: NodaTime.LocalDateTime
  langs:
  - csharp
  - vb
  name: Deconstruct(out LocalDate, out LocalTime)
  nameWithType: LocalDateTime.Deconstruct(out LocalDate, out LocalTime)
  fullName: NodaTime.LocalDateTime.Deconstruct(out NodaTime.LocalDate, out NodaTime.LocalTime)
  type: Method
  source:
    remote:
      path: 2.4.x/src/NodaTime/LocalDateTime.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: Deconstruct
    path: src/NodaTime/LocalDateTime.cs
    startLine: 879
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nDeconstruct this <xref href=\"NodaTime.LocalDateTime\" data-throw-if-not-resolved=\"false\"></xref> into its components.\n"
  example: []
  syntax:
    content: public void Deconstruct(out LocalDate date, out LocalTime time)
    parameters:
    - id: date
      type: NodaTime.LocalDate
      description: The date portion of the value.
    - id: time
      type: NodaTime.LocalTime
      description: The time portion of the value.
    content.vb: Public Sub Deconstruct(ByRef date As LocalDate, ByRef time As LocalTime)
  overload: NodaTime.LocalDateTime.Deconstruct*
  nameWithType.vb: LocalDateTime.Deconstruct(ByRef LocalDate, ByRef LocalTime)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: NodaTime.LocalDateTime.Deconstruct(ByRef NodaTime.LocalDate, ByRef NodaTime.LocalTime)
  name.vb: Deconstruct(ByRef LocalDate, ByRef LocalTime)
- uid: NodaTime.LocalDateTime.Max(NodaTime.LocalDateTime,NodaTime.LocalDateTime)
  commentId: M:NodaTime.LocalDateTime.Max(NodaTime.LocalDateTime,NodaTime.LocalDateTime)
  id: Max(NodaTime.LocalDateTime,NodaTime.LocalDateTime)
  parent: NodaTime.LocalDateTime
  langs:
  - csharp
  - vb
  name: Max(LocalDateTime, LocalDateTime)
  nameWithType: LocalDateTime.Max(LocalDateTime, LocalDateTime)
  fullName: NodaTime.LocalDateTime.Max(NodaTime.LocalDateTime, NodaTime.LocalDateTime)
  type: Method
  source:
    remote:
      path: 2.4.x/src/NodaTime/LocalDateTime.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: Max
    path: src/NodaTime/LocalDateTime.cs
    startLine: 893
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nReturns the later date/time of the given two.\n"
  example: []
  syntax:
    content: public static LocalDateTime Max(LocalDateTime x, LocalDateTime y)
    parameters:
    - id: x
      type: NodaTime.LocalDateTime
      description: The first date/time to compare.
    - id: y
      type: NodaTime.LocalDateTime
      description: The second date/time to compare.
    return:
      type: NodaTime.LocalDateTime
      description: The later date/time of <code data-dev-comment-type="paramref" class="paramref">x</code> or <code data-dev-comment-type="paramref" class="paramref">y</code>.
    content.vb: Public Shared Function Max(x As LocalDateTime, y As LocalDateTime) As LocalDateTime
  overload: NodaTime.LocalDateTime.Max*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: The two date/times have different calendar systems.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: NodaTime.LocalDateTime.Min(NodaTime.LocalDateTime,NodaTime.LocalDateTime)
  commentId: M:NodaTime.LocalDateTime.Min(NodaTime.LocalDateTime,NodaTime.LocalDateTime)
  id: Min(NodaTime.LocalDateTime,NodaTime.LocalDateTime)
  parent: NodaTime.LocalDateTime
  langs:
  - csharp
  - vb
  name: Min(LocalDateTime, LocalDateTime)
  nameWithType: LocalDateTime.Min(LocalDateTime, LocalDateTime)
  fullName: NodaTime.LocalDateTime.Min(NodaTime.LocalDateTime, NodaTime.LocalDateTime)
  type: Method
  source:
    remote:
      path: 2.4.x/src/NodaTime/LocalDateTime.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: Min
    path: src/NodaTime/LocalDateTime.cs
    startLine: 906
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nReturns the earlier date/time of the given two.\n"
  example: []
  syntax:
    content: public static LocalDateTime Min(LocalDateTime x, LocalDateTime y)
    parameters:
    - id: x
      type: NodaTime.LocalDateTime
      description: The first date/time to compare.
    - id: y
      type: NodaTime.LocalDateTime
      description: The second date/time to compare.
    return:
      type: NodaTime.LocalDateTime
      description: The earlier date/time of <code data-dev-comment-type="paramref" class="paramref">x</code> or <code data-dev-comment-type="paramref" class="paramref">y</code>.
    content.vb: Public Shared Function Min(x As LocalDateTime, y As LocalDateTime) As LocalDateTime
  overload: NodaTime.LocalDateTime.Min*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: The two date/times have different calendar systems.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: NodaTime.LocalDateTime.ToString
  commentId: M:NodaTime.LocalDateTime.ToString
  id: ToString
  parent: NodaTime.LocalDateTime
  langs:
  - csharp
  - vb
  name: ToString()
  nameWithType: LocalDateTime.ToString()
  fullName: NodaTime.LocalDateTime.ToString()
  type: Method
  source:
    remote:
      path: 2.4.x/src/NodaTime/LocalDateTime.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: ToString
    path: src/NodaTime/LocalDateTime.cs
    startLine: 920
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nReturns a <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref> that represents this instance.\n"
  example: []
  syntax:
    content: public override string ToString()
    return:
      type: System.String
      description: "\nThe value of the current instance in the default format pattern (&quot;G&quot;), using the current thread&apos;s\nculture to obtain a format provider.\n"
    content.vb: Public Overrides Function ToString As String
  overridden: System.ValueType.ToString
  overload: NodaTime.LocalDateTime.ToString*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: NodaTime.LocalDateTime.ToString(System.String,System.IFormatProvider)
  commentId: M:NodaTime.LocalDateTime.ToString(System.String,System.IFormatProvider)
  id: ToString(System.String,System.IFormatProvider)
  parent: NodaTime.LocalDateTime
  langs:
  - csharp
  - vb
  name: ToString(String, IFormatProvider)
  nameWithType: LocalDateTime.ToString(String, IFormatProvider)
  fullName: NodaTime.LocalDateTime.ToString(System.String, System.IFormatProvider)
  type: Method
  source:
    remote:
      path: 2.4.x/src/NodaTime/LocalDateTime.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: ToString
    path: src/NodaTime/LocalDateTime.cs
    startLine: 936
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nFormats the value of the current instance using the specified pattern.\n"
  example: []
  syntax:
    content: public string ToString(string patternText, IFormatProvider formatProvider)
    parameters:
    - id: patternText
      type: System.String
      description: >
        The <xref href="System.String" data-throw-if-not-resolved="false"></xref> specifying the pattern to use,

        or null to use the default format pattern (&quot;G&quot;).
    - id: formatProvider
      type: System.IFormatProvider
      description: >
        The <xref href="System.IFormatProvider" data-throw-if-not-resolved="false"></xref> to use when formatting the value,

        or null to use the current thread&apos;s culture to obtain a format provider.
    return:
      type: System.String
      description: "\nA <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref> containing the value of the current instance in the specified format.\n"
    content.vb: Public Function ToString(patternText As String, formatProvider As IFormatProvider) As String
  overload: NodaTime.LocalDateTime.ToString*
  implements:
  - System.IFormattable.ToString(System.String,System.IFormatProvider)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: NodaTime.LocalDateTime.System#Xml#Serialization#IXmlSerializable#GetSchema
  commentId: M:NodaTime.LocalDateTime.System#Xml#Serialization#IXmlSerializable#GetSchema
  id: System#Xml#Serialization#IXmlSerializable#GetSchema
  isEii: true
  parent: NodaTime.LocalDateTime
  langs:
  - csharp
  - vb
  name: IXmlSerializable.GetSchema()
  nameWithType: LocalDateTime.IXmlSerializable.GetSchema()
  fullName: NodaTime.LocalDateTime.System.Xml.Serialization.IXmlSerializable.GetSchema()
  type: Method
  source:
    remote:
      path: 2.4.x/src/NodaTime/LocalDateTime.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: System.Xml.Serialization.IXmlSerializable.GetSchema
    path: src/NodaTime/LocalDateTime.cs
    startLine: 942
  assemblies:
  - NodaTime
  namespace: NodaTime
  example: []
  syntax:
    content: XmlSchema IXmlSerializable.GetSchema()
    return:
      type: System.Xml.Schema.XmlSchema
    content.vb: Function System.Xml.Serialization.IXmlSerializable.GetSchema As XmlSchema Implements IXmlSerializable.GetSchema
  overload: NodaTime.LocalDateTime.System#Xml#Serialization#IXmlSerializable#GetSchema*
  implements:
  - System.Xml.Serialization.IXmlSerializable.GetSchema
  nameWithType.vb: LocalDateTime.System.Xml.Serialization.IXmlSerializable.GetSchema()
  name.vb: System.Xml.Serialization.IXmlSerializable.GetSchema()
- uid: NodaTime.LocalDateTime.System#Xml#Serialization#IXmlSerializable#ReadXml(System.Xml.XmlReader)
  commentId: M:NodaTime.LocalDateTime.System#Xml#Serialization#IXmlSerializable#ReadXml(System.Xml.XmlReader)
  id: System#Xml#Serialization#IXmlSerializable#ReadXml(System.Xml.XmlReader)
  isEii: true
  parent: NodaTime.LocalDateTime
  langs:
  - csharp
  - vb
  name: IXmlSerializable.ReadXml(XmlReader)
  nameWithType: LocalDateTime.IXmlSerializable.ReadXml(XmlReader)
  fullName: NodaTime.LocalDateTime.System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)
  type: Method
  source:
    remote:
      path: 2.4.x/src/NodaTime/LocalDateTime.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: System.Xml.Serialization.IXmlSerializable.ReadXml
    path: src/NodaTime/LocalDateTime.cs
    startLine: 945
  assemblies:
  - NodaTime
  namespace: NodaTime
  example: []
  syntax:
    content: void IXmlSerializable.ReadXml(XmlReader reader)
    parameters:
    - id: reader
      type: System.Xml.XmlReader
    content.vb: Sub System.Xml.Serialization.IXmlSerializable.ReadXml(reader As XmlReader) Implements IXmlSerializable.ReadXml
  overload: NodaTime.LocalDateTime.System#Xml#Serialization#IXmlSerializable#ReadXml*
  implements:
  - System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)
  nameWithType.vb: LocalDateTime.System.Xml.Serialization.IXmlSerializable.ReadXml(XmlReader)
  name.vb: System.Xml.Serialization.IXmlSerializable.ReadXml(XmlReader)
- uid: NodaTime.LocalDateTime.System#Xml#Serialization#IXmlSerializable#WriteXml(System.Xml.XmlWriter)
  commentId: M:NodaTime.LocalDateTime.System#Xml#Serialization#IXmlSerializable#WriteXml(System.Xml.XmlWriter)
  id: System#Xml#Serialization#IXmlSerializable#WriteXml(System.Xml.XmlWriter)
  isEii: true
  parent: NodaTime.LocalDateTime
  langs:
  - csharp
  - vb
  name: IXmlSerializable.WriteXml(XmlWriter)
  nameWithType: LocalDateTime.IXmlSerializable.WriteXml(XmlWriter)
  fullName: NodaTime.LocalDateTime.System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)
  type: Method
  source:
    remote:
      path: 2.4.x/src/NodaTime/LocalDateTime.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: System.Xml.Serialization.IXmlSerializable.WriteXml
    path: src/NodaTime/LocalDateTime.cs
    startLine: 962
  assemblies:
  - NodaTime
  namespace: NodaTime
  example: []
  syntax:
    content: void IXmlSerializable.WriteXml(XmlWriter writer)
    parameters:
    - id: writer
      type: System.Xml.XmlWriter
    content.vb: Sub System.Xml.Serialization.IXmlSerializable.WriteXml(writer As XmlWriter) Implements IXmlSerializable.WriteXml
  overload: NodaTime.LocalDateTime.System#Xml#Serialization#IXmlSerializable#WriteXml*
  implements:
  - System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)
  nameWithType.vb: LocalDateTime.System.Xml.Serialization.IXmlSerializable.WriteXml(XmlWriter)
  name.vb: System.Xml.Serialization.IXmlSerializable.WriteXml(XmlWriter)
- uid: NodaTime.LocalDateTime.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  commentId: M:NodaTime.LocalDateTime.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  id: System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  isEii: true
  parent: NodaTime.LocalDateTime
  langs:
  - csharp
  - vb
  name: ISerializable.GetObjectData(SerializationInfo, StreamingContext)
  nameWithType: LocalDateTime.ISerializable.GetObjectData(SerializationInfo, StreamingContext)
  fullName: NodaTime.LocalDateTime.System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext)
  type: Method
  source:
    remote:
      path: 2.4.x/src/NodaTime/LocalDateTime.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: System.Runtime.Serialization.ISerializable.GetObjectData
    path: src/NodaTime/LocalDateTime.cs
    startLine: 1000
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nImplementation of <xref href=\"System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo%2cSystem.Runtime.Serialization.StreamingContext)\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: >-
      [SecurityCritical]

      void ISerializable.GetObjectData(SerializationInfo info, StreamingContext context)
    parameters:
    - id: info
      type: System.Runtime.Serialization.SerializationInfo
      description: The <xref href="System.Runtime.Serialization.SerializationInfo" data-throw-if-not-resolved="false"></xref> to populate with data.
    - id: context
      type: System.Runtime.Serialization.StreamingContext
      description: The destination for this serialization.
    content.vb: >-
      <SecurityCritical>

      Sub System.Runtime.Serialization.ISerializable.GetObjectData(info As SerializationInfo, context As StreamingContext) Implements ISerializable.GetObjectData
  overload: NodaTime.LocalDateTime.System#Runtime#Serialization#ISerializable#GetObjectData*
  implements:
  - System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  attributes:
  - type: System.Security.SecurityCriticalAttribute
    ctor: System.Security.SecurityCriticalAttribute.#ctor
    arguments: []
  nameWithType.vb: LocalDateTime.System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo, StreamingContext)
  name.vb: System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo, StreamingContext)
references:
- uid: NodaTime.LocalDateTime.CompareTo(NodaTime.LocalDateTime)
  commentId: M:NodaTime.LocalDateTime.CompareTo(NodaTime.LocalDateTime)
  isExternal: true
- uid: System.ArgumentException
  commentId: T:System.ArgumentException
  parent: System
  isExternal: true
  name: ArgumentException
  nameWithType: ArgumentException
  fullName: System.ArgumentException
- uid: NodaTime
  commentId: N:NodaTime
  name: NodaTime
  nameWithType: NodaTime
  fullName: NodaTime
- uid: System.IEquatable{NodaTime.LocalDateTime}
  commentId: T:System.IEquatable{NodaTime.LocalDateTime}
  parent: System
  definition: System.IEquatable`1
  name: IEquatable<LocalDateTime>
  nameWithType: IEquatable<LocalDateTime>
  fullName: System.IEquatable<NodaTime.LocalDateTime>
  nameWithType.vb: IEquatable(Of LocalDateTime)
  fullName.vb: System.IEquatable(Of NodaTime.LocalDateTime)
  name.vb: IEquatable(Of LocalDateTime)
  spec.csharp:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: NodaTime.LocalDateTime
    name: LocalDateTime
    nameWithType: LocalDateTime
    fullName: NodaTime.LocalDateTime
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: NodaTime.LocalDateTime
    name: LocalDateTime
    nameWithType: LocalDateTime
    fullName: NodaTime.LocalDateTime
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IComparable{NodaTime.LocalDateTime}
  commentId: T:System.IComparable{NodaTime.LocalDateTime}
  parent: System
  definition: System.IComparable`1
  name: IComparable<LocalDateTime>
  nameWithType: IComparable<LocalDateTime>
  fullName: System.IComparable<NodaTime.LocalDateTime>
  nameWithType.vb: IComparable(Of LocalDateTime)
  fullName.vb: System.IComparable(Of NodaTime.LocalDateTime)
  name.vb: IComparable(Of LocalDateTime)
  spec.csharp:
  - uid: System.IComparable`1
    name: IComparable
    nameWithType: IComparable
    fullName: System.IComparable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: NodaTime.LocalDateTime
    name: LocalDateTime
    nameWithType: LocalDateTime
    fullName: NodaTime.LocalDateTime
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.IComparable`1
    name: IComparable
    nameWithType: IComparable
    fullName: System.IComparable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: NodaTime.LocalDateTime
    name: LocalDateTime
    nameWithType: LocalDateTime
    fullName: NodaTime.LocalDateTime
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IComparable
  commentId: T:System.IComparable
  parent: System
  isExternal: true
  name: IComparable
  nameWithType: IComparable
  fullName: System.IComparable
- uid: System.IFormattable
  commentId: T:System.IFormattable
  parent: System
  isExternal: true
  name: IFormattable
  nameWithType: IFormattable
  fullName: System.IFormattable
- uid: System.Xml.Serialization.IXmlSerializable
  commentId: T:System.Xml.Serialization.IXmlSerializable
  parent: System.Xml.Serialization
  isExternal: true
  name: IXmlSerializable
  nameWithType: IXmlSerializable
  fullName: System.Xml.Serialization.IXmlSerializable
- uid: System.Runtime.Serialization.ISerializable
  commentId: T:System.Runtime.Serialization.ISerializable
  parent: System.Runtime.Serialization
  isExternal: true
  name: ISerializable
  nameWithType: ISerializable
  fullName: System.Runtime.Serialization.ISerializable
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: System.IEquatable`1
  commentId: T:System.IEquatable`1
  isExternal: true
  name: IEquatable<T>
  nameWithType: IEquatable<T>
  fullName: System.IEquatable<T>
  nameWithType.vb: IEquatable(Of T)
  fullName.vb: System.IEquatable(Of T)
  name.vb: IEquatable(Of T)
  spec.csharp:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IComparable`1
  commentId: T:System.IComparable`1
  isExternal: true
  name: IComparable<T>
  nameWithType: IComparable<T>
  fullName: System.IComparable<T>
  nameWithType.vb: IComparable(Of T)
  fullName.vb: System.IComparable(Of T)
  name.vb: IComparable(Of T)
  spec.csharp:
  - uid: System.IComparable`1
    name: IComparable
    nameWithType: IComparable
    fullName: System.IComparable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.IComparable`1
    name: IComparable
    nameWithType: IComparable
    fullName: System.IComparable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Xml.Serialization
  commentId: N:System.Xml.Serialization
  isExternal: true
  name: System.Xml.Serialization
  nameWithType: System.Xml.Serialization
  fullName: System.Xml.Serialization
- uid: System.Runtime.Serialization
  commentId: N:System.Runtime.Serialization
  isExternal: true
  name: System.Runtime.Serialization
  nameWithType: System.Runtime.Serialization
  fullName: System.Runtime.Serialization
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: NodaTime.LocalDateTime
  commentId: T:NodaTime.LocalDateTime
  parent: NodaTime
  name: LocalDateTime
  nameWithType: LocalDateTime
  fullName: NodaTime.LocalDateTime
- uid: System.ArgumentOutOfRangeException
  commentId: T:System.ArgumentOutOfRangeException
  parent: System
  isExternal: true
  name: ArgumentOutOfRangeException
  nameWithType: ArgumentOutOfRangeException
  fullName: System.ArgumentOutOfRangeException
- uid: NodaTime.LocalDateTime.#ctor*
  commentId: Overload:NodaTime.LocalDateTime.#ctor
  name: LocalDateTime
  nameWithType: LocalDateTime.LocalDateTime
  fullName: NodaTime.LocalDateTime.LocalDateTime
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: NodaTime.CalendarSystem
  commentId: T:NodaTime.CalendarSystem
  parent: NodaTime
  name: CalendarSystem
  nameWithType: CalendarSystem
  fullName: NodaTime.CalendarSystem
- uid: NodaTime.LocalDateTime.Calendar*
  commentId: Overload:NodaTime.LocalDateTime.Calendar
  name: Calendar
  nameWithType: LocalDateTime.Calendar
  fullName: NodaTime.LocalDateTime.Calendar
- uid: NodaTime.LocalDateTime.Year*
  commentId: Overload:NodaTime.LocalDateTime.Year
  name: Year
  nameWithType: LocalDateTime.Year
  fullName: NodaTime.LocalDateTime.Year
- uid: NodaTime.LocalDateTime.YearOfEra*
  commentId: Overload:NodaTime.LocalDateTime.YearOfEra
  name: YearOfEra
  nameWithType: LocalDateTime.YearOfEra
  fullName: NodaTime.LocalDateTime.YearOfEra
- uid: NodaTime.LocalDateTime.Era*
  commentId: Overload:NodaTime.LocalDateTime.Era
  name: Era
  nameWithType: LocalDateTime.Era
  fullName: NodaTime.LocalDateTime.Era
- uid: NodaTime.Calendars.Era
  commentId: T:NodaTime.Calendars.Era
  parent: NodaTime.Calendars
  name: Era
  nameWithType: Era
  fullName: NodaTime.Calendars.Era
- uid: NodaTime.Calendars
  commentId: N:NodaTime.Calendars
  name: NodaTime.Calendars
  nameWithType: NodaTime.Calendars
  fullName: NodaTime.Calendars
- uid: NodaTime.LocalDateTime.Month*
  commentId: Overload:NodaTime.LocalDateTime.Month
  name: Month
  nameWithType: LocalDateTime.Month
  fullName: NodaTime.LocalDateTime.Month
- uid: NodaTime.LocalDateTime.DayOfYear*
  commentId: Overload:NodaTime.LocalDateTime.DayOfYear
  name: DayOfYear
  nameWithType: LocalDateTime.DayOfYear
  fullName: NodaTime.LocalDateTime.DayOfYear
- uid: NodaTime.LocalDateTime.Day*
  commentId: Overload:NodaTime.LocalDateTime.Day
  name: Day
  nameWithType: LocalDateTime.Day
  fullName: NodaTime.LocalDateTime.Day
- uid: NodaTime.IsoDayOfWeek
  commentId: T:NodaTime.IsoDayOfWeek
  parent: NodaTime
  name: IsoDayOfWeek
  nameWithType: IsoDayOfWeek
  fullName: NodaTime.IsoDayOfWeek
- uid: NodaTime.LocalDateTime.DayOfWeek*
  commentId: Overload:NodaTime.LocalDateTime.DayOfWeek
  name: DayOfWeek
  nameWithType: LocalDateTime.DayOfWeek
  fullName: NodaTime.LocalDateTime.DayOfWeek
- uid: NodaTime.LocalDateTime.Hour*
  commentId: Overload:NodaTime.LocalDateTime.Hour
  name: Hour
  nameWithType: LocalDateTime.Hour
  fullName: NodaTime.LocalDateTime.Hour
- uid: NodaTime.LocalDateTime.ClockHourOfHalfDay*
  commentId: Overload:NodaTime.LocalDateTime.ClockHourOfHalfDay
  name: ClockHourOfHalfDay
  nameWithType: LocalDateTime.ClockHourOfHalfDay
  fullName: NodaTime.LocalDateTime.ClockHourOfHalfDay
- uid: NodaTime.LocalDateTime.Minute*
  commentId: Overload:NodaTime.LocalDateTime.Minute
  name: Minute
  nameWithType: LocalDateTime.Minute
  fullName: NodaTime.LocalDateTime.Minute
- uid: NodaTime.LocalDateTime.Second*
  commentId: Overload:NodaTime.LocalDateTime.Second
  name: Second
  nameWithType: LocalDateTime.Second
  fullName: NodaTime.LocalDateTime.Second
- uid: NodaTime.LocalDateTime.Millisecond*
  commentId: Overload:NodaTime.LocalDateTime.Millisecond
  name: Millisecond
  nameWithType: LocalDateTime.Millisecond
  fullName: NodaTime.LocalDateTime.Millisecond
- uid: NodaTime.LocalDateTime.TickOfSecond*
  commentId: Overload:NodaTime.LocalDateTime.TickOfSecond
  name: TickOfSecond
  nameWithType: LocalDateTime.TickOfSecond
  fullName: NodaTime.LocalDateTime.TickOfSecond
- uid: NodaTime.LocalDateTime.TickOfDay*
  commentId: Overload:NodaTime.LocalDateTime.TickOfDay
  name: TickOfDay
  nameWithType: LocalDateTime.TickOfDay
  fullName: NodaTime.LocalDateTime.TickOfDay
- uid: System.Int64
  commentId: T:System.Int64
  parent: System
  isExternal: true
  name: Int64
  nameWithType: Int64
  fullName: System.Int64
- uid: NodaTime.LocalDateTime.NanosecondOfSecond*
  commentId: Overload:NodaTime.LocalDateTime.NanosecondOfSecond
  name: NanosecondOfSecond
  nameWithType: LocalDateTime.NanosecondOfSecond
  fullName: NodaTime.LocalDateTime.NanosecondOfSecond
- uid: NodaTime.LocalDateTime.NanosecondOfDay*
  commentId: Overload:NodaTime.LocalDateTime.NanosecondOfDay
  name: NanosecondOfDay
  nameWithType: LocalDateTime.NanosecondOfDay
  fullName: NodaTime.LocalDateTime.NanosecondOfDay
- uid: NodaTime.LocalTime
  commentId: T:NodaTime.LocalTime
  parent: NodaTime
  name: LocalTime
  nameWithType: LocalTime
  fullName: NodaTime.LocalTime
- uid: NodaTime.LocalDateTime.TimeOfDay*
  commentId: Overload:NodaTime.LocalDateTime.TimeOfDay
  name: TimeOfDay
  nameWithType: LocalDateTime.TimeOfDay
  fullName: NodaTime.LocalDateTime.TimeOfDay
- uid: NodaTime.LocalDate
  commentId: T:NodaTime.LocalDate
  parent: NodaTime
  name: LocalDate
  nameWithType: LocalDate
  fullName: NodaTime.LocalDate
- uid: NodaTime.LocalDateTime.Date*
  commentId: Overload:NodaTime.LocalDateTime.Date
  name: Date
  nameWithType: LocalDateTime.Date
  fullName: NodaTime.LocalDateTime.Date
- uid: System.DateTime
  commentId: T:System.DateTime
  parent: System
  isExternal: true
  name: DateTime
  nameWithType: DateTime
  fullName: System.DateTime
- uid: System.DateTime.Kind
  commentId: P:System.DateTime.Kind
  isExternal: true
- uid: System.DateTimeKind.Unspecified
  commentId: F:System.DateTimeKind.Unspecified
  isExternal: true
- uid: System.DateTime.ToLocalTime
  commentId: M:System.DateTime.ToLocalTime
  isExternal: true
- uid: System.DateTime.ToUniversalTime
  commentId: M:System.DateTime.ToUniversalTime
  isExternal: true
- uid: System.DateTimeOffset
  commentId: T:System.DateTimeOffset
  parent: System
  isExternal: true
  name: DateTimeOffset
  nameWithType: DateTimeOffset
  fullName: System.DateTimeOffset
- uid: System.InvalidOperationException
  commentId: T:System.InvalidOperationException
  isExternal: true
- uid: NodaTime.LocalDateTime.ToDateTimeUnspecified*
  commentId: Overload:NodaTime.LocalDateTime.ToDateTimeUnspecified
  name: ToDateTimeUnspecified
  nameWithType: LocalDateTime.ToDateTimeUnspecified
  fullName: NodaTime.LocalDateTime.ToDateTimeUnspecified
- uid: System.DateTimeKind.Utc
  commentId: F:System.DateTimeKind.Utc
  isExternal: true
- uid: NodaTime.LocalDateTime.FromDateTime*
  commentId: Overload:NodaTime.LocalDateTime.FromDateTime
  name: FromDateTime
  nameWithType: LocalDateTime.FromDateTime
  fullName: NodaTime.LocalDateTime.FromDateTime
- uid: NodaTime.LocalDateTime.Equals*
  commentId: Overload:NodaTime.LocalDateTime.Equals
  name: Equals
  nameWithType: LocalDateTime.Equals
  fullName: NodaTime.LocalDateTime.Equals
- uid: System.IEquatable{NodaTime.LocalDateTime}.Equals(NodaTime.LocalDateTime)
  commentId: M:System.IEquatable{NodaTime.LocalDateTime}.Equals(NodaTime.LocalDateTime)
  parent: System.IEquatable{NodaTime.LocalDateTime}
  definition: System.IEquatable`1.Equals(`0)
  name: Equals(LocalDateTime)
  nameWithType: IEquatable<LocalDateTime>.Equals(LocalDateTime)
  fullName: System.IEquatable<NodaTime.LocalDateTime>.Equals(NodaTime.LocalDateTime)
  nameWithType.vb: IEquatable(Of LocalDateTime).Equals(LocalDateTime)
  fullName.vb: System.IEquatable(Of NodaTime.LocalDateTime).Equals(NodaTime.LocalDateTime)
  spec.csharp:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    nameWithType: IEquatable<LocalDateTime>.Equals
    fullName: System.IEquatable<NodaTime.LocalDateTime>.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: NodaTime.LocalDateTime
    name: LocalDateTime
    nameWithType: LocalDateTime
    fullName: NodaTime.LocalDateTime
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    nameWithType: IEquatable(Of LocalDateTime).Equals
    fullName: System.IEquatable(Of NodaTime.LocalDateTime).Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: NodaTime.LocalDateTime
    name: LocalDateTime
    nameWithType: LocalDateTime
    fullName: NodaTime.LocalDateTime
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.IEquatable`1.Equals(`0)
  commentId: M:System.IEquatable`1.Equals(`0)
  isExternal: true
  name: Equals(T)
  nameWithType: IEquatable<T>.Equals(T)
  fullName: System.IEquatable<T>.Equals(T)
  nameWithType.vb: IEquatable(Of T).Equals(T)
  fullName.vb: System.IEquatable(Of T).Equals(T)
  spec.csharp:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    nameWithType: IEquatable<T>.Equals
    fullName: System.IEquatable<T>.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    nameWithType: IEquatable(Of T).Equals
    fullName: System.IEquatable(Of T).Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: NodaTime.LocalDateTime.op_Equality*
  commentId: Overload:NodaTime.LocalDateTime.op_Equality
  name: Equality
  nameWithType: LocalDateTime.Equality
  fullName: NodaTime.LocalDateTime.Equality
- uid: NodaTime.LocalDateTime.op_Inequality*
  commentId: Overload:NodaTime.LocalDateTime.op_Inequality
  name: Inequality
  nameWithType: LocalDateTime.Inequality
  fullName: NodaTime.LocalDateTime.Inequality
- uid: NodaTime.LocalDateTime.op_LessThan*
  commentId: Overload:NodaTime.LocalDateTime.op_LessThan
  name: LessThan
  nameWithType: LocalDateTime.LessThan
  fullName: NodaTime.LocalDateTime.LessThan
- uid: NodaTime.LocalDateTime.op_LessThanOrEqual*
  commentId: Overload:NodaTime.LocalDateTime.op_LessThanOrEqual
  name: LessThanOrEqual
  nameWithType: LocalDateTime.LessThanOrEqual
  fullName: NodaTime.LocalDateTime.LessThanOrEqual
- uid: NodaTime.LocalDateTime.op_GreaterThan*
  commentId: Overload:NodaTime.LocalDateTime.op_GreaterThan
  name: GreaterThan
  nameWithType: LocalDateTime.GreaterThan
  fullName: NodaTime.LocalDateTime.GreaterThan
- uid: NodaTime.LocalDateTime.op_GreaterThanOrEqual*
  commentId: Overload:NodaTime.LocalDateTime.op_GreaterThanOrEqual
  name: GreaterThanOrEqual
  nameWithType: LocalDateTime.GreaterThanOrEqual
  fullName: NodaTime.LocalDateTime.GreaterThanOrEqual
- uid: NodaTime.LocalDateTime.CompareTo*
  commentId: Overload:NodaTime.LocalDateTime.CompareTo
  name: CompareTo
  nameWithType: LocalDateTime.CompareTo
  fullName: NodaTime.LocalDateTime.CompareTo
- uid: System.IComparable{NodaTime.LocalDateTime}.CompareTo(NodaTime.LocalDateTime)
  commentId: M:System.IComparable{NodaTime.LocalDateTime}.CompareTo(NodaTime.LocalDateTime)
  parent: System.IComparable{NodaTime.LocalDateTime}
  definition: System.IComparable`1.CompareTo(`0)
  name: CompareTo(LocalDateTime)
  nameWithType: IComparable<LocalDateTime>.CompareTo(LocalDateTime)
  fullName: System.IComparable<NodaTime.LocalDateTime>.CompareTo(NodaTime.LocalDateTime)
  nameWithType.vb: IComparable(Of LocalDateTime).CompareTo(LocalDateTime)
  fullName.vb: System.IComparable(Of NodaTime.LocalDateTime).CompareTo(NodaTime.LocalDateTime)
  spec.csharp:
  - uid: System.IComparable`1.CompareTo(`0)
    name: CompareTo
    nameWithType: IComparable<LocalDateTime>.CompareTo
    fullName: System.IComparable<NodaTime.LocalDateTime>.CompareTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: NodaTime.LocalDateTime
    name: LocalDateTime
    nameWithType: LocalDateTime
    fullName: NodaTime.LocalDateTime
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IComparable`1.CompareTo(`0)
    name: CompareTo
    nameWithType: IComparable(Of LocalDateTime).CompareTo
    fullName: System.IComparable(Of NodaTime.LocalDateTime).CompareTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: NodaTime.LocalDateTime
    name: LocalDateTime
    nameWithType: LocalDateTime
    fullName: NodaTime.LocalDateTime
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IComparable`1.CompareTo(`0)
  commentId: M:System.IComparable`1.CompareTo(`0)
  isExternal: true
  name: CompareTo(T)
  nameWithType: IComparable<T>.CompareTo(T)
  fullName: System.IComparable<T>.CompareTo(T)
  nameWithType.vb: IComparable(Of T).CompareTo(T)
  fullName.vb: System.IComparable(Of T).CompareTo(T)
  spec.csharp:
  - uid: System.IComparable`1.CompareTo(`0)
    name: CompareTo
    nameWithType: IComparable<T>.CompareTo
    fullName: System.IComparable<T>.CompareTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IComparable`1.CompareTo(`0)
    name: CompareTo
    nameWithType: IComparable(Of T).CompareTo
    fullName: System.IComparable(Of T).CompareTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IComparable.CompareTo(System.Object)
  commentId: M:System.IComparable.CompareTo(System.Object)
  parent: System.IComparable
  isExternal: true
  name: CompareTo(Object)
  nameWithType: IComparable.CompareTo(Object)
  fullName: System.IComparable.CompareTo(System.Object)
  spec.csharp:
  - uid: System.IComparable.CompareTo(System.Object)
    name: CompareTo
    nameWithType: IComparable.CompareTo
    fullName: System.IComparable.CompareTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IComparable.CompareTo(System.Object)
    name: CompareTo
    nameWithType: IComparable.CompareTo
    fullName: System.IComparable.CompareTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: NodaTime.LocalDateTime.System#IComparable#CompareTo*
  commentId: Overload:NodaTime.LocalDateTime.System#IComparable#CompareTo
  name: IComparable.CompareTo
  nameWithType: LocalDateTime.IComparable.CompareTo
  fullName: NodaTime.LocalDateTime.System.IComparable.CompareTo
  nameWithType.vb: LocalDateTime.System.IComparable.CompareTo
  name.vb: System.IComparable.CompareTo
- uid: NodaTime.LocalDateTime.Plus(NodaTime.Period)
  commentId: M:NodaTime.LocalDateTime.Plus(NodaTime.Period)
  isExternal: true
- uid: NodaTime.LocalDateTime.op_Addition*
  commentId: Overload:NodaTime.LocalDateTime.op_Addition
  name: Addition
  nameWithType: LocalDateTime.Addition
  fullName: NodaTime.LocalDateTime.Addition
- uid: NodaTime.Period
  commentId: T:NodaTime.Period
  parent: NodaTime
  name: Period
  nameWithType: Period
  fullName: NodaTime.Period
- uid: NodaTime.LocalDateTime.Add*
  commentId: Overload:NodaTime.LocalDateTime.Add
  name: Add
  nameWithType: LocalDateTime.Add
  fullName: NodaTime.LocalDateTime.Add
- uid: NodaTime.LocalDateTime.Plus*
  commentId: Overload:NodaTime.LocalDateTime.Plus
  name: Plus
  nameWithType: LocalDateTime.Plus
  fullName: NodaTime.LocalDateTime.Plus
- uid: NodaTime.LocalDateTime.Minus(NodaTime.Period)
  commentId: M:NodaTime.LocalDateTime.Minus(NodaTime.Period)
  isExternal: true
- uid: NodaTime.LocalDateTime.op_Subtraction*
  commentId: Overload:NodaTime.LocalDateTime.op_Subtraction
  name: Subtraction
  nameWithType: LocalDateTime.Subtraction
  fullName: NodaTime.LocalDateTime.Subtraction
- uid: NodaTime.LocalDateTime.Subtract*
  commentId: Overload:NodaTime.LocalDateTime.Subtract
  name: Subtract
  nameWithType: LocalDateTime.Subtract
  fullName: NodaTime.LocalDateTime.Subtract
- uid: NodaTime.LocalDateTime.Minus*
  commentId: Overload:NodaTime.LocalDateTime.Minus
  name: Minus
  nameWithType: LocalDateTime.Minus
  fullName: NodaTime.LocalDateTime.Minus
- uid: NodaTime.Period.Between(NodaTime.LocalDateTime,NodaTime.LocalDateTime)
  commentId: M:NodaTime.Period.Between(NodaTime.LocalDateTime,NodaTime.LocalDateTime)
  isExternal: true
- uid: System.ValueType.Equals(System.Object)
  commentId: M:System.ValueType.Equals(System.Object)
  parent: System.ValueType
  isExternal: true
  name: Equals(Object)
  nameWithType: ValueType.Equals(Object)
  fullName: System.ValueType.Equals(System.Object)
  spec.csharp:
  - uid: System.ValueType.Equals(System.Object)
    name: Equals
    nameWithType: ValueType.Equals
    fullName: System.ValueType.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.ValueType.Equals(System.Object)
    name: Equals
    nameWithType: ValueType.Equals
    fullName: System.ValueType.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.ValueType
  commentId: T:System.ValueType
  parent: System
  isExternal: true
  name: ValueType
  nameWithType: ValueType
  fullName: System.ValueType
- uid: System.ValueType.GetHashCode
  commentId: M:System.ValueType.GetHashCode
  parent: System.ValueType
  isExternal: true
  name: GetHashCode()
  nameWithType: ValueType.GetHashCode()
  fullName: System.ValueType.GetHashCode()
  spec.csharp:
  - uid: System.ValueType.GetHashCode
    name: GetHashCode
    nameWithType: ValueType.GetHashCode
    fullName: System.ValueType.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.ValueType.GetHashCode
    name: GetHashCode
    nameWithType: ValueType.GetHashCode
    fullName: System.ValueType.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: NodaTime.LocalDateTime.GetHashCode*
  commentId: Overload:NodaTime.LocalDateTime.GetHashCode
  name: GetHashCode
  nameWithType: LocalDateTime.GetHashCode
  fullName: NodaTime.LocalDateTime.GetHashCode
- uid: NodaTime.LocalDateTime.With*
  commentId: Overload:NodaTime.LocalDateTime.With
  name: With
  nameWithType: LocalDateTime.With
  fullName: NodaTime.LocalDateTime.With
- uid: System.Func{NodaTime.LocalDate,NodaTime.LocalDate}
  commentId: T:System.Func{NodaTime.LocalDate,NodaTime.LocalDate}
  parent: System
  definition: System.Func`2
  name: Func<LocalDate, LocalDate>
  nameWithType: Func<LocalDate, LocalDate>
  fullName: System.Func<NodaTime.LocalDate, NodaTime.LocalDate>
  nameWithType.vb: Func(Of LocalDate, LocalDate)
  fullName.vb: System.Func(Of NodaTime.LocalDate, NodaTime.LocalDate)
  name.vb: Func(Of LocalDate, LocalDate)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: NodaTime.LocalDate
    name: LocalDate
    nameWithType: LocalDate
    fullName: NodaTime.LocalDate
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: NodaTime.LocalDate
    name: LocalDate
    nameWithType: LocalDate
    fullName: NodaTime.LocalDate
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: NodaTime.LocalDate
    name: LocalDate
    nameWithType: LocalDate
    fullName: NodaTime.LocalDate
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: NodaTime.LocalDate
    name: LocalDate
    nameWithType: LocalDate
    fullName: NodaTime.LocalDate
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func`2
  commentId: T:System.Func`2
  isExternal: true
  name: Func<T, TResult>
  nameWithType: Func<T, TResult>
  fullName: System.Func<T, TResult>
  nameWithType.vb: Func(Of T, TResult)
  fullName.vb: System.Func(Of T, TResult)
  name.vb: Func(Of T, TResult)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func{NodaTime.LocalTime,NodaTime.LocalTime}
  commentId: T:System.Func{NodaTime.LocalTime,NodaTime.LocalTime}
  parent: System
  definition: System.Func`2
  name: Func<LocalTime, LocalTime>
  nameWithType: Func<LocalTime, LocalTime>
  fullName: System.Func<NodaTime.LocalTime, NodaTime.LocalTime>
  nameWithType.vb: Func(Of LocalTime, LocalTime)
  fullName.vb: System.Func(Of NodaTime.LocalTime, NodaTime.LocalTime)
  name.vb: Func(Of LocalTime, LocalTime)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: NodaTime.LocalTime
    name: LocalTime
    nameWithType: LocalTime
    fullName: NodaTime.LocalTime
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: NodaTime.LocalTime
    name: LocalTime
    nameWithType: LocalTime
    fullName: NodaTime.LocalTime
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: NodaTime.LocalTime
    name: LocalTime
    nameWithType: LocalTime
    fullName: NodaTime.LocalTime
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: NodaTime.LocalTime
    name: LocalTime
    nameWithType: LocalTime
    fullName: NodaTime.LocalTime
  - name: )
    nameWithType: )
    fullName: )
- uid: NodaTime.LocalDateTime.WithCalendar*
  commentId: Overload:NodaTime.LocalDateTime.WithCalendar
  name: WithCalendar
  nameWithType: LocalDateTime.WithCalendar
  fullName: NodaTime.LocalDateTime.WithCalendar
- uid: NodaTime.LocalDateTime.PlusYears*
  commentId: Overload:NodaTime.LocalDateTime.PlusYears
  name: PlusYears
  nameWithType: LocalDateTime.PlusYears
  fullName: NodaTime.LocalDateTime.PlusYears
- uid: NodaTime.LocalDateTime.PlusMonths*
  commentId: Overload:NodaTime.LocalDateTime.PlusMonths
  name: PlusMonths
  nameWithType: LocalDateTime.PlusMonths
  fullName: NodaTime.LocalDateTime.PlusMonths
- uid: NodaTime.LocalDateTime.PlusDays*
  commentId: Overload:NodaTime.LocalDateTime.PlusDays
  name: PlusDays
  nameWithType: LocalDateTime.PlusDays
  fullName: NodaTime.LocalDateTime.PlusDays
- uid: NodaTime.LocalDateTime.PlusWeeks*
  commentId: Overload:NodaTime.LocalDateTime.PlusWeeks
  name: PlusWeeks
  nameWithType: LocalDateTime.PlusWeeks
  fullName: NodaTime.LocalDateTime.PlusWeeks
- uid: NodaTime.LocalDateTime.PlusHours*
  commentId: Overload:NodaTime.LocalDateTime.PlusHours
  name: PlusHours
  nameWithType: LocalDateTime.PlusHours
  fullName: NodaTime.LocalDateTime.PlusHours
- uid: NodaTime.LocalDateTime.PlusMinutes*
  commentId: Overload:NodaTime.LocalDateTime.PlusMinutes
  name: PlusMinutes
  nameWithType: LocalDateTime.PlusMinutes
  fullName: NodaTime.LocalDateTime.PlusMinutes
- uid: NodaTime.LocalDateTime.PlusSeconds*
  commentId: Overload:NodaTime.LocalDateTime.PlusSeconds
  name: PlusSeconds
  nameWithType: LocalDateTime.PlusSeconds
  fullName: NodaTime.LocalDateTime.PlusSeconds
- uid: NodaTime.LocalDateTime.PlusMilliseconds*
  commentId: Overload:NodaTime.LocalDateTime.PlusMilliseconds
  name: PlusMilliseconds
  nameWithType: LocalDateTime.PlusMilliseconds
  fullName: NodaTime.LocalDateTime.PlusMilliseconds
- uid: NodaTime.LocalDateTime.PlusTicks*
  commentId: Overload:NodaTime.LocalDateTime.PlusTicks
  name: PlusTicks
  nameWithType: LocalDateTime.PlusTicks
  fullName: NodaTime.LocalDateTime.PlusTicks
- uid: NodaTime.LocalDateTime.PlusNanoseconds*
  commentId: Overload:NodaTime.LocalDateTime.PlusNanoseconds
  name: PlusNanoseconds
  nameWithType: LocalDateTime.PlusNanoseconds
  fullName: NodaTime.LocalDateTime.PlusNanoseconds
- uid: NodaTime.LocalDateTime.Next*
  commentId: Overload:NodaTime.LocalDateTime.Next
  name: Next
  nameWithType: LocalDateTime.Next
  fullName: NodaTime.LocalDateTime.Next
- uid: NodaTime.LocalDateTime.Previous*
  commentId: Overload:NodaTime.LocalDateTime.Previous
  name: Previous
  nameWithType: LocalDateTime.Previous
  fullName: NodaTime.LocalDateTime.Previous
- uid: NodaTime.OffsetDateTime
  commentId: T:NodaTime.OffsetDateTime
  parent: NodaTime
  name: OffsetDateTime
  nameWithType: OffsetDateTime
  fullName: NodaTime.OffsetDateTime
- uid: NodaTime.LocalDateTime.WithOffset*
  commentId: Overload:NodaTime.LocalDateTime.WithOffset
  name: WithOffset
  nameWithType: LocalDateTime.WithOffset
  fullName: NodaTime.LocalDateTime.WithOffset
- uid: NodaTime.Offset
  commentId: T:NodaTime.Offset
  parent: NodaTime
  name: Offset
  nameWithType: Offset
  fullName: NodaTime.Offset
- uid: NodaTime.DateTimeZone.Utc
  commentId: P:NodaTime.DateTimeZone.Utc
  parent: NodaTime.DateTimeZone
  name: Utc
  nameWithType: DateTimeZone.Utc
  fullName: NodaTime.DateTimeZone.Utc
- uid: NodaTime.LocalDateTime.InUtc*
  commentId: Overload:NodaTime.LocalDateTime.InUtc
  name: InUtc
  nameWithType: LocalDateTime.InUtc
  fullName: NodaTime.LocalDateTime.InUtc
- uid: NodaTime.ZonedDateTime
  commentId: T:NodaTime.ZonedDateTime
  parent: NodaTime
  name: ZonedDateTime
  nameWithType: ZonedDateTime
  fullName: NodaTime.ZonedDateTime
- uid: NodaTime.DateTimeZone
  commentId: T:NodaTime.DateTimeZone
  parent: NodaTime
  name: DateTimeZone
  nameWithType: DateTimeZone
  fullName: NodaTime.DateTimeZone
- uid: NodaTime.LocalDateTime.InZoneLeniently(NodaTime.DateTimeZone)
  commentId: M:NodaTime.LocalDateTime.InZoneLeniently(NodaTime.DateTimeZone)
  isExternal: true
- uid: NodaTime.LocalDateTime.InZone(NodaTime.DateTimeZone,NodaTime.TimeZones.ZoneLocalMappingResolver)
  commentId: M:NodaTime.LocalDateTime.InZone(NodaTime.DateTimeZone,NodaTime.TimeZones.ZoneLocalMappingResolver)
  isExternal: true
- uid: NodaTime.DateTimeZone.AtStrictly(NodaTime.LocalDateTime)
  commentId: M:NodaTime.DateTimeZone.AtStrictly(NodaTime.LocalDateTime)
  parent: NodaTime.DateTimeZone
  name: AtStrictly(LocalDateTime)
  nameWithType: DateTimeZone.AtStrictly(LocalDateTime)
  fullName: NodaTime.DateTimeZone.AtStrictly(NodaTime.LocalDateTime)
  spec.csharp:
  - uid: NodaTime.DateTimeZone.AtStrictly(NodaTime.LocalDateTime)
    name: AtStrictly
    nameWithType: DateTimeZone.AtStrictly
    fullName: NodaTime.DateTimeZone.AtStrictly
  - name: (
    nameWithType: (
    fullName: (
  - uid: NodaTime.LocalDateTime
    name: LocalDateTime
    nameWithType: LocalDateTime
    fullName: NodaTime.LocalDateTime
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NodaTime.DateTimeZone.AtStrictly(NodaTime.LocalDateTime)
    name: AtStrictly
    nameWithType: DateTimeZone.AtStrictly
    fullName: NodaTime.DateTimeZone.AtStrictly
  - name: (
    nameWithType: (
    fullName: (
  - uid: NodaTime.LocalDateTime
    name: LocalDateTime
    nameWithType: LocalDateTime
    fullName: NodaTime.LocalDateTime
  - name: )
    nameWithType: )
    fullName: )
- uid: NodaTime.SkippedTimeException
  commentId: T:NodaTime.SkippedTimeException
  name: SkippedTimeException
  nameWithType: SkippedTimeException
  fullName: NodaTime.SkippedTimeException
- uid: NodaTime.AmbiguousTimeException
  commentId: T:NodaTime.AmbiguousTimeException
  name: AmbiguousTimeException
  nameWithType: AmbiguousTimeException
  fullName: NodaTime.AmbiguousTimeException
- uid: NodaTime.LocalDateTime.InZoneStrictly*
  commentId: Overload:NodaTime.LocalDateTime.InZoneStrictly
  name: InZoneStrictly
  nameWithType: LocalDateTime.InZoneStrictly
  fullName: NodaTime.LocalDateTime.InZoneStrictly
- uid: NodaTime.LocalDateTime.InZoneStrictly(NodaTime.DateTimeZone)
  commentId: M:NodaTime.LocalDateTime.InZoneStrictly(NodaTime.DateTimeZone)
  isExternal: true
- uid: NodaTime.DateTimeZone.AtLeniently(NodaTime.LocalDateTime)
  commentId: M:NodaTime.DateTimeZone.AtLeniently(NodaTime.LocalDateTime)
  parent: NodaTime.DateTimeZone
  name: AtLeniently(LocalDateTime)
  nameWithType: DateTimeZone.AtLeniently(LocalDateTime)
  fullName: NodaTime.DateTimeZone.AtLeniently(NodaTime.LocalDateTime)
  spec.csharp:
  - uid: NodaTime.DateTimeZone.AtLeniently(NodaTime.LocalDateTime)
    name: AtLeniently
    nameWithType: DateTimeZone.AtLeniently
    fullName: NodaTime.DateTimeZone.AtLeniently
  - name: (
    nameWithType: (
    fullName: (
  - uid: NodaTime.LocalDateTime
    name: LocalDateTime
    nameWithType: LocalDateTime
    fullName: NodaTime.LocalDateTime
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NodaTime.DateTimeZone.AtLeniently(NodaTime.LocalDateTime)
    name: AtLeniently
    nameWithType: DateTimeZone.AtLeniently
    fullName: NodaTime.DateTimeZone.AtLeniently
  - name: (
    nameWithType: (
    fullName: (
  - uid: NodaTime.LocalDateTime
    name: LocalDateTime
    nameWithType: LocalDateTime
    fullName: NodaTime.LocalDateTime
  - name: )
    nameWithType: )
    fullName: )
- uid: NodaTime.TimeZones.Resolvers.ReturnLater
  commentId: P:NodaTime.TimeZones.Resolvers.ReturnLater
  isExternal: true
- uid: NodaTime.TimeZones.Resolvers.ReturnStartOfIntervalAfter
  commentId: P:NodaTime.TimeZones.Resolvers.ReturnStartOfIntervalAfter
  isExternal: true
- uid: NodaTime.LocalDateTime.InZoneLeniently*
  commentId: Overload:NodaTime.LocalDateTime.InZoneLeniently
  name: InZoneLeniently
  nameWithType: LocalDateTime.InZoneLeniently
  fullName: NodaTime.LocalDateTime.InZoneLeniently
- uid: NodaTime.TimeZones.ZoneLocalMappingResolver
  commentId: T:NodaTime.TimeZones.ZoneLocalMappingResolver
  parent: NodaTime.TimeZones
  name: ZoneLocalMappingResolver
  nameWithType: ZoneLocalMappingResolver
  fullName: NodaTime.TimeZones.ZoneLocalMappingResolver
- uid: NodaTime.DateTimeZone.ResolveLocal(NodaTime.LocalDateTime,NodaTime.TimeZones.ZoneLocalMappingResolver)
  commentId: M:NodaTime.DateTimeZone.ResolveLocal(NodaTime.LocalDateTime,NodaTime.TimeZones.ZoneLocalMappingResolver)
  parent: NodaTime.DateTimeZone
  name: ResolveLocal(LocalDateTime, ZoneLocalMappingResolver)
  nameWithType: DateTimeZone.ResolveLocal(LocalDateTime, ZoneLocalMappingResolver)
  fullName: NodaTime.DateTimeZone.ResolveLocal(NodaTime.LocalDateTime, NodaTime.TimeZones.ZoneLocalMappingResolver)
  spec.csharp:
  - uid: NodaTime.DateTimeZone.ResolveLocal(NodaTime.LocalDateTime,NodaTime.TimeZones.ZoneLocalMappingResolver)
    name: ResolveLocal
    nameWithType: DateTimeZone.ResolveLocal
    fullName: NodaTime.DateTimeZone.ResolveLocal
  - name: (
    nameWithType: (
    fullName: (
  - uid: NodaTime.LocalDateTime
    name: LocalDateTime
    nameWithType: LocalDateTime
    fullName: NodaTime.LocalDateTime
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: NodaTime.TimeZones.ZoneLocalMappingResolver
    name: ZoneLocalMappingResolver
    nameWithType: ZoneLocalMappingResolver
    fullName: NodaTime.TimeZones.ZoneLocalMappingResolver
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NodaTime.DateTimeZone.ResolveLocal(NodaTime.LocalDateTime,NodaTime.TimeZones.ZoneLocalMappingResolver)
    name: ResolveLocal
    nameWithType: DateTimeZone.ResolveLocal
    fullName: NodaTime.DateTimeZone.ResolveLocal
  - name: (
    nameWithType: (
    fullName: (
  - uid: NodaTime.LocalDateTime
    name: LocalDateTime
    nameWithType: LocalDateTime
    fullName: NodaTime.LocalDateTime
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: NodaTime.TimeZones.ZoneLocalMappingResolver
    name: ZoneLocalMappingResolver
    nameWithType: ZoneLocalMappingResolver
    fullName: NodaTime.TimeZones.ZoneLocalMappingResolver
  - name: )
    nameWithType: )
    fullName: )
- uid: NodaTime.LocalDateTime.InZone*
  commentId: Overload:NodaTime.LocalDateTime.InZone
  name: InZone
  nameWithType: LocalDateTime.InZone
  fullName: NodaTime.LocalDateTime.InZone
- uid: NodaTime.TimeZones
  commentId: N:NodaTime.TimeZones
  name: NodaTime.TimeZones
  nameWithType: NodaTime.TimeZones
  fullName: NodaTime.TimeZones
- uid: NodaTime.LocalDateTime.Deconstruct*
  commentId: Overload:NodaTime.LocalDateTime.Deconstruct
  name: Deconstruct
  nameWithType: LocalDateTime.Deconstruct
  fullName: NodaTime.LocalDateTime.Deconstruct
- uid: NodaTime.LocalDateTime.Max*
  commentId: Overload:NodaTime.LocalDateTime.Max
  name: Max
  nameWithType: LocalDateTime.Max
  fullName: NodaTime.LocalDateTime.Max
- uid: NodaTime.LocalDateTime.Min*
  commentId: Overload:NodaTime.LocalDateTime.Min
  name: Min
  nameWithType: LocalDateTime.Min
  fullName: NodaTime.LocalDateTime.Min
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.ValueType.ToString
  commentId: M:System.ValueType.ToString
  parent: System.ValueType
  isExternal: true
  name: ToString()
  nameWithType: ValueType.ToString()
  fullName: System.ValueType.ToString()
  spec.csharp:
  - uid: System.ValueType.ToString
    name: ToString
    nameWithType: ValueType.ToString
    fullName: System.ValueType.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.ValueType.ToString
    name: ToString
    nameWithType: ValueType.ToString
    fullName: System.ValueType.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: NodaTime.LocalDateTime.ToString*
  commentId: Overload:NodaTime.LocalDateTime.ToString
  name: ToString
  nameWithType: LocalDateTime.ToString
  fullName: NodaTime.LocalDateTime.ToString
- uid: System.IFormatProvider
  commentId: T:System.IFormatProvider
  parent: System
  isExternal: true
  name: IFormatProvider
  nameWithType: IFormatProvider
  fullName: System.IFormatProvider
- uid: System.IFormattable.ToString(System.String,System.IFormatProvider)
  commentId: M:System.IFormattable.ToString(System.String,System.IFormatProvider)
  parent: System.IFormattable
  isExternal: true
  name: ToString(String, IFormatProvider)
  nameWithType: IFormattable.ToString(String, IFormatProvider)
  fullName: System.IFormattable.ToString(System.String, System.IFormatProvider)
  spec.csharp:
  - uid: System.IFormattable.ToString(System.String,System.IFormatProvider)
    name: ToString
    nameWithType: IFormattable.ToString
    fullName: System.IFormattable.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.IFormatProvider
    name: IFormatProvider
    nameWithType: IFormatProvider
    fullName: System.IFormatProvider
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IFormattable.ToString(System.String,System.IFormatProvider)
    name: ToString
    nameWithType: IFormattable.ToString
    fullName: System.IFormattable.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.IFormatProvider
    name: IFormatProvider
    nameWithType: IFormatProvider
    fullName: System.IFormatProvider
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: NodaTime.LocalDateTime.System#Xml#Serialization#IXmlSerializable#GetSchema*
  commentId: Overload:NodaTime.LocalDateTime.System#Xml#Serialization#IXmlSerializable#GetSchema
  name: IXmlSerializable.GetSchema
  nameWithType: LocalDateTime.IXmlSerializable.GetSchema
  fullName: NodaTime.LocalDateTime.System.Xml.Serialization.IXmlSerializable.GetSchema
  nameWithType.vb: LocalDateTime.System.Xml.Serialization.IXmlSerializable.GetSchema
  name.vb: System.Xml.Serialization.IXmlSerializable.GetSchema
- uid: System.Xml.Serialization.IXmlSerializable.GetSchema
  commentId: M:System.Xml.Serialization.IXmlSerializable.GetSchema
  parent: System.Xml.Serialization.IXmlSerializable
  isExternal: true
  name: GetSchema()
  nameWithType: IXmlSerializable.GetSchema()
  fullName: System.Xml.Serialization.IXmlSerializable.GetSchema()
  spec.csharp:
  - uid: System.Xml.Serialization.IXmlSerializable.GetSchema
    name: GetSchema
    nameWithType: IXmlSerializable.GetSchema
    fullName: System.Xml.Serialization.IXmlSerializable.GetSchema
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Xml.Serialization.IXmlSerializable.GetSchema
    name: GetSchema
    nameWithType: IXmlSerializable.GetSchema
    fullName: System.Xml.Serialization.IXmlSerializable.GetSchema
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Xml.Schema.XmlSchema
  commentId: T:System.Xml.Schema.XmlSchema
  parent: System.Xml.Schema
  isExternal: true
  name: XmlSchema
  nameWithType: XmlSchema
  fullName: System.Xml.Schema.XmlSchema
- uid: System.Xml.Schema
  commentId: N:System.Xml.Schema
  isExternal: true
  name: System.Xml.Schema
  nameWithType: System.Xml.Schema
  fullName: System.Xml.Schema
- uid: NodaTime.LocalDateTime.System#Xml#Serialization#IXmlSerializable#ReadXml*
  commentId: Overload:NodaTime.LocalDateTime.System#Xml#Serialization#IXmlSerializable#ReadXml
  name: IXmlSerializable.ReadXml
  nameWithType: LocalDateTime.IXmlSerializable.ReadXml
  fullName: NodaTime.LocalDateTime.System.Xml.Serialization.IXmlSerializable.ReadXml
  nameWithType.vb: LocalDateTime.System.Xml.Serialization.IXmlSerializable.ReadXml
  name.vb: System.Xml.Serialization.IXmlSerializable.ReadXml
- uid: System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)
  commentId: M:System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)
  parent: System.Xml.Serialization.IXmlSerializable
  isExternal: true
  name: ReadXml(XmlReader)
  nameWithType: IXmlSerializable.ReadXml(XmlReader)
  fullName: System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)
  spec.csharp:
  - uid: System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)
    name: ReadXml
    nameWithType: IXmlSerializable.ReadXml
    fullName: System.Xml.Serialization.IXmlSerializable.ReadXml
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Xml.XmlReader
    name: XmlReader
    nameWithType: XmlReader
    fullName: System.Xml.XmlReader
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)
    name: ReadXml
    nameWithType: IXmlSerializable.ReadXml
    fullName: System.Xml.Serialization.IXmlSerializable.ReadXml
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Xml.XmlReader
    name: XmlReader
    nameWithType: XmlReader
    fullName: System.Xml.XmlReader
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Xml.XmlReader
  commentId: T:System.Xml.XmlReader
  parent: System.Xml
  isExternal: true
  name: XmlReader
  nameWithType: XmlReader
  fullName: System.Xml.XmlReader
- uid: System.Xml
  commentId: N:System.Xml
  isExternal: true
  name: System.Xml
  nameWithType: System.Xml
  fullName: System.Xml
- uid: NodaTime.LocalDateTime.System#Xml#Serialization#IXmlSerializable#WriteXml*
  commentId: Overload:NodaTime.LocalDateTime.System#Xml#Serialization#IXmlSerializable#WriteXml
  name: IXmlSerializable.WriteXml
  nameWithType: LocalDateTime.IXmlSerializable.WriteXml
  fullName: NodaTime.LocalDateTime.System.Xml.Serialization.IXmlSerializable.WriteXml
  nameWithType.vb: LocalDateTime.System.Xml.Serialization.IXmlSerializable.WriteXml
  name.vb: System.Xml.Serialization.IXmlSerializable.WriteXml
- uid: System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)
  commentId: M:System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)
  parent: System.Xml.Serialization.IXmlSerializable
  isExternal: true
  name: WriteXml(XmlWriter)
  nameWithType: IXmlSerializable.WriteXml(XmlWriter)
  fullName: System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)
  spec.csharp:
  - uid: System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)
    name: WriteXml
    nameWithType: IXmlSerializable.WriteXml
    fullName: System.Xml.Serialization.IXmlSerializable.WriteXml
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Xml.XmlWriter
    name: XmlWriter
    nameWithType: XmlWriter
    fullName: System.Xml.XmlWriter
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)
    name: WriteXml
    nameWithType: IXmlSerializable.WriteXml
    fullName: System.Xml.Serialization.IXmlSerializable.WriteXml
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Xml.XmlWriter
    name: XmlWriter
    nameWithType: XmlWriter
    fullName: System.Xml.XmlWriter
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Xml.XmlWriter
  commentId: T:System.Xml.XmlWriter
  parent: System.Xml
  isExternal: true
  name: XmlWriter
  nameWithType: XmlWriter
  fullName: System.Xml.XmlWriter
- uid: System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  commentId: M:System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  parent: System.Runtime.Serialization.ISerializable
  isExternal: true
  name: GetObjectData(SerializationInfo, StreamingContext)
  nameWithType: ISerializable.GetObjectData(SerializationInfo, StreamingContext)
  fullName: System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext)
  spec.csharp:
  - uid: System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
    name: GetObjectData
    nameWithType: ISerializable.GetObjectData
    fullName: System.Runtime.Serialization.ISerializable.GetObjectData
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Runtime.Serialization.SerializationInfo
    name: SerializationInfo
    nameWithType: SerializationInfo
    fullName: System.Runtime.Serialization.SerializationInfo
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Runtime.Serialization.StreamingContext
    name: StreamingContext
    nameWithType: StreamingContext
    fullName: System.Runtime.Serialization.StreamingContext
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
    name: GetObjectData
    nameWithType: ISerializable.GetObjectData
    fullName: System.Runtime.Serialization.ISerializable.GetObjectData
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Runtime.Serialization.SerializationInfo
    name: SerializationInfo
    nameWithType: SerializationInfo
    fullName: System.Runtime.Serialization.SerializationInfo
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Runtime.Serialization.StreamingContext
    name: StreamingContext
    nameWithType: StreamingContext
    fullName: System.Runtime.Serialization.StreamingContext
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Runtime.Serialization.SerializationInfo
  commentId: T:System.Runtime.Serialization.SerializationInfo
  parent: System.Runtime.Serialization
  isExternal: true
  name: SerializationInfo
  nameWithType: SerializationInfo
  fullName: System.Runtime.Serialization.SerializationInfo
- uid: NodaTime.LocalDateTime.System#Runtime#Serialization#ISerializable#GetObjectData*
  commentId: Overload:NodaTime.LocalDateTime.System#Runtime#Serialization#ISerializable#GetObjectData
  name: ISerializable.GetObjectData
  nameWithType: LocalDateTime.ISerializable.GetObjectData
  fullName: NodaTime.LocalDateTime.System.Runtime.Serialization.ISerializable.GetObjectData
  nameWithType.vb: LocalDateTime.System.Runtime.Serialization.ISerializable.GetObjectData
  name.vb: System.Runtime.Serialization.ISerializable.GetObjectData
- uid: System.Runtime.Serialization.StreamingContext
  commentId: T:System.Runtime.Serialization.StreamingContext
  parent: System.Runtime.Serialization
  isExternal: true
  name: StreamingContext
  nameWithType: StreamingContext
  fullName: System.Runtime.Serialization.StreamingContext
shouldSkipMarkup: true
