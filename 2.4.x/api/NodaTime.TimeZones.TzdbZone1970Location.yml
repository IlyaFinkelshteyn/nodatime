### YamlMime:ManagedReference
items:
- uid: NodaTime.TimeZones.TzdbZone1970Location
  commentId: T:NodaTime.TimeZones.TzdbZone1970Location
  id: TzdbZone1970Location
  parent: NodaTime.TimeZones
  children:
  - NodaTime.TimeZones.TzdbZone1970Location.#ctor(System.Int32,System.Int32,System.Collections.Generic.IEnumerable{NodaTime.TimeZones.TzdbZone1970Location.Country},System.String,System.String)
  - NodaTime.TimeZones.TzdbZone1970Location.Comment
  - NodaTime.TimeZones.TzdbZone1970Location.Countries
  - NodaTime.TimeZones.TzdbZone1970Location.Latitude
  - NodaTime.TimeZones.TzdbZone1970Location.Longitude
  - NodaTime.TimeZones.TzdbZone1970Location.ZoneId
  langs:
  - csharp
  - vb
  name: TzdbZone1970Location
  nameWithType: TzdbZone1970Location
  fullName: NodaTime.TimeZones.TzdbZone1970Location
  type: Class
  source:
    remote:
      path: 2.4.x/src/NodaTime/TimeZones/TzdbZone1970Location.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: TzdbZone1970Location
    path: src/NodaTime/TimeZones/TzdbZone1970Location.cs
    startLine: 21
  assemblies:
  - NodaTime
  namespace: NodaTime.TimeZones
  summary: "\nA location entry generated from the &quot;zone1970.tab&quot; file in a TZDB release. This can be used to provide\nusers with a choice of time zone, although it is not internationalized. This is equivalent to\n<xref href=\"NodaTime.TimeZones.TzdbZoneLocation\" data-throw-if-not-resolved=\"false\"></xref>, except that multiple countries may be represented.\n"
  example: []
  syntax:
    content: public sealed class TzdbZone1970Location
    content.vb: Public NotInheritable Class TzdbZone1970Location
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - sealed
  - class
  modifiers.vb:
  - Public
  - NotInheritable
  - Class
- uid: NodaTime.TimeZones.TzdbZone1970Location.Latitude
  commentId: P:NodaTime.TimeZones.TzdbZone1970Location.Latitude
  id: Latitude
  parent: NodaTime.TimeZones.TzdbZone1970Location
  langs:
  - csharp
  - vb
  name: Latitude
  nameWithType: TzdbZone1970Location.Latitude
  fullName: NodaTime.TimeZones.TzdbZone1970Location.Latitude
  type: Property
  source:
    remote:
      path: 2.4.x/src/NodaTime/TimeZones/TzdbZone1970Location.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: Latitude
    path: src/NodaTime/TimeZones/TzdbZone1970Location.cs
    startLine: 31
  assemblies:
  - NodaTime
  namespace: NodaTime.TimeZones
  summary: "\nGets the latitude in degrees; positive for North, negative for South.\n"
  remarks: The value will be in the range [-90, 90].
  example: []
  syntax:
    content: public double Latitude { get; }
    parameters: []
    return:
      type: System.Double
      description: The latitude in degrees; positive for North, negative for South.
    content.vb: Public ReadOnly Property Latitude As Double
  overload: NodaTime.TimeZones.TzdbZone1970Location.Latitude*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: NodaTime.TimeZones.TzdbZone1970Location.Longitude
  commentId: P:NodaTime.TimeZones.TzdbZone1970Location.Longitude
  id: Longitude
  parent: NodaTime.TimeZones.TzdbZone1970Location
  langs:
  - csharp
  - vb
  name: Longitude
  nameWithType: TzdbZone1970Location.Longitude
  fullName: NodaTime.TimeZones.TzdbZone1970Location.Longitude
  type: Property
  source:
    remote:
      path: 2.4.x/src/NodaTime/TimeZones/TzdbZone1970Location.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: Longitude
    path: src/NodaTime/TimeZones/TzdbZone1970Location.cs
    startLine: 38
  assemblies:
  - NodaTime
  namespace: NodaTime.TimeZones
  summary: "\nGets the longitude in degrees; positive for East, negative for West.\n"
  remarks: The value will be in the range [-180, 180].
  example: []
  syntax:
    content: public double Longitude { get; }
    parameters: []
    return:
      type: System.Double
      description: The longitude in degrees; positive for East, negative for West.
    content.vb: Public ReadOnly Property Longitude As Double
  overload: NodaTime.TimeZones.TzdbZone1970Location.Longitude*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: NodaTime.TimeZones.TzdbZone1970Location.Countries
  commentId: P:NodaTime.TimeZones.TzdbZone1970Location.Countries
  id: Countries
  parent: NodaTime.TimeZones.TzdbZone1970Location
  langs:
  - csharp
  - vb
  name: Countries
  nameWithType: TzdbZone1970Location.Countries
  fullName: NodaTime.TimeZones.TzdbZone1970Location.Countries
  type: Property
  source:
    remote:
      path: 2.4.x/src/NodaTime/TimeZones/TzdbZone1970Location.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: Countries
    path: src/NodaTime/TimeZones/TzdbZone1970Location.cs
    startLine: 50
  assemblies:
  - NodaTime
  namespace: NodaTime.TimeZones
  summary: "\nGets the list of countries associated with this location.\n"
  remarks: "\nThe list is immutable, and will always contain at least one entry. The list is\nin the order specified in &quot;zone1970.tab&quot;, so the first entry is always the\ncountry containing the position indicated by the latitude and longitude, and\nis the most populous country in the list. No entry in this list is ever null.\n"
  example: []
  syntax:
    content: public IList<TzdbZone1970Location.Country> Countries { get; }
    parameters: []
    return:
      type: System.Collections.Generic.IList{NodaTime.TimeZones.TzdbZone1970Location.Country}
      description: The list of countries associated with this location
    content.vb: Public ReadOnly Property Countries As IList(Of TzdbZone1970Location.Country)
  overload: NodaTime.TimeZones.TzdbZone1970Location.Countries*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: NodaTime.TimeZones.TzdbZone1970Location.ZoneId
  commentId: P:NodaTime.TimeZones.TzdbZone1970Location.ZoneId
  id: ZoneId
  parent: NodaTime.TimeZones.TzdbZone1970Location
  langs:
  - csharp
  - vb
  name: ZoneId
  nameWithType: TzdbZone1970Location.ZoneId
  fullName: NodaTime.TimeZones.TzdbZone1970Location.ZoneId
  type: Property
  source:
    remote:
      path: 2.4.x/src/NodaTime/TimeZones/TzdbZone1970Location.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: ZoneId
    path: src/NodaTime/TimeZones/TzdbZone1970Location.cs
    startLine: 58
  assemblies:
  - NodaTime
  namespace: NodaTime.TimeZones
  summary: "\nThe ID of the time zone for this location.\n"
  remarks: >
    If this mapping was fetched from a <xref href="NodaTime.TimeZones.TzdbDateTimeZoneSource" data-throw-if-not-resolved="false"></xref>, it will always be a valid ID within that source.
  example: []
  syntax:
    content: public string ZoneId { get; }
    parameters: []
    return:
      type: System.String
      description: The ID of the time zone for this location.
    content.vb: Public ReadOnly Property ZoneId As String
  overload: NodaTime.TimeZones.TzdbZone1970Location.ZoneId*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: NodaTime.TimeZones.TzdbZone1970Location.Comment
  commentId: P:NodaTime.TimeZones.TzdbZone1970Location.Comment
  id: Comment
  parent: NodaTime.TimeZones.TzdbZone1970Location
  langs:
  - csharp
  - vb
  name: Comment
  nameWithType: TzdbZone1970Location.Comment
  fullName: NodaTime.TimeZones.TzdbZone1970Location.Comment
  type: Property
  source:
    remote:
      path: 2.4.x/src/NodaTime/TimeZones/TzdbZone1970Location.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: Comment
    path: src/NodaTime/TimeZones/TzdbZone1970Location.cs
    startLine: 68
  assemblies:
  - NodaTime
  namespace: NodaTime.TimeZones
  summary: "\nGets the comment (in English) for the mapping, if any.\n"
  remarks: "\nThis is usually used to differentiate between locations in the same country.\nThis will return an empty string if no comment was provided in the original data.\n"
  example: []
  syntax:
    content: public string Comment { get; }
    parameters: []
    return:
      type: System.String
      description: The comment (in English) for the mapping, if any.
    content.vb: Public ReadOnly Property Comment As String
  overload: NodaTime.TimeZones.TzdbZone1970Location.Comment*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: NodaTime.TimeZones.TzdbZone1970Location.#ctor(System.Int32,System.Int32,System.Collections.Generic.IEnumerable{NodaTime.TimeZones.TzdbZone1970Location.Country},System.String,System.String)
  commentId: M:NodaTime.TimeZones.TzdbZone1970Location.#ctor(System.Int32,System.Int32,System.Collections.Generic.IEnumerable{NodaTime.TimeZones.TzdbZone1970Location.Country},System.String,System.String)
  id: '#ctor(System.Int32,System.Int32,System.Collections.Generic.IEnumerable{NodaTime.TimeZones.TzdbZone1970Location.Country},System.String,System.String)'
  parent: NodaTime.TimeZones.TzdbZone1970Location
  langs:
  - csharp
  - vb
  name: TzdbZone1970Location(Int32, Int32, IEnumerable<TzdbZone1970Location.Country>, String, String)
  nameWithType: TzdbZone1970Location.TzdbZone1970Location(Int32, Int32, IEnumerable<TzdbZone1970Location.Country>, String, String)
  fullName: NodaTime.TimeZones.TzdbZone1970Location.TzdbZone1970Location(System.Int32, System.Int32, System.Collections.Generic.IEnumerable<NodaTime.TimeZones.TzdbZone1970Location.Country>, System.String, System.String)
  type: Constructor
  source:
    remote:
      path: 2.4.x/src/NodaTime/TimeZones/TzdbZone1970Location.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: .ctor
    path: src/NodaTime/TimeZones/TzdbZone1970Location.cs
    startLine: 83
  assemblies:
  - NodaTime
  namespace: NodaTime.TimeZones
  summary: "\nCreates a new location.\n"
  remarks: >
    This constructor is only public for the sake of testability. Non-test code should

    usually obtain locations from a <xref href="NodaTime.TimeZones.TzdbDateTimeZoneSource" data-throw-if-not-resolved="false"></xref>.
  example: []
  syntax:
    content: public TzdbZone1970Location(int latitudeSeconds, int longitudeSeconds, IEnumerable<TzdbZone1970Location.Country> countries, string zoneId, string comment)
    parameters:
    - id: latitudeSeconds
      type: System.Int32
      description: Latitude of the location, in seconds.
    - id: longitudeSeconds
      type: System.Int32
      description: Longitude of the location, in seconds.
    - id: countries
      type: System.Collections.Generic.IEnumerable{NodaTime.TimeZones.TzdbZone1970Location.Country}
      description: >-
        Countries associated with this location. Must not be null, must have at least

        one entry, and all entries must be non-null.
    - id: zoneId
      type: System.String
      description: Time zone identifier of the location. Must not be null.
    - id: comment
      type: System.String
      description: Optional comment. Must not be null, but may be empty.
    content.vb: Public Sub New(latitudeSeconds As Integer, longitudeSeconds As Integer, countries As IEnumerable(Of TzdbZone1970Location.Country), zoneId As String, comment As String)
  overload: NodaTime.TimeZones.TzdbZone1970Location.#ctor*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: The latitude or longitude is invalid.
  nameWithType.vb: TzdbZone1970Location.TzdbZone1970Location(Int32, Int32, IEnumerable(Of TzdbZone1970Location.Country), String, String)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: NodaTime.TimeZones.TzdbZone1970Location.TzdbZone1970Location(System.Int32, System.Int32, System.Collections.Generic.IEnumerable(Of NodaTime.TimeZones.TzdbZone1970Location.Country), System.String, System.String)
  name.vb: TzdbZone1970Location(Int32, Int32, IEnumerable(Of TzdbZone1970Location.Country), String, String)
references:
- uid: NodaTime.TimeZones.TzdbZoneLocation
  commentId: T:NodaTime.TimeZones.TzdbZoneLocation
  name: TzdbZoneLocation
  nameWithType: TzdbZoneLocation
  fullName: NodaTime.TimeZones.TzdbZoneLocation
- uid: NodaTime.TimeZones
  commentId: N:NodaTime.TimeZones
  name: NodaTime.TimeZones
  nameWithType: NodaTime.TimeZones
  fullName: NodaTime.TimeZones
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: NodaTime.TimeZones.TzdbZone1970Location.Latitude*
  commentId: Overload:NodaTime.TimeZones.TzdbZone1970Location.Latitude
  name: Latitude
  nameWithType: TzdbZone1970Location.Latitude
  fullName: NodaTime.TimeZones.TzdbZone1970Location.Latitude
- uid: System.Double
  commentId: T:System.Double
  parent: System
  isExternal: true
  name: Double
  nameWithType: Double
  fullName: System.Double
- uid: NodaTime.TimeZones.TzdbZone1970Location.Longitude*
  commentId: Overload:NodaTime.TimeZones.TzdbZone1970Location.Longitude
  name: Longitude
  nameWithType: TzdbZone1970Location.Longitude
  fullName: NodaTime.TimeZones.TzdbZone1970Location.Longitude
- uid: NodaTime.TimeZones.TzdbZone1970Location.Countries*
  commentId: Overload:NodaTime.TimeZones.TzdbZone1970Location.Countries
  name: Countries
  nameWithType: TzdbZone1970Location.Countries
  fullName: NodaTime.TimeZones.TzdbZone1970Location.Countries
- uid: System.Collections.Generic.IList{NodaTime.TimeZones.TzdbZone1970Location.Country}
  commentId: T:System.Collections.Generic.IList{NodaTime.TimeZones.TzdbZone1970Location.Country}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IList`1
  name: IList<TzdbZone1970Location.Country>
  nameWithType: IList<TzdbZone1970Location.Country>
  fullName: System.Collections.Generic.IList<NodaTime.TimeZones.TzdbZone1970Location.Country>
  nameWithType.vb: IList(Of TzdbZone1970Location.Country)
  fullName.vb: System.Collections.Generic.IList(Of NodaTime.TimeZones.TzdbZone1970Location.Country)
  name.vb: IList(Of TzdbZone1970Location.Country)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: NodaTime.TimeZones.TzdbZone1970Location.Country
    name: TzdbZone1970Location.Country
    nameWithType: TzdbZone1970Location.Country
    fullName: NodaTime.TimeZones.TzdbZone1970Location.Country
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: NodaTime.TimeZones.TzdbZone1970Location.Country
    name: TzdbZone1970Location.Country
    nameWithType: TzdbZone1970Location.Country
    fullName: NodaTime.TimeZones.TzdbZone1970Location.Country
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IList`1
  commentId: T:System.Collections.Generic.IList`1
  isExternal: true
  name: IList<T>
  nameWithType: IList<T>
  fullName: System.Collections.Generic.IList<T>
  nameWithType.vb: IList(Of T)
  fullName.vb: System.Collections.Generic.IList(Of T)
  name.vb: IList(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: NodaTime.TimeZones.TzdbDateTimeZoneSource
  commentId: T:NodaTime.TimeZones.TzdbDateTimeZoneSource
  parent: NodaTime.TimeZones
  name: TzdbDateTimeZoneSource
  nameWithType: TzdbDateTimeZoneSource
  fullName: NodaTime.TimeZones.TzdbDateTimeZoneSource
- uid: NodaTime.TimeZones.TzdbZone1970Location.ZoneId*
  commentId: Overload:NodaTime.TimeZones.TzdbZone1970Location.ZoneId
  name: ZoneId
  nameWithType: TzdbZone1970Location.ZoneId
  fullName: NodaTime.TimeZones.TzdbZone1970Location.ZoneId
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: NodaTime.TimeZones.TzdbZone1970Location.Comment*
  commentId: Overload:NodaTime.TimeZones.TzdbZone1970Location.Comment
  name: Comment
  nameWithType: TzdbZone1970Location.Comment
  fullName: NodaTime.TimeZones.TzdbZone1970Location.Comment
- uid: System.ArgumentOutOfRangeException
  commentId: T:System.ArgumentOutOfRangeException
  parent: System
  isExternal: true
  name: ArgumentOutOfRangeException
  nameWithType: ArgumentOutOfRangeException
  fullName: System.ArgumentOutOfRangeException
- uid: NodaTime.TimeZones.TzdbZone1970Location.#ctor*
  commentId: Overload:NodaTime.TimeZones.TzdbZone1970Location.#ctor
  name: TzdbZone1970Location
  nameWithType: TzdbZone1970Location.TzdbZone1970Location
  fullName: NodaTime.TimeZones.TzdbZone1970Location.TzdbZone1970Location
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Collections.Generic.IEnumerable{NodaTime.TimeZones.TzdbZone1970Location.Country}
  commentId: T:System.Collections.Generic.IEnumerable{NodaTime.TimeZones.TzdbZone1970Location.Country}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<TzdbZone1970Location.Country>
  nameWithType: IEnumerable<TzdbZone1970Location.Country>
  fullName: System.Collections.Generic.IEnumerable<NodaTime.TimeZones.TzdbZone1970Location.Country>
  nameWithType.vb: IEnumerable(Of TzdbZone1970Location.Country)
  fullName.vb: System.Collections.Generic.IEnumerable(Of NodaTime.TimeZones.TzdbZone1970Location.Country)
  name.vb: IEnumerable(Of TzdbZone1970Location.Country)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: NodaTime.TimeZones.TzdbZone1970Location.Country
    name: TzdbZone1970Location.Country
    nameWithType: TzdbZone1970Location.Country
    fullName: NodaTime.TimeZones.TzdbZone1970Location.Country
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: NodaTime.TimeZones.TzdbZone1970Location.Country
    name: TzdbZone1970Location.Country
    nameWithType: TzdbZone1970Location.Country
    fullName: NodaTime.TimeZones.TzdbZone1970Location.Country
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
shouldSkipMarkup: true
