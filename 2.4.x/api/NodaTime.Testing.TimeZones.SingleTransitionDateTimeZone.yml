### YamlMime:ManagedReference
items:
- uid: NodaTime.Testing.TimeZones.SingleTransitionDateTimeZone
  commentId: T:NodaTime.Testing.TimeZones.SingleTransitionDateTimeZone
  id: SingleTransitionDateTimeZone
  parent: NodaTime.Testing.TimeZones
  children:
  - NodaTime.Testing.TimeZones.SingleTransitionDateTimeZone.#ctor(NodaTime.Instant,NodaTime.Offset,NodaTime.Offset)
  - NodaTime.Testing.TimeZones.SingleTransitionDateTimeZone.#ctor(NodaTime.Instant,NodaTime.Offset,NodaTime.Offset,System.String)
  - NodaTime.Testing.TimeZones.SingleTransitionDateTimeZone.#ctor(NodaTime.Instant,System.Int32,System.Int32)
  - NodaTime.Testing.TimeZones.SingleTransitionDateTimeZone.EarlyInterval
  - NodaTime.Testing.TimeZones.SingleTransitionDateTimeZone.GetZoneInterval(NodaTime.Instant)
  - NodaTime.Testing.TimeZones.SingleTransitionDateTimeZone.LateInterval
  - NodaTime.Testing.TimeZones.SingleTransitionDateTimeZone.Transition
  langs:
  - csharp
  - vb
  name: SingleTransitionDateTimeZone
  nameWithType: SingleTransitionDateTimeZone
  fullName: NodaTime.Testing.TimeZones.SingleTransitionDateTimeZone
  type: Class
  source:
    remote:
      path: 2.4.x/src/NodaTime.Testing/TimeZones/SingleTransitionDateTimeZone.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: SingleTransitionDateTimeZone
    path: src/NodaTime.Testing/TimeZones/SingleTransitionDateTimeZone.cs
    startLine: 11
  assemblies:
  - NodaTime.Testing
  namespace: NodaTime.Testing.TimeZones
  summary: "\nTime zone with a single transition between two offsets. This provides a simple way to test behaviour across a transition.\n"
  example: []
  syntax:
    content: 'public sealed class SingleTransitionDateTimeZone : DateTimeZone, IZoneIntervalMapWithMinMax, IZoneIntervalMap'
    content.vb: >-
      Public NotInheritable Class SingleTransitionDateTimeZone
          Inherits DateTimeZone
          Implements IZoneIntervalMapWithMinMax, IZoneIntervalMap
  inheritance:
  - System.Object
  - NodaTime.DateTimeZone
  inheritedMembers:
  - NodaTime.DateTimeZone.Utc
  - NodaTime.DateTimeZone.ForOffset(NodaTime.Offset)
  - NodaTime.DateTimeZone.Id
  - NodaTime.DateTimeZone.MinOffset
  - NodaTime.DateTimeZone.MaxOffset
  - NodaTime.DateTimeZone.GetUtcOffset(NodaTime.Instant)
  - NodaTime.DateTimeZone.MapLocal(NodaTime.LocalDateTime)
  - NodaTime.DateTimeZone.AtStartOfDay(NodaTime.LocalDate)
  - NodaTime.DateTimeZone.ResolveLocal(NodaTime.LocalDateTime,NodaTime.TimeZones.ZoneLocalMappingResolver)
  - NodaTime.DateTimeZone.AtStrictly(NodaTime.LocalDateTime)
  - NodaTime.DateTimeZone.AtLeniently(NodaTime.LocalDateTime)
  - NodaTime.DateTimeZone.ToString
  - NodaTime.DateTimeZone.GetZoneIntervals(NodaTime.Instant,NodaTime.Instant)
  - NodaTime.DateTimeZone.GetZoneIntervals(NodaTime.Interval)
  - NodaTime.DateTimeZone.GetZoneIntervals(NodaTime.Interval,NodaTime.TimeZones.ZoneEqualityComparer.Options)
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - sealed
  - class
  modifiers.vb:
  - Public
  - NotInheritable
  - Class
- uid: NodaTime.Testing.TimeZones.SingleTransitionDateTimeZone.EarlyInterval
  commentId: P:NodaTime.Testing.TimeZones.SingleTransitionDateTimeZone.EarlyInterval
  id: EarlyInterval
  parent: NodaTime.Testing.TimeZones.SingleTransitionDateTimeZone
  langs:
  - csharp
  - vb
  name: EarlyInterval
  nameWithType: SingleTransitionDateTimeZone.EarlyInterval
  fullName: NodaTime.Testing.TimeZones.SingleTransitionDateTimeZone.EarlyInterval
  type: Property
  source:
    remote:
      path: 2.4.x/src/NodaTime.Testing/TimeZones/SingleTransitionDateTimeZone.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: EarlyInterval
    path: src/NodaTime.Testing/TimeZones/SingleTransitionDateTimeZone.cs
    startLine: 17
  assemblies:
  - NodaTime.Testing
  namespace: NodaTime.Testing.TimeZones
  summary: "\nGets the <xref href=\"NodaTime.TimeZones.ZoneInterval\" data-throw-if-not-resolved=\"false\"></xref> for the period before the transition, starting at the beginning of time.\n"
  example: []
  syntax:
    content: public ZoneInterval EarlyInterval { get; }
    parameters: []
    return:
      type: NodaTime.TimeZones.ZoneInterval
      description: The zone interval for the period before the transition, starting at the beginning of time.
    content.vb: Public ReadOnly Property EarlyInterval As ZoneInterval
  overload: NodaTime.Testing.TimeZones.SingleTransitionDateTimeZone.EarlyInterval*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: NodaTime.Testing.TimeZones.SingleTransitionDateTimeZone.LateInterval
  commentId: P:NodaTime.Testing.TimeZones.SingleTransitionDateTimeZone.LateInterval
  id: LateInterval
  parent: NodaTime.Testing.TimeZones.SingleTransitionDateTimeZone
  langs:
  - csharp
  - vb
  name: LateInterval
  nameWithType: SingleTransitionDateTimeZone.LateInterval
  fullName: NodaTime.Testing.TimeZones.SingleTransitionDateTimeZone.LateInterval
  type: Property
  source:
    remote:
      path: 2.4.x/src/NodaTime.Testing/TimeZones/SingleTransitionDateTimeZone.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: LateInterval
    path: src/NodaTime.Testing/TimeZones/SingleTransitionDateTimeZone.cs
    startLine: 23
  assemblies:
  - NodaTime.Testing
  namespace: NodaTime.Testing.TimeZones
  summary: "\nGets the <xref href=\"NodaTime.TimeZones.ZoneInterval\" data-throw-if-not-resolved=\"false\"></xref> for the period after the transition, ending at the end of time.\n"
  example: []
  syntax:
    content: public ZoneInterval LateInterval { get; }
    parameters: []
    return:
      type: NodaTime.TimeZones.ZoneInterval
      description: The zone interval for the period after the transition, ending at the end of time.
    content.vb: Public ReadOnly Property LateInterval As ZoneInterval
  overload: NodaTime.Testing.TimeZones.SingleTransitionDateTimeZone.LateInterval*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: NodaTime.Testing.TimeZones.SingleTransitionDateTimeZone.Transition
  commentId: P:NodaTime.Testing.TimeZones.SingleTransitionDateTimeZone.Transition
  id: Transition
  parent: NodaTime.Testing.TimeZones.SingleTransitionDateTimeZone
  langs:
  - csharp
  - vb
  name: Transition
  nameWithType: SingleTransitionDateTimeZone.Transition
  fullName: NodaTime.Testing.TimeZones.SingleTransitionDateTimeZone.Transition
  type: Property
  source:
    remote:
      path: 2.4.x/src/NodaTime.Testing/TimeZones/SingleTransitionDateTimeZone.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: Transition
    path: src/NodaTime.Testing/TimeZones/SingleTransitionDateTimeZone.cs
    startLine: 29
  assemblies:
  - NodaTime.Testing
  namespace: NodaTime.Testing.TimeZones
  summary: "\nGets the transition instant of the zone.\n"
  example: []
  syntax:
    content: public Instant Transition { get; }
    parameters: []
    return:
      type: NodaTime.Instant
      description: The transition instant of the zone.
    content.vb: Public ReadOnly Property Transition As Instant
  overload: NodaTime.Testing.TimeZones.SingleTransitionDateTimeZone.Transition*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: NodaTime.Testing.TimeZones.SingleTransitionDateTimeZone.#ctor(NodaTime.Instant,System.Int32,System.Int32)
  commentId: M:NodaTime.Testing.TimeZones.SingleTransitionDateTimeZone.#ctor(NodaTime.Instant,System.Int32,System.Int32)
  id: '#ctor(NodaTime.Instant,System.Int32,System.Int32)'
  parent: NodaTime.Testing.TimeZones.SingleTransitionDateTimeZone
  langs:
  - csharp
  - vb
  name: SingleTransitionDateTimeZone(Instant, Int32, Int32)
  nameWithType: SingleTransitionDateTimeZone.SingleTransitionDateTimeZone(Instant, Int32, Int32)
  fullName: NodaTime.Testing.TimeZones.SingleTransitionDateTimeZone.SingleTransitionDateTimeZone(NodaTime.Instant, System.Int32, System.Int32)
  type: Constructor
  source:
    remote:
      path: 2.4.x/src/NodaTime.Testing/TimeZones/SingleTransitionDateTimeZone.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: .ctor
    path: src/NodaTime.Testing/TimeZones/SingleTransitionDateTimeZone.cs
    startLine: 37
  assemblies:
  - NodaTime.Testing
  namespace: NodaTime.Testing.TimeZones
  summary: "\nCreates a zone with a single transition between two offsets.\n"
  example: []
  syntax:
    content: public SingleTransitionDateTimeZone(Instant transitionPoint, int offsetBeforeHours, int offsetAfterHours)
    parameters:
    - id: transitionPoint
      type: NodaTime.Instant
      description: The transition point as an <xref href="NodaTime.Instant" data-throw-if-not-resolved="false"></xref>.
    - id: offsetBeforeHours
      type: System.Int32
      description: The offset of local time from UTC, in hours, before the transition.
    - id: offsetAfterHours
      type: System.Int32
      description: The offset of local time from UTC, in hours, before the transition.
    content.vb: Public Sub New(transitionPoint As Instant, offsetBeforeHours As Integer, offsetAfterHours As Integer)
  overload: NodaTime.Testing.TimeZones.SingleTransitionDateTimeZone.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: NodaTime.Testing.TimeZones.SingleTransitionDateTimeZone.#ctor(NodaTime.Instant,NodaTime.Offset,NodaTime.Offset)
  commentId: M:NodaTime.Testing.TimeZones.SingleTransitionDateTimeZone.#ctor(NodaTime.Instant,NodaTime.Offset,NodaTime.Offset)
  id: '#ctor(NodaTime.Instant,NodaTime.Offset,NodaTime.Offset)'
  parent: NodaTime.Testing.TimeZones.SingleTransitionDateTimeZone
  langs:
  - csharp
  - vb
  name: SingleTransitionDateTimeZone(Instant, Offset, Offset)
  nameWithType: SingleTransitionDateTimeZone.SingleTransitionDateTimeZone(Instant, Offset, Offset)
  fullName: NodaTime.Testing.TimeZones.SingleTransitionDateTimeZone.SingleTransitionDateTimeZone(NodaTime.Instant, NodaTime.Offset, NodaTime.Offset)
  type: Constructor
  source:
    remote:
      path: 2.4.x/src/NodaTime.Testing/TimeZones/SingleTransitionDateTimeZone.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: .ctor
    path: src/NodaTime.Testing/TimeZones/SingleTransitionDateTimeZone.cs
    startLine: 48
  assemblies:
  - NodaTime.Testing
  namespace: NodaTime.Testing.TimeZones
  summary: "\nCreates a zone with a single transition between two offsets.\n"
  example: []
  syntax:
    content: public SingleTransitionDateTimeZone(Instant transitionPoint, Offset offsetBefore, Offset offsetAfter)
    parameters:
    - id: transitionPoint
      type: NodaTime.Instant
      description: The transition point as an <xref href="NodaTime.Instant" data-throw-if-not-resolved="false"></xref>.
    - id: offsetBefore
      type: NodaTime.Offset
      description: The offset of local time from UTC before the transition.
    - id: offsetAfter
      type: NodaTime.Offset
      description: The offset of local time from UTC before the transition.
    content.vb: Public Sub New(transitionPoint As Instant, offsetBefore As Offset, offsetAfter As Offset)
  overload: NodaTime.Testing.TimeZones.SingleTransitionDateTimeZone.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: NodaTime.Testing.TimeZones.SingleTransitionDateTimeZone.#ctor(NodaTime.Instant,NodaTime.Offset,NodaTime.Offset,System.String)
  commentId: M:NodaTime.Testing.TimeZones.SingleTransitionDateTimeZone.#ctor(NodaTime.Instant,NodaTime.Offset,NodaTime.Offset,System.String)
  id: '#ctor(NodaTime.Instant,NodaTime.Offset,NodaTime.Offset,System.String)'
  parent: NodaTime.Testing.TimeZones.SingleTransitionDateTimeZone
  langs:
  - csharp
  - vb
  name: SingleTransitionDateTimeZone(Instant, Offset, Offset, String)
  nameWithType: SingleTransitionDateTimeZone.SingleTransitionDateTimeZone(Instant, Offset, Offset, String)
  fullName: NodaTime.Testing.TimeZones.SingleTransitionDateTimeZone.SingleTransitionDateTimeZone(NodaTime.Instant, NodaTime.Offset, NodaTime.Offset, System.String)
  type: Constructor
  source:
    remote:
      path: 2.4.x/src/NodaTime.Testing/TimeZones/SingleTransitionDateTimeZone.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: .ctor
    path: src/NodaTime.Testing/TimeZones/SingleTransitionDateTimeZone.cs
    startLine: 60
  assemblies:
  - NodaTime.Testing
  namespace: NodaTime.Testing.TimeZones
  summary: "\nCreates a zone with a single transition between two offsets.\n"
  example: []
  syntax:
    content: public SingleTransitionDateTimeZone(Instant transitionPoint, Offset offsetBefore, Offset offsetAfter, string id)
    parameters:
    - id: transitionPoint
      type: NodaTime.Instant
      description: The transition point as an <xref href="NodaTime.Instant" data-throw-if-not-resolved="false"></xref>.
    - id: offsetBefore
      type: NodaTime.Offset
      description: The offset of local time from UTC before the transition.
    - id: offsetAfter
      type: NodaTime.Offset
      description: The offset of local time from UTC before the transition.
    - id: id
      type: System.String
      description: ID for the newly created time zone.
    content.vb: Public Sub New(transitionPoint As Instant, offsetBefore As Offset, offsetAfter As Offset, id As String)
  overload: NodaTime.Testing.TimeZones.SingleTransitionDateTimeZone.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: NodaTime.Testing.TimeZones.SingleTransitionDateTimeZone.GetZoneInterval(NodaTime.Instant)
  commentId: M:NodaTime.Testing.TimeZones.SingleTransitionDateTimeZone.GetZoneInterval(NodaTime.Instant)
  id: GetZoneInterval(NodaTime.Instant)
  parent: NodaTime.Testing.TimeZones.SingleTransitionDateTimeZone
  langs:
  - csharp
  - vb
  name: GetZoneInterval(Instant)
  nameWithType: SingleTransitionDateTimeZone.GetZoneInterval(Instant)
  fullName: NodaTime.Testing.TimeZones.SingleTransitionDateTimeZone.GetZoneInterval(NodaTime.Instant)
  type: Method
  source:
    remote:
      path: 2.4.x/src/NodaTime.Testing/TimeZones/SingleTransitionDateTimeZone.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: GetZoneInterval
    path: src/NodaTime.Testing/TimeZones/SingleTransitionDateTimeZone.cs
    startLine: 73
  assemblies:
  - NodaTime.Testing
  namespace: NodaTime.Testing.TimeZones
  summary: "\nGets the zone interval for the given instant; the range of time around the instant in which the same Offset\napplies (with the same split between standard time and daylight saving time, and with the same offset).\n"
  remarks: "\nThis returns either the zone interval before or after the transition, based on the instant provided.\n"
  example: []
  syntax:
    content: public override ZoneInterval GetZoneInterval(Instant instant)
    parameters:
    - id: instant
      type: NodaTime.Instant
      description: The <xref href="NodaTime.Instant" data-throw-if-not-resolved="false"></xref> to query.
    return:
      type: NodaTime.TimeZones.ZoneInterval
      description: The defined <xref href="NodaTime.TimeZones.ZoneInterval" data-throw-if-not-resolved="false"></xref>.
    content.vb: Public Overrides Function GetZoneInterval(instant As Instant) As ZoneInterval
  overridden: NodaTime.DateTimeZone.GetZoneInterval(NodaTime.Instant)
  overload: NodaTime.Testing.TimeZones.SingleTransitionDateTimeZone.GetZoneInterval*
  seealso:
  - linkId: NodaTime.DateTimeZone.GetZoneIntervals(NodaTime.Interval)
    commentId: M:NodaTime.DateTimeZone.GetZoneIntervals(NodaTime.Interval)
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
references:
- uid: NodaTime.Testing.TimeZones
  commentId: N:NodaTime.Testing.TimeZones
  name: NodaTime.Testing.TimeZones
  nameWithType: NodaTime.Testing.TimeZones
  fullName: NodaTime.Testing.TimeZones
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: NodaTime.DateTimeZone
  commentId: T:NodaTime.DateTimeZone
  parent: NodaTime
  name: DateTimeZone
  nameWithType: DateTimeZone
  fullName: NodaTime.DateTimeZone
- uid: NodaTime.DateTimeZone.Utc
  commentId: P:NodaTime.DateTimeZone.Utc
  parent: NodaTime.DateTimeZone
  name: Utc
  nameWithType: DateTimeZone.Utc
  fullName: NodaTime.DateTimeZone.Utc
- uid: NodaTime.DateTimeZone.ForOffset(NodaTime.Offset)
  commentId: M:NodaTime.DateTimeZone.ForOffset(NodaTime.Offset)
  parent: NodaTime.DateTimeZone
  name: ForOffset(Offset)
  nameWithType: DateTimeZone.ForOffset(Offset)
  fullName: NodaTime.DateTimeZone.ForOffset(NodaTime.Offset)
  spec.csharp:
  - uid: NodaTime.DateTimeZone.ForOffset(NodaTime.Offset)
    name: ForOffset
    nameWithType: DateTimeZone.ForOffset
    fullName: NodaTime.DateTimeZone.ForOffset
  - name: (
    nameWithType: (
    fullName: (
  - uid: NodaTime.Offset
    name: Offset
    nameWithType: Offset
    fullName: NodaTime.Offset
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NodaTime.DateTimeZone.ForOffset(NodaTime.Offset)
    name: ForOffset
    nameWithType: DateTimeZone.ForOffset
    fullName: NodaTime.DateTimeZone.ForOffset
  - name: (
    nameWithType: (
    fullName: (
  - uid: NodaTime.Offset
    name: Offset
    nameWithType: Offset
    fullName: NodaTime.Offset
  - name: )
    nameWithType: )
    fullName: )
- uid: NodaTime.DateTimeZone.Id
  commentId: P:NodaTime.DateTimeZone.Id
  parent: NodaTime.DateTimeZone
  name: Id
  nameWithType: DateTimeZone.Id
  fullName: NodaTime.DateTimeZone.Id
- uid: NodaTime.DateTimeZone.MinOffset
  commentId: P:NodaTime.DateTimeZone.MinOffset
  parent: NodaTime.DateTimeZone
  name: MinOffset
  nameWithType: DateTimeZone.MinOffset
  fullName: NodaTime.DateTimeZone.MinOffset
- uid: NodaTime.DateTimeZone.MaxOffset
  commentId: P:NodaTime.DateTimeZone.MaxOffset
  parent: NodaTime.DateTimeZone
  name: MaxOffset
  nameWithType: DateTimeZone.MaxOffset
  fullName: NodaTime.DateTimeZone.MaxOffset
- uid: NodaTime.DateTimeZone.GetUtcOffset(NodaTime.Instant)
  commentId: M:NodaTime.DateTimeZone.GetUtcOffset(NodaTime.Instant)
  parent: NodaTime.DateTimeZone
  name: GetUtcOffset(Instant)
  nameWithType: DateTimeZone.GetUtcOffset(Instant)
  fullName: NodaTime.DateTimeZone.GetUtcOffset(NodaTime.Instant)
  spec.csharp:
  - uid: NodaTime.DateTimeZone.GetUtcOffset(NodaTime.Instant)
    name: GetUtcOffset
    nameWithType: DateTimeZone.GetUtcOffset
    fullName: NodaTime.DateTimeZone.GetUtcOffset
  - name: (
    nameWithType: (
    fullName: (
  - uid: NodaTime.Instant
    name: Instant
    nameWithType: Instant
    fullName: NodaTime.Instant
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NodaTime.DateTimeZone.GetUtcOffset(NodaTime.Instant)
    name: GetUtcOffset
    nameWithType: DateTimeZone.GetUtcOffset
    fullName: NodaTime.DateTimeZone.GetUtcOffset
  - name: (
    nameWithType: (
    fullName: (
  - uid: NodaTime.Instant
    name: Instant
    nameWithType: Instant
    fullName: NodaTime.Instant
  - name: )
    nameWithType: )
    fullName: )
- uid: NodaTime.DateTimeZone.MapLocal(NodaTime.LocalDateTime)
  commentId: M:NodaTime.DateTimeZone.MapLocal(NodaTime.LocalDateTime)
  parent: NodaTime.DateTimeZone
  name: MapLocal(LocalDateTime)
  nameWithType: DateTimeZone.MapLocal(LocalDateTime)
  fullName: NodaTime.DateTimeZone.MapLocal(NodaTime.LocalDateTime)
  spec.csharp:
  - uid: NodaTime.DateTimeZone.MapLocal(NodaTime.LocalDateTime)
    name: MapLocal
    nameWithType: DateTimeZone.MapLocal
    fullName: NodaTime.DateTimeZone.MapLocal
  - name: (
    nameWithType: (
    fullName: (
  - uid: NodaTime.LocalDateTime
    name: LocalDateTime
    nameWithType: LocalDateTime
    fullName: NodaTime.LocalDateTime
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NodaTime.DateTimeZone.MapLocal(NodaTime.LocalDateTime)
    name: MapLocal
    nameWithType: DateTimeZone.MapLocal
    fullName: NodaTime.DateTimeZone.MapLocal
  - name: (
    nameWithType: (
    fullName: (
  - uid: NodaTime.LocalDateTime
    name: LocalDateTime
    nameWithType: LocalDateTime
    fullName: NodaTime.LocalDateTime
  - name: )
    nameWithType: )
    fullName: )
- uid: NodaTime.DateTimeZone.AtStartOfDay(NodaTime.LocalDate)
  commentId: M:NodaTime.DateTimeZone.AtStartOfDay(NodaTime.LocalDate)
  parent: NodaTime.DateTimeZone
  name: AtStartOfDay(LocalDate)
  nameWithType: DateTimeZone.AtStartOfDay(LocalDate)
  fullName: NodaTime.DateTimeZone.AtStartOfDay(NodaTime.LocalDate)
  spec.csharp:
  - uid: NodaTime.DateTimeZone.AtStartOfDay(NodaTime.LocalDate)
    name: AtStartOfDay
    nameWithType: DateTimeZone.AtStartOfDay
    fullName: NodaTime.DateTimeZone.AtStartOfDay
  - name: (
    nameWithType: (
    fullName: (
  - uid: NodaTime.LocalDate
    name: LocalDate
    nameWithType: LocalDate
    fullName: NodaTime.LocalDate
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NodaTime.DateTimeZone.AtStartOfDay(NodaTime.LocalDate)
    name: AtStartOfDay
    nameWithType: DateTimeZone.AtStartOfDay
    fullName: NodaTime.DateTimeZone.AtStartOfDay
  - name: (
    nameWithType: (
    fullName: (
  - uid: NodaTime.LocalDate
    name: LocalDate
    nameWithType: LocalDate
    fullName: NodaTime.LocalDate
  - name: )
    nameWithType: )
    fullName: )
- uid: NodaTime.DateTimeZone.ResolveLocal(NodaTime.LocalDateTime,NodaTime.TimeZones.ZoneLocalMappingResolver)
  commentId: M:NodaTime.DateTimeZone.ResolveLocal(NodaTime.LocalDateTime,NodaTime.TimeZones.ZoneLocalMappingResolver)
  parent: NodaTime.DateTimeZone
  name: ResolveLocal(LocalDateTime, ZoneLocalMappingResolver)
  nameWithType: DateTimeZone.ResolveLocal(LocalDateTime, ZoneLocalMappingResolver)
  fullName: NodaTime.DateTimeZone.ResolveLocal(NodaTime.LocalDateTime, NodaTime.TimeZones.ZoneLocalMappingResolver)
  spec.csharp:
  - uid: NodaTime.DateTimeZone.ResolveLocal(NodaTime.LocalDateTime,NodaTime.TimeZones.ZoneLocalMappingResolver)
    name: ResolveLocal
    nameWithType: DateTimeZone.ResolveLocal
    fullName: NodaTime.DateTimeZone.ResolveLocal
  - name: (
    nameWithType: (
    fullName: (
  - uid: NodaTime.LocalDateTime
    name: LocalDateTime
    nameWithType: LocalDateTime
    fullName: NodaTime.LocalDateTime
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: NodaTime.TimeZones.ZoneLocalMappingResolver
    name: ZoneLocalMappingResolver
    nameWithType: ZoneLocalMappingResolver
    fullName: NodaTime.TimeZones.ZoneLocalMappingResolver
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NodaTime.DateTimeZone.ResolveLocal(NodaTime.LocalDateTime,NodaTime.TimeZones.ZoneLocalMappingResolver)
    name: ResolveLocal
    nameWithType: DateTimeZone.ResolveLocal
    fullName: NodaTime.DateTimeZone.ResolveLocal
  - name: (
    nameWithType: (
    fullName: (
  - uid: NodaTime.LocalDateTime
    name: LocalDateTime
    nameWithType: LocalDateTime
    fullName: NodaTime.LocalDateTime
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: NodaTime.TimeZones.ZoneLocalMappingResolver
    name: ZoneLocalMappingResolver
    nameWithType: ZoneLocalMappingResolver
    fullName: NodaTime.TimeZones.ZoneLocalMappingResolver
  - name: )
    nameWithType: )
    fullName: )
- uid: NodaTime.DateTimeZone.AtStrictly(NodaTime.LocalDateTime)
  commentId: M:NodaTime.DateTimeZone.AtStrictly(NodaTime.LocalDateTime)
  parent: NodaTime.DateTimeZone
  name: AtStrictly(LocalDateTime)
  nameWithType: DateTimeZone.AtStrictly(LocalDateTime)
  fullName: NodaTime.DateTimeZone.AtStrictly(NodaTime.LocalDateTime)
  spec.csharp:
  - uid: NodaTime.DateTimeZone.AtStrictly(NodaTime.LocalDateTime)
    name: AtStrictly
    nameWithType: DateTimeZone.AtStrictly
    fullName: NodaTime.DateTimeZone.AtStrictly
  - name: (
    nameWithType: (
    fullName: (
  - uid: NodaTime.LocalDateTime
    name: LocalDateTime
    nameWithType: LocalDateTime
    fullName: NodaTime.LocalDateTime
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NodaTime.DateTimeZone.AtStrictly(NodaTime.LocalDateTime)
    name: AtStrictly
    nameWithType: DateTimeZone.AtStrictly
    fullName: NodaTime.DateTimeZone.AtStrictly
  - name: (
    nameWithType: (
    fullName: (
  - uid: NodaTime.LocalDateTime
    name: LocalDateTime
    nameWithType: LocalDateTime
    fullName: NodaTime.LocalDateTime
  - name: )
    nameWithType: )
    fullName: )
- uid: NodaTime.DateTimeZone.AtLeniently(NodaTime.LocalDateTime)
  commentId: M:NodaTime.DateTimeZone.AtLeniently(NodaTime.LocalDateTime)
  parent: NodaTime.DateTimeZone
  name: AtLeniently(LocalDateTime)
  nameWithType: DateTimeZone.AtLeniently(LocalDateTime)
  fullName: NodaTime.DateTimeZone.AtLeniently(NodaTime.LocalDateTime)
  spec.csharp:
  - uid: NodaTime.DateTimeZone.AtLeniently(NodaTime.LocalDateTime)
    name: AtLeniently
    nameWithType: DateTimeZone.AtLeniently
    fullName: NodaTime.DateTimeZone.AtLeniently
  - name: (
    nameWithType: (
    fullName: (
  - uid: NodaTime.LocalDateTime
    name: LocalDateTime
    nameWithType: LocalDateTime
    fullName: NodaTime.LocalDateTime
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NodaTime.DateTimeZone.AtLeniently(NodaTime.LocalDateTime)
    name: AtLeniently
    nameWithType: DateTimeZone.AtLeniently
    fullName: NodaTime.DateTimeZone.AtLeniently
  - name: (
    nameWithType: (
    fullName: (
  - uid: NodaTime.LocalDateTime
    name: LocalDateTime
    nameWithType: LocalDateTime
    fullName: NodaTime.LocalDateTime
  - name: )
    nameWithType: )
    fullName: )
- uid: NodaTime.DateTimeZone.ToString
  commentId: M:NodaTime.DateTimeZone.ToString
  parent: NodaTime.DateTimeZone
  name: ToString()
  nameWithType: DateTimeZone.ToString()
  fullName: NodaTime.DateTimeZone.ToString()
  spec.csharp:
  - uid: NodaTime.DateTimeZone.ToString
    name: ToString
    nameWithType: DateTimeZone.ToString
    fullName: NodaTime.DateTimeZone.ToString
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NodaTime.DateTimeZone.ToString
    name: ToString
    nameWithType: DateTimeZone.ToString
    fullName: NodaTime.DateTimeZone.ToString
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: NodaTime.DateTimeZone.GetZoneIntervals(NodaTime.Instant,NodaTime.Instant)
  commentId: M:NodaTime.DateTimeZone.GetZoneIntervals(NodaTime.Instant,NodaTime.Instant)
  parent: NodaTime.DateTimeZone
  name: GetZoneIntervals(Instant, Instant)
  nameWithType: DateTimeZone.GetZoneIntervals(Instant, Instant)
  fullName: NodaTime.DateTimeZone.GetZoneIntervals(NodaTime.Instant, NodaTime.Instant)
  spec.csharp:
  - uid: NodaTime.DateTimeZone.GetZoneIntervals(NodaTime.Instant,NodaTime.Instant)
    name: GetZoneIntervals
    nameWithType: DateTimeZone.GetZoneIntervals
    fullName: NodaTime.DateTimeZone.GetZoneIntervals
  - name: (
    nameWithType: (
    fullName: (
  - uid: NodaTime.Instant
    name: Instant
    nameWithType: Instant
    fullName: NodaTime.Instant
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: NodaTime.Instant
    name: Instant
    nameWithType: Instant
    fullName: NodaTime.Instant
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NodaTime.DateTimeZone.GetZoneIntervals(NodaTime.Instant,NodaTime.Instant)
    name: GetZoneIntervals
    nameWithType: DateTimeZone.GetZoneIntervals
    fullName: NodaTime.DateTimeZone.GetZoneIntervals
  - name: (
    nameWithType: (
    fullName: (
  - uid: NodaTime.Instant
    name: Instant
    nameWithType: Instant
    fullName: NodaTime.Instant
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: NodaTime.Instant
    name: Instant
    nameWithType: Instant
    fullName: NodaTime.Instant
  - name: )
    nameWithType: )
    fullName: )
- uid: NodaTime.DateTimeZone.GetZoneIntervals(NodaTime.Interval)
  commentId: M:NodaTime.DateTimeZone.GetZoneIntervals(NodaTime.Interval)
  parent: NodaTime.DateTimeZone
  name: GetZoneIntervals(Interval)
  nameWithType: DateTimeZone.GetZoneIntervals(Interval)
  fullName: NodaTime.DateTimeZone.GetZoneIntervals(NodaTime.Interval)
  spec.csharp:
  - uid: NodaTime.DateTimeZone.GetZoneIntervals(NodaTime.Interval)
    name: GetZoneIntervals
    nameWithType: DateTimeZone.GetZoneIntervals
    fullName: NodaTime.DateTimeZone.GetZoneIntervals
  - name: (
    nameWithType: (
    fullName: (
  - uid: NodaTime.Interval
    name: Interval
    nameWithType: Interval
    fullName: NodaTime.Interval
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NodaTime.DateTimeZone.GetZoneIntervals(NodaTime.Interval)
    name: GetZoneIntervals
    nameWithType: DateTimeZone.GetZoneIntervals
    fullName: NodaTime.DateTimeZone.GetZoneIntervals
  - name: (
    nameWithType: (
    fullName: (
  - uid: NodaTime.Interval
    name: Interval
    nameWithType: Interval
    fullName: NodaTime.Interval
  - name: )
    nameWithType: )
    fullName: )
- uid: NodaTime.DateTimeZone.GetZoneIntervals(NodaTime.Interval,NodaTime.TimeZones.ZoneEqualityComparer.Options)
  commentId: M:NodaTime.DateTimeZone.GetZoneIntervals(NodaTime.Interval,NodaTime.TimeZones.ZoneEqualityComparer.Options)
  parent: NodaTime.DateTimeZone
  name: GetZoneIntervals(Interval, ZoneEqualityComparer.Options)
  nameWithType: DateTimeZone.GetZoneIntervals(Interval, ZoneEqualityComparer.Options)
  fullName: NodaTime.DateTimeZone.GetZoneIntervals(NodaTime.Interval, NodaTime.TimeZones.ZoneEqualityComparer.Options)
  spec.csharp:
  - uid: NodaTime.DateTimeZone.GetZoneIntervals(NodaTime.Interval,NodaTime.TimeZones.ZoneEqualityComparer.Options)
    name: GetZoneIntervals
    nameWithType: DateTimeZone.GetZoneIntervals
    fullName: NodaTime.DateTimeZone.GetZoneIntervals
  - name: (
    nameWithType: (
    fullName: (
  - uid: NodaTime.Interval
    name: Interval
    nameWithType: Interval
    fullName: NodaTime.Interval
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: NodaTime.TimeZones.ZoneEqualityComparer.Options
    name: ZoneEqualityComparer.Options
    nameWithType: ZoneEqualityComparer.Options
    fullName: NodaTime.TimeZones.ZoneEqualityComparer.Options
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NodaTime.DateTimeZone.GetZoneIntervals(NodaTime.Interval,NodaTime.TimeZones.ZoneEqualityComparer.Options)
    name: GetZoneIntervals
    nameWithType: DateTimeZone.GetZoneIntervals
    fullName: NodaTime.DateTimeZone.GetZoneIntervals
  - name: (
    nameWithType: (
    fullName: (
  - uid: NodaTime.Interval
    name: Interval
    nameWithType: Interval
    fullName: NodaTime.Interval
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: NodaTime.TimeZones.ZoneEqualityComparer.Options
    name: ZoneEqualityComparer.Options
    nameWithType: ZoneEqualityComparer.Options
    fullName: NodaTime.TimeZones.ZoneEqualityComparer.Options
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: NodaTime
  commentId: N:NodaTime
  name: NodaTime
  nameWithType: NodaTime
  fullName: NodaTime
- uid: NodaTime.TimeZones.ZoneInterval
  commentId: T:NodaTime.TimeZones.ZoneInterval
  parent: NodaTime.TimeZones
  name: ZoneInterval
  nameWithType: ZoneInterval
  fullName: NodaTime.TimeZones.ZoneInterval
- uid: NodaTime.Testing.TimeZones.SingleTransitionDateTimeZone.EarlyInterval*
  commentId: Overload:NodaTime.Testing.TimeZones.SingleTransitionDateTimeZone.EarlyInterval
  name: EarlyInterval
  nameWithType: SingleTransitionDateTimeZone.EarlyInterval
  fullName: NodaTime.Testing.TimeZones.SingleTransitionDateTimeZone.EarlyInterval
- uid: NodaTime.TimeZones
  commentId: N:NodaTime.TimeZones
  name: NodaTime.TimeZones
  nameWithType: NodaTime.TimeZones
  fullName: NodaTime.TimeZones
- uid: NodaTime.Testing.TimeZones.SingleTransitionDateTimeZone.LateInterval*
  commentId: Overload:NodaTime.Testing.TimeZones.SingleTransitionDateTimeZone.LateInterval
  name: LateInterval
  nameWithType: SingleTransitionDateTimeZone.LateInterval
  fullName: NodaTime.Testing.TimeZones.SingleTransitionDateTimeZone.LateInterval
- uid: NodaTime.Testing.TimeZones.SingleTransitionDateTimeZone.Transition*
  commentId: Overload:NodaTime.Testing.TimeZones.SingleTransitionDateTimeZone.Transition
  name: Transition
  nameWithType: SingleTransitionDateTimeZone.Transition
  fullName: NodaTime.Testing.TimeZones.SingleTransitionDateTimeZone.Transition
- uid: NodaTime.Instant
  commentId: T:NodaTime.Instant
  parent: NodaTime
  name: Instant
  nameWithType: Instant
  fullName: NodaTime.Instant
- uid: NodaTime.Testing.TimeZones.SingleTransitionDateTimeZone.#ctor*
  commentId: Overload:NodaTime.Testing.TimeZones.SingleTransitionDateTimeZone.#ctor
  name: SingleTransitionDateTimeZone
  nameWithType: SingleTransitionDateTimeZone.SingleTransitionDateTimeZone
  fullName: NodaTime.Testing.TimeZones.SingleTransitionDateTimeZone.SingleTransitionDateTimeZone
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: NodaTime.Offset
  commentId: T:NodaTime.Offset
  parent: NodaTime
  name: Offset
  nameWithType: Offset
  fullName: NodaTime.Offset
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: NodaTime.DateTimeZone.GetZoneInterval(NodaTime.Instant)
  commentId: M:NodaTime.DateTimeZone.GetZoneInterval(NodaTime.Instant)
  parent: NodaTime.DateTimeZone
  name: GetZoneInterval(Instant)
  nameWithType: DateTimeZone.GetZoneInterval(Instant)
  fullName: NodaTime.DateTimeZone.GetZoneInterval(NodaTime.Instant)
  spec.csharp:
  - uid: NodaTime.DateTimeZone.GetZoneInterval(NodaTime.Instant)
    name: GetZoneInterval
    nameWithType: DateTimeZone.GetZoneInterval
    fullName: NodaTime.DateTimeZone.GetZoneInterval
  - name: (
    nameWithType: (
    fullName: (
  - uid: NodaTime.Instant
    name: Instant
    nameWithType: Instant
    fullName: NodaTime.Instant
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NodaTime.DateTimeZone.GetZoneInterval(NodaTime.Instant)
    name: GetZoneInterval
    nameWithType: DateTimeZone.GetZoneInterval
    fullName: NodaTime.DateTimeZone.GetZoneInterval
  - name: (
    nameWithType: (
    fullName: (
  - uid: NodaTime.Instant
    name: Instant
    nameWithType: Instant
    fullName: NodaTime.Instant
  - name: )
    nameWithType: )
    fullName: )
- uid: NodaTime.Testing.TimeZones.SingleTransitionDateTimeZone.GetZoneInterval*
  commentId: Overload:NodaTime.Testing.TimeZones.SingleTransitionDateTimeZone.GetZoneInterval
  name: GetZoneInterval
  nameWithType: SingleTransitionDateTimeZone.GetZoneInterval
  fullName: NodaTime.Testing.TimeZones.SingleTransitionDateTimeZone.GetZoneInterval
shouldSkipMarkup: true
