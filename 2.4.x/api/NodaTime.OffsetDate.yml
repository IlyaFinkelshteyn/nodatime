### YamlMime:ManagedReference
items:
- uid: NodaTime.OffsetDate
  commentId: T:NodaTime.OffsetDate
  id: OffsetDate
  parent: NodaTime
  children:
  - NodaTime.OffsetDate.#ctor(NodaTime.LocalDate,NodaTime.Offset)
  - NodaTime.OffsetDate.At(NodaTime.LocalTime)
  - NodaTime.OffsetDate.Calendar
  - NodaTime.OffsetDate.Date
  - NodaTime.OffsetDate.Day
  - NodaTime.OffsetDate.DayOfWeek
  - NodaTime.OffsetDate.DayOfYear
  - NodaTime.OffsetDate.Deconstruct(NodaTime.LocalDate@,NodaTime.Offset@)
  - NodaTime.OffsetDate.Equals(NodaTime.OffsetDate)
  - NodaTime.OffsetDate.Equals(System.Object)
  - NodaTime.OffsetDate.Era
  - NodaTime.OffsetDate.GetHashCode
  - NodaTime.OffsetDate.Month
  - NodaTime.OffsetDate.Offset
  - NodaTime.OffsetDate.op_Equality(NodaTime.OffsetDate,NodaTime.OffsetDate)
  - NodaTime.OffsetDate.op_Inequality(NodaTime.OffsetDate,NodaTime.OffsetDate)
  - NodaTime.OffsetDate.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  - NodaTime.OffsetDate.System#Xml#Serialization#IXmlSerializable#GetSchema
  - NodaTime.OffsetDate.System#Xml#Serialization#IXmlSerializable#ReadXml(System.Xml.XmlReader)
  - NodaTime.OffsetDate.System#Xml#Serialization#IXmlSerializable#WriteXml(System.Xml.XmlWriter)
  - NodaTime.OffsetDate.ToString
  - NodaTime.OffsetDate.ToString(System.String,System.IFormatProvider)
  - NodaTime.OffsetDate.With(System.Func{NodaTime.LocalDate,NodaTime.LocalDate})
  - NodaTime.OffsetDate.WithCalendar(NodaTime.CalendarSystem)
  - NodaTime.OffsetDate.WithOffset(NodaTime.Offset)
  - NodaTime.OffsetDate.Year
  - NodaTime.OffsetDate.YearOfEra
  langs:
  - csharp
  - vb
  name: OffsetDate
  nameWithType: OffsetDate
  fullName: NodaTime.OffsetDate
  type: Struct
  source:
    remote:
      path: 2.4.x/src/NodaTime/OffsetDate.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: OffsetDate
    path: src/NodaTime/OffsetDate.cs
    startLine: 24
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nA combination of a <xref href=\"NodaTime.LocalDate\" data-throw-if-not-resolved=\"false\"></xref> and an <xref href=\"NodaTime.OffsetDate.Offset\" data-throw-if-not-resolved=\"false\"></xref>, to represent\na date at a specific offset from UTC but without any time-of-day information.\n"
  example: []
  syntax:
    content: >-
      [Serializable]

      public struct OffsetDate : IEquatable<OffsetDate>, IXmlSerializable, IFormattable, ISerializable
    content.vb: >-
      <Serializable>

      Public Structure OffsetDate
          Implements IEquatable(Of OffsetDate), IXmlSerializable, IFormattable, ISerializable
  implements:
  - System.IEquatable{NodaTime.OffsetDate}
  - System.Xml.Serialization.IXmlSerializable
  - System.IFormattable
  - System.Runtime.Serialization.ISerializable
  inheritedMembers:
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetType
  attributes:
  - type: System.SerializableAttribute
    ctor: System.SerializableAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - struct
  modifiers.vb:
  - Public
  - Structure
- uid: NodaTime.OffsetDate.#ctor(NodaTime.LocalDate,NodaTime.Offset)
  commentId: M:NodaTime.OffsetDate.#ctor(NodaTime.LocalDate,NodaTime.Offset)
  id: '#ctor(NodaTime.LocalDate,NodaTime.Offset)'
  parent: NodaTime.OffsetDate
  langs:
  - csharp
  - vb
  name: OffsetDate(LocalDate, Offset)
  nameWithType: OffsetDate.OffsetDate(LocalDate, Offset)
  fullName: NodaTime.OffsetDate.OffsetDate(NodaTime.LocalDate, NodaTime.Offset)
  type: Constructor
  source:
    remote:
      path: 2.4.x/src/NodaTime/OffsetDate.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: .ctor
    path: src/NodaTime/OffsetDate.cs
    startLine: 39
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nConstructs an instance of the specified date and offset.\n"
  example: []
  syntax:
    content: public OffsetDate(LocalDate date, Offset offset)
    parameters:
    - id: date
      type: NodaTime.LocalDate
      description: The date part of the value.
    - id: offset
      type: NodaTime.Offset
      description: The offset part of the value.
    content.vb: Public Sub New(date As LocalDate, offset As Offset)
  overload: NodaTime.OffsetDate.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: NodaTime.OffsetDate.Date
  commentId: P:NodaTime.OffsetDate.Date
  id: Date
  parent: NodaTime.OffsetDate
  langs:
  - csharp
  - vb
  name: Date
  nameWithType: OffsetDate.Date
  fullName: NodaTime.OffsetDate.Date
  type: Property
  source:
    remote:
      path: 2.4.x/src/NodaTime/OffsetDate.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: Date
    path: src/NodaTime/OffsetDate.cs
    startLine: 49
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nGets the local date represented by this value.\n"
  example: []
  syntax:
    content: public LocalDate Date { get; }
    parameters: []
    return:
      type: NodaTime.LocalDate
      description: The local date represented by this value.
    content.vb: Public ReadOnly Property Date As LocalDate
  overload: NodaTime.OffsetDate.Date*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: NodaTime.OffsetDate.Offset
  commentId: P:NodaTime.OffsetDate.Offset
  id: Offset
  parent: NodaTime.OffsetDate
  langs:
  - csharp
  - vb
  name: Offset
  nameWithType: OffsetDate.Offset
  fullName: NodaTime.OffsetDate.Offset
  type: Property
  source:
    remote:
      path: 2.4.x/src/NodaTime/OffsetDate.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: Offset
    path: src/NodaTime/OffsetDate.cs
    startLine: 55
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nGets the offset from UTC of this value.\n"
  example: []
  syntax:
    content: public Offset Offset { get; }
    parameters: []
    return:
      type: NodaTime.Offset
      description: The offset from UTC of this value.
    content.vb: Public ReadOnly Property Offset As Offset
  overload: NodaTime.OffsetDate.Offset*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: NodaTime.OffsetDate.Calendar
  commentId: P:NodaTime.OffsetDate.Calendar
  id: Calendar
  parent: NodaTime.OffsetDate
  langs:
  - csharp
  - vb
  name: Calendar
  nameWithType: OffsetDate.Calendar
  fullName: NodaTime.OffsetDate.Calendar
  type: Property
  source:
    remote:
      path: 2.4.x/src/NodaTime/OffsetDate.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: Calendar
    path: src/NodaTime/OffsetDate.cs
    startLine: 59
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: Gets the calendar system associated with this offset date.
  example: []
  syntax:
    content: public CalendarSystem Calendar { get; }
    parameters: []
    return:
      type: NodaTime.CalendarSystem
      description: The calendar system associated with this offset date.
    content.vb: Public ReadOnly Property Calendar As CalendarSystem
  overload: NodaTime.OffsetDate.Calendar*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: NodaTime.OffsetDate.Year
  commentId: P:NodaTime.OffsetDate.Year
  id: Year
  parent: NodaTime.OffsetDate
  langs:
  - csharp
  - vb
  name: Year
  nameWithType: OffsetDate.Year
  fullName: NodaTime.OffsetDate.Year
  type: Property
  source:
    remote:
      path: 2.4.x/src/NodaTime/OffsetDate.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: Year
    path: src/NodaTime/OffsetDate.cs
    startLine: 65
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: Gets the year of this offset date.
  remarks: >-
    This returns the &quot;absolute year&quot;, so, for the ISO calendar,

    a value of 0 means 1 BC, for example.
  example: []
  syntax:
    content: public int Year { get; }
    parameters: []
    return:
      type: System.Int32
      description: The year of this offset date.
    content.vb: Public ReadOnly Property Year As Integer
  overload: NodaTime.OffsetDate.Year*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: NodaTime.OffsetDate.Month
  commentId: P:NodaTime.OffsetDate.Month
  id: Month
  parent: NodaTime.OffsetDate
  langs:
  - csharp
  - vb
  name: Month
  nameWithType: OffsetDate.Month
  fullName: NodaTime.OffsetDate.Month
  type: Property
  source:
    remote:
      path: 2.4.x/src/NodaTime/OffsetDate.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: Month
    path: src/NodaTime/OffsetDate.cs
    startLine: 69
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: Gets the month of this offset date within the year.
  example: []
  syntax:
    content: public int Month { get; }
    parameters: []
    return:
      type: System.Int32
      description: The month of this offset date within the year.
    content.vb: Public ReadOnly Property Month As Integer
  overload: NodaTime.OffsetDate.Month*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: NodaTime.OffsetDate.Day
  commentId: P:NodaTime.OffsetDate.Day
  id: Day
  parent: NodaTime.OffsetDate
  langs:
  - csharp
  - vb
  name: Day
  nameWithType: OffsetDate.Day
  fullName: NodaTime.OffsetDate.Day
  type: Property
  source:
    remote:
      path: 2.4.x/src/NodaTime/OffsetDate.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: Day
    path: src/NodaTime/OffsetDate.cs
    startLine: 73
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: Gets the day of this offset date within the month.
  example: []
  syntax:
    content: public int Day { get; }
    parameters: []
    return:
      type: System.Int32
      description: The day of this offset date within the month.
    content.vb: Public ReadOnly Property Day As Integer
  overload: NodaTime.OffsetDate.Day*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: NodaTime.OffsetDate.DayOfWeek
  commentId: P:NodaTime.OffsetDate.DayOfWeek
  id: DayOfWeek
  parent: NodaTime.OffsetDate
  langs:
  - csharp
  - vb
  name: DayOfWeek
  nameWithType: OffsetDate.DayOfWeek
  fullName: NodaTime.OffsetDate.DayOfWeek
  type: Property
  source:
    remote:
      path: 2.4.x/src/NodaTime/OffsetDate.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: DayOfWeek
    path: src/NodaTime/OffsetDate.cs
    startLine: 79
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nGets the week day of this offset date expressed as an <xref href=\"NodaTime.IsoDayOfWeek\" data-throw-if-not-resolved=\"false\"></xref> value.\n"
  example: []
  syntax:
    content: public IsoDayOfWeek DayOfWeek { get; }
    parameters: []
    return:
      type: NodaTime.IsoDayOfWeek
      description: The week day of this offset date expressed as an <code>IsoDayOfWeek</code>.
    content.vb: Public ReadOnly Property DayOfWeek As IsoDayOfWeek
  overload: NodaTime.OffsetDate.DayOfWeek*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: NodaTime.OffsetDate.YearOfEra
  commentId: P:NodaTime.OffsetDate.YearOfEra
  id: YearOfEra
  parent: NodaTime.OffsetDate
  langs:
  - csharp
  - vb
  name: YearOfEra
  nameWithType: OffsetDate.YearOfEra
  fullName: NodaTime.OffsetDate.YearOfEra
  type: Property
  source:
    remote:
      path: 2.4.x/src/NodaTime/OffsetDate.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: YearOfEra
    path: src/NodaTime/OffsetDate.cs
    startLine: 83
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: Gets the year of this offset date within the era.
  example: []
  syntax:
    content: public int YearOfEra { get; }
    parameters: []
    return:
      type: System.Int32
      description: The year of this offset date within the era.
    content.vb: Public ReadOnly Property YearOfEra As Integer
  overload: NodaTime.OffsetDate.YearOfEra*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: NodaTime.OffsetDate.Era
  commentId: P:NodaTime.OffsetDate.Era
  id: Era
  parent: NodaTime.OffsetDate
  langs:
  - csharp
  - vb
  name: Era
  nameWithType: OffsetDate.Era
  fullName: NodaTime.OffsetDate.Era
  type: Property
  source:
    remote:
      path: 2.4.x/src/NodaTime/OffsetDate.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: Era
    path: src/NodaTime/OffsetDate.cs
    startLine: 87
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: Gets the era of this offset date.
  example: []
  syntax:
    content: public Era Era { get; }
    parameters: []
    return:
      type: NodaTime.Calendars.Era
      description: The era of this offset date.
    content.vb: Public ReadOnly Property Era As Era
  overload: NodaTime.OffsetDate.Era*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: NodaTime.OffsetDate.DayOfYear
  commentId: P:NodaTime.OffsetDate.DayOfYear
  id: DayOfYear
  parent: NodaTime.OffsetDate
  langs:
  - csharp
  - vb
  name: DayOfYear
  nameWithType: OffsetDate.DayOfYear
  fullName: NodaTime.OffsetDate.DayOfYear
  type: Property
  source:
    remote:
      path: 2.4.x/src/NodaTime/OffsetDate.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: DayOfYear
    path: src/NodaTime/OffsetDate.cs
    startLine: 91
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: Gets the day of this offset date within the year.
  example: []
  syntax:
    content: public int DayOfYear { get; }
    parameters: []
    return:
      type: System.Int32
      description: The day of this offset date within the year.
    content.vb: Public ReadOnly Property DayOfYear As Integer
  overload: NodaTime.OffsetDate.DayOfYear*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: NodaTime.OffsetDate.WithOffset(NodaTime.Offset)
  commentId: M:NodaTime.OffsetDate.WithOffset(NodaTime.Offset)
  id: WithOffset(NodaTime.Offset)
  parent: NodaTime.OffsetDate
  langs:
  - csharp
  - vb
  name: WithOffset(Offset)
  nameWithType: OffsetDate.WithOffset(Offset)
  fullName: NodaTime.OffsetDate.WithOffset(NodaTime.Offset)
  type: Method
  source:
    remote:
      path: 2.4.x/src/NodaTime/OffsetDate.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: WithOffset
    path: src/NodaTime/OffsetDate.cs
    startLine: 98
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nCreates a new <xref href=\"NodaTime.OffsetDate\" data-throw-if-not-resolved=\"false\"></xref> for the same date, but with the specified UTC offset.\n"
  example: []
  syntax:
    content: public OffsetDate WithOffset(Offset offset)
    parameters:
    - id: offset
      type: NodaTime.Offset
      description: The new UTC offset.
    return:
      type: NodaTime.OffsetDate
      description: A new <code>OffsetDate</code> for the same date, but with the specified UTC offset.
    content.vb: Public Function WithOffset(offset As Offset) As OffsetDate
  overload: NodaTime.OffsetDate.WithOffset*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: NodaTime.OffsetDate.With(System.Func{NodaTime.LocalDate,NodaTime.LocalDate})
  commentId: M:NodaTime.OffsetDate.With(System.Func{NodaTime.LocalDate,NodaTime.LocalDate})
  id: With(System.Func{NodaTime.LocalDate,NodaTime.LocalDate})
  parent: NodaTime.OffsetDate
  langs:
  - csharp
  - vb
  name: With(Func<LocalDate, LocalDate>)
  nameWithType: OffsetDate.With(Func<LocalDate, LocalDate>)
  fullName: NodaTime.OffsetDate.With(System.Func<NodaTime.LocalDate, NodaTime.LocalDate>)
  type: Method
  source:
    remote:
      path: 2.4.x/src/NodaTime/OffsetDate.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: With
    path: src/NodaTime/OffsetDate.cs
    startLine: 111
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nReturns this offset date, with the given date adjuster applied to it, maintaining the existing offset.\n"
  remarks: "\nIf the adjuster attempts to construct an\ninvalid date (such as by trying to set a day-of-month of 30 in February), any exception thrown by\nthat construction attempt will be propagated through this method.\n"
  example: []
  syntax:
    content: public OffsetDate With(Func<LocalDate, LocalDate> adjuster)
    parameters:
    - id: adjuster
      type: System.Func{NodaTime.LocalDate,NodaTime.LocalDate}
      description: The adjuster to apply.
    return:
      type: NodaTime.OffsetDate
      description: The adjusted offset date.
    content.vb: Public Function With(adjuster As Func(Of LocalDate, LocalDate)) As OffsetDate
  overload: NodaTime.OffsetDate.With*
  nameWithType.vb: OffsetDate.With(Func(Of LocalDate, LocalDate))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: NodaTime.OffsetDate.With(System.Func(Of NodaTime.LocalDate, NodaTime.LocalDate))
  name.vb: With(Func(Of LocalDate, LocalDate))
- uid: NodaTime.OffsetDate.WithCalendar(NodaTime.CalendarSystem)
  commentId: M:NodaTime.OffsetDate.WithCalendar(NodaTime.CalendarSystem)
  id: WithCalendar(NodaTime.CalendarSystem)
  parent: NodaTime.OffsetDate
  langs:
  - csharp
  - vb
  name: WithCalendar(CalendarSystem)
  nameWithType: OffsetDate.WithCalendar(CalendarSystem)
  fullName: NodaTime.OffsetDate.WithCalendar(NodaTime.CalendarSystem)
  type: Method
  source:
    remote:
      path: 2.4.x/src/NodaTime/OffsetDate.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: WithCalendar
    path: src/NodaTime/OffsetDate.cs
    startLine: 122
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nCreates a new <xref href=\"NodaTime.OffsetDate\" data-throw-if-not-resolved=\"false\"></xref> representing the same physical date and offset, but in a different calendar.\nThe returned value is likely to have different date field values to this one.\nFor example, January 1st 1970 in the Gregorian calendar was December 19th 1969 in the Julian calendar.\n"
  example: []
  syntax:
    content: public OffsetDate WithCalendar(CalendarSystem calendar)
    parameters:
    - id: calendar
      type: NodaTime.CalendarSystem
      description: The calendar system to convert this offset date to.
    return:
      type: NodaTime.OffsetDate
      description: The converted <code>OffsetDate</code>.
    content.vb: Public Function WithCalendar(calendar As CalendarSystem) As OffsetDate
  overload: NodaTime.OffsetDate.WithCalendar*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: NodaTime.OffsetDate.At(NodaTime.LocalTime)
  commentId: M:NodaTime.OffsetDate.At(NodaTime.LocalTime)
  id: At(NodaTime.LocalTime)
  parent: NodaTime.OffsetDate
  langs:
  - csharp
  - vb
  name: At(LocalTime)
  nameWithType: OffsetDate.At(LocalTime)
  fullName: NodaTime.OffsetDate.At(NodaTime.LocalTime)
  type: Method
  source:
    remote:
      path: 2.4.x/src/NodaTime/OffsetDate.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: At
    path: src/NodaTime/OffsetDate.cs
    startLine: 132
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nCombines this <xref href=\"NodaTime.OffsetDate\" data-throw-if-not-resolved=\"false\"></xref> with the given <xref href=\"NodaTime.LocalTime\" data-throw-if-not-resolved=\"false\"></xref>\ninto an <xref href=\"NodaTime.OffsetDateTime\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public OffsetDateTime At(LocalTime time)
    parameters:
    - id: time
      type: NodaTime.LocalTime
      description: The time to combine with this date.
    return:
      type: NodaTime.OffsetDateTime
      description: The <xref href="NodaTime.OffsetDateTime" data-throw-if-not-resolved="false"></xref> representation of the given time on this date.
    content.vb: Public Function At(time As LocalTime) As OffsetDateTime
  overload: NodaTime.OffsetDate.At*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: NodaTime.OffsetDate.GetHashCode
  commentId: M:NodaTime.OffsetDate.GetHashCode
  id: GetHashCode
  parent: NodaTime.OffsetDate
  langs:
  - csharp
  - vb
  name: GetHashCode()
  nameWithType: OffsetDate.GetHashCode()
  fullName: NodaTime.OffsetDate.GetHashCode()
  type: Method
  source:
    remote:
      path: 2.4.x/src/NodaTime/OffsetDate.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: GetHashCode
    path: src/NodaTime/OffsetDate.cs
    startLine: 139
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nReturns a hash code for this offset date.\n"
  example: []
  syntax:
    content: public override int GetHashCode()
    return:
      type: System.Int32
      description: A hash code for this offset date.
    content.vb: Public Overrides Function GetHashCode As Integer
  overridden: System.ValueType.GetHashCode
  overload: NodaTime.OffsetDate.GetHashCode*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: NodaTime.OffsetDate.Equals(System.Object)
  commentId: M:NodaTime.OffsetDate.Equals(System.Object)
  id: Equals(System.Object)
  parent: NodaTime.OffsetDate
  langs:
  - csharp
  - vb
  name: Equals(Object)
  nameWithType: OffsetDate.Equals(Object)
  fullName: NodaTime.OffsetDate.Equals(System.Object)
  type: Method
  source:
    remote:
      path: 2.4.x/src/NodaTime/OffsetDate.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: Equals
    path: src/NodaTime/OffsetDate.cs
    startLine: 147
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nCompares two <xref href=\"NodaTime.OffsetDate\" data-throw-if-not-resolved=\"false\"></xref> values for equality. This requires\nthat the date values be the same (in the same calendar) and the offsets.\n"
  example: []
  syntax:
    content: public override bool Equals(object obj)
    parameters:
    - id: obj
      type: System.Object
      description: The object to compare this offset date with.
    return:
      type: System.Boolean
      description: True if the given value is another offset date equal to this one; false otherwise.
    content.vb: Public Overrides Function Equals(obj As Object) As Boolean
  overridden: System.ValueType.Equals(System.Object)
  overload: NodaTime.OffsetDate.Equals*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: NodaTime.OffsetDate.Equals(NodaTime.OffsetDate)
  commentId: M:NodaTime.OffsetDate.Equals(NodaTime.OffsetDate)
  id: Equals(NodaTime.OffsetDate)
  parent: NodaTime.OffsetDate
  langs:
  - csharp
  - vb
  name: Equals(OffsetDate)
  nameWithType: OffsetDate.Equals(OffsetDate)
  fullName: NodaTime.OffsetDate.Equals(NodaTime.OffsetDate)
  type: Method
  source:
    remote:
      path: 2.4.x/src/NodaTime/OffsetDate.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: Equals
    path: src/NodaTime/OffsetDate.cs
    startLine: 155
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nCompares two <xref href=\"NodaTime.OffsetDate\" data-throw-if-not-resolved=\"false\"></xref> values for equality. This requires\nthat the date values be the same (in the same calendar) and the offsets.\n"
  example: []
  syntax:
    content: public bool Equals(OffsetDate other)
    parameters:
    - id: other
      type: NodaTime.OffsetDate
      description: The value to compare this offset date with.
    return:
      type: System.Boolean
      description: True if the given value is another offset date equal to this one; false otherwise.
    content.vb: Public Function Equals(other As OffsetDate) As Boolean
  overload: NodaTime.OffsetDate.Equals*
  implements:
  - System.IEquatable{NodaTime.OffsetDate}.Equals(NodaTime.OffsetDate)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: NodaTime.OffsetDate.op_Equality(NodaTime.OffsetDate,NodaTime.OffsetDate)
  commentId: M:NodaTime.OffsetDate.op_Equality(NodaTime.OffsetDate,NodaTime.OffsetDate)
  id: op_Equality(NodaTime.OffsetDate,NodaTime.OffsetDate)
  parent: NodaTime.OffsetDate
  langs:
  - csharp
  - vb
  name: Equality(OffsetDate, OffsetDate)
  nameWithType: OffsetDate.Equality(OffsetDate, OffsetDate)
  fullName: NodaTime.OffsetDate.Equality(NodaTime.OffsetDate, NodaTime.OffsetDate)
  type: Operator
  source:
    remote:
      path: 2.4.x/src/NodaTime/OffsetDate.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: op_Equality
    path: src/NodaTime/OffsetDate.cs
    startLine: 163
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nImplements the operator == (equality).\n"
  example: []
  syntax:
    content: public static bool operator ==(OffsetDate left, OffsetDate right)
    parameters:
    - id: left
      type: NodaTime.OffsetDate
      description: The left hand side of the operator.
    - id: right
      type: NodaTime.OffsetDate
      description: The right hand side of the operator.
    return:
      type: System.Boolean
      description: <code>true</code> if values are equal to each other, otherwise <code>false</code>.
    content.vb: Public Shared Operator =(left As OffsetDate, right As OffsetDate) As Boolean
  overload: NodaTime.OffsetDate.op_Equality*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: NodaTime.OffsetDate.op_Inequality(NodaTime.OffsetDate,NodaTime.OffsetDate)
  commentId: M:NodaTime.OffsetDate.op_Inequality(NodaTime.OffsetDate,NodaTime.OffsetDate)
  id: op_Inequality(NodaTime.OffsetDate,NodaTime.OffsetDate)
  parent: NodaTime.OffsetDate
  langs:
  - csharp
  - vb
  name: Inequality(OffsetDate, OffsetDate)
  nameWithType: OffsetDate.Inequality(OffsetDate, OffsetDate)
  fullName: NodaTime.OffsetDate.Inequality(NodaTime.OffsetDate, NodaTime.OffsetDate)
  type: Operator
  source:
    remote:
      path: 2.4.x/src/NodaTime/OffsetDate.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: op_Inequality
    path: src/NodaTime/OffsetDate.cs
    startLine: 171
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nImplements the operator != (inequality).\n"
  example: []
  syntax:
    content: public static bool operator !=(OffsetDate left, OffsetDate right)
    parameters:
    - id: left
      type: NodaTime.OffsetDate
      description: The left hand side of the operator.
    - id: right
      type: NodaTime.OffsetDate
      description: The right hand side of the operator.
    return:
      type: System.Boolean
      description: <code>true</code> if values are not equal to each other, otherwise <code>false</code>.
    content.vb: Public Shared Operator <>(left As OffsetDate, right As OffsetDate) As Boolean
  overload: NodaTime.OffsetDate.op_Inequality*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: NodaTime.OffsetDate.ToString
  commentId: M:NodaTime.OffsetDate.ToString
  id: ToString
  parent: NodaTime.OffsetDate
  langs:
  - csharp
  - vb
  name: ToString()
  nameWithType: OffsetDate.ToString()
  fullName: NodaTime.OffsetDate.ToString()
  type: Method
  source:
    remote:
      path: 2.4.x/src/NodaTime/OffsetDate.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: ToString
    path: src/NodaTime/OffsetDate.cs
    startLine: 180
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nReturns a <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref> that represents this instance.\n"
  example: []
  syntax:
    content: public override string ToString()
    return:
      type: System.String
      description: "\nThe value of the current instance in the default format pattern (&quot;G&quot;), using the current thread&apos;s\nculture to obtain a format provider.\n"
    content.vb: Public Overrides Function ToString As String
  overridden: System.ValueType.ToString
  overload: NodaTime.OffsetDate.ToString*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: NodaTime.OffsetDate.ToString(System.String,System.IFormatProvider)
  commentId: M:NodaTime.OffsetDate.ToString(System.String,System.IFormatProvider)
  id: ToString(System.String,System.IFormatProvider)
  parent: NodaTime.OffsetDate
  langs:
  - csharp
  - vb
  name: ToString(String, IFormatProvider)
  nameWithType: OffsetDate.ToString(String, IFormatProvider)
  fullName: NodaTime.OffsetDate.ToString(System.String, System.IFormatProvider)
  type: Method
  source:
    remote:
      path: 2.4.x/src/NodaTime/OffsetDate.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: ToString
    path: src/NodaTime/OffsetDate.cs
    startLine: 195
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nFormats the value of the current instance using the specified pattern.\n"
  example: []
  syntax:
    content: public string ToString(string patternText, IFormatProvider formatProvider)
    parameters:
    - id: patternText
      type: System.String
      description: >
        The <xref href="System.String" data-throw-if-not-resolved="false"></xref> specifying the pattern to use,

        or null to use the default format pattern (&quot;G&quot;).
    - id: formatProvider
      type: System.IFormatProvider
      description: >
        The <xref href="System.IFormatProvider" data-throw-if-not-resolved="false"></xref> to use when formatting the value,

        or null to use the current thread&apos;s culture to obtain a format provider.
    return:
      type: System.String
      description: "\nA <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref> containing the value of the current instance in the specified format.\n"
    content.vb: Public Function ToString(patternText As String, formatProvider As IFormatProvider) As String
  overload: NodaTime.OffsetDate.ToString*
  implements:
  - System.IFormattable.ToString(System.String,System.IFormatProvider)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: NodaTime.OffsetDate.Deconstruct(NodaTime.LocalDate@,NodaTime.Offset@)
  commentId: M:NodaTime.OffsetDate.Deconstruct(NodaTime.LocalDate@,NodaTime.Offset@)
  id: Deconstruct(NodaTime.LocalDate@,NodaTime.Offset@)
  parent: NodaTime.OffsetDate
  langs:
  - csharp
  - vb
  name: Deconstruct(out LocalDate, out Offset)
  nameWithType: OffsetDate.Deconstruct(out LocalDate, out Offset)
  fullName: NodaTime.OffsetDate.Deconstruct(out NodaTime.LocalDate, out NodaTime.Offset)
  type: Method
  source:
    remote:
      path: 2.4.x/src/NodaTime/OffsetDate.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: Deconstruct
    path: src/NodaTime/OffsetDate.cs
    startLine: 203
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nDeconstruct this value into its components.\n"
  example: []
  syntax:
    content: public void Deconstruct(out LocalDate localDate, out Offset offset)
    parameters:
    - id: localDate
      type: NodaTime.LocalDate
      description: The <xref href="NodaTime.LocalDate" data-throw-if-not-resolved="false"></xref> component.
    - id: offset
      type: NodaTime.Offset
      description: The <xref href="NodaTime.OffsetDate.Offset" data-throw-if-not-resolved="false"></xref> component.
    content.vb: Public Sub Deconstruct(ByRef localDate As LocalDate, ByRef offset As Offset)
  overload: NodaTime.OffsetDate.Deconstruct*
  nameWithType.vb: OffsetDate.Deconstruct(ByRef LocalDate, ByRef Offset)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: NodaTime.OffsetDate.Deconstruct(ByRef NodaTime.LocalDate, ByRef NodaTime.Offset)
  name.vb: Deconstruct(ByRef LocalDate, ByRef Offset)
- uid: NodaTime.OffsetDate.System#Xml#Serialization#IXmlSerializable#GetSchema
  commentId: M:NodaTime.OffsetDate.System#Xml#Serialization#IXmlSerializable#GetSchema
  id: System#Xml#Serialization#IXmlSerializable#GetSchema
  isEii: true
  parent: NodaTime.OffsetDate
  langs:
  - csharp
  - vb
  name: IXmlSerializable.GetSchema()
  nameWithType: OffsetDate.IXmlSerializable.GetSchema()
  fullName: NodaTime.OffsetDate.System.Xml.Serialization.IXmlSerializable.GetSchema()
  type: Method
  source:
    remote:
      path: 2.4.x/src/NodaTime/OffsetDate.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: System.Xml.Serialization.IXmlSerializable.GetSchema
    path: src/NodaTime/OffsetDate.cs
    startLine: 213
  assemblies:
  - NodaTime
  namespace: NodaTime
  example: []
  syntax:
    content: XmlSchema IXmlSerializable.GetSchema()
    return:
      type: System.Xml.Schema.XmlSchema
    content.vb: Function System.Xml.Serialization.IXmlSerializable.GetSchema As XmlSchema Implements IXmlSerializable.GetSchema
  overload: NodaTime.OffsetDate.System#Xml#Serialization#IXmlSerializable#GetSchema*
  implements:
  - System.Xml.Serialization.IXmlSerializable.GetSchema
  nameWithType.vb: OffsetDate.System.Xml.Serialization.IXmlSerializable.GetSchema()
  name.vb: System.Xml.Serialization.IXmlSerializable.GetSchema()
- uid: NodaTime.OffsetDate.System#Xml#Serialization#IXmlSerializable#ReadXml(System.Xml.XmlReader)
  commentId: M:NodaTime.OffsetDate.System#Xml#Serialization#IXmlSerializable#ReadXml(System.Xml.XmlReader)
  id: System#Xml#Serialization#IXmlSerializable#ReadXml(System.Xml.XmlReader)
  isEii: true
  parent: NodaTime.OffsetDate
  langs:
  - csharp
  - vb
  name: IXmlSerializable.ReadXml(XmlReader)
  nameWithType: OffsetDate.IXmlSerializable.ReadXml(XmlReader)
  fullName: NodaTime.OffsetDate.System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)
  type: Method
  source:
    remote:
      path: 2.4.x/src/NodaTime/OffsetDate.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: System.Xml.Serialization.IXmlSerializable.ReadXml
    path: src/NodaTime/OffsetDate.cs
    startLine: 216
  assemblies:
  - NodaTime
  namespace: NodaTime
  example: []
  syntax:
    content: void IXmlSerializable.ReadXml(XmlReader reader)
    parameters:
    - id: reader
      type: System.Xml.XmlReader
    content.vb: Sub System.Xml.Serialization.IXmlSerializable.ReadXml(reader As XmlReader) Implements IXmlSerializable.ReadXml
  overload: NodaTime.OffsetDate.System#Xml#Serialization#IXmlSerializable#ReadXml*
  implements:
  - System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)
  nameWithType.vb: OffsetDate.System.Xml.Serialization.IXmlSerializable.ReadXml(XmlReader)
  name.vb: System.Xml.Serialization.IXmlSerializable.ReadXml(XmlReader)
- uid: NodaTime.OffsetDate.System#Xml#Serialization#IXmlSerializable#WriteXml(System.Xml.XmlWriter)
  commentId: M:NodaTime.OffsetDate.System#Xml#Serialization#IXmlSerializable#WriteXml(System.Xml.XmlWriter)
  id: System#Xml#Serialization#IXmlSerializable#WriteXml(System.Xml.XmlWriter)
  isEii: true
  parent: NodaTime.OffsetDate
  langs:
  - csharp
  - vb
  name: IXmlSerializable.WriteXml(XmlWriter)
  nameWithType: OffsetDate.IXmlSerializable.WriteXml(XmlWriter)
  fullName: NodaTime.OffsetDate.System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)
  type: Method
  source:
    remote:
      path: 2.4.x/src/NodaTime/OffsetDate.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: System.Xml.Serialization.IXmlSerializable.WriteXml
    path: src/NodaTime/OffsetDate.cs
    startLine: 233
  assemblies:
  - NodaTime
  namespace: NodaTime
  example: []
  syntax:
    content: void IXmlSerializable.WriteXml(XmlWriter writer)
    parameters:
    - id: writer
      type: System.Xml.XmlWriter
    content.vb: Sub System.Xml.Serialization.IXmlSerializable.WriteXml(writer As XmlWriter) Implements IXmlSerializable.WriteXml
  overload: NodaTime.OffsetDate.System#Xml#Serialization#IXmlSerializable#WriteXml*
  implements:
  - System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)
  nameWithType.vb: OffsetDate.System.Xml.Serialization.IXmlSerializable.WriteXml(XmlWriter)
  name.vb: System.Xml.Serialization.IXmlSerializable.WriteXml(XmlWriter)
- uid: NodaTime.OffsetDate.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  commentId: M:NodaTime.OffsetDate.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  id: System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  isEii: true
  parent: NodaTime.OffsetDate
  langs:
  - csharp
  - vb
  name: ISerializable.GetObjectData(SerializationInfo, StreamingContext)
  nameWithType: OffsetDate.ISerializable.GetObjectData(SerializationInfo, StreamingContext)
  fullName: NodaTime.OffsetDate.System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext)
  type: Method
  source:
    remote:
      path: 2.4.x/src/NodaTime/OffsetDate.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: System.Runtime.Serialization.ISerializable.GetObjectData
    path: src/NodaTime/OffsetDate.cs
    startLine: 261
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nImplementation of <xref href=\"System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo%2cSystem.Runtime.Serialization.StreamingContext)\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: >-
      [SecurityCritical]

      void ISerializable.GetObjectData(SerializationInfo info, StreamingContext context)
    parameters:
    - id: info
      type: System.Runtime.Serialization.SerializationInfo
      description: The <xref href="System.Runtime.Serialization.SerializationInfo" data-throw-if-not-resolved="false"></xref> to populate with data.
    - id: context
      type: System.Runtime.Serialization.StreamingContext
      description: The destination for this serialization.
    content.vb: >-
      <SecurityCritical>

      Sub System.Runtime.Serialization.ISerializable.GetObjectData(info As SerializationInfo, context As StreamingContext) Implements ISerializable.GetObjectData
  overload: NodaTime.OffsetDate.System#Runtime#Serialization#ISerializable#GetObjectData*
  implements:
  - System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  attributes:
  - type: System.Security.SecurityCriticalAttribute
    ctor: System.Security.SecurityCriticalAttribute.#ctor
    arguments: []
  nameWithType.vb: OffsetDate.System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo, StreamingContext)
  name.vb: System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo, StreamingContext)
references:
- uid: NodaTime.LocalDate
  commentId: T:NodaTime.LocalDate
  parent: NodaTime
  name: LocalDate
  nameWithType: LocalDate
  fullName: NodaTime.LocalDate
- uid: NodaTime.OffsetDate.Offset
  commentId: P:NodaTime.OffsetDate.Offset
  isExternal: true
- uid: NodaTime
  commentId: N:NodaTime
  name: NodaTime
  nameWithType: NodaTime
  fullName: NodaTime
- uid: System.IEquatable{NodaTime.OffsetDate}
  commentId: T:System.IEquatable{NodaTime.OffsetDate}
  parent: System
  definition: System.IEquatable`1
  name: IEquatable<OffsetDate>
  nameWithType: IEquatable<OffsetDate>
  fullName: System.IEquatable<NodaTime.OffsetDate>
  nameWithType.vb: IEquatable(Of OffsetDate)
  fullName.vb: System.IEquatable(Of NodaTime.OffsetDate)
  name.vb: IEquatable(Of OffsetDate)
  spec.csharp:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: NodaTime.OffsetDate
    name: OffsetDate
    nameWithType: OffsetDate
    fullName: NodaTime.OffsetDate
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: NodaTime.OffsetDate
    name: OffsetDate
    nameWithType: OffsetDate
    fullName: NodaTime.OffsetDate
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Xml.Serialization.IXmlSerializable
  commentId: T:System.Xml.Serialization.IXmlSerializable
  parent: System.Xml.Serialization
  isExternal: true
  name: IXmlSerializable
  nameWithType: IXmlSerializable
  fullName: System.Xml.Serialization.IXmlSerializable
- uid: System.IFormattable
  commentId: T:System.IFormattable
  parent: System
  isExternal: true
  name: IFormattable
  nameWithType: IFormattable
  fullName: System.IFormattable
- uid: System.Runtime.Serialization.ISerializable
  commentId: T:System.Runtime.Serialization.ISerializable
  parent: System.Runtime.Serialization
  isExternal: true
  name: ISerializable
  nameWithType: ISerializable
  fullName: System.Runtime.Serialization.ISerializable
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IEquatable`1
  commentId: T:System.IEquatable`1
  isExternal: true
  name: IEquatable<T>
  nameWithType: IEquatable<T>
  fullName: System.IEquatable<T>
  nameWithType.vb: IEquatable(Of T)
  fullName.vb: System.IEquatable(Of T)
  name.vb: IEquatable(Of T)
  spec.csharp:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: System.Xml.Serialization
  commentId: N:System.Xml.Serialization
  isExternal: true
  name: System.Xml.Serialization
  nameWithType: System.Xml.Serialization
  fullName: System.Xml.Serialization
- uid: System.Runtime.Serialization
  commentId: N:System.Runtime.Serialization
  isExternal: true
  name: System.Runtime.Serialization
  nameWithType: System.Runtime.Serialization
  fullName: System.Runtime.Serialization
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: NodaTime.OffsetDate.#ctor*
  commentId: Overload:NodaTime.OffsetDate.#ctor
  name: OffsetDate
  nameWithType: OffsetDate.OffsetDate
  fullName: NodaTime.OffsetDate.OffsetDate
- uid: NodaTime.Offset
  commentId: T:NodaTime.Offset
  parent: NodaTime
  name: Offset
  nameWithType: Offset
  fullName: NodaTime.Offset
- uid: NodaTime.OffsetDate.Date*
  commentId: Overload:NodaTime.OffsetDate.Date
  name: Date
  nameWithType: OffsetDate.Date
  fullName: NodaTime.OffsetDate.Date
- uid: NodaTime.OffsetDate.Offset*
  commentId: Overload:NodaTime.OffsetDate.Offset
  name: Offset
  nameWithType: OffsetDate.Offset
  fullName: NodaTime.OffsetDate.Offset
- uid: NodaTime.OffsetDate.Calendar*
  commentId: Overload:NodaTime.OffsetDate.Calendar
  name: Calendar
  nameWithType: OffsetDate.Calendar
  fullName: NodaTime.OffsetDate.Calendar
- uid: NodaTime.CalendarSystem
  commentId: T:NodaTime.CalendarSystem
  parent: NodaTime
  name: CalendarSystem
  nameWithType: CalendarSystem
  fullName: NodaTime.CalendarSystem
- uid: NodaTime.OffsetDate.Year*
  commentId: Overload:NodaTime.OffsetDate.Year
  name: Year
  nameWithType: OffsetDate.Year
  fullName: NodaTime.OffsetDate.Year
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: NodaTime.OffsetDate.Month*
  commentId: Overload:NodaTime.OffsetDate.Month
  name: Month
  nameWithType: OffsetDate.Month
  fullName: NodaTime.OffsetDate.Month
- uid: NodaTime.OffsetDate.Day*
  commentId: Overload:NodaTime.OffsetDate.Day
  name: Day
  nameWithType: OffsetDate.Day
  fullName: NodaTime.OffsetDate.Day
- uid: NodaTime.IsoDayOfWeek
  commentId: T:NodaTime.IsoDayOfWeek
  parent: NodaTime
  name: IsoDayOfWeek
  nameWithType: IsoDayOfWeek
  fullName: NodaTime.IsoDayOfWeek
- uid: NodaTime.OffsetDate.DayOfWeek*
  commentId: Overload:NodaTime.OffsetDate.DayOfWeek
  name: DayOfWeek
  nameWithType: OffsetDate.DayOfWeek
  fullName: NodaTime.OffsetDate.DayOfWeek
- uid: NodaTime.OffsetDate.YearOfEra*
  commentId: Overload:NodaTime.OffsetDate.YearOfEra
  name: YearOfEra
  nameWithType: OffsetDate.YearOfEra
  fullName: NodaTime.OffsetDate.YearOfEra
- uid: NodaTime.OffsetDate.Era*
  commentId: Overload:NodaTime.OffsetDate.Era
  name: Era
  nameWithType: OffsetDate.Era
  fullName: NodaTime.OffsetDate.Era
- uid: NodaTime.Calendars.Era
  commentId: T:NodaTime.Calendars.Era
  parent: NodaTime.Calendars
  name: Era
  nameWithType: Era
  fullName: NodaTime.Calendars.Era
- uid: NodaTime.Calendars
  commentId: N:NodaTime.Calendars
  name: NodaTime.Calendars
  nameWithType: NodaTime.Calendars
  fullName: NodaTime.Calendars
- uid: NodaTime.OffsetDate.DayOfYear*
  commentId: Overload:NodaTime.OffsetDate.DayOfYear
  name: DayOfYear
  nameWithType: OffsetDate.DayOfYear
  fullName: NodaTime.OffsetDate.DayOfYear
- uid: NodaTime.OffsetDate
  commentId: T:NodaTime.OffsetDate
  parent: NodaTime
  name: OffsetDate
  nameWithType: OffsetDate
  fullName: NodaTime.OffsetDate
- uid: NodaTime.OffsetDate.WithOffset*
  commentId: Overload:NodaTime.OffsetDate.WithOffset
  name: WithOffset
  nameWithType: OffsetDate.WithOffset
  fullName: NodaTime.OffsetDate.WithOffset
- uid: NodaTime.OffsetDate.With*
  commentId: Overload:NodaTime.OffsetDate.With
  name: With
  nameWithType: OffsetDate.With
  fullName: NodaTime.OffsetDate.With
- uid: System.Func{NodaTime.LocalDate,NodaTime.LocalDate}
  commentId: T:System.Func{NodaTime.LocalDate,NodaTime.LocalDate}
  parent: System
  definition: System.Func`2
  name: Func<LocalDate, LocalDate>
  nameWithType: Func<LocalDate, LocalDate>
  fullName: System.Func<NodaTime.LocalDate, NodaTime.LocalDate>
  nameWithType.vb: Func(Of LocalDate, LocalDate)
  fullName.vb: System.Func(Of NodaTime.LocalDate, NodaTime.LocalDate)
  name.vb: Func(Of LocalDate, LocalDate)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: NodaTime.LocalDate
    name: LocalDate
    nameWithType: LocalDate
    fullName: NodaTime.LocalDate
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: NodaTime.LocalDate
    name: LocalDate
    nameWithType: LocalDate
    fullName: NodaTime.LocalDate
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: NodaTime.LocalDate
    name: LocalDate
    nameWithType: LocalDate
    fullName: NodaTime.LocalDate
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: NodaTime.LocalDate
    name: LocalDate
    nameWithType: LocalDate
    fullName: NodaTime.LocalDate
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func`2
  commentId: T:System.Func`2
  isExternal: true
  name: Func<T, TResult>
  nameWithType: Func<T, TResult>
  fullName: System.Func<T, TResult>
  nameWithType.vb: Func(Of T, TResult)
  fullName.vb: System.Func(Of T, TResult)
  name.vb: Func(Of T, TResult)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: NodaTime.OffsetDate.WithCalendar*
  commentId: Overload:NodaTime.OffsetDate.WithCalendar
  name: WithCalendar
  nameWithType: OffsetDate.WithCalendar
  fullName: NodaTime.OffsetDate.WithCalendar
- uid: NodaTime.LocalTime
  commentId: T:NodaTime.LocalTime
  parent: NodaTime
  name: LocalTime
  nameWithType: LocalTime
  fullName: NodaTime.LocalTime
- uid: NodaTime.OffsetDateTime
  commentId: T:NodaTime.OffsetDateTime
  parent: NodaTime
  name: OffsetDateTime
  nameWithType: OffsetDateTime
  fullName: NodaTime.OffsetDateTime
- uid: NodaTime.OffsetDate.At*
  commentId: Overload:NodaTime.OffsetDate.At
  name: At
  nameWithType: OffsetDate.At
  fullName: NodaTime.OffsetDate.At
- uid: System.ValueType.GetHashCode
  commentId: M:System.ValueType.GetHashCode
  parent: System.ValueType
  isExternal: true
  name: GetHashCode()
  nameWithType: ValueType.GetHashCode()
  fullName: System.ValueType.GetHashCode()
  spec.csharp:
  - uid: System.ValueType.GetHashCode
    name: GetHashCode
    nameWithType: ValueType.GetHashCode
    fullName: System.ValueType.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.ValueType.GetHashCode
    name: GetHashCode
    nameWithType: ValueType.GetHashCode
    fullName: System.ValueType.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: NodaTime.OffsetDate.GetHashCode*
  commentId: Overload:NodaTime.OffsetDate.GetHashCode
  name: GetHashCode
  nameWithType: OffsetDate.GetHashCode
  fullName: NodaTime.OffsetDate.GetHashCode
- uid: System.ValueType
  commentId: T:System.ValueType
  parent: System
  isExternal: true
  name: ValueType
  nameWithType: ValueType
  fullName: System.ValueType
- uid: System.ValueType.Equals(System.Object)
  commentId: M:System.ValueType.Equals(System.Object)
  parent: System.ValueType
  isExternal: true
  name: Equals(Object)
  nameWithType: ValueType.Equals(Object)
  fullName: System.ValueType.Equals(System.Object)
  spec.csharp:
  - uid: System.ValueType.Equals(System.Object)
    name: Equals
    nameWithType: ValueType.Equals
    fullName: System.ValueType.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.ValueType.Equals(System.Object)
    name: Equals
    nameWithType: ValueType.Equals
    fullName: System.ValueType.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: NodaTime.OffsetDate.Equals*
  commentId: Overload:NodaTime.OffsetDate.Equals
  name: Equals
  nameWithType: OffsetDate.Equals
  fullName: NodaTime.OffsetDate.Equals
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.IEquatable{NodaTime.OffsetDate}.Equals(NodaTime.OffsetDate)
  commentId: M:System.IEquatable{NodaTime.OffsetDate}.Equals(NodaTime.OffsetDate)
  parent: System.IEquatable{NodaTime.OffsetDate}
  definition: System.IEquatable`1.Equals(`0)
  name: Equals(OffsetDate)
  nameWithType: IEquatable<OffsetDate>.Equals(OffsetDate)
  fullName: System.IEquatable<NodaTime.OffsetDate>.Equals(NodaTime.OffsetDate)
  nameWithType.vb: IEquatable(Of OffsetDate).Equals(OffsetDate)
  fullName.vb: System.IEquatable(Of NodaTime.OffsetDate).Equals(NodaTime.OffsetDate)
  spec.csharp:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    nameWithType: IEquatable<OffsetDate>.Equals
    fullName: System.IEquatable<NodaTime.OffsetDate>.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: NodaTime.OffsetDate
    name: OffsetDate
    nameWithType: OffsetDate
    fullName: NodaTime.OffsetDate
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    nameWithType: IEquatable(Of OffsetDate).Equals
    fullName: System.IEquatable(Of NodaTime.OffsetDate).Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: NodaTime.OffsetDate
    name: OffsetDate
    nameWithType: OffsetDate
    fullName: NodaTime.OffsetDate
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IEquatable`1.Equals(`0)
  commentId: M:System.IEquatable`1.Equals(`0)
  isExternal: true
  name: Equals(T)
  nameWithType: IEquatable<T>.Equals(T)
  fullName: System.IEquatable<T>.Equals(T)
  nameWithType.vb: IEquatable(Of T).Equals(T)
  fullName.vb: System.IEquatable(Of T).Equals(T)
  spec.csharp:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    nameWithType: IEquatable<T>.Equals
    fullName: System.IEquatable<T>.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    nameWithType: IEquatable(Of T).Equals
    fullName: System.IEquatable(Of T).Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: NodaTime.OffsetDate.op_Equality*
  commentId: Overload:NodaTime.OffsetDate.op_Equality
  name: Equality
  nameWithType: OffsetDate.Equality
  fullName: NodaTime.OffsetDate.Equality
- uid: NodaTime.OffsetDate.op_Inequality*
  commentId: Overload:NodaTime.OffsetDate.op_Inequality
  name: Inequality
  nameWithType: OffsetDate.Inequality
  fullName: NodaTime.OffsetDate.Inequality
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.ValueType.ToString
  commentId: M:System.ValueType.ToString
  parent: System.ValueType
  isExternal: true
  name: ToString()
  nameWithType: ValueType.ToString()
  fullName: System.ValueType.ToString()
  spec.csharp:
  - uid: System.ValueType.ToString
    name: ToString
    nameWithType: ValueType.ToString
    fullName: System.ValueType.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.ValueType.ToString
    name: ToString
    nameWithType: ValueType.ToString
    fullName: System.ValueType.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: NodaTime.OffsetDate.ToString*
  commentId: Overload:NodaTime.OffsetDate.ToString
  name: ToString
  nameWithType: OffsetDate.ToString
  fullName: NodaTime.OffsetDate.ToString
- uid: System.IFormatProvider
  commentId: T:System.IFormatProvider
  parent: System
  isExternal: true
  name: IFormatProvider
  nameWithType: IFormatProvider
  fullName: System.IFormatProvider
- uid: System.IFormattable.ToString(System.String,System.IFormatProvider)
  commentId: M:System.IFormattable.ToString(System.String,System.IFormatProvider)
  parent: System.IFormattable
  isExternal: true
  name: ToString(String, IFormatProvider)
  nameWithType: IFormattable.ToString(String, IFormatProvider)
  fullName: System.IFormattable.ToString(System.String, System.IFormatProvider)
  spec.csharp:
  - uid: System.IFormattable.ToString(System.String,System.IFormatProvider)
    name: ToString
    nameWithType: IFormattable.ToString
    fullName: System.IFormattable.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.IFormatProvider
    name: IFormatProvider
    nameWithType: IFormatProvider
    fullName: System.IFormatProvider
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IFormattable.ToString(System.String,System.IFormatProvider)
    name: ToString
    nameWithType: IFormattable.ToString
    fullName: System.IFormattable.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.IFormatProvider
    name: IFormatProvider
    nameWithType: IFormatProvider
    fullName: System.IFormatProvider
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: NodaTime.OffsetDate.Deconstruct*
  commentId: Overload:NodaTime.OffsetDate.Deconstruct
  name: Deconstruct
  nameWithType: OffsetDate.Deconstruct
  fullName: NodaTime.OffsetDate.Deconstruct
- uid: NodaTime.OffsetDate.System#Xml#Serialization#IXmlSerializable#GetSchema*
  commentId: Overload:NodaTime.OffsetDate.System#Xml#Serialization#IXmlSerializable#GetSchema
  name: IXmlSerializable.GetSchema
  nameWithType: OffsetDate.IXmlSerializable.GetSchema
  fullName: NodaTime.OffsetDate.System.Xml.Serialization.IXmlSerializable.GetSchema
  nameWithType.vb: OffsetDate.System.Xml.Serialization.IXmlSerializable.GetSchema
  name.vb: System.Xml.Serialization.IXmlSerializable.GetSchema
- uid: System.Xml.Serialization.IXmlSerializable.GetSchema
  commentId: M:System.Xml.Serialization.IXmlSerializable.GetSchema
  parent: System.Xml.Serialization.IXmlSerializable
  isExternal: true
  name: GetSchema()
  nameWithType: IXmlSerializable.GetSchema()
  fullName: System.Xml.Serialization.IXmlSerializable.GetSchema()
  spec.csharp:
  - uid: System.Xml.Serialization.IXmlSerializable.GetSchema
    name: GetSchema
    nameWithType: IXmlSerializable.GetSchema
    fullName: System.Xml.Serialization.IXmlSerializable.GetSchema
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Xml.Serialization.IXmlSerializable.GetSchema
    name: GetSchema
    nameWithType: IXmlSerializable.GetSchema
    fullName: System.Xml.Serialization.IXmlSerializable.GetSchema
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Xml.Schema.XmlSchema
  commentId: T:System.Xml.Schema.XmlSchema
  parent: System.Xml.Schema
  isExternal: true
  name: XmlSchema
  nameWithType: XmlSchema
  fullName: System.Xml.Schema.XmlSchema
- uid: System.Xml.Schema
  commentId: N:System.Xml.Schema
  isExternal: true
  name: System.Xml.Schema
  nameWithType: System.Xml.Schema
  fullName: System.Xml.Schema
- uid: NodaTime.OffsetDate.System#Xml#Serialization#IXmlSerializable#ReadXml*
  commentId: Overload:NodaTime.OffsetDate.System#Xml#Serialization#IXmlSerializable#ReadXml
  name: IXmlSerializable.ReadXml
  nameWithType: OffsetDate.IXmlSerializable.ReadXml
  fullName: NodaTime.OffsetDate.System.Xml.Serialization.IXmlSerializable.ReadXml
  nameWithType.vb: OffsetDate.System.Xml.Serialization.IXmlSerializable.ReadXml
  name.vb: System.Xml.Serialization.IXmlSerializable.ReadXml
- uid: System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)
  commentId: M:System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)
  parent: System.Xml.Serialization.IXmlSerializable
  isExternal: true
  name: ReadXml(XmlReader)
  nameWithType: IXmlSerializable.ReadXml(XmlReader)
  fullName: System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)
  spec.csharp:
  - uid: System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)
    name: ReadXml
    nameWithType: IXmlSerializable.ReadXml
    fullName: System.Xml.Serialization.IXmlSerializable.ReadXml
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Xml.XmlReader
    name: XmlReader
    nameWithType: XmlReader
    fullName: System.Xml.XmlReader
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)
    name: ReadXml
    nameWithType: IXmlSerializable.ReadXml
    fullName: System.Xml.Serialization.IXmlSerializable.ReadXml
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Xml.XmlReader
    name: XmlReader
    nameWithType: XmlReader
    fullName: System.Xml.XmlReader
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Xml.XmlReader
  commentId: T:System.Xml.XmlReader
  parent: System.Xml
  isExternal: true
  name: XmlReader
  nameWithType: XmlReader
  fullName: System.Xml.XmlReader
- uid: System.Xml
  commentId: N:System.Xml
  isExternal: true
  name: System.Xml
  nameWithType: System.Xml
  fullName: System.Xml
- uid: NodaTime.OffsetDate.System#Xml#Serialization#IXmlSerializable#WriteXml*
  commentId: Overload:NodaTime.OffsetDate.System#Xml#Serialization#IXmlSerializable#WriteXml
  name: IXmlSerializable.WriteXml
  nameWithType: OffsetDate.IXmlSerializable.WriteXml
  fullName: NodaTime.OffsetDate.System.Xml.Serialization.IXmlSerializable.WriteXml
  nameWithType.vb: OffsetDate.System.Xml.Serialization.IXmlSerializable.WriteXml
  name.vb: System.Xml.Serialization.IXmlSerializable.WriteXml
- uid: System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)
  commentId: M:System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)
  parent: System.Xml.Serialization.IXmlSerializable
  isExternal: true
  name: WriteXml(XmlWriter)
  nameWithType: IXmlSerializable.WriteXml(XmlWriter)
  fullName: System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)
  spec.csharp:
  - uid: System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)
    name: WriteXml
    nameWithType: IXmlSerializable.WriteXml
    fullName: System.Xml.Serialization.IXmlSerializable.WriteXml
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Xml.XmlWriter
    name: XmlWriter
    nameWithType: XmlWriter
    fullName: System.Xml.XmlWriter
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)
    name: WriteXml
    nameWithType: IXmlSerializable.WriteXml
    fullName: System.Xml.Serialization.IXmlSerializable.WriteXml
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Xml.XmlWriter
    name: XmlWriter
    nameWithType: XmlWriter
    fullName: System.Xml.XmlWriter
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Xml.XmlWriter
  commentId: T:System.Xml.XmlWriter
  parent: System.Xml
  isExternal: true
  name: XmlWriter
  nameWithType: XmlWriter
  fullName: System.Xml.XmlWriter
- uid: System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  commentId: M:System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  parent: System.Runtime.Serialization.ISerializable
  isExternal: true
  name: GetObjectData(SerializationInfo, StreamingContext)
  nameWithType: ISerializable.GetObjectData(SerializationInfo, StreamingContext)
  fullName: System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext)
  spec.csharp:
  - uid: System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
    name: GetObjectData
    nameWithType: ISerializable.GetObjectData
    fullName: System.Runtime.Serialization.ISerializable.GetObjectData
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Runtime.Serialization.SerializationInfo
    name: SerializationInfo
    nameWithType: SerializationInfo
    fullName: System.Runtime.Serialization.SerializationInfo
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Runtime.Serialization.StreamingContext
    name: StreamingContext
    nameWithType: StreamingContext
    fullName: System.Runtime.Serialization.StreamingContext
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
    name: GetObjectData
    nameWithType: ISerializable.GetObjectData
    fullName: System.Runtime.Serialization.ISerializable.GetObjectData
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Runtime.Serialization.SerializationInfo
    name: SerializationInfo
    nameWithType: SerializationInfo
    fullName: System.Runtime.Serialization.SerializationInfo
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Runtime.Serialization.StreamingContext
    name: StreamingContext
    nameWithType: StreamingContext
    fullName: System.Runtime.Serialization.StreamingContext
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Runtime.Serialization.SerializationInfo
  commentId: T:System.Runtime.Serialization.SerializationInfo
  parent: System.Runtime.Serialization
  isExternal: true
  name: SerializationInfo
  nameWithType: SerializationInfo
  fullName: System.Runtime.Serialization.SerializationInfo
- uid: NodaTime.OffsetDate.System#Runtime#Serialization#ISerializable#GetObjectData*
  commentId: Overload:NodaTime.OffsetDate.System#Runtime#Serialization#ISerializable#GetObjectData
  name: ISerializable.GetObjectData
  nameWithType: OffsetDate.ISerializable.GetObjectData
  fullName: NodaTime.OffsetDate.System.Runtime.Serialization.ISerializable.GetObjectData
  nameWithType.vb: OffsetDate.System.Runtime.Serialization.ISerializable.GetObjectData
  name.vb: System.Runtime.Serialization.ISerializable.GetObjectData
- uid: System.Runtime.Serialization.StreamingContext
  commentId: T:System.Runtime.Serialization.StreamingContext
  parent: System.Runtime.Serialization
  isExternal: true
  name: StreamingContext
  nameWithType: StreamingContext
  fullName: System.Runtime.Serialization.StreamingContext
shouldSkipMarkup: true
