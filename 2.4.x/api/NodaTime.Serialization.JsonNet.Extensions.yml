### YamlMime:ManagedReference
items:
- uid: NodaTime.Serialization.JsonNet.Extensions
  commentId: T:NodaTime.Serialization.JsonNet.Extensions
  id: Extensions
  parent: NodaTime.Serialization.JsonNet
  children:
  - NodaTime.Serialization.JsonNet.Extensions.ConfigureForNodaTime(Newtonsoft.Json.JsonSerializer,NodaTime.IDateTimeZoneProvider)
  - NodaTime.Serialization.JsonNet.Extensions.ConfigureForNodaTime(Newtonsoft.Json.JsonSerializerSettings,NodaTime.IDateTimeZoneProvider)
  - NodaTime.Serialization.JsonNet.Extensions.WithIsoIntervalConverter(Newtonsoft.Json.JsonSerializer)
  - NodaTime.Serialization.JsonNet.Extensions.WithIsoIntervalConverter(Newtonsoft.Json.JsonSerializerSettings)
  langs:
  - csharp
  - vb
  name: Extensions
  nameWithType: Extensions
  fullName: NodaTime.Serialization.JsonNet.Extensions
  type: Class
  source:
    remote:
      path: 2.4.x/src/NodaTime.Serialization.JsonNet/Extensions.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: Extensions
    path: src/NodaTime.Serialization.JsonNet/Extensions.cs
    startLine: 13
  assemblies:
  - NodaTime.Serialization.JsonNet
  namespace: NodaTime.Serialization.JsonNet
  summary: "\nStatic class containing extension methods to configure Json.NET for Noda Time types.\n"
  example: []
  syntax:
    content: public static class Extensions
    content.vb: Public Module Extensions
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
- uid: NodaTime.Serialization.JsonNet.Extensions.ConfigureForNodaTime(Newtonsoft.Json.JsonSerializerSettings,NodaTime.IDateTimeZoneProvider)
  commentId: M:NodaTime.Serialization.JsonNet.Extensions.ConfigureForNodaTime(Newtonsoft.Json.JsonSerializerSettings,NodaTime.IDateTimeZoneProvider)
  id: ConfigureForNodaTime(Newtonsoft.Json.JsonSerializerSettings,NodaTime.IDateTimeZoneProvider)
  isExtensionMethod: true
  parent: NodaTime.Serialization.JsonNet.Extensions
  langs:
  - csharp
  - vb
  name: ConfigureForNodaTime(JsonSerializerSettings, IDateTimeZoneProvider)
  nameWithType: Extensions.ConfigureForNodaTime(JsonSerializerSettings, IDateTimeZoneProvider)
  fullName: NodaTime.Serialization.JsonNet.Extensions.ConfigureForNodaTime(Newtonsoft.Json.JsonSerializerSettings, NodaTime.IDateTimeZoneProvider)
  type: Method
  source:
    remote:
      path: 2.4.x/src/NodaTime.Serialization.JsonNet/Extensions.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: ConfigureForNodaTime
    path: src/NodaTime.Serialization.JsonNet/Extensions.cs
    startLine: 21
  assemblies:
  - NodaTime.Serialization.JsonNet
  namespace: NodaTime.Serialization.JsonNet
  summary: "\nConfigures Json.NET with everything required to properly serialize and deserialize NodaTime data types.\n"
  example: []
  syntax:
    content: public static JsonSerializerSettings ConfigureForNodaTime(this JsonSerializerSettings settings, IDateTimeZoneProvider provider)
    parameters:
    - id: settings
      type: Newtonsoft.Json.JsonSerializerSettings
      description: The existing settings to add Noda Time converters to.
    - id: provider
      type: NodaTime.IDateTimeZoneProvider
      description: The time zone provider to use when parsing time zones and zoned date/times.
    return:
      type: Newtonsoft.Json.JsonSerializerSettings
      description: The original <code data-dev-comment-type="paramref" class="paramref">settings</code> value, for further chaining.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ConfigureForNodaTime(settings As JsonSerializerSettings, provider As IDateTimeZoneProvider) As JsonSerializerSettings
  overload: NodaTime.Serialization.JsonNet.Extensions.ConfigureForNodaTime*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: NodaTime.Serialization.JsonNet.Extensions.ConfigureForNodaTime(Newtonsoft.Json.JsonSerializer,NodaTime.IDateTimeZoneProvider)
  commentId: M:NodaTime.Serialization.JsonNet.Extensions.ConfigureForNodaTime(Newtonsoft.Json.JsonSerializer,NodaTime.IDateTimeZoneProvider)
  id: ConfigureForNodaTime(Newtonsoft.Json.JsonSerializer,NodaTime.IDateTimeZoneProvider)
  isExtensionMethod: true
  parent: NodaTime.Serialization.JsonNet.Extensions
  langs:
  - csharp
  - vb
  name: ConfigureForNodaTime(JsonSerializer, IDateTimeZoneProvider)
  nameWithType: Extensions.ConfigureForNodaTime(JsonSerializer, IDateTimeZoneProvider)
  fullName: NodaTime.Serialization.JsonNet.Extensions.ConfigureForNodaTime(Newtonsoft.Json.JsonSerializer, NodaTime.IDateTimeZoneProvider)
  type: Method
  source:
    remote:
      path: 2.4.x/src/NodaTime.Serialization.JsonNet/Extensions.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: ConfigureForNodaTime
    path: src/NodaTime.Serialization.JsonNet/Extensions.cs
    startLine: 47
  assemblies:
  - NodaTime.Serialization.JsonNet
  namespace: NodaTime.Serialization.JsonNet
  summary: "\nConfigures Json.NET with everything required to properly serialize and deserialize NodaTime data types.\n"
  example: []
  syntax:
    content: public static JsonSerializer ConfigureForNodaTime(this JsonSerializer serializer, IDateTimeZoneProvider provider)
    parameters:
    - id: serializer
      type: Newtonsoft.Json.JsonSerializer
      description: The existing serializer to add Noda Time converters to.
    - id: provider
      type: NodaTime.IDateTimeZoneProvider
      description: The time zone provider to use when parsing time zones and zoned date/times.
    return:
      type: Newtonsoft.Json.JsonSerializer
      description: The original <code data-dev-comment-type="paramref" class="paramref">serializer</code> value, for further chaining.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ConfigureForNodaTime(serializer As JsonSerializer, provider As IDateTimeZoneProvider) As JsonSerializer
  overload: NodaTime.Serialization.JsonNet.Extensions.ConfigureForNodaTime*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: NodaTime.Serialization.JsonNet.Extensions.WithIsoIntervalConverter(Newtonsoft.Json.JsonSerializerSettings)
  commentId: M:NodaTime.Serialization.JsonNet.Extensions.WithIsoIntervalConverter(Newtonsoft.Json.JsonSerializerSettings)
  id: WithIsoIntervalConverter(Newtonsoft.Json.JsonSerializerSettings)
  isExtensionMethod: true
  parent: NodaTime.Serialization.JsonNet.Extensions
  langs:
  - csharp
  - vb
  name: WithIsoIntervalConverter(JsonSerializerSettings)
  nameWithType: Extensions.WithIsoIntervalConverter(JsonSerializerSettings)
  fullName: NodaTime.Serialization.JsonNet.Extensions.WithIsoIntervalConverter(Newtonsoft.Json.JsonSerializerSettings)
  type: Method
  source:
    remote:
      path: 2.4.x/src/NodaTime.Serialization.JsonNet/Extensions.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: WithIsoIntervalConverter
    path: src/NodaTime.Serialization.JsonNet/Extensions.cs
    startLine: 73
  assemblies:
  - NodaTime.Serialization.JsonNet
  namespace: NodaTime.Serialization.JsonNet
  summary: "\nConfigures the given serializer settings to use <xref href=\"NodaTime.Serialization.JsonNet.NodaConverters.IsoIntervalConverter\" data-throw-if-not-resolved=\"false\"></xref>.\nAny other converters which can convert <xref href=\"NodaTime.Interval\" data-throw-if-not-resolved=\"false\"></xref> are removed from the serializer.\n"
  example: []
  syntax:
    content: public static JsonSerializerSettings WithIsoIntervalConverter(this JsonSerializerSettings settings)
    parameters:
    - id: settings
      type: Newtonsoft.Json.JsonSerializerSettings
      description: The existing serializer settings to add Noda Time converters to.
    return:
      type: Newtonsoft.Json.JsonSerializerSettings
      description: The original <code data-dev-comment-type="paramref" class="paramref">settings</code> value, for further chaining.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function WithIsoIntervalConverter(settings As JsonSerializerSettings) As JsonSerializerSettings
  overload: NodaTime.Serialization.JsonNet.Extensions.WithIsoIntervalConverter*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: NodaTime.Serialization.JsonNet.Extensions.WithIsoIntervalConverter(Newtonsoft.Json.JsonSerializer)
  commentId: M:NodaTime.Serialization.JsonNet.Extensions.WithIsoIntervalConverter(Newtonsoft.Json.JsonSerializer)
  id: WithIsoIntervalConverter(Newtonsoft.Json.JsonSerializer)
  isExtensionMethod: true
  parent: NodaTime.Serialization.JsonNet.Extensions
  langs:
  - csharp
  - vb
  name: WithIsoIntervalConverter(JsonSerializer)
  nameWithType: Extensions.WithIsoIntervalConverter(JsonSerializer)
  fullName: NodaTime.Serialization.JsonNet.Extensions.WithIsoIntervalConverter(Newtonsoft.Json.JsonSerializer)
  type: Method
  source:
    remote:
      path: 2.4.x/src/NodaTime.Serialization.JsonNet/Extensions.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: WithIsoIntervalConverter
    path: src/NodaTime.Serialization.JsonNet/Extensions.cs
    startLine: 89
  assemblies:
  - NodaTime.Serialization.JsonNet
  namespace: NodaTime.Serialization.JsonNet
  summary: "\nConfigures the given serializer to use <xref href=\"NodaTime.Serialization.JsonNet.NodaConverters.IsoIntervalConverter\" data-throw-if-not-resolved=\"false\"></xref>.\nAny other converters which can convert <xref href=\"NodaTime.Interval\" data-throw-if-not-resolved=\"false\"></xref> are removed from the serializer.\n"
  example: []
  syntax:
    content: public static JsonSerializer WithIsoIntervalConverter(this JsonSerializer serializer)
    parameters:
    - id: serializer
      type: Newtonsoft.Json.JsonSerializer
      description: The existing serializer to add Noda Time converters to.
    return:
      type: Newtonsoft.Json.JsonSerializer
      description: The original <code data-dev-comment-type="paramref" class="paramref">serializer</code> value, for further chaining.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function WithIsoIntervalConverter(serializer As JsonSerializer) As JsonSerializer
  overload: NodaTime.Serialization.JsonNet.Extensions.WithIsoIntervalConverter*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
references:
- uid: NodaTime.Serialization.JsonNet
  commentId: N:NodaTime.Serialization.JsonNet
  name: NodaTime.Serialization.JsonNet
  nameWithType: NodaTime.Serialization.JsonNet
  fullName: NodaTime.Serialization.JsonNet
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: NodaTime.Serialization.JsonNet.Extensions.ConfigureForNodaTime*
  commentId: Overload:NodaTime.Serialization.JsonNet.Extensions.ConfigureForNodaTime
  name: ConfigureForNodaTime
  nameWithType: Extensions.ConfigureForNodaTime
  fullName: NodaTime.Serialization.JsonNet.Extensions.ConfigureForNodaTime
- uid: Newtonsoft.Json.JsonSerializerSettings
  commentId: T:Newtonsoft.Json.JsonSerializerSettings
  parent: Newtonsoft.Json
  isExternal: true
  name: JsonSerializerSettings
  nameWithType: JsonSerializerSettings
  fullName: Newtonsoft.Json.JsonSerializerSettings
- uid: NodaTime.IDateTimeZoneProvider
  commentId: T:NodaTime.IDateTimeZoneProvider
  parent: NodaTime
  name: IDateTimeZoneProvider
  nameWithType: IDateTimeZoneProvider
  fullName: NodaTime.IDateTimeZoneProvider
- uid: Newtonsoft.Json
  commentId: N:Newtonsoft.Json
  isExternal: true
  name: Newtonsoft.Json
  nameWithType: Newtonsoft.Json
  fullName: Newtonsoft.Json
- uid: NodaTime
  commentId: N:NodaTime
  name: NodaTime
  nameWithType: NodaTime
  fullName: NodaTime
- uid: Newtonsoft.Json.JsonSerializer
  commentId: T:Newtonsoft.Json.JsonSerializer
  parent: Newtonsoft.Json
  isExternal: true
  name: JsonSerializer
  nameWithType: JsonSerializer
  fullName: Newtonsoft.Json.JsonSerializer
- uid: NodaTime.Serialization.JsonNet.NodaConverters.IsoIntervalConverter
  commentId: P:NodaTime.Serialization.JsonNet.NodaConverters.IsoIntervalConverter
  isExternal: true
- uid: NodaTime.Interval
  commentId: T:NodaTime.Interval
  parent: NodaTime
  name: Interval
  nameWithType: Interval
  fullName: NodaTime.Interval
- uid: NodaTime.Serialization.JsonNet.Extensions.WithIsoIntervalConverter*
  commentId: Overload:NodaTime.Serialization.JsonNet.Extensions.WithIsoIntervalConverter
  name: WithIsoIntervalConverter
  nameWithType: Extensions.WithIsoIntervalConverter
  fullName: NodaTime.Serialization.JsonNet.Extensions.WithIsoIntervalConverter
shouldSkipMarkup: true
