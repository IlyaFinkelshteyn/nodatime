### YamlMime:ManagedReference
items:
- uid: NodaTime.OffsetDateTime
  commentId: T:NodaTime.OffsetDateTime
  id: OffsetDateTime
  parent: NodaTime
  children:
  - NodaTime.OffsetDateTime.#ctor(NodaTime.LocalDateTime,NodaTime.Offset)
  - NodaTime.OffsetDateTime.Add(NodaTime.OffsetDateTime,NodaTime.Duration)
  - NodaTime.OffsetDateTime.Calendar
  - NodaTime.OffsetDateTime.ClockHourOfHalfDay
  - NodaTime.OffsetDateTime.Date
  - NodaTime.OffsetDateTime.Day
  - NodaTime.OffsetDateTime.DayOfWeek
  - NodaTime.OffsetDateTime.DayOfYear
  - NodaTime.OffsetDateTime.Equals(NodaTime.OffsetDateTime)
  - NodaTime.OffsetDateTime.Equals(System.Object)
  - NodaTime.OffsetDateTime.Era
  - NodaTime.OffsetDateTime.FromDateTimeOffset(System.DateTimeOffset)
  - NodaTime.OffsetDateTime.GetHashCode
  - NodaTime.OffsetDateTime.Hour
  - NodaTime.OffsetDateTime.InFixedZone
  - NodaTime.OffsetDateTime.LocalDateTime
  - NodaTime.OffsetDateTime.Millisecond
  - NodaTime.OffsetDateTime.Minus(NodaTime.Duration)
  - NodaTime.OffsetDateTime.Minus(NodaTime.OffsetDateTime)
  - NodaTime.OffsetDateTime.Minute
  - NodaTime.OffsetDateTime.Month
  - NodaTime.OffsetDateTime.NanosecondOfDay
  - NodaTime.OffsetDateTime.NanosecondOfSecond
  - NodaTime.OffsetDateTime.Offset
  - NodaTime.OffsetDateTime.op_Addition(NodaTime.OffsetDateTime,NodaTime.Duration)
  - NodaTime.OffsetDateTime.op_Equality(NodaTime.OffsetDateTime,NodaTime.OffsetDateTime)
  - NodaTime.OffsetDateTime.op_Inequality(NodaTime.OffsetDateTime,NodaTime.OffsetDateTime)
  - NodaTime.OffsetDateTime.op_Subtraction(NodaTime.OffsetDateTime,NodaTime.Duration)
  - NodaTime.OffsetDateTime.op_Subtraction(NodaTime.OffsetDateTime,NodaTime.OffsetDateTime)
  - NodaTime.OffsetDateTime.Plus(NodaTime.Duration)
  - NodaTime.OffsetDateTime.PlusHours(System.Int32)
  - NodaTime.OffsetDateTime.PlusMilliseconds(System.Int64)
  - NodaTime.OffsetDateTime.PlusMinutes(System.Int32)
  - NodaTime.OffsetDateTime.PlusNanoseconds(System.Int64)
  - NodaTime.OffsetDateTime.PlusSeconds(System.Int64)
  - NodaTime.OffsetDateTime.PlusTicks(System.Int64)
  - NodaTime.OffsetDateTime.Second
  - NodaTime.OffsetDateTime.Subtract(NodaTime.OffsetDateTime,NodaTime.Duration)
  - NodaTime.OffsetDateTime.Subtract(NodaTime.OffsetDateTime,NodaTime.OffsetDateTime)
  - NodaTime.OffsetDateTime.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  - NodaTime.OffsetDateTime.System#Xml#Serialization#IXmlSerializable#GetSchema
  - NodaTime.OffsetDateTime.System#Xml#Serialization#IXmlSerializable#ReadXml(System.Xml.XmlReader)
  - NodaTime.OffsetDateTime.System#Xml#Serialization#IXmlSerializable#WriteXml(System.Xml.XmlWriter)
  - NodaTime.OffsetDateTime.TickOfDay
  - NodaTime.OffsetDateTime.TickOfSecond
  - NodaTime.OffsetDateTime.TimeOfDay
  - NodaTime.OffsetDateTime.ToDateTimeOffset
  - NodaTime.OffsetDateTime.ToInstant
  - NodaTime.OffsetDateTime.ToString
  - NodaTime.OffsetDateTime.ToString(System.String,System.IFormatProvider)
  - NodaTime.OffsetDateTime.With(System.Func{NodaTime.LocalDate,NodaTime.LocalDate})
  - NodaTime.OffsetDateTime.With(System.Func{NodaTime.LocalTime,NodaTime.LocalTime})
  - NodaTime.OffsetDateTime.WithCalendar(NodaTime.CalendarSystem)
  - NodaTime.OffsetDateTime.WithOffset(NodaTime.Offset)
  - NodaTime.OffsetDateTime.Year
  - NodaTime.OffsetDateTime.YearOfEra
  langs:
  - csharp
  - vb
  name: OffsetDateTime
  nameWithType: OffsetDateTime
  fullName: NodaTime.OffsetDateTime
  type: Struct
  source:
    remote:
      path: 2.1.x/src/NodaTime/OffsetDateTime.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: OffsetDateTime
    path: src/NodaTime/OffsetDateTime.cs
    startLine: 35
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nA local date and time in a particular calendar system, combined with an offset from UTC. This is\nbroadly similar to <xref href=\"System.DateTimeOffset\" data-throw-if-not-resolved=\"false\"></xref> in the BCL.\n"
  remarks: "\n<p>\nA value of this type unambiguously represents both a local time and an instant on the timeline,\nbut does not have a well-defined time zone. This means you cannot reliably know what the local\ntime would be five minutes later, for example. While this doesn&apos;t sound terribly useful, it&apos;s very common\nin text representations.\n</p>\n"
  example: []
  syntax:
    content: >-
      [Serializable]

      public struct OffsetDateTime : IEquatable<OffsetDateTime>, IFormattable, IXmlSerializable, ISerializable
    content.vb: >-
      <Serializable>

      Public Structure OffsetDateTime
          Implements IEquatable(Of OffsetDateTime), IFormattable, IXmlSerializable, ISerializable
  implements:
  - System.IEquatable{NodaTime.OffsetDateTime}
  - System.IFormattable
  - System.Xml.Serialization.IXmlSerializable
  - System.Runtime.Serialization.ISerializable
  inheritedMembers:
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetType
  attributes:
  - type: System.SerializableAttribute
    ctor: System.SerializableAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - struct
  modifiers.vb:
  - Public
  - Structure
- uid: NodaTime.OffsetDateTime.#ctor(NodaTime.LocalDateTime,NodaTime.Offset)
  commentId: M:NodaTime.OffsetDateTime.#ctor(NodaTime.LocalDateTime,NodaTime.Offset)
  id: '#ctor(NodaTime.LocalDateTime,NodaTime.Offset)'
  parent: NodaTime.OffsetDateTime
  langs:
  - csharp
  - vb
  name: OffsetDateTime(LocalDateTime, Offset)
  nameWithType: OffsetDateTime.OffsetDateTime(LocalDateTime, Offset)
  fullName: NodaTime.OffsetDateTime.OffsetDateTime(NodaTime.LocalDateTime, NodaTime.Offset)
  type: Constructor
  source:
    remote:
      path: 2.1.x/src/NodaTime/OffsetDateTime.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: .ctor
    path: src/NodaTime/OffsetDateTime.cs
    startLine: 128
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nConstructs a new offset date/time with the given local date and time, and the given offset from UTC.\n"
  example: []
  syntax:
    content: public OffsetDateTime(LocalDateTime localDateTime, Offset offset)
    parameters:
    - id: localDateTime
      type: NodaTime.LocalDateTime
      description: Local date and time to represent
    - id: offset
      type: NodaTime.Offset
      description: Offset from UTC
    content.vb: Public Sub New(localDateTime As LocalDateTime, offset As Offset)
  overload: NodaTime.OffsetDateTime.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: NodaTime.OffsetDateTime.Calendar
  commentId: P:NodaTime.OffsetDateTime.Calendar
  id: Calendar
  parent: NodaTime.OffsetDateTime
  langs:
  - csharp
  - vb
  name: Calendar
  nameWithType: OffsetDateTime.Calendar
  fullName: NodaTime.OffsetDateTime.Calendar
  type: Property
  source:
    remote:
      path: 2.1.x/src/NodaTime/OffsetDateTime.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: Calendar
    path: src/NodaTime/OffsetDateTime.cs
    startLine: 140
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: Gets the calendar system associated with this offset date and time.
  example: []
  syntax:
    content: public CalendarSystem Calendar { get; }
    parameters: []
    return:
      type: NodaTime.CalendarSystem
      description: The calendar system associated with this offset date and time.
    content.vb: Public ReadOnly Property Calendar As CalendarSystem
  overload: NodaTime.OffsetDateTime.Calendar*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: NodaTime.OffsetDateTime.Year
  commentId: P:NodaTime.OffsetDateTime.Year
  id: Year
  parent: NodaTime.OffsetDateTime
  langs:
  - csharp
  - vb
  name: Year
  nameWithType: OffsetDateTime.Year
  fullName: NodaTime.OffsetDateTime.Year
  type: Property
  source:
    remote:
      path: 2.1.x/src/NodaTime/OffsetDateTime.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: Year
    path: src/NodaTime/OffsetDateTime.cs
    startLine: 146
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: Gets the year of this offset date and time.
  remarks: >-
    This returns the &quot;absolute year&quot;, so, for the ISO calendar,

    a value of 0 means 1 BC, for example.
  example: []
  syntax:
    content: public int Year { get; }
    parameters: []
    return:
      type: System.Int32
      description: The year of this offset date and time.
    content.vb: Public ReadOnly Property Year As Integer
  overload: NodaTime.OffsetDateTime.Year*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: NodaTime.OffsetDateTime.Month
  commentId: P:NodaTime.OffsetDateTime.Month
  id: Month
  parent: NodaTime.OffsetDateTime
  langs:
  - csharp
  - vb
  name: Month
  nameWithType: OffsetDateTime.Month
  fullName: NodaTime.OffsetDateTime.Month
  type: Property
  source:
    remote:
      path: 2.1.x/src/NodaTime/OffsetDateTime.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: Month
    path: src/NodaTime/OffsetDateTime.cs
    startLine: 150
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: Gets the month of this offset date and time within the year.
  example: []
  syntax:
    content: public int Month { get; }
    parameters: []
    return:
      type: System.Int32
      description: The month of this offset date and time within the year.
    content.vb: Public ReadOnly Property Month As Integer
  overload: NodaTime.OffsetDateTime.Month*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: NodaTime.OffsetDateTime.Day
  commentId: P:NodaTime.OffsetDateTime.Day
  id: Day
  parent: NodaTime.OffsetDateTime
  langs:
  - csharp
  - vb
  name: Day
  nameWithType: OffsetDateTime.Day
  fullName: NodaTime.OffsetDateTime.Day
  type: Property
  source:
    remote:
      path: 2.1.x/src/NodaTime/OffsetDateTime.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: Day
    path: src/NodaTime/OffsetDateTime.cs
    startLine: 154
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: Gets the day of this offset date and time within the month.
  example: []
  syntax:
    content: public int Day { get; }
    parameters: []
    return:
      type: System.Int32
      description: The day of this offset date and time within the month.
    content.vb: Public ReadOnly Property Day As Integer
  overload: NodaTime.OffsetDateTime.Day*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: NodaTime.OffsetDateTime.DayOfWeek
  commentId: P:NodaTime.OffsetDateTime.DayOfWeek
  id: DayOfWeek
  parent: NodaTime.OffsetDateTime
  langs:
  - csharp
  - vb
  name: DayOfWeek
  nameWithType: OffsetDateTime.DayOfWeek
  fullName: NodaTime.OffsetDateTime.DayOfWeek
  type: Property
  source:
    remote:
      path: 2.1.x/src/NodaTime/OffsetDateTime.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: DayOfWeek
    path: src/NodaTime/OffsetDateTime.cs
    startLine: 162
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nGets the week day of this offset date and time expressed as an <xref href=\"NodaTime.IsoDayOfWeek\" data-throw-if-not-resolved=\"false\"></xref> value.\n"
  example: []
  syntax:
    content: public IsoDayOfWeek DayOfWeek { get; }
    parameters: []
    return:
      type: NodaTime.IsoDayOfWeek
      description: The week day of this offset date and time expressed as an <code>IsoDayOfWeek</code>.
    content.vb: Public ReadOnly Property DayOfWeek As IsoDayOfWeek
  overload: NodaTime.OffsetDateTime.DayOfWeek*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: NodaTime.OffsetDateTime.YearOfEra
  commentId: P:NodaTime.OffsetDateTime.YearOfEra
  id: YearOfEra
  parent: NodaTime.OffsetDateTime
  langs:
  - csharp
  - vb
  name: YearOfEra
  nameWithType: OffsetDateTime.YearOfEra
  fullName: NodaTime.OffsetDateTime.YearOfEra
  type: Property
  source:
    remote:
      path: 2.1.x/src/NodaTime/OffsetDateTime.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: YearOfEra
    path: src/NodaTime/OffsetDateTime.cs
    startLine: 166
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: Gets the year of this offset date and time within the era.
  example: []
  syntax:
    content: public int YearOfEra { get; }
    parameters: []
    return:
      type: System.Int32
      description: The year of this offset date and time within the era.
    content.vb: Public ReadOnly Property YearOfEra As Integer
  overload: NodaTime.OffsetDateTime.YearOfEra*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: NodaTime.OffsetDateTime.Era
  commentId: P:NodaTime.OffsetDateTime.Era
  id: Era
  parent: NodaTime.OffsetDateTime
  langs:
  - csharp
  - vb
  name: Era
  nameWithType: OffsetDateTime.Era
  fullName: NodaTime.OffsetDateTime.Era
  type: Property
  source:
    remote:
      path: 2.1.x/src/NodaTime/OffsetDateTime.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: Era
    path: src/NodaTime/OffsetDateTime.cs
    startLine: 170
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: Gets the era of this offset date and time.
  example: []
  syntax:
    content: public Era Era { get; }
    parameters: []
    return:
      type: NodaTime.Calendars.Era
      description: The era of this offset date and time.
    content.vb: Public ReadOnly Property Era As Era
  overload: NodaTime.OffsetDateTime.Era*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: NodaTime.OffsetDateTime.DayOfYear
  commentId: P:NodaTime.OffsetDateTime.DayOfYear
  id: DayOfYear
  parent: NodaTime.OffsetDateTime
  langs:
  - csharp
  - vb
  name: DayOfYear
  nameWithType: OffsetDateTime.DayOfYear
  fullName: NodaTime.OffsetDateTime.DayOfYear
  type: Property
  source:
    remote:
      path: 2.1.x/src/NodaTime/OffsetDateTime.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: DayOfYear
    path: src/NodaTime/OffsetDateTime.cs
    startLine: 174
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: Gets the day of this offset date and time within the year.
  example: []
  syntax:
    content: public int DayOfYear { get; }
    parameters: []
    return:
      type: System.Int32
      description: The day of this offset date and time within the year.
    content.vb: Public ReadOnly Property DayOfYear As Integer
  overload: NodaTime.OffsetDateTime.DayOfYear*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: NodaTime.OffsetDateTime.Hour
  commentId: P:NodaTime.OffsetDateTime.Hour
  id: Hour
  parent: NodaTime.OffsetDateTime
  langs:
  - csharp
  - vb
  name: Hour
  nameWithType: OffsetDateTime.Hour
  fullName: NodaTime.OffsetDateTime.Hour
  type: Property
  source:
    remote:
      path: 2.1.x/src/NodaTime/OffsetDateTime.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: Hour
    path: src/NodaTime/OffsetDateTime.cs
    startLine: 180
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nGets the hour of day of this offest date and time, in the range 0 to 23 inclusive.\n"
  example: []
  syntax:
    content: public int Hour { get; }
    parameters: []
    return:
      type: System.Int32
      description: The hour of day of this offest date and time, in the range 0 to 23 inclusive.
    content.vb: Public ReadOnly Property Hour As Integer
  overload: NodaTime.OffsetDateTime.Hour*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: NodaTime.OffsetDateTime.ClockHourOfHalfDay
  commentId: P:NodaTime.OffsetDateTime.ClockHourOfHalfDay
  id: ClockHourOfHalfDay
  parent: NodaTime.OffsetDateTime
  langs:
  - csharp
  - vb
  name: ClockHourOfHalfDay
  nameWithType: OffsetDateTime.ClockHourOfHalfDay
  fullName: NodaTime.OffsetDateTime.ClockHourOfHalfDay
  type: Property
  source:
    remote:
      path: 2.1.x/src/NodaTime/OffsetDateTime.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: ClockHourOfHalfDay
    path: src/NodaTime/OffsetDateTime.cs
    startLine: 188
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nGets the hour of the half-day of this offest date and time, in the range 1 to 12 inclusive.\n"
  example: []
  syntax:
    content: public int ClockHourOfHalfDay { get; }
    parameters: []
    return:
      type: System.Int32
      description: The hour of the half-day of this offest date and time, in the range 1 to 12 inclusive.
    content.vb: Public ReadOnly Property ClockHourOfHalfDay As Integer
  overload: NodaTime.OffsetDateTime.ClockHourOfHalfDay*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: NodaTime.OffsetDateTime.Minute
  commentId: P:NodaTime.OffsetDateTime.Minute
  id: Minute
  parent: NodaTime.OffsetDateTime
  langs:
  - csharp
  - vb
  name: Minute
  nameWithType: OffsetDateTime.Minute
  fullName: NodaTime.OffsetDateTime.Minute
  type: Property
  source:
    remote:
      path: 2.1.x/src/NodaTime/OffsetDateTime.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: Minute
    path: src/NodaTime/OffsetDateTime.cs
    startLine: 211
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nGets the minute of this offset date and time, in the range 0 to 59 inclusive.\n"
  example: []
  syntax:
    content: public int Minute { get; }
    parameters: []
    return:
      type: System.Int32
      description: The minute of this offset date and time, in the range 0 to 59 inclusive.
    content.vb: Public ReadOnly Property Minute As Integer
  overload: NodaTime.OffsetDateTime.Minute*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: NodaTime.OffsetDateTime.Second
  commentId: P:NodaTime.OffsetDateTime.Second
  id: Second
  parent: NodaTime.OffsetDateTime
  langs:
  - csharp
  - vb
  name: Second
  nameWithType: OffsetDateTime.Second
  fullName: NodaTime.OffsetDateTime.Second
  type: Property
  source:
    remote:
      path: 2.1.x/src/NodaTime/OffsetDateTime.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: Second
    path: src/NodaTime/OffsetDateTime.cs
    startLine: 228
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nGets the second of this offset date and time within the minute, in the range 0 to 59 inclusive.\n"
  example: []
  syntax:
    content: public int Second { get; }
    parameters: []
    return:
      type: System.Int32
      description: The second of this offset date and time within the minute, in the range 0 to 59 inclusive.
    content.vb: Public ReadOnly Property Second As Integer
  overload: NodaTime.OffsetDateTime.Second*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: NodaTime.OffsetDateTime.Millisecond
  commentId: P:NodaTime.OffsetDateTime.Millisecond
  id: Millisecond
  parent: NodaTime.OffsetDateTime
  langs:
  - csharp
  - vb
  name: Millisecond
  nameWithType: OffsetDateTime.Millisecond
  fullName: NodaTime.OffsetDateTime.Millisecond
  type: Property
  source:
    remote:
      path: 2.1.x/src/NodaTime/OffsetDateTime.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: Millisecond
    path: src/NodaTime/OffsetDateTime.cs
    startLine: 244
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nGets the millisecond of this offset date and time within the second, in the range 0 to 999 inclusive.\n"
  example: []
  syntax:
    content: public int Millisecond { get; }
    parameters: []
    return:
      type: System.Int32
      description: The millisecond of this offset date and time within the second, in the range 0 to 999 inclusive.
    content.vb: Public ReadOnly Property Millisecond As Integer
  overload: NodaTime.OffsetDateTime.Millisecond*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: NodaTime.OffsetDateTime.TickOfSecond
  commentId: P:NodaTime.OffsetDateTime.TickOfSecond
  id: TickOfSecond
  parent: NodaTime.OffsetDateTime
  langs:
  - csharp
  - vb
  name: TickOfSecond
  nameWithType: OffsetDateTime.TickOfSecond
  fullName: NodaTime.OffsetDateTime.TickOfSecond
  type: Property
  source:
    remote:
      path: 2.1.x/src/NodaTime/OffsetDateTime.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: TickOfSecond
    path: src/NodaTime/OffsetDateTime.cs
    startLine: 261
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nGets the tick of this offset date and time within the second, in the range 0 to 9,999,999 inclusive.\n"
  example: []
  syntax:
    content: public int TickOfSecond { get; }
    parameters: []
    return:
      type: System.Int32
      description: The tick of this offset date and time within the second, in the range 0 to 9,999,999 inclusive.
    content.vb: Public ReadOnly Property TickOfSecond As Integer
  overload: NodaTime.OffsetDateTime.TickOfSecond*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: NodaTime.OffsetDateTime.TickOfDay
  commentId: P:NodaTime.OffsetDateTime.TickOfDay
  id: TickOfDay
  parent: NodaTime.OffsetDateTime
  langs:
  - csharp
  - vb
  name: TickOfDay
  nameWithType: OffsetDateTime.TickOfDay
  fullName: NodaTime.OffsetDateTime.TickOfDay
  type: Property
  source:
    remote:
      path: 2.1.x/src/NodaTime/OffsetDateTime.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: TickOfDay
    path: src/NodaTime/OffsetDateTime.cs
    startLine: 267
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nGets the tick of this offset date and time within the day, in the range 0 to 863,999,999,999 inclusive.\n"
  example: []
  syntax:
    content: public long TickOfDay { get; }
    parameters: []
    return:
      type: System.Int64
      description: The tick of this offset date and time within the day, in the range 0 to 863,999,999,999 inclusive.
    content.vb: Public ReadOnly Property TickOfDay As Long
  overload: NodaTime.OffsetDateTime.TickOfDay*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: NodaTime.OffsetDateTime.NanosecondOfSecond
  commentId: P:NodaTime.OffsetDateTime.NanosecondOfSecond
  id: NanosecondOfSecond
  parent: NodaTime.OffsetDateTime
  langs:
  - csharp
  - vb
  name: NanosecondOfSecond
  nameWithType: OffsetDateTime.NanosecondOfSecond
  fullName: NodaTime.OffsetDateTime.NanosecondOfSecond
  type: Property
  source:
    remote:
      path: 2.1.x/src/NodaTime/OffsetDateTime.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: NanosecondOfSecond
    path: src/NodaTime/OffsetDateTime.cs
    startLine: 273
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nGets the nanosecond of this offset date and time within the second, in the range 0 to 999,999,999 inclusive.\n"
  example: []
  syntax:
    content: public int NanosecondOfSecond { get; }
    parameters: []
    return:
      type: System.Int32
      description: The nanosecond of this offset date and time within the second, in the range 0 to 999,999,999 inclusive.
    content.vb: Public ReadOnly Property NanosecondOfSecond As Integer
  overload: NodaTime.OffsetDateTime.NanosecondOfSecond*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: NodaTime.OffsetDateTime.NanosecondOfDay
  commentId: P:NodaTime.OffsetDateTime.NanosecondOfDay
  id: NanosecondOfDay
  parent: NodaTime.OffsetDateTime
  langs:
  - csharp
  - vb
  name: NanosecondOfDay
  nameWithType: OffsetDateTime.NanosecondOfDay
  fullName: NodaTime.OffsetDateTime.NanosecondOfDay
  type: Property
  source:
    remote:
      path: 2.1.x/src/NodaTime/OffsetDateTime.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: NanosecondOfDay
    path: src/NodaTime/OffsetDateTime.cs
    startLine: 279
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nGets the nanosecond of this offset date and time within the day, in the range 0 to 86,399,999,999,999 inclusive.\n"
  example: []
  syntax:
    content: public long NanosecondOfDay { get; }
    parameters: []
    return:
      type: System.Int64
      description: The nanosecond of this offset date and time within the day, in the range 0 to 86,399,999,999,999 inclusive.
    content.vb: Public ReadOnly Property NanosecondOfDay As Long
  overload: NodaTime.OffsetDateTime.NanosecondOfDay*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: NodaTime.OffsetDateTime.LocalDateTime
  commentId: P:NodaTime.OffsetDateTime.LocalDateTime
  id: LocalDateTime
  parent: NodaTime.OffsetDateTime
  langs:
  - csharp
  - vb
  name: LocalDateTime
  nameWithType: OffsetDateTime.LocalDateTime
  fullName: NodaTime.OffsetDateTime.LocalDateTime
  type: Property
  source:
    remote:
      path: 2.1.x/src/NodaTime/OffsetDateTime.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: LocalDateTime
    path: src/NodaTime/OffsetDateTime.cs
    startLine: 285
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nReturns the local date and time represented within this offset date and time.\n"
  example: []
  syntax:
    content: public LocalDateTime LocalDateTime { get; }
    parameters: []
    return:
      type: NodaTime.LocalDateTime
      description: The local date and time represented within this offset date and time.
    content.vb: Public ReadOnly Property LocalDateTime As LocalDateTime
  overload: NodaTime.OffsetDateTime.LocalDateTime*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: NodaTime.OffsetDateTime.Date
  commentId: P:NodaTime.OffsetDateTime.Date
  id: Date
  parent: NodaTime.OffsetDateTime
  langs:
  - csharp
  - vb
  name: Date
  nameWithType: OffsetDateTime.Date
  fullName: NodaTime.OffsetDateTime.Date
  type: Property
  source:
    remote:
      path: 2.1.x/src/NodaTime/OffsetDateTime.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: Date
    path: src/NodaTime/OffsetDateTime.cs
    startLine: 296
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nGets the local date represented by this offset date and time.\n"
  remarks: "\nThe returned <xref href=\"NodaTime.LocalDate\" data-throw-if-not-resolved=\"false\"></xref>\nwill have the same calendar system and return the same values for each of the date-based calendar\nproperties (Year, MonthOfYear and so on), but will not have any offset information.\n"
  example: []
  syntax:
    content: public LocalDate Date { get; }
    parameters: []
    return:
      type: NodaTime.LocalDate
      description: The local date represented by this offset date and time.
    content.vb: Public ReadOnly Property Date As LocalDate
  overload: NodaTime.OffsetDateTime.Date*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: NodaTime.OffsetDateTime.TimeOfDay
  commentId: P:NodaTime.OffsetDateTime.TimeOfDay
  id: TimeOfDay
  parent: NodaTime.OffsetDateTime
  langs:
  - csharp
  - vb
  name: TimeOfDay
  nameWithType: OffsetDateTime.TimeOfDay
  fullName: NodaTime.OffsetDateTime.TimeOfDay
  type: Property
  source:
    remote:
      path: 2.1.x/src/NodaTime/OffsetDateTime.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: TimeOfDay
    path: src/NodaTime/OffsetDateTime.cs
    startLine: 307
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nGets the time portion of this offset date and time.\n"
  remarks: "\nThe returned <xref href=\"NodaTime.LocalTime\" data-throw-if-not-resolved=\"false\"></xref> will\nreturn the same values for each of the time-based properties (Hour, Minute and so on), but\nwill not have any offset information.\n"
  example: []
  syntax:
    content: public LocalTime TimeOfDay { get; }
    parameters: []
    return:
      type: NodaTime.LocalTime
      description: The time portion of this offset date and time.
    content.vb: Public ReadOnly Property TimeOfDay As LocalTime
  overload: NodaTime.OffsetDateTime.TimeOfDay*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: NodaTime.OffsetDateTime.Offset
  commentId: P:NodaTime.OffsetDateTime.Offset
  id: Offset
  parent: NodaTime.OffsetDateTime
  langs:
  - csharp
  - vb
  name: Offset
  nameWithType: OffsetDateTime.Offset
  fullName: NodaTime.OffsetDateTime.Offset
  type: Property
  source:
    remote:
      path: 2.1.x/src/NodaTime/OffsetDateTime.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: Offset
    path: src/NodaTime/OffsetDateTime.cs
    startLine: 313
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nGets the offset from UTC.\n"
  example: []
  syntax:
    content: public Offset Offset { get; }
    parameters: []
    return:
      type: NodaTime.Offset
      description: The offset from UTC.
    content.vb: Public ReadOnly Property Offset As Offset
  overload: NodaTime.OffsetDateTime.Offset*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: NodaTime.OffsetDateTime.ToInstant
  commentId: M:NodaTime.OffsetDateTime.ToInstant
  id: ToInstant
  parent: NodaTime.OffsetDateTime
  langs:
  - csharp
  - vb
  name: ToInstant()
  nameWithType: OffsetDateTime.ToInstant()
  fullName: NodaTime.OffsetDateTime.ToInstant()
  type: Method
  source:
    remote:
      path: 2.1.x/src/NodaTime/OffsetDateTime.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: ToInstant
    path: src/NodaTime/OffsetDateTime.cs
    startLine: 324
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nConverts this offset date and time to an instant in time by subtracting the offset from the local date and time.\n"
  example: []
  syntax:
    content: public Instant ToInstant()
    return:
      type: NodaTime.Instant
      description: The instant represented by this offset date and time
    content.vb: Public Function ToInstant As Instant
  overload: NodaTime.OffsetDateTime.ToInstant*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: NodaTime.OffsetDateTime.InFixedZone
  commentId: M:NodaTime.OffsetDateTime.InFixedZone
  id: InFixedZone
  parent: NodaTime.OffsetDateTime
  langs:
  - csharp
  - vb
  name: InFixedZone()
  nameWithType: OffsetDateTime.InFixedZone()
  fullName: NodaTime.OffsetDateTime.InFixedZone()
  type: Method
  source:
    remote:
      path: 2.1.x/src/NodaTime/OffsetDateTime.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: InFixedZone
    path: src/NodaTime/OffsetDateTime.cs
    startLine: 349
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nReturns this value as a <xref href=\"NodaTime.ZonedDateTime\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  remarks: "\n<p>\nThis method returns a <xref href=\"NodaTime.ZonedDateTime\" data-throw-if-not-resolved=\"false\"></xref> with the same local date and time as this value, using a\nfixed time zone with the same offset as the offset for this value.\n</p>\n<p>\nNote that because the resulting <code>ZonedDateTime</code> has a fixed time zone, it is generally not useful to\nuse this result for arithmetic operations, as the zone will not adjust to account for daylight savings.\n</p>\n"
  example: []
  syntax:
    content: public ZonedDateTime InFixedZone()
    return:
      type: NodaTime.ZonedDateTime
      description: A zoned date/time with the same local time and a fixed time zone using the offset from this value.
    content.vb: Public Function InFixedZone As ZonedDateTime
  overload: NodaTime.OffsetDateTime.InFixedZone*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: NodaTime.OffsetDateTime.ToDateTimeOffset
  commentId: M:NodaTime.OffsetDateTime.ToDateTimeOffset
  id: ToDateTimeOffset
  parent: NodaTime.OffsetDateTime
  langs:
  - csharp
  - vb
  name: ToDateTimeOffset()
  nameWithType: OffsetDateTime.ToDateTimeOffset()
  fullName: NodaTime.OffsetDateTime.ToDateTimeOffset()
  type: Method
  source:
    remote:
      path: 2.1.x/src/NodaTime/OffsetDateTime.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: ToDateTimeOffset
    path: src/NodaTime/OffsetDateTime.cs
    startLine: 369
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nReturns the BCL <xref href=\"System.DateTimeOffset\" data-throw-if-not-resolved=\"false\"></xref> corresponding to this offset date and time.\n"
  remarks: "\n<p>\nIf the date and time is not on a tick boundary (the unit of granularity of DateTime) the value will be truncated\ntowards the start of time.\n</p>\n<p>\nIf the offset has a non-zero second component, this is truncated as <code>DateTimeOffset</code> has an offset\ngranularity of minutes.\n</p>\n"
  example: []
  syntax:
    content: public DateTimeOffset ToDateTimeOffset()
    return:
      type: System.DateTimeOffset
      description: >-
        A DateTimeOffset with the same local date/time and offset as this. The <xref href="System.DateTime" data-throw-if-not-resolved="false"></xref> part of

        the result always has a &quot;kind&quot; of Unspecified.
    content.vb: Public Function ToDateTimeOffset As DateTimeOffset
  overload: NodaTime.OffsetDateTime.ToDateTimeOffset*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: >-
      The date/time is outside the range of <code>DateTimeOffset</code>,

      or the offset is outside the range of +/-14 hours (the range supported by <code>DateTimeOffset</code>).
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: NodaTime.OffsetDateTime.FromDateTimeOffset(System.DateTimeOffset)
  commentId: M:NodaTime.OffsetDateTime.FromDateTimeOffset(System.DateTimeOffset)
  id: FromDateTimeOffset(System.DateTimeOffset)
  parent: NodaTime.OffsetDateTime
  langs:
  - csharp
  - vb
  name: FromDateTimeOffset(DateTimeOffset)
  nameWithType: OffsetDateTime.FromDateTimeOffset(DateTimeOffset)
  fullName: NodaTime.OffsetDateTime.FromDateTimeOffset(System.DateTimeOffset)
  type: Method
  source:
    remote:
      path: 2.1.x/src/NodaTime/OffsetDateTime.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: FromDateTimeOffset
    path: src/NodaTime/OffsetDateTime.cs
    startLine: 386
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nBuilds an <xref href=\"NodaTime.OffsetDateTime\" data-throw-if-not-resolved=\"false\"></xref> from a BCL <xref href=\"System.DateTimeOffset\" data-throw-if-not-resolved=\"false\"></xref> by converting\nthe <xref href=\"System.DateTime\" data-throw-if-not-resolved=\"false\"></xref> part to a <xref href=\"NodaTime.OffsetDateTime.LocalDateTime\" data-throw-if-not-resolved=\"false\"></xref>, and the offset part to an <xref href=\"NodaTime.OffsetDateTime.Offset\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public static OffsetDateTime FromDateTimeOffset(DateTimeOffset dateTimeOffset)
    parameters:
    - id: dateTimeOffset
      type: System.DateTimeOffset
      description: DateTimeOffset to convert
    return:
      type: NodaTime.OffsetDateTime
      description: The converted offset date and time
    content.vb: Public Shared Function FromDateTimeOffset(dateTimeOffset As DateTimeOffset) As OffsetDateTime
  overload: NodaTime.OffsetDateTime.FromDateTimeOffset*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: NodaTime.OffsetDateTime.WithCalendar(NodaTime.CalendarSystem)
  commentId: M:NodaTime.OffsetDateTime.WithCalendar(NodaTime.CalendarSystem)
  id: WithCalendar(NodaTime.CalendarSystem)
  parent: NodaTime.OffsetDateTime
  langs:
  - csharp
  - vb
  name: WithCalendar(CalendarSystem)
  nameWithType: OffsetDateTime.WithCalendar(CalendarSystem)
  fullName: NodaTime.OffsetDateTime.WithCalendar(NodaTime.CalendarSystem)
  type: Method
  source:
    remote:
      path: 2.1.x/src/NodaTime/OffsetDateTime.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: WithCalendar
    path: src/NodaTime/OffsetDateTime.cs
    startLine: 398
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nCreates a new OffsetDateTime representing the same physical date, time and offset, but in a different calendar.\nThe returned OffsetDateTime is likely to have different date field values to this one.\nFor example, January 1st 1970 in the Gregorian calendar was December 19th 1969 in the Julian calendar.\n"
  example: []
  syntax:
    content: public OffsetDateTime WithCalendar(CalendarSystem calendar)
    parameters:
    - id: calendar
      type: NodaTime.CalendarSystem
      description: The calendar system to convert this offset date and time to.
    return:
      type: NodaTime.OffsetDateTime
      description: The converted OffsetDateTime.
    content.vb: Public Function WithCalendar(calendar As CalendarSystem) As OffsetDateTime
  overload: NodaTime.OffsetDateTime.WithCalendar*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: NodaTime.OffsetDateTime.With(System.Func{NodaTime.LocalDate,NodaTime.LocalDate})
  commentId: M:NodaTime.OffsetDateTime.With(System.Func{NodaTime.LocalDate,NodaTime.LocalDate})
  id: With(System.Func{NodaTime.LocalDate,NodaTime.LocalDate})
  parent: NodaTime.OffsetDateTime
  langs:
  - csharp
  - vb
  name: With(Func<LocalDate, LocalDate>)
  nameWithType: OffsetDateTime.With(Func<LocalDate, LocalDate>)
  fullName: NodaTime.OffsetDateTime.With(System.Func<NodaTime.LocalDate, NodaTime.LocalDate>)
  type: Method
  source:
    remote:
      path: 2.1.x/src/NodaTime/OffsetDateTime.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: With
    path: src/NodaTime/OffsetDateTime.cs
    startLine: 415
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nReturns this offset date/time, with the given date adjuster applied to it, maintaining the existing time of day and offset.\n"
  remarks: "\nIf the adjuster attempts to construct an\ninvalid date (such as by trying to set a day-of-month of 30 in February), any exception thrown by\nthat construction attempt will be propagated through this method.\n"
  example: []
  syntax:
    content: public OffsetDateTime With(Func<LocalDate, LocalDate> adjuster)
    parameters:
    - id: adjuster
      type: System.Func{NodaTime.LocalDate,NodaTime.LocalDate}
      description: The adjuster to apply.
    return:
      type: NodaTime.OffsetDateTime
      description: The adjusted offset date/time.
    content.vb: Public Function With(adjuster As Func(Of LocalDate, LocalDate)) As OffsetDateTime
  overload: NodaTime.OffsetDateTime.With*
  nameWithType.vb: OffsetDateTime.With(Func(Of LocalDate, LocalDate))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: NodaTime.OffsetDateTime.With(System.Func(Of NodaTime.LocalDate, NodaTime.LocalDate))
  name.vb: With(Func(Of LocalDate, LocalDate))
- uid: NodaTime.OffsetDateTime.With(System.Func{NodaTime.LocalTime,NodaTime.LocalTime})
  commentId: M:NodaTime.OffsetDateTime.With(System.Func{NodaTime.LocalTime,NodaTime.LocalTime})
  id: With(System.Func{NodaTime.LocalTime,NodaTime.LocalTime})
  parent: NodaTime.OffsetDateTime
  langs:
  - csharp
  - vb
  name: With(Func<LocalTime, LocalTime>)
  nameWithType: OffsetDateTime.With(Func<LocalTime, LocalTime>)
  fullName: NodaTime.OffsetDateTime.With(System.Func<NodaTime.LocalTime, NodaTime.LocalTime>)
  type: Method
  source:
    remote:
      path: 2.1.x/src/NodaTime/OffsetDateTime.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: With
    path: src/NodaTime/OffsetDateTime.cs
    startLine: 431
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nReturns this date/time, with the given time adjuster applied to it, maintaining the existing date and offset.\n"
  remarks: "\nIf the adjuster attempts to construct an invalid time, any exception thrown by\nthat construction attempt will be propagated through this method.\n"
  example: []
  syntax:
    content: public OffsetDateTime With(Func<LocalTime, LocalTime> adjuster)
    parameters:
    - id: adjuster
      type: System.Func{NodaTime.LocalTime,NodaTime.LocalTime}
      description: The adjuster to apply.
    return:
      type: NodaTime.OffsetDateTime
      description: The adjusted offset date/time.
    content.vb: Public Function With(adjuster As Func(Of LocalTime, LocalTime)) As OffsetDateTime
  overload: NodaTime.OffsetDateTime.With*
  nameWithType.vb: OffsetDateTime.With(Func(Of LocalTime, LocalTime))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: NodaTime.OffsetDateTime.With(System.Func(Of NodaTime.LocalTime, NodaTime.LocalTime))
  name.vb: With(Func(Of LocalTime, LocalTime))
- uid: NodaTime.OffsetDateTime.WithOffset(NodaTime.Offset)
  commentId: M:NodaTime.OffsetDateTime.WithOffset(NodaTime.Offset)
  id: WithOffset(NodaTime.Offset)
  parent: NodaTime.OffsetDateTime
  langs:
  - csharp
  - vb
  name: WithOffset(Offset)
  nameWithType: OffsetDateTime.WithOffset(Offset)
  fullName: NodaTime.OffsetDateTime.WithOffset(NodaTime.Offset)
  type: Method
  source:
    remote:
      path: 2.1.x/src/NodaTime/OffsetDateTime.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: WithOffset
    path: src/NodaTime/OffsetDateTime.cs
    startLine: 444
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nCreates a new OffsetDateTime representing the instant in time in the same calendar,\nbut with a different offset. The local date and time is adjusted accordingly.\n"
  example: []
  syntax:
    content: public OffsetDateTime WithOffset(Offset offset)
    parameters:
    - id: offset
      type: NodaTime.Offset
      description: The new offset to use.
    return:
      type: NodaTime.OffsetDateTime
      description: The converted OffsetDateTime.
    content.vb: Public Function WithOffset(offset As Offset) As OffsetDateTime
  overload: NodaTime.OffsetDateTime.WithOffset*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: NodaTime.OffsetDateTime.GetHashCode
  commentId: M:NodaTime.OffsetDateTime.GetHashCode
  id: GetHashCode
  parent: NodaTime.OffsetDateTime
  langs:
  - csharp
  - vb
  name: GetHashCode()
  nameWithType: OffsetDateTime.GetHashCode()
  fullName: NodaTime.OffsetDateTime.GetHashCode()
  type: Method
  source:
    remote:
      path: 2.1.x/src/NodaTime/OffsetDateTime.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: GetHashCode
    path: src/NodaTime/OffsetDateTime.cs
    startLine: 483
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nReturns a hash code for this offset date and time.\n"
  example: []
  syntax:
    content: public override int GetHashCode()
    return:
      type: System.Int32
      description: A hash code for this offset date and time.
    content.vb: Public Overrides Function GetHashCode As Integer
  overridden: System.ValueType.GetHashCode
  overload: NodaTime.OffsetDateTime.GetHashCode*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: NodaTime.OffsetDateTime.Equals(System.Object)
  commentId: M:NodaTime.OffsetDateTime.Equals(System.Object)
  id: Equals(System.Object)
  parent: NodaTime.OffsetDateTime
  langs:
  - csharp
  - vb
  name: Equals(Object)
  nameWithType: OffsetDateTime.Equals(Object)
  fullName: NodaTime.OffsetDateTime.Equals(System.Object)
  type: Method
  source:
    remote:
      path: 2.1.x/src/NodaTime/OffsetDateTime.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: Equals
    path: src/NodaTime/OffsetDateTime.cs
    startLine: 491
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nCompares two <xref href=\"NodaTime.OffsetDateTime\" data-throw-if-not-resolved=\"false\"></xref> values for equality. This requires\nthat the local date/time values be the same (in the same calendar) and the offsets.\n"
  example: []
  syntax:
    content: public override bool Equals(object obj)
    parameters:
    - id: obj
      type: System.Object
      description: The object to compare this date with.
    return:
      type: System.Boolean
      description: True if the given value is another offset date/time equal to this one; false otherwise.
    content.vb: Public Overrides Function Equals(obj As Object) As Boolean
  overridden: System.ValueType.Equals(System.Object)
  overload: NodaTime.OffsetDateTime.Equals*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: NodaTime.OffsetDateTime.Equals(NodaTime.OffsetDateTime)
  commentId: M:NodaTime.OffsetDateTime.Equals(NodaTime.OffsetDateTime)
  id: Equals(NodaTime.OffsetDateTime)
  parent: NodaTime.OffsetDateTime
  langs:
  - csharp
  - vb
  name: Equals(OffsetDateTime)
  nameWithType: OffsetDateTime.Equals(OffsetDateTime)
  fullName: NodaTime.OffsetDateTime.Equals(NodaTime.OffsetDateTime)
  type: Method
  source:
    remote:
      path: 2.1.x/src/NodaTime/OffsetDateTime.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: Equals
    path: src/NodaTime/OffsetDateTime.cs
    startLine: 499
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nCompares two <xref href=\"NodaTime.OffsetDateTime\" data-throw-if-not-resolved=\"false\"></xref> values for equality. This requires\nthat the local date/time values be the same (in the same calendar) and the offsets.\n"
  example: []
  syntax:
    content: public bool Equals(OffsetDateTime other)
    parameters:
    - id: other
      type: NodaTime.OffsetDateTime
      description: The value to compare this offset date/time with.
    return:
      type: System.Boolean
      description: True if the given value is another offset date/time equal to this one; false otherwise.
    content.vb: Public Function Equals(other As OffsetDateTime) As Boolean
  overload: NodaTime.OffsetDateTime.Equals*
  implements:
  - System.IEquatable{NodaTime.OffsetDateTime}.Equals(NodaTime.OffsetDateTime)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: NodaTime.OffsetDateTime.ToString
  commentId: M:NodaTime.OffsetDateTime.ToString
  id: ToString
  parent: NodaTime.OffsetDateTime
  langs:
  - csharp
  - vb
  name: ToString()
  nameWithType: OffsetDateTime.ToString()
  fullName: NodaTime.OffsetDateTime.ToString()
  type: Method
  source:
    remote:
      path: 2.1.x/src/NodaTime/OffsetDateTime.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: ToString
    path: src/NodaTime/OffsetDateTime.cs
    startLine: 510
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nReturns a <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref> that represents this instance.\n"
  example: []
  syntax:
    content: public override string ToString()
    return:
      type: System.String
      description: "\nThe value of the current instance in the default format pattern (&quot;G&quot;), using the current thread&apos;s\nculture to obtain a format provider.\n"
    content.vb: Public Overrides Function ToString As String
  overridden: System.ValueType.ToString
  overload: NodaTime.OffsetDateTime.ToString*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: NodaTime.OffsetDateTime.ToString(System.String,System.IFormatProvider)
  commentId: M:NodaTime.OffsetDateTime.ToString(System.String,System.IFormatProvider)
  id: ToString(System.String,System.IFormatProvider)
  parent: NodaTime.OffsetDateTime
  langs:
  - csharp
  - vb
  name: ToString(String, IFormatProvider)
  nameWithType: OffsetDateTime.ToString(String, IFormatProvider)
  fullName: NodaTime.OffsetDateTime.ToString(System.String, System.IFormatProvider)
  type: Method
  source:
    remote:
      path: 2.1.x/src/NodaTime/OffsetDateTime.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: ToString
    path: src/NodaTime/OffsetDateTime.cs
    startLine: 525
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nFormats the value of the current instance using the specified pattern.\n"
  example: []
  syntax:
    content: public string ToString(string patternText, IFormatProvider formatProvider)
    parameters:
    - id: patternText
      type: System.String
      description: >
        The <xref href="System.String" data-throw-if-not-resolved="false"></xref> specifying the pattern to use,

        or null to use the default format pattern (&quot;G&quot;).
    - id: formatProvider
      type: System.IFormatProvider
      description: >
        The <xref href="System.IFormatProvider" data-throw-if-not-resolved="false"></xref> to use when formatting the value,

        or null to use the current thread&apos;s culture to obtain a format provider.
    return:
      type: System.String
      description: "\nA <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref> containing the value of the current instance in the specified format.\n"
    content.vb: Public Function ToString(patternText As String, formatProvider As IFormatProvider) As String
  overload: NodaTime.OffsetDateTime.ToString*
  implements:
  - System.IFormattable.ToString(System.String,System.IFormatProvider)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: NodaTime.OffsetDateTime.Add(NodaTime.OffsetDateTime,NodaTime.Duration)
  commentId: M:NodaTime.OffsetDateTime.Add(NodaTime.OffsetDateTime,NodaTime.Duration)
  id: Add(NodaTime.OffsetDateTime,NodaTime.Duration)
  parent: NodaTime.OffsetDateTime
  langs:
  - csharp
  - vb
  name: Add(OffsetDateTime, Duration)
  nameWithType: OffsetDateTime.Add(OffsetDateTime, Duration)
  fullName: NodaTime.OffsetDateTime.Add(NodaTime.OffsetDateTime, NodaTime.Duration)
  type: Method
  source:
    remote:
      path: 2.1.x/src/NodaTime/OffsetDateTime.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: Add
    path: src/NodaTime/OffsetDateTime.cs
    startLine: 540
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nAdds a duration to an offset date and time.\n"
  remarks: "\nThis is an alternative way of calling <xref href=\"NodaTime.OffsetDateTime.op_Addition(NodaTime.OffsetDateTime%2cNodaTime.Duration)\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public static OffsetDateTime Add(OffsetDateTime offsetDateTime, Duration duration)
    parameters:
    - id: offsetDateTime
      type: NodaTime.OffsetDateTime
      description: The value to add the duration to.
    - id: duration
      type: NodaTime.Duration
      description: The duration to add
    return:
      type: NodaTime.OffsetDateTime
      description: A new value with the time advanced by the given duration, in the same calendar system and with the same offset.
    content.vb: Public Shared Function Add(offsetDateTime As OffsetDateTime, duration As Duration) As OffsetDateTime
  overload: NodaTime.OffsetDateTime.Add*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: NodaTime.OffsetDateTime.Plus(NodaTime.Duration)
  commentId: M:NodaTime.OffsetDateTime.Plus(NodaTime.Duration)
  id: Plus(NodaTime.Duration)
  parent: NodaTime.OffsetDateTime
  langs:
  - csharp
  - vb
  name: Plus(Duration)
  nameWithType: OffsetDateTime.Plus(Duration)
  fullName: NodaTime.OffsetDateTime.Plus(NodaTime.Duration)
  type: Method
  source:
    remote:
      path: 2.1.x/src/NodaTime/OffsetDateTime.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: Plus
    path: src/NodaTime/OffsetDateTime.cs
    startLine: 550
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nReturns the result of adding a duration to this offset date and time.\n"
  remarks: "\nThis is an alternative way of calling <xref href=\"NodaTime.OffsetDateTime.op_Addition(NodaTime.OffsetDateTime%2cNodaTime.Duration)\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public OffsetDateTime Plus(Duration duration)
    parameters:
    - id: duration
      type: NodaTime.Duration
      description: The duration to add
    return:
      type: NodaTime.OffsetDateTime
      description: A new <xref href="NodaTime.OffsetDateTime" data-throw-if-not-resolved="false"></xref> representing the result of the addition.
    content.vb: Public Function Plus(duration As Duration) As OffsetDateTime
  overload: NodaTime.OffsetDateTime.Plus*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: NodaTime.OffsetDateTime.PlusHours(System.Int32)
  commentId: M:NodaTime.OffsetDateTime.PlusHours(System.Int32)
  id: PlusHours(System.Int32)
  parent: NodaTime.OffsetDateTime
  langs:
  - csharp
  - vb
  name: PlusHours(Int32)
  nameWithType: OffsetDateTime.PlusHours(Int32)
  fullName: NodaTime.OffsetDateTime.PlusHours(System.Int32)
  type: Method
  source:
    remote:
      path: 2.1.x/src/NodaTime/OffsetDateTime.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: PlusHours
    path: src/NodaTime/OffsetDateTime.cs
    startLine: 558
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nReturns the result of adding a increment of hours to this zoned date and time\n"
  example: []
  syntax:
    content: public OffsetDateTime PlusHours(int hours)
    parameters:
    - id: hours
      type: System.Int32
      description: The number of hours to add
    return:
      type: NodaTime.OffsetDateTime
      description: A new <xref href="NodaTime.OffsetDateTime" data-throw-if-not-resolved="false"></xref> representing the result of the addition.
    content.vb: Public Function PlusHours(hours As Integer) As OffsetDateTime
  overload: NodaTime.OffsetDateTime.PlusHours*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: NodaTime.OffsetDateTime.PlusMinutes(System.Int32)
  commentId: M:NodaTime.OffsetDateTime.PlusMinutes(System.Int32)
  id: PlusMinutes(System.Int32)
  parent: NodaTime.OffsetDateTime
  langs:
  - csharp
  - vb
  name: PlusMinutes(Int32)
  nameWithType: OffsetDateTime.PlusMinutes(Int32)
  fullName: NodaTime.OffsetDateTime.PlusMinutes(System.Int32)
  type: Method
  source:
    remote:
      path: 2.1.x/src/NodaTime/OffsetDateTime.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: PlusMinutes
    path: src/NodaTime/OffsetDateTime.cs
    startLine: 566
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nReturns the result of adding an increment of minutes to this zoned date and time\n"
  example: []
  syntax:
    content: public OffsetDateTime PlusMinutes(int minutes)
    parameters:
    - id: minutes
      type: System.Int32
      description: The number of minutes to add
    return:
      type: NodaTime.OffsetDateTime
      description: A new <xref href="NodaTime.OffsetDateTime" data-throw-if-not-resolved="false"></xref> representing the result of the addition.
    content.vb: Public Function PlusMinutes(minutes As Integer) As OffsetDateTime
  overload: NodaTime.OffsetDateTime.PlusMinutes*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: NodaTime.OffsetDateTime.PlusSeconds(System.Int64)
  commentId: M:NodaTime.OffsetDateTime.PlusSeconds(System.Int64)
  id: PlusSeconds(System.Int64)
  parent: NodaTime.OffsetDateTime
  langs:
  - csharp
  - vb
  name: PlusSeconds(Int64)
  nameWithType: OffsetDateTime.PlusSeconds(Int64)
  fullName: NodaTime.OffsetDateTime.PlusSeconds(System.Int64)
  type: Method
  source:
    remote:
      path: 2.1.x/src/NodaTime/OffsetDateTime.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: PlusSeconds
    path: src/NodaTime/OffsetDateTime.cs
    startLine: 574
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nReturns the result of adding an increment of seconds to this zoned date and time\n"
  example: []
  syntax:
    content: public OffsetDateTime PlusSeconds(long seconds)
    parameters:
    - id: seconds
      type: System.Int64
      description: The number of seconds to add
    return:
      type: NodaTime.OffsetDateTime
      description: A new <xref href="NodaTime.OffsetDateTime" data-throw-if-not-resolved="false"></xref> representing the result of the addition.
    content.vb: Public Function PlusSeconds(seconds As Long) As OffsetDateTime
  overload: NodaTime.OffsetDateTime.PlusSeconds*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: NodaTime.OffsetDateTime.PlusMilliseconds(System.Int64)
  commentId: M:NodaTime.OffsetDateTime.PlusMilliseconds(System.Int64)
  id: PlusMilliseconds(System.Int64)
  parent: NodaTime.OffsetDateTime
  langs:
  - csharp
  - vb
  name: PlusMilliseconds(Int64)
  nameWithType: OffsetDateTime.PlusMilliseconds(Int64)
  fullName: NodaTime.OffsetDateTime.PlusMilliseconds(System.Int64)
  type: Method
  source:
    remote:
      path: 2.1.x/src/NodaTime/OffsetDateTime.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: PlusMilliseconds
    path: src/NodaTime/OffsetDateTime.cs
    startLine: 582
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nReturns the result of adding an increment of milliseconds to this zoned date and time\n"
  example: []
  syntax:
    content: public OffsetDateTime PlusMilliseconds(long milliseconds)
    parameters:
    - id: milliseconds
      type: System.Int64
      description: The number of milliseconds to add
    return:
      type: NodaTime.OffsetDateTime
      description: A new <xref href="NodaTime.OffsetDateTime" data-throw-if-not-resolved="false"></xref> representing the result of the addition.
    content.vb: Public Function PlusMilliseconds(milliseconds As Long) As OffsetDateTime
  overload: NodaTime.OffsetDateTime.PlusMilliseconds*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: NodaTime.OffsetDateTime.PlusTicks(System.Int64)
  commentId: M:NodaTime.OffsetDateTime.PlusTicks(System.Int64)
  id: PlusTicks(System.Int64)
  parent: NodaTime.OffsetDateTime
  langs:
  - csharp
  - vb
  name: PlusTicks(Int64)
  nameWithType: OffsetDateTime.PlusTicks(Int64)
  fullName: NodaTime.OffsetDateTime.PlusTicks(System.Int64)
  type: Method
  source:
    remote:
      path: 2.1.x/src/NodaTime/OffsetDateTime.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: PlusTicks
    path: src/NodaTime/OffsetDateTime.cs
    startLine: 590
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nReturns the result of adding an increment of ticks to this zoned date and time\n"
  example: []
  syntax:
    content: public OffsetDateTime PlusTicks(long ticks)
    parameters:
    - id: ticks
      type: System.Int64
      description: The number of ticks to add
    return:
      type: NodaTime.OffsetDateTime
      description: A new <xref href="NodaTime.OffsetDateTime" data-throw-if-not-resolved="false"></xref> representing the result of the addition.
    content.vb: Public Function PlusTicks(ticks As Long) As OffsetDateTime
  overload: NodaTime.OffsetDateTime.PlusTicks*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: NodaTime.OffsetDateTime.PlusNanoseconds(System.Int64)
  commentId: M:NodaTime.OffsetDateTime.PlusNanoseconds(System.Int64)
  id: PlusNanoseconds(System.Int64)
  parent: NodaTime.OffsetDateTime
  langs:
  - csharp
  - vb
  name: PlusNanoseconds(Int64)
  nameWithType: OffsetDateTime.PlusNanoseconds(Int64)
  fullName: NodaTime.OffsetDateTime.PlusNanoseconds(System.Int64)
  type: Method
  source:
    remote:
      path: 2.1.x/src/NodaTime/OffsetDateTime.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: PlusNanoseconds
    path: src/NodaTime/OffsetDateTime.cs
    startLine: 598
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nReturns the result of adding an increment of nanoseconds to this zoned date and time\n"
  example: []
  syntax:
    content: public OffsetDateTime PlusNanoseconds(long nanoseconds)
    parameters:
    - id: nanoseconds
      type: System.Int64
      description: The number of nanoseconds to add
    return:
      type: NodaTime.OffsetDateTime
      description: A new <xref href="NodaTime.OffsetDateTime" data-throw-if-not-resolved="false"></xref> representing the result of the addition.
    content.vb: Public Function PlusNanoseconds(nanoseconds As Long) As OffsetDateTime
  overload: NodaTime.OffsetDateTime.PlusNanoseconds*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: NodaTime.OffsetDateTime.op_Addition(NodaTime.OffsetDateTime,NodaTime.Duration)
  commentId: M:NodaTime.OffsetDateTime.op_Addition(NodaTime.OffsetDateTime,NodaTime.Duration)
  id: op_Addition(NodaTime.OffsetDateTime,NodaTime.Duration)
  parent: NodaTime.OffsetDateTime
  langs:
  - csharp
  - vb
  name: Addition(OffsetDateTime, Duration)
  nameWithType: OffsetDateTime.Addition(OffsetDateTime, Duration)
  fullName: NodaTime.OffsetDateTime.Addition(NodaTime.OffsetDateTime, NodaTime.Duration)
  type: Operator
  source:
    remote:
      path: 2.1.x/src/NodaTime/OffsetDateTime.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: op_Addition
    path: src/NodaTime/OffsetDateTime.cs
    startLine: 610
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nReturns a new <xref href=\"NodaTime.OffsetDateTime\" data-throw-if-not-resolved=\"false\"></xref> with the time advanced by the given duration.\n"
  remarks: "\nThe returned value retains the calendar system and offset of the <code data-dev-comment-type=\"paramref\" class=\"paramref\">offsetDateTime</code>.\n"
  example: []
  syntax:
    content: public static OffsetDateTime operator +(OffsetDateTime offsetDateTime, Duration duration)
    parameters:
    - id: offsetDateTime
      type: NodaTime.OffsetDateTime
      description: The <xref href="NodaTime.OffsetDateTime" data-throw-if-not-resolved="false"></xref> to add the duration to.
    - id: duration
      type: NodaTime.Duration
      description: The duration to add.
    return:
      type: NodaTime.OffsetDateTime
      description: A new value with the time advanced by the given duration, in the same calendar system and with the same offset.
    content.vb: Public Shared Operator +(offsetDateTime As OffsetDateTime, duration As Duration) As OffsetDateTime
  overload: NodaTime.OffsetDateTime.op_Addition*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: NodaTime.OffsetDateTime.Subtract(NodaTime.OffsetDateTime,NodaTime.Duration)
  commentId: M:NodaTime.OffsetDateTime.Subtract(NodaTime.OffsetDateTime,NodaTime.Duration)
  id: Subtract(NodaTime.OffsetDateTime,NodaTime.Duration)
  parent: NodaTime.OffsetDateTime
  langs:
  - csharp
  - vb
  name: Subtract(OffsetDateTime, Duration)
  nameWithType: OffsetDateTime.Subtract(OffsetDateTime, Duration)
  fullName: NodaTime.OffsetDateTime.Subtract(NodaTime.OffsetDateTime, NodaTime.Duration)
  type: Method
  source:
    remote:
      path: 2.1.x/src/NodaTime/OffsetDateTime.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: Subtract
    path: src/NodaTime/OffsetDateTime.cs
    startLine: 622
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nSubtracts a duration from an offset date and time.\n"
  remarks: "\nThis is an alternative way of calling <xref href=\"NodaTime.OffsetDateTime.op_Subtraction(NodaTime.OffsetDateTime%2cNodaTime.Duration)\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public static OffsetDateTime Subtract(OffsetDateTime offsetDateTime, Duration duration)
    parameters:
    - id: offsetDateTime
      type: NodaTime.OffsetDateTime
      description: The value to subtract the duration from.
    - id: duration
      type: NodaTime.Duration
      description: The duration to subtract.
    return:
      type: NodaTime.OffsetDateTime
      description: A new value with the time &quot;rewound&quot; by the given duration, in the same calendar system and with the same offset.
    content.vb: Public Shared Function Subtract(offsetDateTime As OffsetDateTime, duration As Duration) As OffsetDateTime
  overload: NodaTime.OffsetDateTime.Subtract*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: NodaTime.OffsetDateTime.Minus(NodaTime.Duration)
  commentId: M:NodaTime.OffsetDateTime.Minus(NodaTime.Duration)
  id: Minus(NodaTime.Duration)
  parent: NodaTime.OffsetDateTime
  langs:
  - csharp
  - vb
  name: Minus(Duration)
  nameWithType: OffsetDateTime.Minus(Duration)
  fullName: NodaTime.OffsetDateTime.Minus(NodaTime.Duration)
  type: Method
  source:
    remote:
      path: 2.1.x/src/NodaTime/OffsetDateTime.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: Minus
    path: src/NodaTime/OffsetDateTime.cs
    startLine: 630
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nReturns the result of subtracting a duration from this offset date and time, for a fluent alternative to\n<xref href=\"NodaTime.OffsetDateTime.op_Subtraction(NodaTime.OffsetDateTime%2cNodaTime.Duration)\" data-throw-if-not-resolved=\"false\"></xref>\n"
  example: []
  syntax:
    content: public OffsetDateTime Minus(Duration duration)
    parameters:
    - id: duration
      type: NodaTime.Duration
      description: The duration to subtract
    return:
      type: NodaTime.OffsetDateTime
      description: A new <xref href="NodaTime.OffsetDateTime" data-throw-if-not-resolved="false"></xref> representing the result of the subtraction.
    content.vb: Public Function Minus(duration As Duration) As OffsetDateTime
  overload: NodaTime.OffsetDateTime.Minus*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: NodaTime.OffsetDateTime.op_Subtraction(NodaTime.OffsetDateTime,NodaTime.Duration)
  commentId: M:NodaTime.OffsetDateTime.op_Subtraction(NodaTime.OffsetDateTime,NodaTime.Duration)
  id: op_Subtraction(NodaTime.OffsetDateTime,NodaTime.Duration)
  parent: NodaTime.OffsetDateTime
  langs:
  - csharp
  - vb
  name: Subtraction(OffsetDateTime, Duration)
  nameWithType: OffsetDateTime.Subtraction(OffsetDateTime, Duration)
  fullName: NodaTime.OffsetDateTime.Subtraction(NodaTime.OffsetDateTime, NodaTime.Duration)
  type: Operator
  source:
    remote:
      path: 2.1.x/src/NodaTime/OffsetDateTime.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: op_Subtraction
    path: src/NodaTime/OffsetDateTime.cs
    startLine: 642
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nReturns a new <xref href=\"NodaTime.OffsetDateTime\" data-throw-if-not-resolved=\"false\"></xref> with the duration subtracted.\n"
  remarks: "\nThe returned value retains the calendar system and offset of the <code data-dev-comment-type=\"paramref\" class=\"paramref\">offsetDateTime</code>.\n"
  example: []
  syntax:
    content: public static OffsetDateTime operator -(OffsetDateTime offsetDateTime, Duration duration)
    parameters:
    - id: offsetDateTime
      type: NodaTime.OffsetDateTime
      description: The value to subtract the duration from.
    - id: duration
      type: NodaTime.Duration
      description: The duration to subtract.
    return:
      type: NodaTime.OffsetDateTime
      description: A new value with the time &quot;rewound&quot; by the given duration, in the same calendar system and with the same offset.
    content.vb: Public Shared Operator -(offsetDateTime As OffsetDateTime, duration As Duration) As OffsetDateTime
  overload: NodaTime.OffsetDateTime.op_Subtraction*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: NodaTime.OffsetDateTime.Subtract(NodaTime.OffsetDateTime,NodaTime.OffsetDateTime)
  commentId: M:NodaTime.OffsetDateTime.Subtract(NodaTime.OffsetDateTime,NodaTime.OffsetDateTime)
  id: Subtract(NodaTime.OffsetDateTime,NodaTime.OffsetDateTime)
  parent: NodaTime.OffsetDateTime
  langs:
  - csharp
  - vb
  name: Subtract(OffsetDateTime, OffsetDateTime)
  nameWithType: OffsetDateTime.Subtract(OffsetDateTime, OffsetDateTime)
  fullName: NodaTime.OffsetDateTime.Subtract(NodaTime.OffsetDateTime, NodaTime.OffsetDateTime)
  type: Method
  source:
    remote:
      path: 2.1.x/src/NodaTime/OffsetDateTime.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: Subtract
    path: src/NodaTime/OffsetDateTime.cs
    startLine: 655
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nSubtracts one offset date and time from another, returning an elapsed duration.\n"
  remarks: "\nThis is an alternative way of calling <xref href=\"NodaTime.OffsetDateTime.op_Subtraction(NodaTime.OffsetDateTime%2cNodaTime.OffsetDateTime)\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public static Duration Subtract(OffsetDateTime end, OffsetDateTime start)
    parameters:
    - id: end
      type: NodaTime.OffsetDateTime
      description: >-
        The offset date and time value to subtract from; if this is later than <code data-dev-comment-type="paramref" class="paramref">start</code>

        then the result will be positive.
    - id: start
      type: NodaTime.OffsetDateTime
      description: The offset date and time to subtract from <code data-dev-comment-type="paramref" class="paramref">end</code>.
    return:
      type: NodaTime.Duration
      description: The elapsed duration from <code data-dev-comment-type="paramref" class="paramref">start</code> to <code data-dev-comment-type="paramref" class="paramref">end</code>.
    content.vb: Public Shared Function Subtract(end As OffsetDateTime, start As OffsetDateTime) As Duration
  overload: NodaTime.OffsetDateTime.Subtract*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: NodaTime.OffsetDateTime.Minus(NodaTime.OffsetDateTime)
  commentId: M:NodaTime.OffsetDateTime.Minus(NodaTime.OffsetDateTime)
  id: Minus(NodaTime.OffsetDateTime)
  parent: NodaTime.OffsetDateTime
  langs:
  - csharp
  - vb
  name: Minus(OffsetDateTime)
  nameWithType: OffsetDateTime.Minus(OffsetDateTime)
  fullName: NodaTime.OffsetDateTime.Minus(NodaTime.OffsetDateTime)
  type: Method
  source:
    remote:
      path: 2.1.x/src/NodaTime/OffsetDateTime.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: Minus
    path: src/NodaTime/OffsetDateTime.cs
    startLine: 666
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nReturns the result of subtracting another offset date and time from this one, resulting in the elapsed duration\nbetween the two instants represented in the values.\n"
  remarks: "\nThis is an alternative way of calling <xref href=\"NodaTime.OffsetDateTime.op_Subtraction(NodaTime.OffsetDateTime%2cNodaTime.OffsetDateTime)\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public Duration Minus(OffsetDateTime other)
    parameters:
    - id: other
      type: NodaTime.OffsetDateTime
      description: The offset date and time to subtract from this one.
    return:
      type: NodaTime.Duration
      description: The elapsed duration from <code data-dev-comment-type="paramref" class="paramref">other</code> to this value.
    content.vb: Public Function Minus(other As OffsetDateTime) As Duration
  overload: NodaTime.OffsetDateTime.Minus*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: NodaTime.OffsetDateTime.op_Subtraction(NodaTime.OffsetDateTime,NodaTime.OffsetDateTime)
  commentId: M:NodaTime.OffsetDateTime.op_Subtraction(NodaTime.OffsetDateTime,NodaTime.OffsetDateTime)
  id: op_Subtraction(NodaTime.OffsetDateTime,NodaTime.OffsetDateTime)
  parent: NodaTime.OffsetDateTime
  langs:
  - csharp
  - vb
  name: Subtraction(OffsetDateTime, OffsetDateTime)
  nameWithType: OffsetDateTime.Subtraction(OffsetDateTime, OffsetDateTime)
  fullName: NodaTime.OffsetDateTime.Subtraction(NodaTime.OffsetDateTime, NodaTime.OffsetDateTime)
  type: Operator
  source:
    remote:
      path: 2.1.x/src/NodaTime/OffsetDateTime.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: op_Subtraction
    path: src/NodaTime/OffsetDateTime.cs
    startLine: 684
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nSubtracts one <xref href=\"NodaTime.OffsetDateTime\" data-throw-if-not-resolved=\"false\"></xref> from another, resulting in the elapsed time between\nthe two values.\n"
  remarks: "\nThis is equivalent to <code>end.ToInstant() - start.ToInstant()</code>; in particular:\n<ul><li>The two values can use different calendar systems</li><li>The two values can have different UTC offsets</li></ul>\n"
  example: []
  syntax:
    content: public static Duration operator -(OffsetDateTime end, OffsetDateTime start)
    parameters:
    - id: end
      type: NodaTime.OffsetDateTime
      description: >-
        The offset date and time value to subtract from; if this is later than <code data-dev-comment-type="paramref" class="paramref">start</code>

        then the result will be positive.
    - id: start
      type: NodaTime.OffsetDateTime
      description: The offset date and time to subtract from <code data-dev-comment-type="paramref" class="paramref">end</code>.
    return:
      type: NodaTime.Duration
      description: The elapsed duration from <code data-dev-comment-type="paramref" class="paramref">start</code> to <code data-dev-comment-type="paramref" class="paramref">end</code>.
    content.vb: Public Shared Operator -(end As OffsetDateTime, start As OffsetDateTime) As Duration
  overload: NodaTime.OffsetDateTime.op_Subtraction*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: NodaTime.OffsetDateTime.op_Equality(NodaTime.OffsetDateTime,NodaTime.OffsetDateTime)
  commentId: M:NodaTime.OffsetDateTime.op_Equality(NodaTime.OffsetDateTime,NodaTime.OffsetDateTime)
  id: op_Equality(NodaTime.OffsetDateTime,NodaTime.OffsetDateTime)
  parent: NodaTime.OffsetDateTime
  langs:
  - csharp
  - vb
  name: Equality(OffsetDateTime, OffsetDateTime)
  nameWithType: OffsetDateTime.Equality(OffsetDateTime, OffsetDateTime)
  fullName: NodaTime.OffsetDateTime.Equality(NodaTime.OffsetDateTime, NodaTime.OffsetDateTime)
  type: Operator
  source:
    remote:
      path: 2.1.x/src/NodaTime/OffsetDateTime.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: op_Equality
    path: src/NodaTime/OffsetDateTime.cs
    startLine: 692
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nImplements the operator == (equality).\n"
  example: []
  syntax:
    content: public static bool operator ==(OffsetDateTime left, OffsetDateTime right)
    parameters:
    - id: left
      type: NodaTime.OffsetDateTime
      description: The left hand side of the operator.
    - id: right
      type: NodaTime.OffsetDateTime
      description: The right hand side of the operator.
    return:
      type: System.Boolean
      description: <code>true</code> if values are equal to each other, otherwise <code>false</code>.
    content.vb: Public Shared Operator =(left As OffsetDateTime, right As OffsetDateTime) As Boolean
  overload: NodaTime.OffsetDateTime.op_Equality*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: NodaTime.OffsetDateTime.op_Inequality(NodaTime.OffsetDateTime,NodaTime.OffsetDateTime)
  commentId: M:NodaTime.OffsetDateTime.op_Inequality(NodaTime.OffsetDateTime,NodaTime.OffsetDateTime)
  id: op_Inequality(NodaTime.OffsetDateTime,NodaTime.OffsetDateTime)
  parent: NodaTime.OffsetDateTime
  langs:
  - csharp
  - vb
  name: Inequality(OffsetDateTime, OffsetDateTime)
  nameWithType: OffsetDateTime.Inequality(OffsetDateTime, OffsetDateTime)
  fullName: NodaTime.OffsetDateTime.Inequality(NodaTime.OffsetDateTime, NodaTime.OffsetDateTime)
  type: Operator
  source:
    remote:
      path: 2.1.x/src/NodaTime/OffsetDateTime.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: op_Inequality
    path: src/NodaTime/OffsetDateTime.cs
    startLine: 700
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nImplements the operator != (inequality).\n"
  example: []
  syntax:
    content: public static bool operator !=(OffsetDateTime left, OffsetDateTime right)
    parameters:
    - id: left
      type: NodaTime.OffsetDateTime
      description: The left hand side of the operator.
    - id: right
      type: NodaTime.OffsetDateTime
      description: The right hand side of the operator.
    return:
      type: System.Boolean
      description: <code>true</code> if values are not equal to each other, otherwise <code>false</code>.
    content.vb: Public Shared Operator <>(left As OffsetDateTime, right As OffsetDateTime) As Boolean
  overload: NodaTime.OffsetDateTime.op_Inequality*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: NodaTime.OffsetDateTime.System#Xml#Serialization#IXmlSerializable#GetSchema
  commentId: M:NodaTime.OffsetDateTime.System#Xml#Serialization#IXmlSerializable#GetSchema
  id: System#Xml#Serialization#IXmlSerializable#GetSchema
  isEii: true
  parent: NodaTime.OffsetDateTime
  langs:
  - csharp
  - vb
  name: IXmlSerializable.GetSchema()
  nameWithType: OffsetDateTime.IXmlSerializable.GetSchema()
  fullName: NodaTime.OffsetDateTime.System.Xml.Serialization.IXmlSerializable.GetSchema()
  type: Method
  source:
    remote:
      path: 2.1.x/src/NodaTime/OffsetDateTime.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: System.Xml.Serialization.IXmlSerializable.GetSchema
    path: src/NodaTime/OffsetDateTime.cs
    startLine: 852
  assemblies:
  - NodaTime
  namespace: NodaTime
  example: []
  syntax:
    content: XmlSchema IXmlSerializable.GetSchema()
    return:
      type: System.Xml.Schema.XmlSchema
    content.vb: Function System.Xml.Serialization.IXmlSerializable.GetSchema As XmlSchema Implements IXmlSerializable.GetSchema
  overload: NodaTime.OffsetDateTime.System#Xml#Serialization#IXmlSerializable#GetSchema*
  implements:
  - System.Xml.Serialization.IXmlSerializable.GetSchema
  nameWithType.vb: OffsetDateTime.System.Xml.Serialization.IXmlSerializable.GetSchema()
  name.vb: System.Xml.Serialization.IXmlSerializable.GetSchema()
- uid: NodaTime.OffsetDateTime.System#Xml#Serialization#IXmlSerializable#ReadXml(System.Xml.XmlReader)
  commentId: M:NodaTime.OffsetDateTime.System#Xml#Serialization#IXmlSerializable#ReadXml(System.Xml.XmlReader)
  id: System#Xml#Serialization#IXmlSerializable#ReadXml(System.Xml.XmlReader)
  isEii: true
  parent: NodaTime.OffsetDateTime
  langs:
  - csharp
  - vb
  name: IXmlSerializable.ReadXml(XmlReader)
  nameWithType: OffsetDateTime.IXmlSerializable.ReadXml(XmlReader)
  fullName: NodaTime.OffsetDateTime.System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)
  type: Method
  source:
    remote:
      path: 2.1.x/src/NodaTime/OffsetDateTime.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: System.Xml.Serialization.IXmlSerializable.ReadXml
    path: src/NodaTime/OffsetDateTime.cs
    startLine: 855
  assemblies:
  - NodaTime
  namespace: NodaTime
  example: []
  syntax:
    content: void IXmlSerializable.ReadXml(XmlReader reader)
    parameters:
    - id: reader
      type: System.Xml.XmlReader
    content.vb: Sub System.Xml.Serialization.IXmlSerializable.ReadXml(reader As XmlReader) Implements IXmlSerializable.ReadXml
  overload: NodaTime.OffsetDateTime.System#Xml#Serialization#IXmlSerializable#ReadXml*
  implements:
  - System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)
  nameWithType.vb: OffsetDateTime.System.Xml.Serialization.IXmlSerializable.ReadXml(XmlReader)
  name.vb: System.Xml.Serialization.IXmlSerializable.ReadXml(XmlReader)
- uid: NodaTime.OffsetDateTime.System#Xml#Serialization#IXmlSerializable#WriteXml(System.Xml.XmlWriter)
  commentId: M:NodaTime.OffsetDateTime.System#Xml#Serialization#IXmlSerializable#WriteXml(System.Xml.XmlWriter)
  id: System#Xml#Serialization#IXmlSerializable#WriteXml(System.Xml.XmlWriter)
  isEii: true
  parent: NodaTime.OffsetDateTime
  langs:
  - csharp
  - vb
  name: IXmlSerializable.WriteXml(XmlWriter)
  nameWithType: OffsetDateTime.IXmlSerializable.WriteXml(XmlWriter)
  fullName: NodaTime.OffsetDateTime.System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)
  type: Method
  source:
    remote:
      path: 2.1.x/src/NodaTime/OffsetDateTime.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: System.Xml.Serialization.IXmlSerializable.WriteXml
    path: src/NodaTime/OffsetDateTime.cs
    startLine: 872
  assemblies:
  - NodaTime
  namespace: NodaTime
  example: []
  syntax:
    content: void IXmlSerializable.WriteXml(XmlWriter writer)
    parameters:
    - id: writer
      type: System.Xml.XmlWriter
    content.vb: Sub System.Xml.Serialization.IXmlSerializable.WriteXml(writer As XmlWriter) Implements IXmlSerializable.WriteXml
  overload: NodaTime.OffsetDateTime.System#Xml#Serialization#IXmlSerializable#WriteXml*
  implements:
  - System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)
  nameWithType.vb: OffsetDateTime.System.Xml.Serialization.IXmlSerializable.WriteXml(XmlWriter)
  name.vb: System.Xml.Serialization.IXmlSerializable.WriteXml(XmlWriter)
- uid: NodaTime.OffsetDateTime.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  commentId: M:NodaTime.OffsetDateTime.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  id: System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  isEii: true
  parent: NodaTime.OffsetDateTime
  langs:
  - csharp
  - vb
  name: ISerializable.GetObjectData(SerializationInfo, StreamingContext)
  nameWithType: OffsetDateTime.ISerializable.GetObjectData(SerializationInfo, StreamingContext)
  fullName: NodaTime.OffsetDateTime.System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext)
  type: Method
  source:
    remote:
      path: 2.1.x/src/NodaTime/OffsetDateTime.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: System.Runtime.Serialization.ISerializable.GetObjectData
    path: src/NodaTime/OffsetDateTime.cs
    startLine: 900
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nImplementation of <xref href=\"System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo%2cSystem.Runtime.Serialization.StreamingContext)\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: >-
      [SecurityCritical]

      void ISerializable.GetObjectData(SerializationInfo info, StreamingContext context)
    parameters:
    - id: info
      type: System.Runtime.Serialization.SerializationInfo
      description: The <xref href="System.Runtime.Serialization.SerializationInfo" data-throw-if-not-resolved="false"></xref> to populate with data.
    - id: context
      type: System.Runtime.Serialization.StreamingContext
      description: The destination for this serialization.
    content.vb: >-
      <SecurityCritical>

      Sub System.Runtime.Serialization.ISerializable.GetObjectData(info As SerializationInfo, context As StreamingContext) Implements ISerializable.GetObjectData
  overload: NodaTime.OffsetDateTime.System#Runtime#Serialization#ISerializable#GetObjectData*
  implements:
  - System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  attributes:
  - type: System.Security.SecurityCriticalAttribute
    ctor: System.Security.SecurityCriticalAttribute.#ctor
    arguments: []
  nameWithType.vb: OffsetDateTime.System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo, StreamingContext)
  name.vb: System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo, StreamingContext)
references:
- uid: System.DateTimeOffset
  commentId: T:System.DateTimeOffset
  parent: System
  isExternal: true
  name: DateTimeOffset
  nameWithType: DateTimeOffset
  fullName: System.DateTimeOffset
- uid: NodaTime
  commentId: N:NodaTime
  name: NodaTime
  nameWithType: NodaTime
  fullName: NodaTime
- uid: System.IEquatable{NodaTime.OffsetDateTime}
  commentId: T:System.IEquatable{NodaTime.OffsetDateTime}
  parent: System
  definition: System.IEquatable`1
  name: IEquatable<OffsetDateTime>
  nameWithType: IEquatable<OffsetDateTime>
  fullName: System.IEquatable<NodaTime.OffsetDateTime>
  nameWithType.vb: IEquatable(Of OffsetDateTime)
  fullName.vb: System.IEquatable(Of NodaTime.OffsetDateTime)
  name.vb: IEquatable(Of OffsetDateTime)
  spec.csharp:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: NodaTime.OffsetDateTime
    name: OffsetDateTime
    nameWithType: OffsetDateTime
    fullName: NodaTime.OffsetDateTime
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: NodaTime.OffsetDateTime
    name: OffsetDateTime
    nameWithType: OffsetDateTime
    fullName: NodaTime.OffsetDateTime
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IFormattable
  commentId: T:System.IFormattable
  parent: System
  isExternal: true
  name: IFormattable
  nameWithType: IFormattable
  fullName: System.IFormattable
- uid: System.Xml.Serialization.IXmlSerializable
  commentId: T:System.Xml.Serialization.IXmlSerializable
  parent: System.Xml.Serialization
  isExternal: true
  name: IXmlSerializable
  nameWithType: IXmlSerializable
  fullName: System.Xml.Serialization.IXmlSerializable
- uid: System.Runtime.Serialization.ISerializable
  commentId: T:System.Runtime.Serialization.ISerializable
  parent: System.Runtime.Serialization
  isExternal: true
  name: ISerializable
  nameWithType: ISerializable
  fullName: System.Runtime.Serialization.ISerializable
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: System.IEquatable`1
  commentId: T:System.IEquatable`1
  isExternal: true
  name: IEquatable<T>
  nameWithType: IEquatable<T>
  fullName: System.IEquatable<T>
  nameWithType.vb: IEquatable(Of T)
  fullName.vb: System.IEquatable(Of T)
  name.vb: IEquatable(Of T)
  spec.csharp:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Xml.Serialization
  commentId: N:System.Xml.Serialization
  isExternal: true
  name: System.Xml.Serialization
  nameWithType: System.Xml.Serialization
  fullName: System.Xml.Serialization
- uid: System.Runtime.Serialization
  commentId: N:System.Runtime.Serialization
  isExternal: true
  name: System.Runtime.Serialization
  nameWithType: System.Runtime.Serialization
  fullName: System.Runtime.Serialization
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: NodaTime.OffsetDateTime.#ctor*
  commentId: Overload:NodaTime.OffsetDateTime.#ctor
  name: OffsetDateTime
  nameWithType: OffsetDateTime.OffsetDateTime
  fullName: NodaTime.OffsetDateTime.OffsetDateTime
- uid: NodaTime.LocalDateTime
  commentId: T:NodaTime.LocalDateTime
  parent: NodaTime
  name: LocalDateTime
  nameWithType: LocalDateTime
  fullName: NodaTime.LocalDateTime
- uid: NodaTime.Offset
  commentId: T:NodaTime.Offset
  parent: NodaTime
  name: Offset
  nameWithType: Offset
  fullName: NodaTime.Offset
- uid: NodaTime.OffsetDateTime.Calendar*
  commentId: Overload:NodaTime.OffsetDateTime.Calendar
  name: Calendar
  nameWithType: OffsetDateTime.Calendar
  fullName: NodaTime.OffsetDateTime.Calendar
- uid: NodaTime.CalendarSystem
  commentId: T:NodaTime.CalendarSystem
  parent: NodaTime
  name: CalendarSystem
  nameWithType: CalendarSystem
  fullName: NodaTime.CalendarSystem
- uid: NodaTime.OffsetDateTime.Year*
  commentId: Overload:NodaTime.OffsetDateTime.Year
  name: Year
  nameWithType: OffsetDateTime.Year
  fullName: NodaTime.OffsetDateTime.Year
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: NodaTime.OffsetDateTime.Month*
  commentId: Overload:NodaTime.OffsetDateTime.Month
  name: Month
  nameWithType: OffsetDateTime.Month
  fullName: NodaTime.OffsetDateTime.Month
- uid: NodaTime.OffsetDateTime.Day*
  commentId: Overload:NodaTime.OffsetDateTime.Day
  name: Day
  nameWithType: OffsetDateTime.Day
  fullName: NodaTime.OffsetDateTime.Day
- uid: NodaTime.IsoDayOfWeek
  commentId: T:NodaTime.IsoDayOfWeek
  parent: NodaTime
  name: IsoDayOfWeek
  nameWithType: IsoDayOfWeek
  fullName: NodaTime.IsoDayOfWeek
- uid: NodaTime.OffsetDateTime.DayOfWeek*
  commentId: Overload:NodaTime.OffsetDateTime.DayOfWeek
  name: DayOfWeek
  nameWithType: OffsetDateTime.DayOfWeek
  fullName: NodaTime.OffsetDateTime.DayOfWeek
- uid: NodaTime.OffsetDateTime.YearOfEra*
  commentId: Overload:NodaTime.OffsetDateTime.YearOfEra
  name: YearOfEra
  nameWithType: OffsetDateTime.YearOfEra
  fullName: NodaTime.OffsetDateTime.YearOfEra
- uid: NodaTime.OffsetDateTime.Era*
  commentId: Overload:NodaTime.OffsetDateTime.Era
  name: Era
  nameWithType: OffsetDateTime.Era
  fullName: NodaTime.OffsetDateTime.Era
- uid: NodaTime.Calendars.Era
  commentId: T:NodaTime.Calendars.Era
  parent: NodaTime.Calendars
  name: Era
  nameWithType: Era
  fullName: NodaTime.Calendars.Era
- uid: NodaTime.Calendars
  commentId: N:NodaTime.Calendars
  name: NodaTime.Calendars
  nameWithType: NodaTime.Calendars
  fullName: NodaTime.Calendars
- uid: NodaTime.OffsetDateTime.DayOfYear*
  commentId: Overload:NodaTime.OffsetDateTime.DayOfYear
  name: DayOfYear
  nameWithType: OffsetDateTime.DayOfYear
  fullName: NodaTime.OffsetDateTime.DayOfYear
- uid: NodaTime.OffsetDateTime.Hour*
  commentId: Overload:NodaTime.OffsetDateTime.Hour
  name: Hour
  nameWithType: OffsetDateTime.Hour
  fullName: NodaTime.OffsetDateTime.Hour
- uid: NodaTime.OffsetDateTime.ClockHourOfHalfDay*
  commentId: Overload:NodaTime.OffsetDateTime.ClockHourOfHalfDay
  name: ClockHourOfHalfDay
  nameWithType: OffsetDateTime.ClockHourOfHalfDay
  fullName: NodaTime.OffsetDateTime.ClockHourOfHalfDay
- uid: NodaTime.OffsetDateTime.Minute*
  commentId: Overload:NodaTime.OffsetDateTime.Minute
  name: Minute
  nameWithType: OffsetDateTime.Minute
  fullName: NodaTime.OffsetDateTime.Minute
- uid: NodaTime.OffsetDateTime.Second*
  commentId: Overload:NodaTime.OffsetDateTime.Second
  name: Second
  nameWithType: OffsetDateTime.Second
  fullName: NodaTime.OffsetDateTime.Second
- uid: NodaTime.OffsetDateTime.Millisecond*
  commentId: Overload:NodaTime.OffsetDateTime.Millisecond
  name: Millisecond
  nameWithType: OffsetDateTime.Millisecond
  fullName: NodaTime.OffsetDateTime.Millisecond
- uid: NodaTime.OffsetDateTime.TickOfSecond*
  commentId: Overload:NodaTime.OffsetDateTime.TickOfSecond
  name: TickOfSecond
  nameWithType: OffsetDateTime.TickOfSecond
  fullName: NodaTime.OffsetDateTime.TickOfSecond
- uid: NodaTime.OffsetDateTime.TickOfDay*
  commentId: Overload:NodaTime.OffsetDateTime.TickOfDay
  name: TickOfDay
  nameWithType: OffsetDateTime.TickOfDay
  fullName: NodaTime.OffsetDateTime.TickOfDay
- uid: System.Int64
  commentId: T:System.Int64
  parent: System
  isExternal: true
  name: Int64
  nameWithType: Int64
  fullName: System.Int64
- uid: NodaTime.OffsetDateTime.NanosecondOfSecond*
  commentId: Overload:NodaTime.OffsetDateTime.NanosecondOfSecond
  name: NanosecondOfSecond
  nameWithType: OffsetDateTime.NanosecondOfSecond
  fullName: NodaTime.OffsetDateTime.NanosecondOfSecond
- uid: NodaTime.OffsetDateTime.NanosecondOfDay*
  commentId: Overload:NodaTime.OffsetDateTime.NanosecondOfDay
  name: NanosecondOfDay
  nameWithType: OffsetDateTime.NanosecondOfDay
  fullName: NodaTime.OffsetDateTime.NanosecondOfDay
- uid: NodaTime.OffsetDateTime.LocalDateTime*
  commentId: Overload:NodaTime.OffsetDateTime.LocalDateTime
  name: LocalDateTime
  nameWithType: OffsetDateTime.LocalDateTime
  fullName: NodaTime.OffsetDateTime.LocalDateTime
- uid: NodaTime.LocalDate
  commentId: T:NodaTime.LocalDate
  parent: NodaTime
  name: LocalDate
  nameWithType: LocalDate
  fullName: NodaTime.LocalDate
- uid: NodaTime.OffsetDateTime.Date*
  commentId: Overload:NodaTime.OffsetDateTime.Date
  name: Date
  nameWithType: OffsetDateTime.Date
  fullName: NodaTime.OffsetDateTime.Date
- uid: NodaTime.LocalTime
  commentId: T:NodaTime.LocalTime
  parent: NodaTime
  name: LocalTime
  nameWithType: LocalTime
  fullName: NodaTime.LocalTime
- uid: NodaTime.OffsetDateTime.TimeOfDay*
  commentId: Overload:NodaTime.OffsetDateTime.TimeOfDay
  name: TimeOfDay
  nameWithType: OffsetDateTime.TimeOfDay
  fullName: NodaTime.OffsetDateTime.TimeOfDay
- uid: NodaTime.OffsetDateTime.Offset*
  commentId: Overload:NodaTime.OffsetDateTime.Offset
  name: Offset
  nameWithType: OffsetDateTime.Offset
  fullName: NodaTime.OffsetDateTime.Offset
- uid: NodaTime.OffsetDateTime.ToInstant*
  commentId: Overload:NodaTime.OffsetDateTime.ToInstant
  name: ToInstant
  nameWithType: OffsetDateTime.ToInstant
  fullName: NodaTime.OffsetDateTime.ToInstant
- uid: NodaTime.Instant
  commentId: T:NodaTime.Instant
  parent: NodaTime
  name: Instant
  nameWithType: Instant
  fullName: NodaTime.Instant
- uid: NodaTime.ZonedDateTime
  commentId: T:NodaTime.ZonedDateTime
  parent: NodaTime
  name: ZonedDateTime
  nameWithType: ZonedDateTime
  fullName: NodaTime.ZonedDateTime
- uid: NodaTime.OffsetDateTime.InFixedZone*
  commentId: Overload:NodaTime.OffsetDateTime.InFixedZone
  name: InFixedZone
  nameWithType: OffsetDateTime.InFixedZone
  fullName: NodaTime.OffsetDateTime.InFixedZone
- uid: System.DateTime
  commentId: T:System.DateTime
  parent: System
  isExternal: true
  name: DateTime
  nameWithType: DateTime
  fullName: System.DateTime
- uid: System.InvalidOperationException
  commentId: T:System.InvalidOperationException
  isExternal: true
- uid: NodaTime.OffsetDateTime.ToDateTimeOffset*
  commentId: Overload:NodaTime.OffsetDateTime.ToDateTimeOffset
  name: ToDateTimeOffset
  nameWithType: OffsetDateTime.ToDateTimeOffset
  fullName: NodaTime.OffsetDateTime.ToDateTimeOffset
- uid: NodaTime.OffsetDateTime
  commentId: T:NodaTime.OffsetDateTime
  parent: NodaTime
  name: OffsetDateTime
  nameWithType: OffsetDateTime
  fullName: NodaTime.OffsetDateTime
- uid: NodaTime.OffsetDateTime.LocalDateTime
  commentId: P:NodaTime.OffsetDateTime.LocalDateTime
  isExternal: true
- uid: NodaTime.OffsetDateTime.Offset
  commentId: P:NodaTime.OffsetDateTime.Offset
  isExternal: true
- uid: NodaTime.OffsetDateTime.FromDateTimeOffset*
  commentId: Overload:NodaTime.OffsetDateTime.FromDateTimeOffset
  name: FromDateTimeOffset
  nameWithType: OffsetDateTime.FromDateTimeOffset
  fullName: NodaTime.OffsetDateTime.FromDateTimeOffset
- uid: NodaTime.OffsetDateTime.WithCalendar*
  commentId: Overload:NodaTime.OffsetDateTime.WithCalendar
  name: WithCalendar
  nameWithType: OffsetDateTime.WithCalendar
  fullName: NodaTime.OffsetDateTime.WithCalendar
- uid: NodaTime.OffsetDateTime.With*
  commentId: Overload:NodaTime.OffsetDateTime.With
  name: With
  nameWithType: OffsetDateTime.With
  fullName: NodaTime.OffsetDateTime.With
- uid: System.Func{NodaTime.LocalDate,NodaTime.LocalDate}
  commentId: T:System.Func{NodaTime.LocalDate,NodaTime.LocalDate}
  parent: System
  definition: System.Func`2
  name: Func<LocalDate, LocalDate>
  nameWithType: Func<LocalDate, LocalDate>
  fullName: System.Func<NodaTime.LocalDate, NodaTime.LocalDate>
  nameWithType.vb: Func(Of LocalDate, LocalDate)
  fullName.vb: System.Func(Of NodaTime.LocalDate, NodaTime.LocalDate)
  name.vb: Func(Of LocalDate, LocalDate)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: NodaTime.LocalDate
    name: LocalDate
    nameWithType: LocalDate
    fullName: NodaTime.LocalDate
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: NodaTime.LocalDate
    name: LocalDate
    nameWithType: LocalDate
    fullName: NodaTime.LocalDate
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: NodaTime.LocalDate
    name: LocalDate
    nameWithType: LocalDate
    fullName: NodaTime.LocalDate
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: NodaTime.LocalDate
    name: LocalDate
    nameWithType: LocalDate
    fullName: NodaTime.LocalDate
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func`2
  commentId: T:System.Func`2
  isExternal: true
  name: Func<T, TResult>
  nameWithType: Func<T, TResult>
  fullName: System.Func<T, TResult>
  nameWithType.vb: Func(Of T, TResult)
  fullName.vb: System.Func(Of T, TResult)
  name.vb: Func(Of T, TResult)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func{NodaTime.LocalTime,NodaTime.LocalTime}
  commentId: T:System.Func{NodaTime.LocalTime,NodaTime.LocalTime}
  parent: System
  definition: System.Func`2
  name: Func<LocalTime, LocalTime>
  nameWithType: Func<LocalTime, LocalTime>
  fullName: System.Func<NodaTime.LocalTime, NodaTime.LocalTime>
  nameWithType.vb: Func(Of LocalTime, LocalTime)
  fullName.vb: System.Func(Of NodaTime.LocalTime, NodaTime.LocalTime)
  name.vb: Func(Of LocalTime, LocalTime)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: NodaTime.LocalTime
    name: LocalTime
    nameWithType: LocalTime
    fullName: NodaTime.LocalTime
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: NodaTime.LocalTime
    name: LocalTime
    nameWithType: LocalTime
    fullName: NodaTime.LocalTime
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: NodaTime.LocalTime
    name: LocalTime
    nameWithType: LocalTime
    fullName: NodaTime.LocalTime
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: NodaTime.LocalTime
    name: LocalTime
    nameWithType: LocalTime
    fullName: NodaTime.LocalTime
  - name: )
    nameWithType: )
    fullName: )
- uid: NodaTime.OffsetDateTime.WithOffset*
  commentId: Overload:NodaTime.OffsetDateTime.WithOffset
  name: WithOffset
  nameWithType: OffsetDateTime.WithOffset
  fullName: NodaTime.OffsetDateTime.WithOffset
- uid: System.ValueType.GetHashCode
  commentId: M:System.ValueType.GetHashCode
  parent: System.ValueType
  isExternal: true
  name: GetHashCode()
  nameWithType: ValueType.GetHashCode()
  fullName: System.ValueType.GetHashCode()
  spec.csharp:
  - uid: System.ValueType.GetHashCode
    name: GetHashCode
    nameWithType: ValueType.GetHashCode
    fullName: System.ValueType.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.ValueType.GetHashCode
    name: GetHashCode
    nameWithType: ValueType.GetHashCode
    fullName: System.ValueType.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: NodaTime.OffsetDateTime.GetHashCode*
  commentId: Overload:NodaTime.OffsetDateTime.GetHashCode
  name: GetHashCode
  nameWithType: OffsetDateTime.GetHashCode
  fullName: NodaTime.OffsetDateTime.GetHashCode
- uid: System.ValueType
  commentId: T:System.ValueType
  parent: System
  isExternal: true
  name: ValueType
  nameWithType: ValueType
  fullName: System.ValueType
- uid: System.ValueType.Equals(System.Object)
  commentId: M:System.ValueType.Equals(System.Object)
  parent: System.ValueType
  isExternal: true
  name: Equals(Object)
  nameWithType: ValueType.Equals(Object)
  fullName: System.ValueType.Equals(System.Object)
  spec.csharp:
  - uid: System.ValueType.Equals(System.Object)
    name: Equals
    nameWithType: ValueType.Equals
    fullName: System.ValueType.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.ValueType.Equals(System.Object)
    name: Equals
    nameWithType: ValueType.Equals
    fullName: System.ValueType.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: NodaTime.OffsetDateTime.Equals*
  commentId: Overload:NodaTime.OffsetDateTime.Equals
  name: Equals
  nameWithType: OffsetDateTime.Equals
  fullName: NodaTime.OffsetDateTime.Equals
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.IEquatable{NodaTime.OffsetDateTime}.Equals(NodaTime.OffsetDateTime)
  commentId: M:System.IEquatable{NodaTime.OffsetDateTime}.Equals(NodaTime.OffsetDateTime)
  parent: System.IEquatable{NodaTime.OffsetDateTime}
  definition: System.IEquatable`1.Equals(`0)
  name: Equals(OffsetDateTime)
  nameWithType: IEquatable<OffsetDateTime>.Equals(OffsetDateTime)
  fullName: System.IEquatable<NodaTime.OffsetDateTime>.Equals(NodaTime.OffsetDateTime)
  nameWithType.vb: IEquatable(Of OffsetDateTime).Equals(OffsetDateTime)
  fullName.vb: System.IEquatable(Of NodaTime.OffsetDateTime).Equals(NodaTime.OffsetDateTime)
  spec.csharp:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    nameWithType: IEquatable<OffsetDateTime>.Equals
    fullName: System.IEquatable<NodaTime.OffsetDateTime>.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: NodaTime.OffsetDateTime
    name: OffsetDateTime
    nameWithType: OffsetDateTime
    fullName: NodaTime.OffsetDateTime
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    nameWithType: IEquatable(Of OffsetDateTime).Equals
    fullName: System.IEquatable(Of NodaTime.OffsetDateTime).Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: NodaTime.OffsetDateTime
    name: OffsetDateTime
    nameWithType: OffsetDateTime
    fullName: NodaTime.OffsetDateTime
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IEquatable`1.Equals(`0)
  commentId: M:System.IEquatable`1.Equals(`0)
  isExternal: true
  name: Equals(T)
  nameWithType: IEquatable<T>.Equals(T)
  fullName: System.IEquatable<T>.Equals(T)
  nameWithType.vb: IEquatable(Of T).Equals(T)
  fullName.vb: System.IEquatable(Of T).Equals(T)
  spec.csharp:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    nameWithType: IEquatable<T>.Equals
    fullName: System.IEquatable<T>.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    nameWithType: IEquatable(Of T).Equals
    fullName: System.IEquatable(Of T).Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.ValueType.ToString
  commentId: M:System.ValueType.ToString
  parent: System.ValueType
  isExternal: true
  name: ToString()
  nameWithType: ValueType.ToString()
  fullName: System.ValueType.ToString()
  spec.csharp:
  - uid: System.ValueType.ToString
    name: ToString
    nameWithType: ValueType.ToString
    fullName: System.ValueType.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.ValueType.ToString
    name: ToString
    nameWithType: ValueType.ToString
    fullName: System.ValueType.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: NodaTime.OffsetDateTime.ToString*
  commentId: Overload:NodaTime.OffsetDateTime.ToString
  name: ToString
  nameWithType: OffsetDateTime.ToString
  fullName: NodaTime.OffsetDateTime.ToString
- uid: System.IFormatProvider
  commentId: T:System.IFormatProvider
  parent: System
  isExternal: true
  name: IFormatProvider
  nameWithType: IFormatProvider
  fullName: System.IFormatProvider
- uid: System.IFormattable.ToString(System.String,System.IFormatProvider)
  commentId: M:System.IFormattable.ToString(System.String,System.IFormatProvider)
  parent: System.IFormattable
  isExternal: true
  name: ToString(String, IFormatProvider)
  nameWithType: IFormattable.ToString(String, IFormatProvider)
  fullName: System.IFormattable.ToString(System.String, System.IFormatProvider)
  spec.csharp:
  - uid: System.IFormattable.ToString(System.String,System.IFormatProvider)
    name: ToString
    nameWithType: IFormattable.ToString
    fullName: System.IFormattable.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.IFormatProvider
    name: IFormatProvider
    nameWithType: IFormatProvider
    fullName: System.IFormatProvider
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IFormattable.ToString(System.String,System.IFormatProvider)
    name: ToString
    nameWithType: IFormattable.ToString
    fullName: System.IFormattable.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.IFormatProvider
    name: IFormatProvider
    nameWithType: IFormatProvider
    fullName: System.IFormatProvider
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: NodaTime.OffsetDateTime.op_Addition(NodaTime.OffsetDateTime,NodaTime.Duration)
  commentId: M:NodaTime.OffsetDateTime.op_Addition(NodaTime.OffsetDateTime,NodaTime.Duration)
  isExternal: true
- uid: NodaTime.OffsetDateTime.Add*
  commentId: Overload:NodaTime.OffsetDateTime.Add
  name: Add
  nameWithType: OffsetDateTime.Add
  fullName: NodaTime.OffsetDateTime.Add
- uid: NodaTime.Duration
  commentId: T:NodaTime.Duration
  parent: NodaTime
  name: Duration
  nameWithType: Duration
  fullName: NodaTime.Duration
- uid: NodaTime.OffsetDateTime.Plus*
  commentId: Overload:NodaTime.OffsetDateTime.Plus
  name: Plus
  nameWithType: OffsetDateTime.Plus
  fullName: NodaTime.OffsetDateTime.Plus
- uid: NodaTime.OffsetDateTime.PlusHours*
  commentId: Overload:NodaTime.OffsetDateTime.PlusHours
  name: PlusHours
  nameWithType: OffsetDateTime.PlusHours
  fullName: NodaTime.OffsetDateTime.PlusHours
- uid: NodaTime.OffsetDateTime.PlusMinutes*
  commentId: Overload:NodaTime.OffsetDateTime.PlusMinutes
  name: PlusMinutes
  nameWithType: OffsetDateTime.PlusMinutes
  fullName: NodaTime.OffsetDateTime.PlusMinutes
- uid: NodaTime.OffsetDateTime.PlusSeconds*
  commentId: Overload:NodaTime.OffsetDateTime.PlusSeconds
  name: PlusSeconds
  nameWithType: OffsetDateTime.PlusSeconds
  fullName: NodaTime.OffsetDateTime.PlusSeconds
- uid: NodaTime.OffsetDateTime.PlusMilliseconds*
  commentId: Overload:NodaTime.OffsetDateTime.PlusMilliseconds
  name: PlusMilliseconds
  nameWithType: OffsetDateTime.PlusMilliseconds
  fullName: NodaTime.OffsetDateTime.PlusMilliseconds
- uid: NodaTime.OffsetDateTime.PlusTicks*
  commentId: Overload:NodaTime.OffsetDateTime.PlusTicks
  name: PlusTicks
  nameWithType: OffsetDateTime.PlusTicks
  fullName: NodaTime.OffsetDateTime.PlusTicks
- uid: NodaTime.OffsetDateTime.PlusNanoseconds*
  commentId: Overload:NodaTime.OffsetDateTime.PlusNanoseconds
  name: PlusNanoseconds
  nameWithType: OffsetDateTime.PlusNanoseconds
  fullName: NodaTime.OffsetDateTime.PlusNanoseconds
- uid: NodaTime.OffsetDateTime.op_Addition*
  commentId: Overload:NodaTime.OffsetDateTime.op_Addition
  name: Addition
  nameWithType: OffsetDateTime.Addition
  fullName: NodaTime.OffsetDateTime.Addition
- uid: NodaTime.OffsetDateTime.op_Subtraction(NodaTime.OffsetDateTime,NodaTime.Duration)
  commentId: M:NodaTime.OffsetDateTime.op_Subtraction(NodaTime.OffsetDateTime,NodaTime.Duration)
  isExternal: true
- uid: NodaTime.OffsetDateTime.Subtract*
  commentId: Overload:NodaTime.OffsetDateTime.Subtract
  name: Subtract
  nameWithType: OffsetDateTime.Subtract
  fullName: NodaTime.OffsetDateTime.Subtract
- uid: NodaTime.OffsetDateTime.Minus*
  commentId: Overload:NodaTime.OffsetDateTime.Minus
  name: Minus
  nameWithType: OffsetDateTime.Minus
  fullName: NodaTime.OffsetDateTime.Minus
- uid: NodaTime.OffsetDateTime.op_Subtraction*
  commentId: Overload:NodaTime.OffsetDateTime.op_Subtraction
  name: Subtraction
  nameWithType: OffsetDateTime.Subtraction
  fullName: NodaTime.OffsetDateTime.Subtraction
- uid: NodaTime.OffsetDateTime.op_Subtraction(NodaTime.OffsetDateTime,NodaTime.OffsetDateTime)
  commentId: M:NodaTime.OffsetDateTime.op_Subtraction(NodaTime.OffsetDateTime,NodaTime.OffsetDateTime)
  isExternal: true
- uid: NodaTime.OffsetDateTime.op_Equality*
  commentId: Overload:NodaTime.OffsetDateTime.op_Equality
  name: Equality
  nameWithType: OffsetDateTime.Equality
  fullName: NodaTime.OffsetDateTime.Equality
- uid: NodaTime.OffsetDateTime.op_Inequality*
  commentId: Overload:NodaTime.OffsetDateTime.op_Inequality
  name: Inequality
  nameWithType: OffsetDateTime.Inequality
  fullName: NodaTime.OffsetDateTime.Inequality
- uid: NodaTime.OffsetDateTime.System#Xml#Serialization#IXmlSerializable#GetSchema*
  commentId: Overload:NodaTime.OffsetDateTime.System#Xml#Serialization#IXmlSerializable#GetSchema
  name: IXmlSerializable.GetSchema
  nameWithType: OffsetDateTime.IXmlSerializable.GetSchema
  fullName: NodaTime.OffsetDateTime.System.Xml.Serialization.IXmlSerializable.GetSchema
  nameWithType.vb: OffsetDateTime.System.Xml.Serialization.IXmlSerializable.GetSchema
  name.vb: System.Xml.Serialization.IXmlSerializable.GetSchema
- uid: System.Xml.Serialization.IXmlSerializable.GetSchema
  commentId: M:System.Xml.Serialization.IXmlSerializable.GetSchema
  parent: System.Xml.Serialization.IXmlSerializable
  isExternal: true
  name: GetSchema()
  nameWithType: IXmlSerializable.GetSchema()
  fullName: System.Xml.Serialization.IXmlSerializable.GetSchema()
  spec.csharp:
  - uid: System.Xml.Serialization.IXmlSerializable.GetSchema
    name: GetSchema
    nameWithType: IXmlSerializable.GetSchema
    fullName: System.Xml.Serialization.IXmlSerializable.GetSchema
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Xml.Serialization.IXmlSerializable.GetSchema
    name: GetSchema
    nameWithType: IXmlSerializable.GetSchema
    fullName: System.Xml.Serialization.IXmlSerializable.GetSchema
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Xml.Schema.XmlSchema
  commentId: T:System.Xml.Schema.XmlSchema
  parent: System.Xml.Schema
  isExternal: true
  name: XmlSchema
  nameWithType: XmlSchema
  fullName: System.Xml.Schema.XmlSchema
- uid: System.Xml.Schema
  commentId: N:System.Xml.Schema
  isExternal: true
  name: System.Xml.Schema
  nameWithType: System.Xml.Schema
  fullName: System.Xml.Schema
- uid: NodaTime.OffsetDateTime.System#Xml#Serialization#IXmlSerializable#ReadXml*
  commentId: Overload:NodaTime.OffsetDateTime.System#Xml#Serialization#IXmlSerializable#ReadXml
  name: IXmlSerializable.ReadXml
  nameWithType: OffsetDateTime.IXmlSerializable.ReadXml
  fullName: NodaTime.OffsetDateTime.System.Xml.Serialization.IXmlSerializable.ReadXml
  nameWithType.vb: OffsetDateTime.System.Xml.Serialization.IXmlSerializable.ReadXml
  name.vb: System.Xml.Serialization.IXmlSerializable.ReadXml
- uid: System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)
  commentId: M:System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)
  parent: System.Xml.Serialization.IXmlSerializable
  isExternal: true
  name: ReadXml(XmlReader)
  nameWithType: IXmlSerializable.ReadXml(XmlReader)
  fullName: System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)
  spec.csharp:
  - uid: System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)
    name: ReadXml
    nameWithType: IXmlSerializable.ReadXml
    fullName: System.Xml.Serialization.IXmlSerializable.ReadXml
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Xml.XmlReader
    name: XmlReader
    nameWithType: XmlReader
    fullName: System.Xml.XmlReader
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)
    name: ReadXml
    nameWithType: IXmlSerializable.ReadXml
    fullName: System.Xml.Serialization.IXmlSerializable.ReadXml
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Xml.XmlReader
    name: XmlReader
    nameWithType: XmlReader
    fullName: System.Xml.XmlReader
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Xml.XmlReader
  commentId: T:System.Xml.XmlReader
  parent: System.Xml
  isExternal: true
  name: XmlReader
  nameWithType: XmlReader
  fullName: System.Xml.XmlReader
- uid: System.Xml
  commentId: N:System.Xml
  isExternal: true
  name: System.Xml
  nameWithType: System.Xml
  fullName: System.Xml
- uid: NodaTime.OffsetDateTime.System#Xml#Serialization#IXmlSerializable#WriteXml*
  commentId: Overload:NodaTime.OffsetDateTime.System#Xml#Serialization#IXmlSerializable#WriteXml
  name: IXmlSerializable.WriteXml
  nameWithType: OffsetDateTime.IXmlSerializable.WriteXml
  fullName: NodaTime.OffsetDateTime.System.Xml.Serialization.IXmlSerializable.WriteXml
  nameWithType.vb: OffsetDateTime.System.Xml.Serialization.IXmlSerializable.WriteXml
  name.vb: System.Xml.Serialization.IXmlSerializable.WriteXml
- uid: System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)
  commentId: M:System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)
  parent: System.Xml.Serialization.IXmlSerializable
  isExternal: true
  name: WriteXml(XmlWriter)
  nameWithType: IXmlSerializable.WriteXml(XmlWriter)
  fullName: System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)
  spec.csharp:
  - uid: System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)
    name: WriteXml
    nameWithType: IXmlSerializable.WriteXml
    fullName: System.Xml.Serialization.IXmlSerializable.WriteXml
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Xml.XmlWriter
    name: XmlWriter
    nameWithType: XmlWriter
    fullName: System.Xml.XmlWriter
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)
    name: WriteXml
    nameWithType: IXmlSerializable.WriteXml
    fullName: System.Xml.Serialization.IXmlSerializable.WriteXml
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Xml.XmlWriter
    name: XmlWriter
    nameWithType: XmlWriter
    fullName: System.Xml.XmlWriter
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Xml.XmlWriter
  commentId: T:System.Xml.XmlWriter
  parent: System.Xml
  isExternal: true
  name: XmlWriter
  nameWithType: XmlWriter
  fullName: System.Xml.XmlWriter
- uid: System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  commentId: M:System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  parent: System.Runtime.Serialization.ISerializable
  isExternal: true
  name: GetObjectData(SerializationInfo, StreamingContext)
  nameWithType: ISerializable.GetObjectData(SerializationInfo, StreamingContext)
  fullName: System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext)
  spec.csharp:
  - uid: System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
    name: GetObjectData
    nameWithType: ISerializable.GetObjectData
    fullName: System.Runtime.Serialization.ISerializable.GetObjectData
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Runtime.Serialization.SerializationInfo
    name: SerializationInfo
    nameWithType: SerializationInfo
    fullName: System.Runtime.Serialization.SerializationInfo
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Runtime.Serialization.StreamingContext
    name: StreamingContext
    nameWithType: StreamingContext
    fullName: System.Runtime.Serialization.StreamingContext
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
    name: GetObjectData
    nameWithType: ISerializable.GetObjectData
    fullName: System.Runtime.Serialization.ISerializable.GetObjectData
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Runtime.Serialization.SerializationInfo
    name: SerializationInfo
    nameWithType: SerializationInfo
    fullName: System.Runtime.Serialization.SerializationInfo
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Runtime.Serialization.StreamingContext
    name: StreamingContext
    nameWithType: StreamingContext
    fullName: System.Runtime.Serialization.StreamingContext
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Runtime.Serialization.SerializationInfo
  commentId: T:System.Runtime.Serialization.SerializationInfo
  parent: System.Runtime.Serialization
  isExternal: true
  name: SerializationInfo
  nameWithType: SerializationInfo
  fullName: System.Runtime.Serialization.SerializationInfo
- uid: NodaTime.OffsetDateTime.System#Runtime#Serialization#ISerializable#GetObjectData*
  commentId: Overload:NodaTime.OffsetDateTime.System#Runtime#Serialization#ISerializable#GetObjectData
  name: ISerializable.GetObjectData
  nameWithType: OffsetDateTime.ISerializable.GetObjectData
  fullName: NodaTime.OffsetDateTime.System.Runtime.Serialization.ISerializable.GetObjectData
  nameWithType.vb: OffsetDateTime.System.Runtime.Serialization.ISerializable.GetObjectData
  name.vb: System.Runtime.Serialization.ISerializable.GetObjectData
- uid: System.Runtime.Serialization.StreamingContext
  commentId: T:System.Runtime.Serialization.StreamingContext
  parent: System.Runtime.Serialization
  isExternal: true
  name: StreamingContext
  nameWithType: StreamingContext
  fullName: System.Runtime.Serialization.StreamingContext
shouldSkipMarkup: true
