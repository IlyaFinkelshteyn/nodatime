### YamlMime:ManagedReference
items:
- uid: NodaTime.Serialization.JsonNet.DelegatingConverterBase
  commentId: T:NodaTime.Serialization.JsonNet.DelegatingConverterBase
  id: DelegatingConverterBase
  parent: NodaTime.Serialization.JsonNet
  children:
  - NodaTime.Serialization.JsonNet.DelegatingConverterBase.#ctor(Newtonsoft.Json.JsonConverter)
  - NodaTime.Serialization.JsonNet.DelegatingConverterBase.CanConvert(System.Type)
  - NodaTime.Serialization.JsonNet.DelegatingConverterBase.CanRead
  - NodaTime.Serialization.JsonNet.DelegatingConverterBase.CanWrite
  - NodaTime.Serialization.JsonNet.DelegatingConverterBase.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)
  - NodaTime.Serialization.JsonNet.DelegatingConverterBase.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)
  langs:
  - csharp
  - vb
  name: DelegatingConverterBase
  nameWithType: DelegatingConverterBase
  fullName: NodaTime.Serialization.JsonNet.DelegatingConverterBase
  type: Class
  source:
    remote:
      path: 2.1.x/src/NodaTime.Serialization.JsonNet/DelegatingConverterBase.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: DelegatingConverterBase
    path: src/NodaTime.Serialization.JsonNet/DelegatingConverterBase.cs
    startLine: 30
  assemblies:
  - NodaTime.Serialization.JsonNet
  namespace: NodaTime.Serialization.JsonNet
  summary: "\nConverter which does nothing but delegate to another one for all operations.\n"
  remarks: "\nNothing in this class is specific to Noda Time. Its purpose is to make it easy\nto reuse other converter instances with <xref href=\"Newtonsoft.Json.JsonConverterAttribute\" data-throw-if-not-resolved=\"false\"></xref>,\nwhich can only identify a converter by type.\n"
  example:
  - "\n<p>\nIf you had some <xref href=\"NodaTime.LocalDate\" data-throw-if-not-resolved=\"false\"></xref> properties which needed one converter,\nbut others that needed another, you might want to have different types implementing\nthose converters. Each type would just derive from this, passing the right converter\ninto the base constructor.\n</p>\n<pre><code>public sealed class ShortDateConverter : DelegatingConverterBase\n{\n    public ShortDateConverter() : base(NodaConverters.LocalDateConverter) {}\n}</code></pre>\n"
  syntax:
    content: 'public abstract class DelegatingConverterBase : JsonConverter'
    content.vb: >-
      Public MustInherit Class DelegatingConverterBase
          Inherits JsonConverter
  inheritance:
  - System.Object
  - Newtonsoft.Json.JsonConverter
  inheritedMembers:
  - Newtonsoft.Json.JsonConverter.GetSchema
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - abstract
  - class
  modifiers.vb:
  - Public
  - MustInherit
  - Class
- uid: NodaTime.Serialization.JsonNet.DelegatingConverterBase.#ctor(Newtonsoft.Json.JsonConverter)
  commentId: M:NodaTime.Serialization.JsonNet.DelegatingConverterBase.#ctor(Newtonsoft.Json.JsonConverter)
  id: '#ctor(Newtonsoft.Json.JsonConverter)'
  parent: NodaTime.Serialization.JsonNet.DelegatingConverterBase
  langs:
  - csharp
  - vb
  name: DelegatingConverterBase(JsonConverter)
  nameWithType: DelegatingConverterBase.DelegatingConverterBase(JsonConverter)
  fullName: NodaTime.Serialization.JsonNet.DelegatingConverterBase.DelegatingConverterBase(Newtonsoft.Json.JsonConverter)
  type: Constructor
  source:
    remote:
      path: 2.1.x/src/NodaTime.Serialization.JsonNet/DelegatingConverterBase.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: .ctor
    path: src/NodaTime.Serialization.JsonNet/DelegatingConverterBase.cs
    startLine: 38
  assemblies:
  - NodaTime.Serialization.JsonNet
  namespace: NodaTime.Serialization.JsonNet
  summary: "\nConstructs a converter delegating to <code data-dev-comment-type=\"paramref\" class=\"paramref\">original</code>.\n"
  example: []
  syntax:
    content: protected DelegatingConverterBase(JsonConverter original)
    parameters:
    - id: original
      type: Newtonsoft.Json.JsonConverter
      description: The converter to delegate to. Must not be null.
    content.vb: Protected Sub New(original As JsonConverter)
  overload: NodaTime.Serialization.JsonNet.DelegatingConverterBase.#ctor*
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: NodaTime.Serialization.JsonNet.DelegatingConverterBase.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)
  commentId: M:NodaTime.Serialization.JsonNet.DelegatingConverterBase.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)
  id: WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)
  parent: NodaTime.Serialization.JsonNet.DelegatingConverterBase
  langs:
  - csharp
  - vb
  name: WriteJson(JsonWriter, Object, JsonSerializer)
  nameWithType: DelegatingConverterBase.WriteJson(JsonWriter, Object, JsonSerializer)
  fullName: NodaTime.Serialization.JsonNet.DelegatingConverterBase.WriteJson(Newtonsoft.Json.JsonWriter, System.Object, Newtonsoft.Json.JsonSerializer)
  type: Method
  source:
    remote:
      path: 2.1.x/src/NodaTime.Serialization.JsonNet/DelegatingConverterBase.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: WriteJson
    path: src/NodaTime.Serialization.JsonNet/DelegatingConverterBase.cs
    startLine: 48
  assemblies:
  - NodaTime.Serialization.JsonNet
  namespace: NodaTime.Serialization.JsonNet
  example: []
  syntax:
    content: public override void WriteJson(JsonWriter writer, object value, JsonSerializer serializer)
    parameters:
    - id: writer
      type: Newtonsoft.Json.JsonWriter
    - id: value
      type: System.Object
    - id: serializer
      type: Newtonsoft.Json.JsonSerializer
    content.vb: Public Overrides Sub WriteJson(writer As JsonWriter, value As Object, serializer As JsonSerializer)
  overridden: Newtonsoft.Json.JsonConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)
  overload: NodaTime.Serialization.JsonNet.DelegatingConverterBase.WriteJson*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: NodaTime.Serialization.JsonNet.DelegatingConverterBase.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)
  commentId: M:NodaTime.Serialization.JsonNet.DelegatingConverterBase.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)
  id: ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)
  parent: NodaTime.Serialization.JsonNet.DelegatingConverterBase
  langs:
  - csharp
  - vb
  name: ReadJson(JsonReader, Type, Object, JsonSerializer)
  nameWithType: DelegatingConverterBase.ReadJson(JsonReader, Type, Object, JsonSerializer)
  fullName: NodaTime.Serialization.JsonNet.DelegatingConverterBase.ReadJson(Newtonsoft.Json.JsonReader, System.Type, System.Object, Newtonsoft.Json.JsonSerializer)
  type: Method
  source:
    remote:
      path: 2.1.x/src/NodaTime.Serialization.JsonNet/DelegatingConverterBase.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: ReadJson
    path: src/NodaTime.Serialization.JsonNet/DelegatingConverterBase.cs
    startLine: 53
  assemblies:
  - NodaTime.Serialization.JsonNet
  namespace: NodaTime.Serialization.JsonNet
  example: []
  syntax:
    content: public override object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer)
    parameters:
    - id: reader
      type: Newtonsoft.Json.JsonReader
    - id: objectType
      type: System.Type
    - id: existingValue
      type: System.Object
    - id: serializer
      type: Newtonsoft.Json.JsonSerializer
    return:
      type: System.Object
    content.vb: Public Overrides Function ReadJson(reader As JsonReader, objectType As Type, existingValue As Object, serializer As JsonSerializer) As Object
  overridden: Newtonsoft.Json.JsonConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)
  overload: NodaTime.Serialization.JsonNet.DelegatingConverterBase.ReadJson*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: NodaTime.Serialization.JsonNet.DelegatingConverterBase.CanRead
  commentId: P:NodaTime.Serialization.JsonNet.DelegatingConverterBase.CanRead
  id: CanRead
  parent: NodaTime.Serialization.JsonNet.DelegatingConverterBase
  langs:
  - csharp
  - vb
  name: CanRead
  nameWithType: DelegatingConverterBase.CanRead
  fullName: NodaTime.Serialization.JsonNet.DelegatingConverterBase.CanRead
  type: Property
  source:
    remote:
      path: 2.1.x/src/NodaTime.Serialization.JsonNet/DelegatingConverterBase.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: CanRead
    path: src/NodaTime.Serialization.JsonNet/DelegatingConverterBase.cs
    startLine: 58
  assemblies:
  - NodaTime.Serialization.JsonNet
  namespace: NodaTime.Serialization.JsonNet
  example: []
  syntax:
    content: public override bool CanRead { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public Overrides ReadOnly Property CanRead As Boolean
  overridden: Newtonsoft.Json.JsonConverter.CanRead
  overload: NodaTime.Serialization.JsonNet.DelegatingConverterBase.CanRead*
  modifiers.csharp:
  - public
  - override
  - get
  modifiers.vb:
  - Public
  - Overrides
  - ReadOnly
- uid: NodaTime.Serialization.JsonNet.DelegatingConverterBase.CanWrite
  commentId: P:NodaTime.Serialization.JsonNet.DelegatingConverterBase.CanWrite
  id: CanWrite
  parent: NodaTime.Serialization.JsonNet.DelegatingConverterBase
  langs:
  - csharp
  - vb
  name: CanWrite
  nameWithType: DelegatingConverterBase.CanWrite
  fullName: NodaTime.Serialization.JsonNet.DelegatingConverterBase.CanWrite
  type: Property
  source:
    remote:
      path: 2.1.x/src/NodaTime.Serialization.JsonNet/DelegatingConverterBase.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: CanWrite
    path: src/NodaTime.Serialization.JsonNet/DelegatingConverterBase.cs
    startLine: 61
  assemblies:
  - NodaTime.Serialization.JsonNet
  namespace: NodaTime.Serialization.JsonNet
  example: []
  syntax:
    content: public override bool CanWrite { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public Overrides ReadOnly Property CanWrite As Boolean
  overridden: Newtonsoft.Json.JsonConverter.CanWrite
  overload: NodaTime.Serialization.JsonNet.DelegatingConverterBase.CanWrite*
  modifiers.csharp:
  - public
  - override
  - get
  modifiers.vb:
  - Public
  - Overrides
  - ReadOnly
- uid: NodaTime.Serialization.JsonNet.DelegatingConverterBase.CanConvert(System.Type)
  commentId: M:NodaTime.Serialization.JsonNet.DelegatingConverterBase.CanConvert(System.Type)
  id: CanConvert(System.Type)
  parent: NodaTime.Serialization.JsonNet.DelegatingConverterBase
  langs:
  - csharp
  - vb
  name: CanConvert(Type)
  nameWithType: DelegatingConverterBase.CanConvert(Type)
  fullName: NodaTime.Serialization.JsonNet.DelegatingConverterBase.CanConvert(System.Type)
  type: Method
  source:
    remote:
      path: 2.1.x/src/NodaTime.Serialization.JsonNet/DelegatingConverterBase.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: CanConvert
    path: src/NodaTime.Serialization.JsonNet/DelegatingConverterBase.cs
    startLine: 64
  assemblies:
  - NodaTime.Serialization.JsonNet
  namespace: NodaTime.Serialization.JsonNet
  example: []
  syntax:
    content: public override bool CanConvert(Type objectType)
    parameters:
    - id: objectType
      type: System.Type
    return:
      type: System.Boolean
    content.vb: Public Overrides Function CanConvert(objectType As Type) As Boolean
  overridden: Newtonsoft.Json.JsonConverter.CanConvert(System.Type)
  overload: NodaTime.Serialization.JsonNet.DelegatingConverterBase.CanConvert*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
references:
- uid: Newtonsoft.Json.JsonConverterAttribute
  commentId: T:Newtonsoft.Json.JsonConverterAttribute
  isExternal: true
- uid: NodaTime.LocalDate
  commentId: T:NodaTime.LocalDate
  parent: NodaTime
  name: LocalDate
  nameWithType: LocalDate
  fullName: NodaTime.LocalDate
- uid: NodaTime.Serialization.JsonNet
  commentId: N:NodaTime.Serialization.JsonNet
  name: NodaTime.Serialization.JsonNet
  nameWithType: NodaTime.Serialization.JsonNet
  fullName: NodaTime.Serialization.JsonNet
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Newtonsoft.Json.JsonConverter
  commentId: T:Newtonsoft.Json.JsonConverter
  parent: Newtonsoft.Json
  isExternal: true
  name: JsonConverter
  nameWithType: JsonConverter
  fullName: Newtonsoft.Json.JsonConverter
- uid: Newtonsoft.Json.JsonConverter.GetSchema
  commentId: M:Newtonsoft.Json.JsonConverter.GetSchema
  parent: Newtonsoft.Json.JsonConverter
  isExternal: true
  name: GetSchema()
  nameWithType: JsonConverter.GetSchema()
  fullName: Newtonsoft.Json.JsonConverter.GetSchema()
  spec.csharp:
  - uid: Newtonsoft.Json.JsonConverter.GetSchema
    name: GetSchema
    nameWithType: JsonConverter.GetSchema
    fullName: Newtonsoft.Json.JsonConverter.GetSchema
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Newtonsoft.Json.JsonConverter.GetSchema
    name: GetSchema
    nameWithType: JsonConverter.GetSchema
    fullName: Newtonsoft.Json.JsonConverter.GetSchema
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: NodaTime
  commentId: N:NodaTime
  name: NodaTime
  nameWithType: NodaTime
  fullName: NodaTime
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Newtonsoft.Json
  commentId: N:Newtonsoft.Json
  isExternal: true
  name: Newtonsoft.Json
  nameWithType: Newtonsoft.Json
  fullName: Newtonsoft.Json
- uid: NodaTime.Serialization.JsonNet.DelegatingConverterBase.#ctor*
  commentId: Overload:NodaTime.Serialization.JsonNet.DelegatingConverterBase.#ctor
  name: DelegatingConverterBase
  nameWithType: DelegatingConverterBase.DelegatingConverterBase
  fullName: NodaTime.Serialization.JsonNet.DelegatingConverterBase.DelegatingConverterBase
- uid: Newtonsoft.Json.JsonConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)
  commentId: M:Newtonsoft.Json.JsonConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)
  parent: Newtonsoft.Json.JsonConverter
  isExternal: true
  name: WriteJson(JsonWriter, Object, JsonSerializer)
  nameWithType: JsonConverter.WriteJson(JsonWriter, Object, JsonSerializer)
  fullName: Newtonsoft.Json.JsonConverter.WriteJson(Newtonsoft.Json.JsonWriter, System.Object, Newtonsoft.Json.JsonSerializer)
  spec.csharp:
  - uid: Newtonsoft.Json.JsonConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)
    name: WriteJson
    nameWithType: JsonConverter.WriteJson
    fullName: Newtonsoft.Json.JsonConverter.WriteJson
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Newtonsoft.Json.JsonWriter
    name: JsonWriter
    nameWithType: JsonWriter
    fullName: Newtonsoft.Json.JsonWriter
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Newtonsoft.Json.JsonSerializer
    name: JsonSerializer
    nameWithType: JsonSerializer
    fullName: Newtonsoft.Json.JsonSerializer
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Newtonsoft.Json.JsonConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)
    name: WriteJson
    nameWithType: JsonConverter.WriteJson
    fullName: Newtonsoft.Json.JsonConverter.WriteJson
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Newtonsoft.Json.JsonWriter
    name: JsonWriter
    nameWithType: JsonWriter
    fullName: Newtonsoft.Json.JsonWriter
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Newtonsoft.Json.JsonSerializer
    name: JsonSerializer
    nameWithType: JsonSerializer
    fullName: Newtonsoft.Json.JsonSerializer
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: NodaTime.Serialization.JsonNet.DelegatingConverterBase.WriteJson*
  commentId: Overload:NodaTime.Serialization.JsonNet.DelegatingConverterBase.WriteJson
  name: WriteJson
  nameWithType: DelegatingConverterBase.WriteJson
  fullName: NodaTime.Serialization.JsonNet.DelegatingConverterBase.WriteJson
- uid: Newtonsoft.Json.JsonWriter
  commentId: T:Newtonsoft.Json.JsonWriter
  parent: Newtonsoft.Json
  isExternal: true
  name: JsonWriter
  nameWithType: JsonWriter
  fullName: Newtonsoft.Json.JsonWriter
- uid: Newtonsoft.Json.JsonSerializer
  commentId: T:Newtonsoft.Json.JsonSerializer
  parent: Newtonsoft.Json
  isExternal: true
  name: JsonSerializer
  nameWithType: JsonSerializer
  fullName: Newtonsoft.Json.JsonSerializer
- uid: Newtonsoft.Json.JsonConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)
  commentId: M:Newtonsoft.Json.JsonConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)
  parent: Newtonsoft.Json.JsonConverter
  isExternal: true
  name: ReadJson(JsonReader, Type, Object, JsonSerializer)
  nameWithType: JsonConverter.ReadJson(JsonReader, Type, Object, JsonSerializer)
  fullName: Newtonsoft.Json.JsonConverter.ReadJson(Newtonsoft.Json.JsonReader, System.Type, System.Object, Newtonsoft.Json.JsonSerializer)
  spec.csharp:
  - uid: Newtonsoft.Json.JsonConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)
    name: ReadJson
    nameWithType: JsonConverter.ReadJson
    fullName: Newtonsoft.Json.JsonConverter.ReadJson
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Newtonsoft.Json.JsonReader
    name: JsonReader
    nameWithType: JsonReader
    fullName: Newtonsoft.Json.JsonReader
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Newtonsoft.Json.JsonSerializer
    name: JsonSerializer
    nameWithType: JsonSerializer
    fullName: Newtonsoft.Json.JsonSerializer
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Newtonsoft.Json.JsonConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)
    name: ReadJson
    nameWithType: JsonConverter.ReadJson
    fullName: Newtonsoft.Json.JsonConverter.ReadJson
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Newtonsoft.Json.JsonReader
    name: JsonReader
    nameWithType: JsonReader
    fullName: Newtonsoft.Json.JsonReader
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Newtonsoft.Json.JsonSerializer
    name: JsonSerializer
    nameWithType: JsonSerializer
    fullName: Newtonsoft.Json.JsonSerializer
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: NodaTime.Serialization.JsonNet.DelegatingConverterBase.ReadJson*
  commentId: Overload:NodaTime.Serialization.JsonNet.DelegatingConverterBase.ReadJson
  name: ReadJson
  nameWithType: DelegatingConverterBase.ReadJson
  fullName: NodaTime.Serialization.JsonNet.DelegatingConverterBase.ReadJson
- uid: Newtonsoft.Json.JsonReader
  commentId: T:Newtonsoft.Json.JsonReader
  parent: Newtonsoft.Json
  isExternal: true
  name: JsonReader
  nameWithType: JsonReader
  fullName: Newtonsoft.Json.JsonReader
- uid: System.Type
  commentId: T:System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: Newtonsoft.Json.JsonConverter.CanRead
  commentId: P:Newtonsoft.Json.JsonConverter.CanRead
  parent: Newtonsoft.Json.JsonConverter
  isExternal: true
  name: CanRead
  nameWithType: JsonConverter.CanRead
  fullName: Newtonsoft.Json.JsonConverter.CanRead
- uid: NodaTime.Serialization.JsonNet.DelegatingConverterBase.CanRead*
  commentId: Overload:NodaTime.Serialization.JsonNet.DelegatingConverterBase.CanRead
  name: CanRead
  nameWithType: DelegatingConverterBase.CanRead
  fullName: NodaTime.Serialization.JsonNet.DelegatingConverterBase.CanRead
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: Newtonsoft.Json.JsonConverter.CanWrite
  commentId: P:Newtonsoft.Json.JsonConverter.CanWrite
  parent: Newtonsoft.Json.JsonConverter
  isExternal: true
  name: CanWrite
  nameWithType: JsonConverter.CanWrite
  fullName: Newtonsoft.Json.JsonConverter.CanWrite
- uid: NodaTime.Serialization.JsonNet.DelegatingConverterBase.CanWrite*
  commentId: Overload:NodaTime.Serialization.JsonNet.DelegatingConverterBase.CanWrite
  name: CanWrite
  nameWithType: DelegatingConverterBase.CanWrite
  fullName: NodaTime.Serialization.JsonNet.DelegatingConverterBase.CanWrite
- uid: Newtonsoft.Json.JsonConverter.CanConvert(System.Type)
  commentId: M:Newtonsoft.Json.JsonConverter.CanConvert(System.Type)
  parent: Newtonsoft.Json.JsonConverter
  isExternal: true
  name: CanConvert(Type)
  nameWithType: JsonConverter.CanConvert(Type)
  fullName: Newtonsoft.Json.JsonConverter.CanConvert(System.Type)
  spec.csharp:
  - uid: Newtonsoft.Json.JsonConverter.CanConvert(System.Type)
    name: CanConvert
    nameWithType: JsonConverter.CanConvert
    fullName: Newtonsoft.Json.JsonConverter.CanConvert
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Newtonsoft.Json.JsonConverter.CanConvert(System.Type)
    name: CanConvert
    nameWithType: JsonConverter.CanConvert
    fullName: Newtonsoft.Json.JsonConverter.CanConvert
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: NodaTime.Serialization.JsonNet.DelegatingConverterBase.CanConvert*
  commentId: Overload:NodaTime.Serialization.JsonNet.DelegatingConverterBase.CanConvert
  name: CanConvert
  nameWithType: DelegatingConverterBase.CanConvert
  fullName: NodaTime.Serialization.JsonNet.DelegatingConverterBase.CanConvert
shouldSkipMarkup: true
