### YamlMime:ManagedReference
items:
- uid: NodaTime.Calendars.WeekYearRuleExtensions
  commentId: T:NodaTime.Calendars.WeekYearRuleExtensions
  id: WeekYearRuleExtensions
  parent: NodaTime.Calendars
  children:
  - NodaTime.Calendars.WeekYearRuleExtensions.GetLocalDate(NodaTime.Calendars.IWeekYearRule,System.Int32,System.Int32,NodaTime.IsoDayOfWeek)
  - NodaTime.Calendars.WeekYearRuleExtensions.GetWeeksInWeekYear(NodaTime.Calendars.IWeekYearRule,System.Int32)
  langs:
  - csharp
  - vb
  name: WeekYearRuleExtensions
  nameWithType: WeekYearRuleExtensions
  fullName: NodaTime.Calendars.WeekYearRuleExtensions
  type: Class
  source:
    remote:
      path: 2.3.x/src/NodaTime/Calendars/IWeekYearRule.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: WeekYearRuleExtensions
    path: src/NodaTime/Calendars/IWeekYearRule.cs
    startLine: 110
  assemblies:
  - NodaTime
  namespace: NodaTime.Calendars
  summary: "\nExtension methods on <xref href=\"NodaTime.Calendars.IWeekYearRule\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public static class WeekYearRuleExtensions
    content.vb: Public Module WeekYearRuleExtensions
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
- uid: NodaTime.Calendars.WeekYearRuleExtensions.GetLocalDate(NodaTime.Calendars.IWeekYearRule,System.Int32,System.Int32,NodaTime.IsoDayOfWeek)
  commentId: M:NodaTime.Calendars.WeekYearRuleExtensions.GetLocalDate(NodaTime.Calendars.IWeekYearRule,System.Int32,System.Int32,NodaTime.IsoDayOfWeek)
  id: GetLocalDate(NodaTime.Calendars.IWeekYearRule,System.Int32,System.Int32,NodaTime.IsoDayOfWeek)
  isExtensionMethod: true
  parent: NodaTime.Calendars.WeekYearRuleExtensions
  langs:
  - csharp
  - vb
  name: GetLocalDate(IWeekYearRule, Int32, Int32, IsoDayOfWeek)
  nameWithType: WeekYearRuleExtensions.GetLocalDate(IWeekYearRule, Int32, Int32, IsoDayOfWeek)
  fullName: NodaTime.Calendars.WeekYearRuleExtensions.GetLocalDate(NodaTime.Calendars.IWeekYearRule, System.Int32, System.Int32, NodaTime.IsoDayOfWeek)
  type: Method
  source:
    remote:
      path: 2.3.x/src/NodaTime/Calendars/IWeekYearRule.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: GetLocalDate
    path: src/NodaTime/Calendars/IWeekYearRule.cs
    startLine: 127
  assemblies:
  - NodaTime
  namespace: NodaTime.Calendars
  summary: "\nConvenience method to call <xref href=\"NodaTime.Calendars.IWeekYearRule.GetLocalDate(System.Int32%2cSystem.Int32%2cNodaTime.IsoDayOfWeek%2cNodaTime.CalendarSystem)\" data-throw-if-not-resolved=\"false\"></xref>\npassing in the ISO calendar system.\n"
  example: []
  syntax:
    content: public static LocalDate GetLocalDate(this IWeekYearRule rule, int weekYear, int weekOfWeekYear, IsoDayOfWeek dayOfWeek)
    parameters:
    - id: rule
      type: NodaTime.Calendars.IWeekYearRule
      description: The rule to delegate the call to.
    - id: weekYear
      type: System.Int32
      description: >-
        The week-year of the new date. Implementations provided by Noda Time allow any

        year which is a valid calendar year, and sometimes one less than the minimum calendar year

        and/or one more than the maximum calendar year, to allow for dates near the start of a calendar

        year to fall in the previous week year, and similarly for dates near the end of a calendar year.
    - id: weekOfWeekYear
      type: System.Int32
      description: >-
        The week of week-year of the new date. Valid values for this parameter

        may vary depending on <code data-dev-comment-type="paramref" class="paramref">weekYear</code>, as the length of a year in weeks varies.
    - id: dayOfWeek
      type: NodaTime.IsoDayOfWeek
      description: >-
        The day-of-week of the new date. Valid values for this parameter may vary

        depending on <code data-dev-comment-type="paramref" class="paramref">weekYear</code> and <code data-dev-comment-type="paramref" class="paramref">weekOfWeekYear</code>.
    return:
      type: NodaTime.LocalDate
      description: A <xref href="NodaTime.LocalDate" data-throw-if-not-resolved="false"></xref> corresponding to the specified values.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GetLocalDate(rule As IWeekYearRule, weekYear As Integer, weekOfWeekYear As Integer, dayOfWeek As IsoDayOfWeek) As LocalDate
  overload: NodaTime.Calendars.WeekYearRuleExtensions.GetLocalDate*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: The parameters do not combine to form a valid date.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: NodaTime.Calendars.WeekYearRuleExtensions.GetWeeksInWeekYear(NodaTime.Calendars.IWeekYearRule,System.Int32)
  commentId: M:NodaTime.Calendars.WeekYearRuleExtensions.GetWeeksInWeekYear(NodaTime.Calendars.IWeekYearRule,System.Int32)
  id: GetWeeksInWeekYear(NodaTime.Calendars.IWeekYearRule,System.Int32)
  isExtensionMethod: true
  parent: NodaTime.Calendars.WeekYearRuleExtensions
  langs:
  - csharp
  - vb
  name: GetWeeksInWeekYear(IWeekYearRule, Int32)
  nameWithType: WeekYearRuleExtensions.GetWeeksInWeekYear(IWeekYearRule, Int32)
  fullName: NodaTime.Calendars.WeekYearRuleExtensions.GetWeeksInWeekYear(NodaTime.Calendars.IWeekYearRule, System.Int32)
  type: Method
  source:
    remote:
      path: 2.3.x/src/NodaTime/Calendars/IWeekYearRule.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: GetWeeksInWeekYear
    path: src/NodaTime/Calendars/IWeekYearRule.cs
    startLine: 137
  assemblies:
  - NodaTime
  namespace: NodaTime.Calendars
  summary: "\nConvenience overload to call <xref href=\"NodaTime.Calendars.IWeekYearRule.GetWeeksInWeekYear(System.Int32%2cNodaTime.CalendarSystem)\" data-throw-if-not-resolved=\"false\"></xref> with\nthe ISO calendar system.\n"
  example: []
  syntax:
    content: public static int GetWeeksInWeekYear(this IWeekYearRule rule, int weekYear)
    parameters:
    - id: rule
      type: NodaTime.Calendars.IWeekYearRule
      description: The rule to delegate the call to.
    - id: weekYear
      type: System.Int32
      description: The week year to calculate the number of contained weeks.
    return:
      type: System.Int32
      description: The number of weeks in the given week year.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GetWeeksInWeekYear(rule As IWeekYearRule, weekYear As Integer) As Integer
  overload: NodaTime.Calendars.WeekYearRuleExtensions.GetWeeksInWeekYear*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
references:
- uid: NodaTime.Calendars.IWeekYearRule
  commentId: T:NodaTime.Calendars.IWeekYearRule
  parent: NodaTime.Calendars
  name: IWeekYearRule
  nameWithType: IWeekYearRule
  fullName: NodaTime.Calendars.IWeekYearRule
- uid: NodaTime.Calendars
  commentId: N:NodaTime.Calendars
  name: NodaTime.Calendars
  nameWithType: NodaTime.Calendars
  fullName: NodaTime.Calendars
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: NodaTime.Calendars.IWeekYearRule.GetLocalDate(System.Int32,System.Int32,NodaTime.IsoDayOfWeek,NodaTime.CalendarSystem)
  commentId: M:NodaTime.Calendars.IWeekYearRule.GetLocalDate(System.Int32,System.Int32,NodaTime.IsoDayOfWeek,NodaTime.CalendarSystem)
  isExternal: true
- uid: NodaTime.LocalDate
  commentId: T:NodaTime.LocalDate
  parent: NodaTime
  name: LocalDate
  nameWithType: LocalDate
  fullName: NodaTime.LocalDate
- uid: System.ArgumentOutOfRangeException
  commentId: T:System.ArgumentOutOfRangeException
  parent: System
  isExternal: true
  name: ArgumentOutOfRangeException
  nameWithType: ArgumentOutOfRangeException
  fullName: System.ArgumentOutOfRangeException
- uid: NodaTime.Calendars.WeekYearRuleExtensions.GetLocalDate*
  commentId: Overload:NodaTime.Calendars.WeekYearRuleExtensions.GetLocalDate
  name: GetLocalDate
  nameWithType: WeekYearRuleExtensions.GetLocalDate
  fullName: NodaTime.Calendars.WeekYearRuleExtensions.GetLocalDate
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: NodaTime.IsoDayOfWeek
  commentId: T:NodaTime.IsoDayOfWeek
  parent: NodaTime
  name: IsoDayOfWeek
  nameWithType: IsoDayOfWeek
  fullName: NodaTime.IsoDayOfWeek
- uid: NodaTime
  commentId: N:NodaTime
  name: NodaTime
  nameWithType: NodaTime
  fullName: NodaTime
- uid: NodaTime.Calendars.IWeekYearRule.GetWeeksInWeekYear(System.Int32,NodaTime.CalendarSystem)
  commentId: M:NodaTime.Calendars.IWeekYearRule.GetWeeksInWeekYear(System.Int32,NodaTime.CalendarSystem)
  isExternal: true
- uid: NodaTime.Calendars.WeekYearRuleExtensions.GetWeeksInWeekYear*
  commentId: Overload:NodaTime.Calendars.WeekYearRuleExtensions.GetWeeksInWeekYear
  name: GetWeeksInWeekYear
  nameWithType: WeekYearRuleExtensions.GetWeeksInWeekYear
  fullName: NodaTime.Calendars.WeekYearRuleExtensions.GetWeeksInWeekYear
shouldSkipMarkup: true
