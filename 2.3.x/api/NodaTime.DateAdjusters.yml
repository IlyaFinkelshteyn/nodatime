### YamlMime:ManagedReference
items:
- uid: NodaTime.DateAdjusters
  commentId: T:NodaTime.DateAdjusters
  id: DateAdjusters
  parent: NodaTime
  children:
  - NodaTime.DateAdjusters.DayOfMonth(System.Int32)
  - NodaTime.DateAdjusters.EndOfMonth
  - NodaTime.DateAdjusters.Month(System.Int32)
  - NodaTime.DateAdjusters.Next(NodaTime.IsoDayOfWeek)
  - NodaTime.DateAdjusters.NextOrSame(NodaTime.IsoDayOfWeek)
  - NodaTime.DateAdjusters.Previous(NodaTime.IsoDayOfWeek)
  - NodaTime.DateAdjusters.PreviousOrSame(NodaTime.IsoDayOfWeek)
  - NodaTime.DateAdjusters.StartOfMonth
  langs:
  - csharp
  - vb
  name: DateAdjusters
  nameWithType: DateAdjusters
  fullName: NodaTime.DateAdjusters
  type: Class
  source:
    remote:
      path: 2.3.x/src/NodaTime/DateAdjusters.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: DateAdjusters
    path: src/NodaTime/DateAdjusters.cs
    startLine: 13
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nFactory class for date adjusters: functions from <xref href=\"NodaTime.LocalDate\" data-throw-if-not-resolved=\"false\"></xref> to <code>LocalDate</code>,\nwhich can be applied to <xref href=\"NodaTime.LocalDate\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"NodaTime.LocalDateTime\" data-throw-if-not-resolved=\"false\"></xref>, and <xref href=\"NodaTime.OffsetDateTime\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public static class DateAdjusters
    content.vb: Public Module DateAdjusters
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
- uid: NodaTime.DateAdjusters.StartOfMonth
  commentId: P:NodaTime.DateAdjusters.StartOfMonth
  id: StartOfMonth
  parent: NodaTime.DateAdjusters
  langs:
  - csharp
  - vb
  name: StartOfMonth
  nameWithType: DateAdjusters.StartOfMonth
  fullName: NodaTime.DateAdjusters.StartOfMonth
  type: Property
  source:
    remote:
      path: 2.3.x/src/NodaTime/DateAdjusters.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: StartOfMonth
    path: src/NodaTime/DateAdjusters.cs
    startLine: 21
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nA date adjuster to move to the first day of the current month.\n"
  example: []
  syntax:
    content: public static Func<LocalDate, LocalDate> StartOfMonth { get; }
    parameters: []
    return:
      type: System.Func{NodaTime.LocalDate,NodaTime.LocalDate}
      description: "\nA date adjuster to move to the first day of the current month.\n"
    content.vb: Public Shared ReadOnly Property StartOfMonth As Func(Of LocalDate, LocalDate)
  overload: NodaTime.DateAdjusters.StartOfMonth*
  modifiers.csharp:
  - public
  - static
  - get
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: NodaTime.DateAdjusters.EndOfMonth
  commentId: P:NodaTime.DateAdjusters.EndOfMonth
  id: EndOfMonth
  parent: NodaTime.DateAdjusters
  langs:
  - csharp
  - vb
  name: EndOfMonth
  nameWithType: DateAdjusters.EndOfMonth
  fullName: NodaTime.DateAdjusters.EndOfMonth
  type: Property
  source:
    remote:
      path: 2.3.x/src/NodaTime/DateAdjusters.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: EndOfMonth
    path: src/NodaTime/DateAdjusters.cs
    startLine: 30
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nA date adjuster to move to the last day of the current month.\n"
  example: []
  syntax:
    content: public static Func<LocalDate, LocalDate> EndOfMonth { get; }
    parameters: []
    return:
      type: System.Func{NodaTime.LocalDate,NodaTime.LocalDate}
      description: "\nA date adjuster to move to the last day of the current month.\n"
    content.vb: Public Shared ReadOnly Property EndOfMonth As Func(Of LocalDate, LocalDate)
  overload: NodaTime.DateAdjusters.EndOfMonth*
  modifiers.csharp:
  - public
  - static
  - get
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: NodaTime.DateAdjusters.DayOfMonth(System.Int32)
  commentId: M:NodaTime.DateAdjusters.DayOfMonth(System.Int32)
  id: DayOfMonth(System.Int32)
  parent: NodaTime.DateAdjusters
  langs:
  - csharp
  - vb
  name: DayOfMonth(Int32)
  nameWithType: DateAdjusters.DayOfMonth(Int32)
  fullName: NodaTime.DateAdjusters.DayOfMonth(System.Int32)
  type: Method
  source:
    remote:
      path: 2.3.x/src/NodaTime/DateAdjusters.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: DayOfMonth
    path: src/NodaTime/DateAdjusters.cs
    startLine: 43
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nA date adjuster to move to the specified day of the current month.\n"
  remarks: "\nThe returned adjuster will throw an exception if it is applied to a date\nthat would create an invalid result.\n"
  example: []
  syntax:
    content: public static Func<LocalDate, LocalDate> DayOfMonth(int day)
    parameters:
    - id: day
      type: System.Int32
      description: The day of month to adjust dates to.
    return:
      type: System.Func{NodaTime.LocalDate,NodaTime.LocalDate}
      description: >-
        An adjuster which changes the day to <code data-dev-comment-type="paramref" class="paramref">day</code>,

        retaining the same year and month.
    content.vb: Public Shared Function DayOfMonth(day As Integer) As Func(Of LocalDate, LocalDate)
  overload: NodaTime.DateAdjusters.DayOfMonth*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: NodaTime.DateAdjusters.Month(System.Int32)
  commentId: M:NodaTime.DateAdjusters.Month(System.Int32)
  id: Month(System.Int32)
  parent: NodaTime.DateAdjusters
  langs:
  - csharp
  - vb
  name: Month(Int32)
  nameWithType: DateAdjusters.Month(Int32)
  fullName: NodaTime.DateAdjusters.Month(System.Int32)
  type: Method
  source:
    remote:
      path: 2.3.x/src/NodaTime/DateAdjusters.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: Month
    path: src/NodaTime/DateAdjusters.cs
    startLine: 56
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nA date adjuster to move to the same day of the specified month.\n"
  remarks: "\nThe returned adjuster will throw an exception if it is applied to a date\nthat would create an invalid result.\n"
  example: []
  syntax:
    content: public static Func<LocalDate, LocalDate> Month(int month)
    parameters:
    - id: month
      type: System.Int32
      description: The month to adjust dates to.
    return:
      type: System.Func{NodaTime.LocalDate,NodaTime.LocalDate}
      description: >-
        An adjuster which changes the month to <code data-dev-comment-type="paramref" class="paramref">month</code>,

        retaining the same year and day of month.
    content.vb: Public Shared Function Month(month As Integer) As Func(Of LocalDate, LocalDate)
  overload: NodaTime.DateAdjusters.Month*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: NodaTime.DateAdjusters.NextOrSame(NodaTime.IsoDayOfWeek)
  commentId: M:NodaTime.DateAdjusters.NextOrSame(NodaTime.IsoDayOfWeek)
  id: NextOrSame(NodaTime.IsoDayOfWeek)
  parent: NodaTime.DateAdjusters
  langs:
  - csharp
  - vb
  name: NextOrSame(IsoDayOfWeek)
  nameWithType: DateAdjusters.NextOrSame(IsoDayOfWeek)
  fullName: NodaTime.DateAdjusters.NextOrSame(NodaTime.IsoDayOfWeek)
  type: Method
  source:
    remote:
      path: 2.3.x/src/NodaTime/DateAdjusters.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: NextOrSame
    path: src/NodaTime/DateAdjusters.cs
    startLine: 66
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nA date adjuster to move to the next specified day-of-week, but return the\noriginal date if the day is already correct.\n"
  example: []
  syntax:
    content: public static Func<LocalDate, LocalDate> NextOrSame(IsoDayOfWeek dayOfWeek)
    parameters:
    - id: dayOfWeek
      type: NodaTime.IsoDayOfWeek
      description: The day-of-week to adjust dates to.
    return:
      type: System.Func{NodaTime.LocalDate,NodaTime.LocalDate}
      description: >-
        An adjuster which advances a date to the next occurrence of the

        specified day-of-week, or the original date if the day is already corret.
    content.vb: Public Shared Function NextOrSame(dayOfWeek As IsoDayOfWeek) As Func(Of LocalDate, LocalDate)
  overload: NodaTime.DateAdjusters.NextOrSame*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: NodaTime.DateAdjusters.PreviousOrSame(NodaTime.IsoDayOfWeek)
  commentId: M:NodaTime.DateAdjusters.PreviousOrSame(NodaTime.IsoDayOfWeek)
  id: PreviousOrSame(NodaTime.IsoDayOfWeek)
  parent: NodaTime.DateAdjusters
  langs:
  - csharp
  - vb
  name: PreviousOrSame(IsoDayOfWeek)
  nameWithType: DateAdjusters.PreviousOrSame(IsoDayOfWeek)
  fullName: NodaTime.DateAdjusters.PreviousOrSame(NodaTime.IsoDayOfWeek)
  type: Method
  source:
    remote:
      path: 2.3.x/src/NodaTime/DateAdjusters.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: PreviousOrSame
    path: src/NodaTime/DateAdjusters.cs
    startLine: 83
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nA date adjuster to move to the previous specified day-of-week, but return the\noriginal date if the day is already correct.\n"
  example: []
  syntax:
    content: public static Func<LocalDate, LocalDate> PreviousOrSame(IsoDayOfWeek dayOfWeek)
    parameters:
    - id: dayOfWeek
      type: NodaTime.IsoDayOfWeek
      description: The day-of-week to adjust dates to.
    return:
      type: System.Func{NodaTime.LocalDate,NodaTime.LocalDate}
      description: >-
        An adjuster which advances a date to the previous occurrence of the

        specified day-of-week, or the original date if the day is already corret.
    content.vb: Public Shared Function PreviousOrSame(dayOfWeek As IsoDayOfWeek) As Func(Of LocalDate, LocalDate)
  overload: NodaTime.DateAdjusters.PreviousOrSame*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: NodaTime.DateAdjusters.Next(NodaTime.IsoDayOfWeek)
  commentId: M:NodaTime.DateAdjusters.Next(NodaTime.IsoDayOfWeek)
  id: Next(NodaTime.IsoDayOfWeek)
  parent: NodaTime.DateAdjusters
  langs:
  - csharp
  - vb
  name: Next(IsoDayOfWeek)
  nameWithType: DateAdjusters.Next(IsoDayOfWeek)
  fullName: NodaTime.DateAdjusters.Next(NodaTime.IsoDayOfWeek)
  type: Method
  source:
    remote:
      path: 2.3.x/src/NodaTime/DateAdjusters.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: Next
    path: src/NodaTime/DateAdjusters.cs
    startLine: 103
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nA date adjuster to move to the next specified day-of-week, adding\na week if the day is already correct.\n"
  remarks: "\nThis is the adjuster equivalent of <xref href=\"NodaTime.LocalDate.Next(NodaTime.IsoDayOfWeek)\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public static Func<LocalDate, LocalDate> Next(IsoDayOfWeek dayOfWeek)
    parameters:
    - id: dayOfWeek
      type: NodaTime.IsoDayOfWeek
      description: The day-of-week to adjust dates to.
    return:
      type: System.Func{NodaTime.LocalDate,NodaTime.LocalDate}
      description: >-
        An adjuster which advances a date to the next occurrence of the

        specified day-of-week.
    content.vb: Public Shared Function Next(dayOfWeek As IsoDayOfWeek) As Func(Of LocalDate, LocalDate)
  overload: NodaTime.DateAdjusters.Next*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: NodaTime.DateAdjusters.Previous(NodaTime.IsoDayOfWeek)
  commentId: M:NodaTime.DateAdjusters.Previous(NodaTime.IsoDayOfWeek)
  id: Previous(NodaTime.IsoDayOfWeek)
  parent: NodaTime.DateAdjusters
  langs:
  - csharp
  - vb
  name: Previous(IsoDayOfWeek)
  nameWithType: DateAdjusters.Previous(IsoDayOfWeek)
  fullName: NodaTime.DateAdjusters.Previous(NodaTime.IsoDayOfWeek)
  type: Method
  source:
    remote:
      path: 2.3.x/src/NodaTime/DateAdjusters.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: Previous
    path: src/NodaTime/DateAdjusters.cs
    startLine: 123
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nA date adjuster to move to the previous specified day-of-week, subtracting\na week if the day is already correct.\n"
  remarks: "\nThis is the adjuster equivalent of <xref href=\"NodaTime.LocalDate.Previous(NodaTime.IsoDayOfWeek)\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public static Func<LocalDate, LocalDate> Previous(IsoDayOfWeek dayOfWeek)
    parameters:
    - id: dayOfWeek
      type: NodaTime.IsoDayOfWeek
      description: The day-of-week to adjust dates to.
    return:
      type: System.Func{NodaTime.LocalDate,NodaTime.LocalDate}
      description: >-
        An adjuster which advances a date to the previous occurrence of the

        specified day-of-week.
    content.vb: Public Shared Function Previous(dayOfWeek As IsoDayOfWeek) As Func(Of LocalDate, LocalDate)
  overload: NodaTime.DateAdjusters.Previous*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
references:
- uid: NodaTime.LocalDate
  commentId: T:NodaTime.LocalDate
  parent: NodaTime
  name: LocalDate
  nameWithType: LocalDate
  fullName: NodaTime.LocalDate
- uid: NodaTime.LocalDateTime
  commentId: T:NodaTime.LocalDateTime
  parent: NodaTime
  name: LocalDateTime
  nameWithType: LocalDateTime
  fullName: NodaTime.LocalDateTime
- uid: NodaTime.OffsetDateTime
  commentId: T:NodaTime.OffsetDateTime
  parent: NodaTime
  name: OffsetDateTime
  nameWithType: OffsetDateTime
  fullName: NodaTime.OffsetDateTime
- uid: NodaTime
  commentId: N:NodaTime
  name: NodaTime
  nameWithType: NodaTime
  fullName: NodaTime
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: NodaTime.DateAdjusters.StartOfMonth*
  commentId: Overload:NodaTime.DateAdjusters.StartOfMonth
  name: StartOfMonth
  nameWithType: DateAdjusters.StartOfMonth
  fullName: NodaTime.DateAdjusters.StartOfMonth
- uid: System.Func{NodaTime.LocalDate,NodaTime.LocalDate}
  commentId: T:System.Func{NodaTime.LocalDate,NodaTime.LocalDate}
  parent: System
  definition: System.Func`2
  name: Func<LocalDate, LocalDate>
  nameWithType: Func<LocalDate, LocalDate>
  fullName: System.Func<NodaTime.LocalDate, NodaTime.LocalDate>
  nameWithType.vb: Func(Of LocalDate, LocalDate)
  fullName.vb: System.Func(Of NodaTime.LocalDate, NodaTime.LocalDate)
  name.vb: Func(Of LocalDate, LocalDate)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: NodaTime.LocalDate
    name: LocalDate
    nameWithType: LocalDate
    fullName: NodaTime.LocalDate
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: NodaTime.LocalDate
    name: LocalDate
    nameWithType: LocalDate
    fullName: NodaTime.LocalDate
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: NodaTime.LocalDate
    name: LocalDate
    nameWithType: LocalDate
    fullName: NodaTime.LocalDate
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: NodaTime.LocalDate
    name: LocalDate
    nameWithType: LocalDate
    fullName: NodaTime.LocalDate
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func`2
  commentId: T:System.Func`2
  isExternal: true
  name: Func<T, TResult>
  nameWithType: Func<T, TResult>
  fullName: System.Func<T, TResult>
  nameWithType.vb: Func(Of T, TResult)
  fullName.vb: System.Func(Of T, TResult)
  name.vb: Func(Of T, TResult)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: NodaTime.DateAdjusters.EndOfMonth*
  commentId: Overload:NodaTime.DateAdjusters.EndOfMonth
  name: EndOfMonth
  nameWithType: DateAdjusters.EndOfMonth
  fullName: NodaTime.DateAdjusters.EndOfMonth
- uid: NodaTime.DateAdjusters.DayOfMonth*
  commentId: Overload:NodaTime.DateAdjusters.DayOfMonth
  name: DayOfMonth
  nameWithType: DateAdjusters.DayOfMonth
  fullName: NodaTime.DateAdjusters.DayOfMonth
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: NodaTime.DateAdjusters.Month*
  commentId: Overload:NodaTime.DateAdjusters.Month
  name: Month
  nameWithType: DateAdjusters.Month
  fullName: NodaTime.DateAdjusters.Month
- uid: NodaTime.DateAdjusters.NextOrSame*
  commentId: Overload:NodaTime.DateAdjusters.NextOrSame
  name: NextOrSame
  nameWithType: DateAdjusters.NextOrSame
  fullName: NodaTime.DateAdjusters.NextOrSame
- uid: NodaTime.IsoDayOfWeek
  commentId: T:NodaTime.IsoDayOfWeek
  parent: NodaTime
  name: IsoDayOfWeek
  nameWithType: IsoDayOfWeek
  fullName: NodaTime.IsoDayOfWeek
- uid: NodaTime.DateAdjusters.PreviousOrSame*
  commentId: Overload:NodaTime.DateAdjusters.PreviousOrSame
  name: PreviousOrSame
  nameWithType: DateAdjusters.PreviousOrSame
  fullName: NodaTime.DateAdjusters.PreviousOrSame
- uid: NodaTime.LocalDate.Next(NodaTime.IsoDayOfWeek)
  commentId: M:NodaTime.LocalDate.Next(NodaTime.IsoDayOfWeek)
  isExternal: true
- uid: NodaTime.DateAdjusters.Next*
  commentId: Overload:NodaTime.DateAdjusters.Next
  name: Next
  nameWithType: DateAdjusters.Next
  fullName: NodaTime.DateAdjusters.Next
- uid: NodaTime.LocalDate.Previous(NodaTime.IsoDayOfWeek)
  commentId: M:NodaTime.LocalDate.Previous(NodaTime.IsoDayOfWeek)
  isExternal: true
- uid: NodaTime.DateAdjusters.Previous*
  commentId: Overload:NodaTime.DateAdjusters.Previous
  name: Previous
  nameWithType: DateAdjusters.Previous
  fullName: NodaTime.DateAdjusters.Previous
shouldSkipMarkup: true
