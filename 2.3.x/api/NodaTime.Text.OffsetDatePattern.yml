### YamlMime:ManagedReference
items:
- uid: NodaTime.Text.OffsetDatePattern
  commentId: T:NodaTime.Text.OffsetDatePattern
  id: OffsetDatePattern
  parent: NodaTime.Text
  children:
  - NodaTime.Text.OffsetDatePattern.AppendFormat(NodaTime.OffsetDate,System.Text.StringBuilder)
  - NodaTime.Text.OffsetDatePattern.Create(System.String,System.Globalization.CultureInfo,NodaTime.OffsetDate)
  - NodaTime.Text.OffsetDatePattern.CreateWithCurrentCulture(System.String)
  - NodaTime.Text.OffsetDatePattern.CreateWithInvariantCulture(System.String)
  - NodaTime.Text.OffsetDatePattern.Format(NodaTime.OffsetDate)
  - NodaTime.Text.OffsetDatePattern.FullRoundtrip
  - NodaTime.Text.OffsetDatePattern.GeneralIso
  - NodaTime.Text.OffsetDatePattern.Parse(System.String)
  - NodaTime.Text.OffsetDatePattern.PatternText
  - NodaTime.Text.OffsetDatePattern.TemplateValue
  - NodaTime.Text.OffsetDatePattern.WithCalendar(NodaTime.CalendarSystem)
  - NodaTime.Text.OffsetDatePattern.WithCulture(System.Globalization.CultureInfo)
  - NodaTime.Text.OffsetDatePattern.WithPatternText(System.String)
  - NodaTime.Text.OffsetDatePattern.WithTemplateValue(NodaTime.OffsetDate)
  langs:
  - csharp
  - vb
  name: OffsetDatePattern
  nameWithType: OffsetDatePattern
  fullName: NodaTime.Text.OffsetDatePattern
  type: Class
  source:
    remote:
      path: 2.3.x/src/NodaTime/Text/OffsetDatePattern.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: OffsetDatePattern
    path: src/NodaTime/Text/OffsetDatePattern.cs
    startLine: 22
  assemblies:
  - NodaTime
  namespace: NodaTime.Text
  summary: "\nRepresents a pattern for parsing and formatting <xref href=\"NodaTime.OffsetDate\" data-throw-if-not-resolved=\"false\"></xref> values.\n"
  example: []
  syntax:
    content: 'public sealed class OffsetDatePattern : IPattern<OffsetDate>'
    content.vb: >-
      Public NotInheritable Class OffsetDatePattern
          Implements IPattern(Of OffsetDate)
  inheritance:
  - System.Object
  implements:
  - NodaTime.Text.IPattern{NodaTime.OffsetDate}
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - sealed
  - class
  modifiers.vb:
  - Public
  - NotInheritable
  - Class
- uid: NodaTime.Text.OffsetDatePattern.GeneralIso
  commentId: P:NodaTime.Text.OffsetDatePattern.GeneralIso
  id: GeneralIso
  parent: NodaTime.Text.OffsetDatePattern
  langs:
  - csharp
  - vb
  name: GeneralIso
  nameWithType: OffsetDatePattern.GeneralIso
  fullName: NodaTime.Text.OffsetDatePattern.GeneralIso
  type: Property
  source:
    remote:
      path: 2.3.x/src/NodaTime/Text/OffsetDatePattern.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: GeneralIso
    path: src/NodaTime/Text/OffsetDatePattern.cs
    startLine: 35
  assemblies:
  - NodaTime
  namespace: NodaTime.Text
  summary: "\nGets an invariant offset date pattern based on ISO-8601, including offset from UTC.\n"
  remarks: "\nThe calendar system is not parsed or formatted as part of this pattern. It corresponds to a custom pattern of\n&quot;uuuu&apos;-&apos;MM&apos;-&apos;ddo&lt;G>&quot;. This pattern is available as the &quot;G&quot; standard pattern (even though it is invariant).\n"
  example: []
  syntax:
    content: public static OffsetDatePattern GeneralIso { get; }
    parameters: []
    return:
      type: NodaTime.Text.OffsetDatePattern
      description: An invariant offset date pattern based on ISO-8601 (down to the second), including offset from UTC.
    content.vb: Public Shared ReadOnly Property GeneralIso As OffsetDatePattern
  overload: NodaTime.Text.OffsetDatePattern.GeneralIso*
  modifiers.csharp:
  - public
  - static
  - get
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: NodaTime.Text.OffsetDatePattern.FullRoundtrip
  commentId: P:NodaTime.Text.OffsetDatePattern.FullRoundtrip
  id: FullRoundtrip
  parent: NodaTime.Text.OffsetDatePattern
  langs:
  - csharp
  - vb
  name: FullRoundtrip
  nameWithType: OffsetDatePattern.FullRoundtrip
  fullName: NodaTime.Text.OffsetDatePattern.FullRoundtrip
  type: Property
  source:
    remote:
      path: 2.3.x/src/NodaTime/Text/OffsetDatePattern.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: FullRoundtrip
    path: src/NodaTime/Text/OffsetDatePattern.cs
    startLine: 48
  assemblies:
  - NodaTime
  namespace: NodaTime.Text
  summary: "\nGets an invariant offset date pattern based on ISO-8601\nincluding offset from UTC and calendar ID.\n"
  remarks: "\nThe returned pattern corresponds to a custom pattern of\n&quot;uuuu&apos;-&apos;MM&apos;-&apos;dd&apos;o&lt;G> &apos;(&apos;c&apos;)&apos;&quot;. This will round-trip any value in any calendar,\nand is available as the &quot;r&quot; standard pattern.\n"
  example: []
  syntax:
    content: public static OffsetDatePattern FullRoundtrip { get; }
    parameters: []
    return:
      type: NodaTime.Text.OffsetDatePattern
      description: >-
        An invariant offset date pattern based on ISO-8601 (down to the nanosecond)

        including offset from UTC and calendar ID.
    content.vb: Public Shared ReadOnly Property FullRoundtrip As OffsetDatePattern
  overload: NodaTime.Text.OffsetDatePattern.FullRoundtrip*
  modifiers.csharp:
  - public
  - static
  - get
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: NodaTime.Text.OffsetDatePattern.PatternText
  commentId: P:NodaTime.Text.OffsetDatePattern.PatternText
  id: PatternText
  parent: NodaTime.Text.OffsetDatePattern
  langs:
  - csharp
  - vb
  name: PatternText
  nameWithType: OffsetDatePattern.PatternText
  fullName: NodaTime.Text.OffsetDatePattern.PatternText
  type: Property
  source:
    remote:
      path: 2.3.x/src/NodaTime/Text/OffsetDatePattern.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: PatternText
    path: src/NodaTime/Text/OffsetDatePattern.cs
    startLine: 67
  assemblies:
  - NodaTime
  namespace: NodaTime.Text
  summary: "\nGets the pattern text for this pattern, as supplied on creation.\n"
  example: []
  syntax:
    content: public string PatternText { get; }
    parameters: []
    return:
      type: System.String
      description: The pattern text for this pattern, as supplied on creation.
    content.vb: Public ReadOnly Property PatternText As String
  overload: NodaTime.Text.OffsetDatePattern.PatternText*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: NodaTime.Text.OffsetDatePattern.TemplateValue
  commentId: P:NodaTime.Text.OffsetDatePattern.TemplateValue
  id: TemplateValue
  parent: NodaTime.Text.OffsetDatePattern
  langs:
  - csharp
  - vb
  name: TemplateValue
  nameWithType: OffsetDatePattern.TemplateValue
  fullName: NodaTime.Text.OffsetDatePattern.TemplateValue
  type: Property
  source:
    remote:
      path: 2.3.x/src/NodaTime/Text/OffsetDatePattern.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: TemplateValue
    path: src/NodaTime/Text/OffsetDatePattern.cs
    startLine: 79
  assemblies:
  - NodaTime
  namespace: NodaTime.Text
  summary: "\nGets the value used as a template for parsing: any field values unspecified\nin the pattern are taken from the template.\n"
  example: []
  syntax:
    content: public OffsetDate TemplateValue { get; }
    parameters: []
    return:
      type: NodaTime.OffsetDate
      description: The value used as a template for parsing.
    content.vb: Public ReadOnly Property TemplateValue As OffsetDate
  overload: NodaTime.Text.OffsetDatePattern.TemplateValue*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: NodaTime.Text.OffsetDatePattern.Parse(System.String)
  commentId: M:NodaTime.Text.OffsetDatePattern.Parse(System.String)
  id: Parse(System.String)
  parent: NodaTime.Text.OffsetDatePattern
  langs:
  - csharp
  - vb
  name: Parse(String)
  nameWithType: OffsetDatePattern.Parse(String)
  fullName: NodaTime.Text.OffsetDatePattern.Parse(System.String)
  type: Method
  source:
    remote:
      path: 2.3.x/src/NodaTime/Text/OffsetDatePattern.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: Parse
    path: src/NodaTime/Text/OffsetDatePattern.cs
    startLine: 99
  assemblies:
  - NodaTime
  namespace: NodaTime.Text
  summary: "\nParses the given text value according to the rules of this pattern.\n"
  remarks: "\nThis method never throws an exception (barring a bug in Noda Time itself). Even errors such as\nthe argument being null are wrapped in a parse result.\n"
  example: []
  syntax:
    content: public ParseResult<OffsetDate> Parse(string text)
    parameters:
    - id: text
      type: System.String
      description: The text value to parse.
    return:
      type: NodaTime.Text.ParseResult{NodaTime.OffsetDate}
      description: The result of parsing, which may be successful or unsuccessful.
    content.vb: Public Function Parse(text As String) As ParseResult(Of OffsetDate)
  overload: NodaTime.Text.OffsetDatePattern.Parse*
  implements:
  - NodaTime.Text.IPattern{NodaTime.OffsetDate}.Parse(System.String)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: NodaTime.Text.OffsetDatePattern.Format(NodaTime.OffsetDate)
  commentId: M:NodaTime.Text.OffsetDatePattern.Format(NodaTime.OffsetDate)
  id: Format(NodaTime.OffsetDate)
  parent: NodaTime.Text.OffsetDatePattern
  langs:
  - csharp
  - vb
  name: Format(OffsetDate)
  nameWithType: OffsetDatePattern.Format(OffsetDate)
  fullName: NodaTime.Text.OffsetDatePattern.Format(NodaTime.OffsetDate)
  type: Method
  source:
    remote:
      path: 2.3.x/src/NodaTime/Text/OffsetDatePattern.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: Format
    path: src/NodaTime/Text/OffsetDatePattern.cs
    startLine: 106
  assemblies:
  - NodaTime
  namespace: NodaTime.Text
  summary: "\nFormats the given zoned date as text according to the rules of this pattern.\n"
  example: []
  syntax:
    content: public string Format(OffsetDate value)
    parameters:
    - id: value
      type: NodaTime.OffsetDate
      description: The zoned date to format.
    return:
      type: System.String
      description: The zoned date formatted according to this pattern.
    content.vb: Public Function Format(value As OffsetDate) As String
  overload: NodaTime.Text.OffsetDatePattern.Format*
  implements:
  - NodaTime.Text.IPattern{NodaTime.OffsetDate}.Format(NodaTime.OffsetDate)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: NodaTime.Text.OffsetDatePattern.AppendFormat(NodaTime.OffsetDate,System.Text.StringBuilder)
  commentId: M:NodaTime.Text.OffsetDatePattern.AppendFormat(NodaTime.OffsetDate,System.Text.StringBuilder)
  id: AppendFormat(NodaTime.OffsetDate,System.Text.StringBuilder)
  parent: NodaTime.Text.OffsetDatePattern
  langs:
  - csharp
  - vb
  name: AppendFormat(OffsetDate, StringBuilder)
  nameWithType: OffsetDatePattern.AppendFormat(OffsetDate, StringBuilder)
  fullName: NodaTime.Text.OffsetDatePattern.AppendFormat(NodaTime.OffsetDate, System.Text.StringBuilder)
  type: Method
  source:
    remote:
      path: 2.3.x/src/NodaTime/Text/OffsetDatePattern.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: AppendFormat
    path: src/NodaTime/Text/OffsetDatePattern.cs
    startLine: 115
  assemblies:
  - NodaTime
  namespace: NodaTime.Text
  summary: "\nFormats the given value as text according to the rules of this pattern,\nappending to the given <xref href=\"System.Text.StringBuilder\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public StringBuilder AppendFormat(OffsetDate value, StringBuilder builder)
    parameters:
    - id: value
      type: NodaTime.OffsetDate
      description: The value to format.
    - id: builder
      type: System.Text.StringBuilder
      description: The <code>StringBuilder</code> to append to.
    return:
      type: System.Text.StringBuilder
      description: The builder passed in as <code data-dev-comment-type="paramref" class="paramref">builder</code>.
    content.vb: Public Function AppendFormat(value As OffsetDate, builder As StringBuilder) As StringBuilder
  overload: NodaTime.Text.OffsetDatePattern.AppendFormat*
  implements:
  - NodaTime.Text.IPattern{NodaTime.OffsetDate}.AppendFormat(NodaTime.OffsetDate,System.Text.StringBuilder)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: NodaTime.Text.OffsetDatePattern.Create(System.String,System.Globalization.CultureInfo,NodaTime.OffsetDate)
  commentId: M:NodaTime.Text.OffsetDatePattern.Create(System.String,System.Globalization.CultureInfo,NodaTime.OffsetDate)
  id: Create(System.String,System.Globalization.CultureInfo,NodaTime.OffsetDate)
  parent: NodaTime.Text.OffsetDatePattern
  langs:
  - csharp
  - vb
  name: Create(String, CultureInfo, OffsetDate)
  nameWithType: OffsetDatePattern.Create(String, CultureInfo, OffsetDate)
  fullName: NodaTime.Text.OffsetDatePattern.Create(System.String, System.Globalization.CultureInfo, NodaTime.OffsetDate)
  type: Method
  source:
    remote:
      path: 2.3.x/src/NodaTime/Text/OffsetDatePattern.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: Create
    path: src/NodaTime/Text/OffsetDatePattern.cs
    startLine: 145
  assemblies:
  - NodaTime
  namespace: NodaTime.Text
  summary: "\nCreates a pattern for the given pattern text, culture, and template value.\n"
  remarks: "\nSee the user guide for the available pattern text options.\n"
  example: []
  syntax:
    content: public static OffsetDatePattern Create(string patternText, CultureInfo cultureInfo, OffsetDate templateValue)
    parameters:
    - id: patternText
      type: System.String
      description: Pattern text to create the pattern for
    - id: cultureInfo
      type: System.Globalization.CultureInfo
      description: The culture to use in the pattern
    - id: templateValue
      type: NodaTime.OffsetDate
      description: Template value to use for unspecified fields
    return:
      type: NodaTime.Text.OffsetDatePattern
      description: A pattern for parsing and formatting local dates.
    content.vb: Public Shared Function Create(patternText As String, cultureInfo As CultureInfo, templateValue As OffsetDate) As OffsetDatePattern
  overload: NodaTime.Text.OffsetDatePattern.Create*
  exceptions:
  - type: NodaTime.Text.InvalidPatternException
    commentId: T:NodaTime.Text.InvalidPatternException
    description: The pattern text was invalid.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: NodaTime.Text.OffsetDatePattern.CreateWithInvariantCulture(System.String)
  commentId: M:NodaTime.Text.OffsetDatePattern.CreateWithInvariantCulture(System.String)
  id: CreateWithInvariantCulture(System.String)
  parent: NodaTime.Text.OffsetDatePattern
  langs:
  - csharp
  - vb
  name: CreateWithInvariantCulture(String)
  nameWithType: OffsetDatePattern.CreateWithInvariantCulture(String)
  fullName: NodaTime.Text.OffsetDatePattern.CreateWithInvariantCulture(System.String)
  type: Method
  source:
    remote:
      path: 2.3.x/src/NodaTime/Text/OffsetDatePattern.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: CreateWithInvariantCulture
    path: src/NodaTime/Text/OffsetDatePattern.cs
    startLine: 158
  assemblies:
  - NodaTime
  namespace: NodaTime.Text
  summary: "\nCreates a pattern for the given pattern text in the invariant culture, using the default\ntemplate value of midnight January 1st 2000 at an offset of 0.\n"
  remarks: "\nSee the user guide for the available pattern text options.\n"
  example: []
  syntax:
    content: public static OffsetDatePattern CreateWithInvariantCulture(string patternText)
    parameters:
    - id: patternText
      type: System.String
      description: Pattern text to create the pattern for
    return:
      type: NodaTime.Text.OffsetDatePattern
      description: A pattern for parsing and formatting local dates.
    content.vb: Public Shared Function CreateWithInvariantCulture(patternText As String) As OffsetDatePattern
  overload: NodaTime.Text.OffsetDatePattern.CreateWithInvariantCulture*
  exceptions:
  - type: NodaTime.Text.InvalidPatternException
    commentId: T:NodaTime.Text.InvalidPatternException
    description: The pattern text was invalid.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: NodaTime.Text.OffsetDatePattern.CreateWithCurrentCulture(System.String)
  commentId: M:NodaTime.Text.OffsetDatePattern.CreateWithCurrentCulture(System.String)
  id: CreateWithCurrentCulture(System.String)
  parent: NodaTime.Text.OffsetDatePattern
  langs:
  - csharp
  - vb
  name: CreateWithCurrentCulture(String)
  nameWithType: OffsetDatePattern.CreateWithCurrentCulture(String)
  fullName: NodaTime.Text.OffsetDatePattern.CreateWithCurrentCulture(System.String)
  type: Method
  source:
    remote:
      path: 2.3.x/src/NodaTime/Text/OffsetDatePattern.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: CreateWithCurrentCulture
    path: src/NodaTime/Text/OffsetDatePattern.cs
    startLine: 173
  assemblies:
  - NodaTime
  namespace: NodaTime.Text
  summary: "\nCreates a pattern for the given pattern text in the current culture, using the default\ntemplate value of midnight January 1st 2000 at an offset of 0.\n"
  remarks: "\nSee the user guide for the available pattern text options. Note that the current culture\nis captured at the time this method is called - it is not captured at the point of parsing\nor formatting values.\n"
  example: []
  syntax:
    content: public static OffsetDatePattern CreateWithCurrentCulture(string patternText)
    parameters:
    - id: patternText
      type: System.String
      description: Pattern text to create the pattern for
    return:
      type: NodaTime.Text.OffsetDatePattern
      description: A pattern for parsing and formatting local dates.
    content.vb: Public Shared Function CreateWithCurrentCulture(patternText As String) As OffsetDatePattern
  overload: NodaTime.Text.OffsetDatePattern.CreateWithCurrentCulture*
  exceptions:
  - type: NodaTime.Text.InvalidPatternException
    commentId: T:NodaTime.Text.InvalidPatternException
    description: The pattern text was invalid.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: NodaTime.Text.OffsetDatePattern.WithPatternText(System.String)
  commentId: M:NodaTime.Text.OffsetDatePattern.WithPatternText(System.String)
  id: WithPatternText(System.String)
  parent: NodaTime.Text.OffsetDatePattern
  langs:
  - csharp
  - vb
  name: WithPatternText(String)
  nameWithType: OffsetDatePattern.WithPatternText(String)
  fullName: NodaTime.Text.OffsetDatePattern.WithPatternText(System.String)
  type: Method
  source:
    remote:
      path: 2.3.x/src/NodaTime/Text/OffsetDatePattern.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: WithPatternText
    path: src/NodaTime/Text/OffsetDatePattern.cs
    startLine: 182
  assemblies:
  - NodaTime
  namespace: NodaTime.Text
  summary: "\nCreates a pattern for the same original localization information as this pattern, but with the specified\npattern text.\n"
  example: []
  syntax:
    content: public OffsetDatePattern WithPatternText(string patternText)
    parameters:
    - id: patternText
      type: System.String
      description: The pattern text to use in the new pattern.
    return:
      type: NodaTime.Text.OffsetDatePattern
      description: A new pattern with the given pattern text.
    content.vb: Public Function WithPatternText(patternText As String) As OffsetDatePattern
  overload: NodaTime.Text.OffsetDatePattern.WithPatternText*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: NodaTime.Text.OffsetDatePattern.WithCulture(System.Globalization.CultureInfo)
  commentId: M:NodaTime.Text.OffsetDatePattern.WithCulture(System.Globalization.CultureInfo)
  id: WithCulture(System.Globalization.CultureInfo)
  parent: NodaTime.Text.OffsetDatePattern
  langs:
  - csharp
  - vb
  name: WithCulture(CultureInfo)
  nameWithType: OffsetDatePattern.WithCulture(CultureInfo)
  fullName: NodaTime.Text.OffsetDatePattern.WithCulture(System.Globalization.CultureInfo)
  type: Method
  source:
    remote:
      path: 2.3.x/src/NodaTime/Text/OffsetDatePattern.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: WithCulture
    path: src/NodaTime/Text/OffsetDatePattern.cs
    startLine: 200
  assemblies:
  - NodaTime
  namespace: NodaTime.Text
  summary: "\nCreates a pattern for the same original pattern text as this pattern, but with the specified\nculture.\n"
  example: []
  syntax:
    content: public OffsetDatePattern WithCulture(CultureInfo cultureInfo)
    parameters:
    - id: cultureInfo
      type: System.Globalization.CultureInfo
      description: The culture to use in the new pattern.
    return:
      type: NodaTime.Text.OffsetDatePattern
      description: A new pattern with the given culture.
    content.vb: Public Function WithCulture(cultureInfo As CultureInfo) As OffsetDatePattern
  overload: NodaTime.Text.OffsetDatePattern.WithCulture*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: NodaTime.Text.OffsetDatePattern.WithTemplateValue(NodaTime.OffsetDate)
  commentId: M:NodaTime.Text.OffsetDatePattern.WithTemplateValue(NodaTime.OffsetDate)
  id: WithTemplateValue(NodaTime.OffsetDate)
  parent: NodaTime.Text.OffsetDatePattern
  langs:
  - csharp
  - vb
  name: WithTemplateValue(OffsetDate)
  nameWithType: OffsetDatePattern.WithTemplateValue(OffsetDate)
  fullName: NodaTime.Text.OffsetDatePattern.WithTemplateValue(NodaTime.OffsetDate)
  type: Method
  source:
    remote:
      path: 2.3.x/src/NodaTime/Text/OffsetDatePattern.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: WithTemplateValue
    path: src/NodaTime/Text/OffsetDatePattern.cs
    startLine: 209
  assemblies:
  - NodaTime
  namespace: NodaTime.Text
  summary: "\nCreates a pattern for the same original pattern text and culture as this pattern, but with\nthe specified template value.\n"
  example: []
  syntax:
    content: public OffsetDatePattern WithTemplateValue(OffsetDate newTemplateValue)
    parameters:
    - id: newTemplateValue
      type: NodaTime.OffsetDate
      description: The template value to use in the new pattern.
    return:
      type: NodaTime.Text.OffsetDatePattern
      description: A new pattern with the given template value.
    content.vb: Public Function WithTemplateValue(newTemplateValue As OffsetDate) As OffsetDatePattern
  overload: NodaTime.Text.OffsetDatePattern.WithTemplateValue*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: NodaTime.Text.OffsetDatePattern.WithCalendar(NodaTime.CalendarSystem)
  commentId: M:NodaTime.Text.OffsetDatePattern.WithCalendar(NodaTime.CalendarSystem)
  id: WithCalendar(NodaTime.CalendarSystem)
  parent: NodaTime.Text.OffsetDatePattern
  langs:
  - csharp
  - vb
  name: WithCalendar(CalendarSystem)
  nameWithType: OffsetDatePattern.WithCalendar(CalendarSystem)
  fullName: NodaTime.Text.OffsetDatePattern.WithCalendar(NodaTime.CalendarSystem)
  type: Method
  source:
    remote:
      path: 2.3.x/src/NodaTime/Text/OffsetDatePattern.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: WithCalendar
    path: src/NodaTime/Text/OffsetDatePattern.cs
    startLine: 227
  assemblies:
  - NodaTime
  namespace: NodaTime.Text
  summary: "\nCreates a pattern like this one, but with the template value modified to use\nthe specified calendar system.\n"
  remarks: "\n<p>\nCare should be taken in two (relatively rare) scenarios. Although the default template value\nis supported by all Noda Time calendar systems, if a pattern is created with a different\ntemplate value and then this method is called with a calendar system which doesn&apos;t support that\ndate, an exception will be thrown. Additionally, if the pattern only specifies some date fields,\nit&apos;s possible that the new template value will not be suitable for all values.\n</p>\n"
  example: []
  syntax:
    content: public OffsetDatePattern WithCalendar(CalendarSystem calendar)
    parameters:
    - id: calendar
      type: NodaTime.CalendarSystem
      description: The calendar system to convert the template value into.
    return:
      type: NodaTime.Text.OffsetDatePattern
      description: A new pattern with a template value in the specified calendar system.
    content.vb: Public Function WithCalendar(calendar As CalendarSystem) As OffsetDatePattern
  overload: NodaTime.Text.OffsetDatePattern.WithCalendar*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: NodaTime.OffsetDate
  commentId: T:NodaTime.OffsetDate
  parent: NodaTime
  name: OffsetDate
  nameWithType: OffsetDate
  fullName: NodaTime.OffsetDate
- uid: System.Globalization.CultureInfo
  commentId: T:System.Globalization.CultureInfo
  parent: System.Globalization
  isExternal: true
  name: CultureInfo
  nameWithType: CultureInfo
  fullName: System.Globalization.CultureInfo
- uid: NodaTime.Text
  commentId: N:NodaTime.Text
  name: NodaTime.Text
  nameWithType: NodaTime.Text
  fullName: NodaTime.Text
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: NodaTime.Text.IPattern{NodaTime.OffsetDate}
  commentId: T:NodaTime.Text.IPattern{NodaTime.OffsetDate}
  parent: NodaTime.Text
  definition: NodaTime.Text.IPattern`1
  name: IPattern<OffsetDate>
  nameWithType: IPattern<OffsetDate>
  fullName: NodaTime.Text.IPattern<NodaTime.OffsetDate>
  nameWithType.vb: IPattern(Of OffsetDate)
  fullName.vb: NodaTime.Text.IPattern(Of NodaTime.OffsetDate)
  name.vb: IPattern(Of OffsetDate)
  spec.csharp:
  - uid: NodaTime.Text.IPattern`1
    name: IPattern
    nameWithType: IPattern
    fullName: NodaTime.Text.IPattern
  - name: <
    nameWithType: <
    fullName: <
  - uid: NodaTime.OffsetDate
    name: OffsetDate
    nameWithType: OffsetDate
    fullName: NodaTime.OffsetDate
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: NodaTime.Text.IPattern`1
    name: IPattern
    nameWithType: IPattern
    fullName: NodaTime.Text.IPattern
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: NodaTime.OffsetDate
    name: OffsetDate
    nameWithType: OffsetDate
    fullName: NodaTime.OffsetDate
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: NodaTime
  commentId: N:NodaTime
  name: NodaTime
  nameWithType: NodaTime
  fullName: NodaTime
- uid: System.Globalization
  commentId: N:System.Globalization
  isExternal: true
  name: System.Globalization
  nameWithType: System.Globalization
  fullName: System.Globalization
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: NodaTime.Text.IPattern`1
  commentId: T:NodaTime.Text.IPattern`1
  name: IPattern<T>
  nameWithType: IPattern<T>
  fullName: NodaTime.Text.IPattern<T>
  nameWithType.vb: IPattern(Of T)
  fullName.vb: NodaTime.Text.IPattern(Of T)
  name.vb: IPattern(Of T)
  spec.csharp:
  - uid: NodaTime.Text.IPattern`1
    name: IPattern
    nameWithType: IPattern
    fullName: NodaTime.Text.IPattern
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: NodaTime.Text.IPattern`1
    name: IPattern
    nameWithType: IPattern
    fullName: NodaTime.Text.IPattern
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: NodaTime.Text.OffsetDatePattern.GeneralIso*
  commentId: Overload:NodaTime.Text.OffsetDatePattern.GeneralIso
  name: GeneralIso
  nameWithType: OffsetDatePattern.GeneralIso
  fullName: NodaTime.Text.OffsetDatePattern.GeneralIso
- uid: NodaTime.Text.OffsetDatePattern
  commentId: T:NodaTime.Text.OffsetDatePattern
  parent: NodaTime.Text
  name: OffsetDatePattern
  nameWithType: OffsetDatePattern
  fullName: NodaTime.Text.OffsetDatePattern
- uid: NodaTime.Text.OffsetDatePattern.FullRoundtrip*
  commentId: Overload:NodaTime.Text.OffsetDatePattern.FullRoundtrip
  name: FullRoundtrip
  nameWithType: OffsetDatePattern.FullRoundtrip
  fullName: NodaTime.Text.OffsetDatePattern.FullRoundtrip
- uid: NodaTime.Text.OffsetDatePattern.PatternText*
  commentId: Overload:NodaTime.Text.OffsetDatePattern.PatternText
  name: PatternText
  nameWithType: OffsetDatePattern.PatternText
  fullName: NodaTime.Text.OffsetDatePattern.PatternText
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: NodaTime.Text.OffsetDatePattern.TemplateValue*
  commentId: Overload:NodaTime.Text.OffsetDatePattern.TemplateValue
  name: TemplateValue
  nameWithType: OffsetDatePattern.TemplateValue
  fullName: NodaTime.Text.OffsetDatePattern.TemplateValue
- uid: NodaTime.Text.OffsetDatePattern.Parse*
  commentId: Overload:NodaTime.Text.OffsetDatePattern.Parse
  name: Parse
  nameWithType: OffsetDatePattern.Parse
  fullName: NodaTime.Text.OffsetDatePattern.Parse
- uid: NodaTime.Text.IPattern{NodaTime.OffsetDate}.Parse(System.String)
  commentId: M:NodaTime.Text.IPattern{NodaTime.OffsetDate}.Parse(System.String)
  parent: NodaTime.Text.IPattern{NodaTime.OffsetDate}
  definition: NodaTime.Text.IPattern`1.Parse(System.String)
  name: Parse(String)
  nameWithType: IPattern<OffsetDate>.Parse(String)
  fullName: NodaTime.Text.IPattern<NodaTime.OffsetDate>.Parse(System.String)
  nameWithType.vb: IPattern(Of OffsetDate).Parse(String)
  fullName.vb: NodaTime.Text.IPattern(Of NodaTime.OffsetDate).Parse(System.String)
  spec.csharp:
  - uid: NodaTime.Text.IPattern`1.Parse(System.String)
    name: Parse
    nameWithType: IPattern<OffsetDate>.Parse
    fullName: NodaTime.Text.IPattern<NodaTime.OffsetDate>.Parse
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NodaTime.Text.IPattern`1.Parse(System.String)
    name: Parse
    nameWithType: IPattern(Of OffsetDate).Parse
    fullName: NodaTime.Text.IPattern(Of NodaTime.OffsetDate).Parse
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: NodaTime.Text.ParseResult{NodaTime.OffsetDate}
  commentId: T:NodaTime.Text.ParseResult{NodaTime.OffsetDate}
  parent: NodaTime.Text
  definition: NodaTime.Text.ParseResult`1
  name: ParseResult<OffsetDate>
  nameWithType: ParseResult<OffsetDate>
  fullName: NodaTime.Text.ParseResult<NodaTime.OffsetDate>
  nameWithType.vb: ParseResult(Of OffsetDate)
  fullName.vb: NodaTime.Text.ParseResult(Of NodaTime.OffsetDate)
  name.vb: ParseResult(Of OffsetDate)
  spec.csharp:
  - uid: NodaTime.Text.ParseResult`1
    name: ParseResult
    nameWithType: ParseResult
    fullName: NodaTime.Text.ParseResult
  - name: <
    nameWithType: <
    fullName: <
  - uid: NodaTime.OffsetDate
    name: OffsetDate
    nameWithType: OffsetDate
    fullName: NodaTime.OffsetDate
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: NodaTime.Text.ParseResult`1
    name: ParseResult
    nameWithType: ParseResult
    fullName: NodaTime.Text.ParseResult
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: NodaTime.OffsetDate
    name: OffsetDate
    nameWithType: OffsetDate
    fullName: NodaTime.OffsetDate
  - name: )
    nameWithType: )
    fullName: )
- uid: NodaTime.Text.IPattern`1.Parse(System.String)
  commentId: M:NodaTime.Text.IPattern`1.Parse(System.String)
  isExternal: true
  name: Parse(String)
  nameWithType: IPattern<T>.Parse(String)
  fullName: NodaTime.Text.IPattern<T>.Parse(System.String)
  nameWithType.vb: IPattern(Of T).Parse(String)
  fullName.vb: NodaTime.Text.IPattern(Of T).Parse(System.String)
  spec.csharp:
  - uid: NodaTime.Text.IPattern`1.Parse(System.String)
    name: Parse
    nameWithType: IPattern<T>.Parse
    fullName: NodaTime.Text.IPattern<T>.Parse
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NodaTime.Text.IPattern`1.Parse(System.String)
    name: Parse
    nameWithType: IPattern(Of T).Parse
    fullName: NodaTime.Text.IPattern(Of T).Parse
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: NodaTime.Text.ParseResult`1
  commentId: T:NodaTime.Text.ParseResult`1
  parent: NodaTime.Text
  name: ParseResult<T>
  nameWithType: ParseResult<T>
  fullName: NodaTime.Text.ParseResult<T>
  nameWithType.vb: ParseResult(Of T)
  fullName.vb: NodaTime.Text.ParseResult(Of T)
  name.vb: ParseResult(Of T)
  spec.csharp:
  - uid: NodaTime.Text.ParseResult`1
    name: ParseResult
    nameWithType: ParseResult
    fullName: NodaTime.Text.ParseResult
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: NodaTime.Text.ParseResult`1
    name: ParseResult
    nameWithType: ParseResult
    fullName: NodaTime.Text.ParseResult
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: NodaTime.Text.OffsetDatePattern.Format*
  commentId: Overload:NodaTime.Text.OffsetDatePattern.Format
  name: Format
  nameWithType: OffsetDatePattern.Format
  fullName: NodaTime.Text.OffsetDatePattern.Format
- uid: NodaTime.Text.IPattern{NodaTime.OffsetDate}.Format(NodaTime.OffsetDate)
  commentId: M:NodaTime.Text.IPattern{NodaTime.OffsetDate}.Format(NodaTime.OffsetDate)
  parent: NodaTime.Text.IPattern{NodaTime.OffsetDate}
  definition: NodaTime.Text.IPattern`1.Format(`0)
  name: Format(OffsetDate)
  nameWithType: IPattern<OffsetDate>.Format(OffsetDate)
  fullName: NodaTime.Text.IPattern<NodaTime.OffsetDate>.Format(NodaTime.OffsetDate)
  nameWithType.vb: IPattern(Of OffsetDate).Format(OffsetDate)
  fullName.vb: NodaTime.Text.IPattern(Of NodaTime.OffsetDate).Format(NodaTime.OffsetDate)
  spec.csharp:
  - uid: NodaTime.Text.IPattern`1.Format(`0)
    name: Format
    nameWithType: IPattern<OffsetDate>.Format
    fullName: NodaTime.Text.IPattern<NodaTime.OffsetDate>.Format
  - name: (
    nameWithType: (
    fullName: (
  - uid: NodaTime.OffsetDate
    name: OffsetDate
    nameWithType: OffsetDate
    fullName: NodaTime.OffsetDate
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NodaTime.Text.IPattern`1.Format(`0)
    name: Format
    nameWithType: IPattern(Of OffsetDate).Format
    fullName: NodaTime.Text.IPattern(Of NodaTime.OffsetDate).Format
  - name: (
    nameWithType: (
    fullName: (
  - uid: NodaTime.OffsetDate
    name: OffsetDate
    nameWithType: OffsetDate
    fullName: NodaTime.OffsetDate
  - name: )
    nameWithType: )
    fullName: )
- uid: NodaTime.Text.IPattern`1.Format(`0)
  commentId: M:NodaTime.Text.IPattern`1.Format(`0)
  name: Format(T)
  nameWithType: IPattern<T>.Format(T)
  fullName: NodaTime.Text.IPattern<T>.Format(T)
  nameWithType.vb: IPattern(Of T).Format(T)
  fullName.vb: NodaTime.Text.IPattern(Of T).Format(T)
  spec.csharp:
  - uid: NodaTime.Text.IPattern`1.Format(`0)
    name: Format
    nameWithType: IPattern<T>.Format
    fullName: NodaTime.Text.IPattern<T>.Format
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NodaTime.Text.IPattern`1.Format(`0)
    name: Format
    nameWithType: IPattern(Of T).Format
    fullName: NodaTime.Text.IPattern(Of T).Format
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Text.StringBuilder
  commentId: T:System.Text.StringBuilder
  parent: System.Text
  isExternal: true
  name: StringBuilder
  nameWithType: StringBuilder
  fullName: System.Text.StringBuilder
- uid: NodaTime.Text.OffsetDatePattern.AppendFormat*
  commentId: Overload:NodaTime.Text.OffsetDatePattern.AppendFormat
  name: AppendFormat
  nameWithType: OffsetDatePattern.AppendFormat
  fullName: NodaTime.Text.OffsetDatePattern.AppendFormat
- uid: NodaTime.Text.IPattern{NodaTime.OffsetDate}.AppendFormat(NodaTime.OffsetDate,System.Text.StringBuilder)
  commentId: M:NodaTime.Text.IPattern{NodaTime.OffsetDate}.AppendFormat(NodaTime.OffsetDate,System.Text.StringBuilder)
  parent: NodaTime.Text.IPattern{NodaTime.OffsetDate}
  definition: NodaTime.Text.IPattern`1.AppendFormat(`0,System.Text.StringBuilder)
  name: AppendFormat(OffsetDate, StringBuilder)
  nameWithType: IPattern<OffsetDate>.AppendFormat(OffsetDate, StringBuilder)
  fullName: NodaTime.Text.IPattern<NodaTime.OffsetDate>.AppendFormat(NodaTime.OffsetDate, System.Text.StringBuilder)
  nameWithType.vb: IPattern(Of OffsetDate).AppendFormat(OffsetDate, StringBuilder)
  fullName.vb: NodaTime.Text.IPattern(Of NodaTime.OffsetDate).AppendFormat(NodaTime.OffsetDate, System.Text.StringBuilder)
  spec.csharp:
  - uid: NodaTime.Text.IPattern`1.AppendFormat(`0,System.Text.StringBuilder)
    name: AppendFormat
    nameWithType: IPattern<OffsetDate>.AppendFormat
    fullName: NodaTime.Text.IPattern<NodaTime.OffsetDate>.AppendFormat
  - name: (
    nameWithType: (
    fullName: (
  - uid: NodaTime.OffsetDate
    name: OffsetDate
    nameWithType: OffsetDate
    fullName: NodaTime.OffsetDate
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Text.StringBuilder
    name: StringBuilder
    nameWithType: StringBuilder
    fullName: System.Text.StringBuilder
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NodaTime.Text.IPattern`1.AppendFormat(`0,System.Text.StringBuilder)
    name: AppendFormat
    nameWithType: IPattern(Of OffsetDate).AppendFormat
    fullName: NodaTime.Text.IPattern(Of NodaTime.OffsetDate).AppendFormat
  - name: (
    nameWithType: (
    fullName: (
  - uid: NodaTime.OffsetDate
    name: OffsetDate
    nameWithType: OffsetDate
    fullName: NodaTime.OffsetDate
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Text.StringBuilder
    name: StringBuilder
    nameWithType: StringBuilder
    fullName: System.Text.StringBuilder
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Text
  commentId: N:System.Text
  isExternal: true
  name: System.Text
  nameWithType: System.Text
  fullName: System.Text
- uid: NodaTime.Text.IPattern`1.AppendFormat(`0,System.Text.StringBuilder)
  commentId: M:NodaTime.Text.IPattern`1.AppendFormat(`0,System.Text.StringBuilder)
  isExternal: true
  name: AppendFormat(T, StringBuilder)
  nameWithType: IPattern<T>.AppendFormat(T, StringBuilder)
  fullName: NodaTime.Text.IPattern<T>.AppendFormat(T, System.Text.StringBuilder)
  nameWithType.vb: IPattern(Of T).AppendFormat(T, StringBuilder)
  fullName.vb: NodaTime.Text.IPattern(Of T).AppendFormat(T, System.Text.StringBuilder)
  spec.csharp:
  - uid: NodaTime.Text.IPattern`1.AppendFormat(`0,System.Text.StringBuilder)
    name: AppendFormat
    nameWithType: IPattern<T>.AppendFormat
    fullName: NodaTime.Text.IPattern<T>.AppendFormat
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Text.StringBuilder
    name: StringBuilder
    nameWithType: StringBuilder
    fullName: System.Text.StringBuilder
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NodaTime.Text.IPattern`1.AppendFormat(`0,System.Text.StringBuilder)
    name: AppendFormat
    nameWithType: IPattern(Of T).AppendFormat
    fullName: NodaTime.Text.IPattern(Of T).AppendFormat
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Text.StringBuilder
    name: StringBuilder
    nameWithType: StringBuilder
    fullName: System.Text.StringBuilder
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: NodaTime.Text.InvalidPatternException
  commentId: T:NodaTime.Text.InvalidPatternException
  name: InvalidPatternException
  nameWithType: InvalidPatternException
  fullName: NodaTime.Text.InvalidPatternException
- uid: NodaTime.Text.OffsetDatePattern.Create*
  commentId: Overload:NodaTime.Text.OffsetDatePattern.Create
  name: Create
  nameWithType: OffsetDatePattern.Create
  fullName: NodaTime.Text.OffsetDatePattern.Create
- uid: NodaTime.Text.OffsetDatePattern.CreateWithInvariantCulture*
  commentId: Overload:NodaTime.Text.OffsetDatePattern.CreateWithInvariantCulture
  name: CreateWithInvariantCulture
  nameWithType: OffsetDatePattern.CreateWithInvariantCulture
  fullName: NodaTime.Text.OffsetDatePattern.CreateWithInvariantCulture
- uid: NodaTime.Text.OffsetDatePattern.CreateWithCurrentCulture*
  commentId: Overload:NodaTime.Text.OffsetDatePattern.CreateWithCurrentCulture
  name: CreateWithCurrentCulture
  nameWithType: OffsetDatePattern.CreateWithCurrentCulture
  fullName: NodaTime.Text.OffsetDatePattern.CreateWithCurrentCulture
- uid: NodaTime.Text.OffsetDatePattern.WithPatternText*
  commentId: Overload:NodaTime.Text.OffsetDatePattern.WithPatternText
  name: WithPatternText
  nameWithType: OffsetDatePattern.WithPatternText
  fullName: NodaTime.Text.OffsetDatePattern.WithPatternText
- uid: NodaTime.Text.OffsetDatePattern.WithCulture*
  commentId: Overload:NodaTime.Text.OffsetDatePattern.WithCulture
  name: WithCulture
  nameWithType: OffsetDatePattern.WithCulture
  fullName: NodaTime.Text.OffsetDatePattern.WithCulture
- uid: NodaTime.Text.OffsetDatePattern.WithTemplateValue*
  commentId: Overload:NodaTime.Text.OffsetDatePattern.WithTemplateValue
  name: WithTemplateValue
  nameWithType: OffsetDatePattern.WithTemplateValue
  fullName: NodaTime.Text.OffsetDatePattern.WithTemplateValue
- uid: NodaTime.Text.OffsetDatePattern.WithCalendar*
  commentId: Overload:NodaTime.Text.OffsetDatePattern.WithCalendar
  name: WithCalendar
  nameWithType: OffsetDatePattern.WithCalendar
  fullName: NodaTime.Text.OffsetDatePattern.WithCalendar
- uid: NodaTime.CalendarSystem
  commentId: T:NodaTime.CalendarSystem
  parent: NodaTime
  name: CalendarSystem
  nameWithType: CalendarSystem
  fullName: NodaTime.CalendarSystem
shouldSkipMarkup: true
