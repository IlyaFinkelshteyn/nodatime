### YamlMime:ManagedReference
items:
- uid: NodaTime.LocalDate
  commentId: T:NodaTime.LocalDate
  id: LocalDate
  parent: NodaTime
  children:
  - NodaTime.LocalDate.#ctor(NodaTime.Calendars.Era,System.Int32,System.Int32,System.Int32)
  - NodaTime.LocalDate.#ctor(NodaTime.Calendars.Era,System.Int32,System.Int32,System.Int32,NodaTime.CalendarSystem)
  - NodaTime.LocalDate.#ctor(System.Int32,System.Int32,System.Int32)
  - NodaTime.LocalDate.#ctor(System.Int32,System.Int32,System.Int32,NodaTime.CalendarSystem)
  - NodaTime.LocalDate.Add(NodaTime.LocalDate,NodaTime.Period)
  - NodaTime.LocalDate.At(NodaTime.LocalTime)
  - NodaTime.LocalDate.AtMidnight
  - NodaTime.LocalDate.AtStartOfDayInZone(NodaTime.DateTimeZone)
  - NodaTime.LocalDate.Calendar
  - NodaTime.LocalDate.CompareTo(NodaTime.LocalDate)
  - NodaTime.LocalDate.Day
  - NodaTime.LocalDate.DayOfWeek
  - NodaTime.LocalDate.DayOfYear
  - NodaTime.LocalDate.Deconstruct(System.Int32@,System.Int32@,System.Int32@)
  - NodaTime.LocalDate.Deconstruct(System.Int32@,System.Int32@,System.Int32@,NodaTime.CalendarSystem@)
  - NodaTime.LocalDate.Equals(NodaTime.LocalDate)
  - NodaTime.LocalDate.Equals(System.Object)
  - NodaTime.LocalDate.Era
  - NodaTime.LocalDate.FromDateTime(System.DateTime)
  - NodaTime.LocalDate.FromDateTime(System.DateTime,NodaTime.CalendarSystem)
  - NodaTime.LocalDate.FromWeekYearWeekAndDay(System.Int32,System.Int32,NodaTime.IsoDayOfWeek)
  - NodaTime.LocalDate.FromYearMonthWeekAndDay(System.Int32,System.Int32,System.Int32,NodaTime.IsoDayOfWeek)
  - NodaTime.LocalDate.GetHashCode
  - NodaTime.LocalDate.Max(NodaTime.LocalDate,NodaTime.LocalDate)
  - NodaTime.LocalDate.MaxIsoValue
  - NodaTime.LocalDate.Min(NodaTime.LocalDate,NodaTime.LocalDate)
  - NodaTime.LocalDate.MinIsoValue
  - NodaTime.LocalDate.Minus(NodaTime.LocalDate)
  - NodaTime.LocalDate.Minus(NodaTime.Period)
  - NodaTime.LocalDate.Month
  - NodaTime.LocalDate.Next(NodaTime.IsoDayOfWeek)
  - NodaTime.LocalDate.op_Addition(NodaTime.LocalDate,NodaTime.LocalTime)
  - NodaTime.LocalDate.op_Addition(NodaTime.LocalDate,NodaTime.Period)
  - NodaTime.LocalDate.op_Equality(NodaTime.LocalDate,NodaTime.LocalDate)
  - NodaTime.LocalDate.op_GreaterThan(NodaTime.LocalDate,NodaTime.LocalDate)
  - NodaTime.LocalDate.op_GreaterThanOrEqual(NodaTime.LocalDate,NodaTime.LocalDate)
  - NodaTime.LocalDate.op_Inequality(NodaTime.LocalDate,NodaTime.LocalDate)
  - NodaTime.LocalDate.op_LessThan(NodaTime.LocalDate,NodaTime.LocalDate)
  - NodaTime.LocalDate.op_LessThanOrEqual(NodaTime.LocalDate,NodaTime.LocalDate)
  - NodaTime.LocalDate.op_Subtraction(NodaTime.LocalDate,NodaTime.LocalDate)
  - NodaTime.LocalDate.op_Subtraction(NodaTime.LocalDate,NodaTime.Period)
  - NodaTime.LocalDate.Plus(NodaTime.Period)
  - NodaTime.LocalDate.PlusDays(System.Int32)
  - NodaTime.LocalDate.PlusMonths(System.Int32)
  - NodaTime.LocalDate.PlusWeeks(System.Int32)
  - NodaTime.LocalDate.PlusYears(System.Int32)
  - NodaTime.LocalDate.Previous(NodaTime.IsoDayOfWeek)
  - NodaTime.LocalDate.Subtract(NodaTime.LocalDate,NodaTime.LocalDate)
  - NodaTime.LocalDate.Subtract(NodaTime.LocalDate,NodaTime.Period)
  - NodaTime.LocalDate.System#IComparable#CompareTo(System.Object)
  - NodaTime.LocalDate.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  - NodaTime.LocalDate.System#Xml#Serialization#IXmlSerializable#GetSchema
  - NodaTime.LocalDate.System#Xml#Serialization#IXmlSerializable#ReadXml(System.Xml.XmlReader)
  - NodaTime.LocalDate.System#Xml#Serialization#IXmlSerializable#WriteXml(System.Xml.XmlWriter)
  - NodaTime.LocalDate.ToDateTimeUnspecified
  - NodaTime.LocalDate.ToString
  - NodaTime.LocalDate.ToString(System.String,System.IFormatProvider)
  - NodaTime.LocalDate.With(System.Func{NodaTime.LocalDate,NodaTime.LocalDate})
  - NodaTime.LocalDate.WithCalendar(NodaTime.CalendarSystem)
  - NodaTime.LocalDate.WithOffset(NodaTime.Offset)
  - NodaTime.LocalDate.Year
  - NodaTime.LocalDate.YearOfEra
  langs:
  - csharp
  - vb
  name: LocalDate
  nameWithType: LocalDate
  fullName: NodaTime.LocalDate
  type: Struct
  source:
    remote:
      path: 2.3.x/src/NodaTime/LocalDate.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: LocalDate
    path: src/NodaTime/LocalDate.cs
    startLine: 35
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nLocalDate is an immutable struct representing a date within the calendar,\nwith no reference to a particular time zone or time of day.\n"
  remarks: "\n<p>\nValues can freely be compared for equality: a value in a different calendar system is not equal to\na value in a different calendar system. However, ordering comparisons (either via the <xref href=\"NodaTime.LocalDate.CompareTo(NodaTime.LocalDate)\" data-throw-if-not-resolved=\"false\"></xref> method\nor via operators) fail with <xref href=\"System.ArgumentException\" data-throw-if-not-resolved=\"false\"></xref>; attempting to compare values in different calendars\nalmost always indicates a bug in the calling code.\n</p>\n"
  example: []
  syntax:
    content: >-
      [Serializable]

      public struct LocalDate : IEquatable<LocalDate>, IComparable<LocalDate>, IComparable, IFormattable, IXmlSerializable, ISerializable
    content.vb: >-
      <Serializable>

      Public Structure LocalDate
          Implements IEquatable(Of LocalDate), IComparable(Of LocalDate), IComparable, IFormattable, IXmlSerializable, ISerializable
  implements:
  - System.IEquatable{NodaTime.LocalDate}
  - System.IComparable{NodaTime.LocalDate}
  - System.IComparable
  - System.IFormattable
  - System.Xml.Serialization.IXmlSerializable
  - System.Runtime.Serialization.ISerializable
  inheritedMembers:
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetType
  attributes:
  - type: System.SerializableAttribute
    ctor: System.SerializableAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - struct
  modifiers.vb:
  - Public
  - Structure
- uid: NodaTime.LocalDate.MaxIsoValue
  commentId: P:NodaTime.LocalDate.MaxIsoValue
  id: MaxIsoValue
  parent: NodaTime.LocalDate
  langs:
  - csharp
  - vb
  name: MaxIsoValue
  nameWithType: LocalDate.MaxIsoValue
  fullName: NodaTime.LocalDate.MaxIsoValue
  type: Property
  source:
    remote:
      path: 2.3.x/src/NodaTime/LocalDate.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: MaxIsoValue
    path: src/NodaTime/LocalDate.cs
    startLine: 47
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nThe maximum (latest) date representable in the ISO calendar system.\n"
  example: []
  syntax:
    content: public static LocalDate MaxIsoValue { get; }
    parameters: []
    return:
      type: NodaTime.LocalDate
    content.vb: Public Shared ReadOnly Property MaxIsoValue As LocalDate
  overload: NodaTime.LocalDate.MaxIsoValue*
  modifiers.csharp:
  - public
  - static
  - get
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: NodaTime.LocalDate.MinIsoValue
  commentId: P:NodaTime.LocalDate.MinIsoValue
  id: MinIsoValue
  parent: NodaTime.LocalDate
  langs:
  - csharp
  - vb
  name: MinIsoValue
  nameWithType: LocalDate.MinIsoValue
  fullName: NodaTime.LocalDate.MinIsoValue
  type: Property
  source:
    remote:
      path: 2.3.x/src/NodaTime/LocalDate.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: MinIsoValue
    path: src/NodaTime/LocalDate.cs
    startLine: 52
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nThe minimum (earliest) date representable in the ISO calendar system.\n"
  example: []
  syntax:
    content: public static LocalDate MinIsoValue { get; }
    parameters: []
    return:
      type: NodaTime.LocalDate
    content.vb: Public Shared ReadOnly Property MinIsoValue As LocalDate
  overload: NodaTime.LocalDate.MinIsoValue*
  modifiers.csharp:
  - public
  - static
  - get
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: NodaTime.LocalDate.#ctor(System.Int32,System.Int32,System.Int32)
  commentId: M:NodaTime.LocalDate.#ctor(System.Int32,System.Int32,System.Int32)
  id: '#ctor(System.Int32,System.Int32,System.Int32)'
  parent: NodaTime.LocalDate
  langs:
  - csharp
  - vb
  name: LocalDate(Int32, Int32, Int32)
  nameWithType: LocalDate.LocalDate(Int32, Int32, Int32)
  fullName: NodaTime.LocalDate.LocalDate(System.Int32, System.Int32, System.Int32)
  type: Constructor
  source:
    remote:
      path: 2.3.x/src/NodaTime/LocalDate.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: .ctor
    path: src/NodaTime/LocalDate.cs
    startLine: 91
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nConstructs an instance for the given year, month and day in the ISO calendar.\n"
  example: []
  syntax:
    content: public LocalDate(int year, int month, int day)
    parameters:
    - id: year
      type: System.Int32
      description: The year. This is the &quot;absolute year&quot;, so a value of 0 means 1 BC, for example.
    - id: month
      type: System.Int32
      description: The month of year.
    - id: day
      type: System.Int32
      description: The day of month.
    content.vb: Public Sub New(year As Integer, month As Integer, day As Integer)
  overload: NodaTime.LocalDate.#ctor*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: The parameters do not form a valid date.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: NodaTime.LocalDate.#ctor(System.Int32,System.Int32,System.Int32,NodaTime.CalendarSystem)
  commentId: M:NodaTime.LocalDate.#ctor(System.Int32,System.Int32,System.Int32,NodaTime.CalendarSystem)
  id: '#ctor(System.Int32,System.Int32,System.Int32,NodaTime.CalendarSystem)'
  parent: NodaTime.LocalDate
  langs:
  - csharp
  - vb
  name: LocalDate(Int32, Int32, Int32, CalendarSystem)
  nameWithType: LocalDate.LocalDate(Int32, Int32, Int32, CalendarSystem)
  fullName: NodaTime.LocalDate.LocalDate(System.Int32, System.Int32, System.Int32, NodaTime.CalendarSystem)
  type: Constructor
  source:
    remote:
      path: 2.3.x/src/NodaTime/LocalDate.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: .ctor
    path: src/NodaTime/LocalDate.cs
    startLine: 107
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nConstructs an instance for the given year, month and day in the specified calendar.\n"
  example: []
  syntax:
    content: public LocalDate(int year, int month, int day, CalendarSystem calendar)
    parameters:
    - id: year
      type: System.Int32
      description: >-
        The year. This is the &quot;absolute year&quot;, so, for

        the ISO calendar, a value of 0 means 1 BC, for example.
    - id: month
      type: System.Int32
      description: The month of year.
    - id: day
      type: System.Int32
      description: The day of month.
    - id: calendar
      type: NodaTime.CalendarSystem
      description: Calendar system in which to create the date.
    content.vb: Public Sub New(year As Integer, month As Integer, day As Integer, calendar As CalendarSystem)
  overload: NodaTime.LocalDate.#ctor*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: The parameters do not form a valid date.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: NodaTime.LocalDate.#ctor(NodaTime.Calendars.Era,System.Int32,System.Int32,System.Int32)
  commentId: M:NodaTime.LocalDate.#ctor(NodaTime.Calendars.Era,System.Int32,System.Int32,System.Int32)
  id: '#ctor(NodaTime.Calendars.Era,System.Int32,System.Int32,System.Int32)'
  parent: NodaTime.LocalDate
  langs:
  - csharp
  - vb
  name: LocalDate(Era, Int32, Int32, Int32)
  nameWithType: LocalDate.LocalDate(Era, Int32, Int32, Int32)
  fullName: NodaTime.LocalDate.LocalDate(NodaTime.Calendars.Era, System.Int32, System.Int32, System.Int32)
  type: Constructor
  source:
    remote:
      path: 2.3.x/src/NodaTime/LocalDate.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: .ctor
    path: src/NodaTime/LocalDate.cs
    startLine: 123
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nConstructs an instance for the given era, year of era, month and day in the ISO calendar.\n"
  example: []
  syntax:
    content: public LocalDate(Era era, int yearOfEra, int month, int day)
    parameters:
    - id: era
      type: NodaTime.Calendars.Era
      description: The era within which to create a date. Must be a valid era within the ISO calendar.
    - id: yearOfEra
      type: System.Int32
      description: The year of era.
    - id: month
      type: System.Int32
      description: The month of year.
    - id: day
      type: System.Int32
      description: The day of month.
    content.vb: Public Sub New(era As Era, yearOfEra As Integer, month As Integer, day As Integer)
  overload: NodaTime.LocalDate.#ctor*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: The parameters do not form a valid date.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: NodaTime.LocalDate.#ctor(NodaTime.Calendars.Era,System.Int32,System.Int32,System.Int32,NodaTime.CalendarSystem)
  commentId: M:NodaTime.LocalDate.#ctor(NodaTime.Calendars.Era,System.Int32,System.Int32,System.Int32,NodaTime.CalendarSystem)
  id: '#ctor(NodaTime.Calendars.Era,System.Int32,System.Int32,System.Int32,NodaTime.CalendarSystem)'
  parent: NodaTime.LocalDate
  langs:
  - csharp
  - vb
  name: LocalDate(Era, Int32, Int32, Int32, CalendarSystem)
  nameWithType: LocalDate.LocalDate(Era, Int32, Int32, Int32, CalendarSystem)
  fullName: NodaTime.LocalDate.LocalDate(NodaTime.Calendars.Era, System.Int32, System.Int32, System.Int32, NodaTime.CalendarSystem)
  type: Constructor
  source:
    remote:
      path: 2.3.x/src/NodaTime/LocalDate.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: .ctor
    path: src/NodaTime/LocalDate.cs
    startLine: 138
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nConstructs an instance for the given era, year of era, month and day in the specified calendar.\n"
  example: []
  syntax:
    content: public LocalDate(Era era, int yearOfEra, int month, int day, CalendarSystem calendar)
    parameters:
    - id: era
      type: NodaTime.Calendars.Era
      description: The era within which to create a date. Must be a valid era within the specified calendar.
    - id: yearOfEra
      type: System.Int32
      description: The year of era.
    - id: month
      type: System.Int32
      description: The month of year.
    - id: day
      type: System.Int32
      description: The day of month.
    - id: calendar
      type: NodaTime.CalendarSystem
      description: Calendar system in which to create the date.
    content.vb: Public Sub New(era As Era, yearOfEra As Integer, month As Integer, day As Integer, calendar As CalendarSystem)
  overload: NodaTime.LocalDate.#ctor*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: The parameters do not form a valid date.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: NodaTime.LocalDate.Calendar
  commentId: P:NodaTime.LocalDate.Calendar
  id: Calendar
  parent: NodaTime.LocalDate
  langs:
  - csharp
  - vb
  name: Calendar
  nameWithType: LocalDate.Calendar
  fullName: NodaTime.LocalDate.Calendar
  type: Property
  source:
    remote:
      path: 2.3.x/src/NodaTime/LocalDate.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: Calendar
    path: src/NodaTime/LocalDate.cs
    startLine: 145
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: Gets the calendar system associated with this local date.
  example: []
  syntax:
    content: public CalendarSystem Calendar { get; }
    parameters: []
    return:
      type: NodaTime.CalendarSystem
      description: The calendar system associated with this local date.
    content.vb: Public ReadOnly Property Calendar As CalendarSystem
  overload: NodaTime.LocalDate.Calendar*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: NodaTime.LocalDate.Year
  commentId: P:NodaTime.LocalDate.Year
  id: Year
  parent: NodaTime.LocalDate
  langs:
  - csharp
  - vb
  name: Year
  nameWithType: LocalDate.Year
  fullName: NodaTime.LocalDate.Year
  type: Property
  source:
    remote:
      path: 2.3.x/src/NodaTime/LocalDate.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: Year
    path: src/NodaTime/LocalDate.cs
    startLine: 151
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: Gets the year of this local date.
  remarks: >-
    This returns the &quot;absolute year&quot;, so, for the ISO calendar,

    a value of 0 means 1 BC, for example.
  example: []
  syntax:
    content: public int Year { get; }
    parameters: []
    return:
      type: System.Int32
      description: The year of this local date.
    content.vb: Public ReadOnly Property Year As Integer
  overload: NodaTime.LocalDate.Year*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: NodaTime.LocalDate.Month
  commentId: P:NodaTime.LocalDate.Month
  id: Month
  parent: NodaTime.LocalDate
  langs:
  - csharp
  - vb
  name: Month
  nameWithType: LocalDate.Month
  fullName: NodaTime.LocalDate.Month
  type: Property
  source:
    remote:
      path: 2.3.x/src/NodaTime/LocalDate.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: Month
    path: src/NodaTime/LocalDate.cs
    startLine: 155
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: Gets the month of this local date within the year.
  example: []
  syntax:
    content: public int Month { get; }
    parameters: []
    return:
      type: System.Int32
      description: The month of this local date within the year.
    content.vb: Public ReadOnly Property Month As Integer
  overload: NodaTime.LocalDate.Month*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: NodaTime.LocalDate.Day
  commentId: P:NodaTime.LocalDate.Day
  id: Day
  parent: NodaTime.LocalDate
  langs:
  - csharp
  - vb
  name: Day
  nameWithType: LocalDate.Day
  fullName: NodaTime.LocalDate.Day
  type: Property
  source:
    remote:
      path: 2.3.x/src/NodaTime/LocalDate.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: Day
    path: src/NodaTime/LocalDate.cs
    startLine: 159
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: Gets the day of this local date within the month.
  example: []
  syntax:
    content: public int Day { get; }
    parameters: []
    return:
      type: System.Int32
      description: The day of this local date within the month.
    content.vb: Public ReadOnly Property Day As Integer
  overload: NodaTime.LocalDate.Day*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: NodaTime.LocalDate.DayOfWeek
  commentId: P:NodaTime.LocalDate.DayOfWeek
  id: DayOfWeek
  parent: NodaTime.LocalDate
  langs:
  - csharp
  - vb
  name: DayOfWeek
  nameWithType: LocalDate.DayOfWeek
  fullName: NodaTime.LocalDate.DayOfWeek
  type: Property
  source:
    remote:
      path: 2.3.x/src/NodaTime/LocalDate.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: DayOfWeek
    path: src/NodaTime/LocalDate.cs
    startLine: 169
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nGets the week day of this local date expressed as an <xref href=\"NodaTime.IsoDayOfWeek\" data-throw-if-not-resolved=\"false\"></xref> value.\n"
  example: []
  syntax:
    content: public IsoDayOfWeek DayOfWeek { get; }
    parameters: []
    return:
      type: NodaTime.IsoDayOfWeek
      description: The week day of this local date expressed as an <code>IsoDayOfWeek</code>.
    content.vb: Public ReadOnly Property DayOfWeek As IsoDayOfWeek
  overload: NodaTime.LocalDate.DayOfWeek*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: NodaTime.LocalDate.YearOfEra
  commentId: P:NodaTime.LocalDate.YearOfEra
  id: YearOfEra
  parent: NodaTime.LocalDate
  langs:
  - csharp
  - vb
  name: YearOfEra
  nameWithType: LocalDate.YearOfEra
  fullName: NodaTime.LocalDate.YearOfEra
  type: Property
  source:
    remote:
      path: 2.3.x/src/NodaTime/LocalDate.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: YearOfEra
    path: src/NodaTime/LocalDate.cs
    startLine: 173
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: Gets the year of this local date within the era.
  example: []
  syntax:
    content: public int YearOfEra { get; }
    parameters: []
    return:
      type: System.Int32
      description: The year of this local date within the era.
    content.vb: Public ReadOnly Property YearOfEra As Integer
  overload: NodaTime.LocalDate.YearOfEra*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: NodaTime.LocalDate.Era
  commentId: P:NodaTime.LocalDate.Era
  id: Era
  parent: NodaTime.LocalDate
  langs:
  - csharp
  - vb
  name: Era
  nameWithType: LocalDate.Era
  fullName: NodaTime.LocalDate.Era
  type: Property
  source:
    remote:
      path: 2.3.x/src/NodaTime/LocalDate.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: Era
    path: src/NodaTime/LocalDate.cs
    startLine: 177
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: Gets the era of this local date.
  example: []
  syntax:
    content: public Era Era { get; }
    parameters: []
    return:
      type: NodaTime.Calendars.Era
      description: The era of this local date.
    content.vb: Public ReadOnly Property Era As Era
  overload: NodaTime.LocalDate.Era*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: NodaTime.LocalDate.DayOfYear
  commentId: P:NodaTime.LocalDate.DayOfYear
  id: DayOfYear
  parent: NodaTime.LocalDate
  langs:
  - csharp
  - vb
  name: DayOfYear
  nameWithType: LocalDate.DayOfYear
  fullName: NodaTime.LocalDate.DayOfYear
  type: Property
  source:
    remote:
      path: 2.3.x/src/NodaTime/LocalDate.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: DayOfYear
    path: src/NodaTime/LocalDate.cs
    startLine: 181
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: Gets the day of this local date within the year.
  example: []
  syntax:
    content: public int DayOfYear { get; }
    parameters: []
    return:
      type: System.Int32
      description: The day of this local date within the year.
    content.vb: Public ReadOnly Property DayOfYear As Integer
  overload: NodaTime.LocalDate.DayOfYear*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: NodaTime.LocalDate.AtMidnight
  commentId: M:NodaTime.LocalDate.AtMidnight
  id: AtMidnight
  parent: NodaTime.LocalDate
  langs:
  - csharp
  - vb
  name: AtMidnight()
  nameWithType: LocalDate.AtMidnight()
  fullName: NodaTime.LocalDate.AtMidnight()
  type: Method
  source:
    remote:
      path: 2.3.x/src/NodaTime/LocalDate.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: AtMidnight
    path: src/NodaTime/LocalDate.cs
    startLine: 192
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nGets a <xref href=\"NodaTime.LocalDateTime\" data-throw-if-not-resolved=\"false\"></xref> at midnight on the date represented by this local date.\n"
  example: []
  syntax:
    content: public LocalDateTime AtMidnight()
    return:
      type: NodaTime.LocalDateTime
      description: >-
        The <xref href="NodaTime.LocalDateTime" data-throw-if-not-resolved="false"></xref> representing midnight on this local date, in the same calendar

        system.
    content.vb: Public Function AtMidnight As LocalDateTime
  overload: NodaTime.LocalDate.AtMidnight*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: NodaTime.LocalDate.ToDateTimeUnspecified
  commentId: M:NodaTime.LocalDate.ToDateTimeUnspecified
  id: ToDateTimeUnspecified
  parent: NodaTime.LocalDate
  langs:
  - csharp
  - vb
  name: ToDateTimeUnspecified()
  nameWithType: LocalDate.ToDateTimeUnspecified()
  fullName: NodaTime.LocalDate.ToDateTimeUnspecified()
  type: Method
  source:
    remote:
      path: 2.3.x/src/NodaTime/LocalDate.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: ToDateTimeUnspecified
    path: src/NodaTime/LocalDate.cs
    startLine: 207
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nConstructs a <xref href=\"System.DateTime\" data-throw-if-not-resolved=\"false\"></xref> from this value which has a <xref href=\"System.DateTime.Kind\" data-throw-if-not-resolved=\"false\"></xref>\nof <xref href=\"System.DateTimeKind.Unspecified\" data-throw-if-not-resolved=\"false\"></xref>. The result is midnight on the day represented\nby this value.\n"
  remarks: "\n<xref href=\"System.DateTimeKind.Unspecified\" data-throw-if-not-resolved=\"false\"></xref> is slightly odd - it can be treated as UTC if you use <xref href=\"System.DateTime.ToLocalTime\" data-throw-if-not-resolved=\"false\"></xref>\nor as system local time if you use <xref href=\"System.DateTime.ToUniversalTime\" data-throw-if-not-resolved=\"false\"></xref>, but it&apos;s the only kind which allows\nyou to construct a <xref href=\"System.DateTimeOffset\" data-throw-if-not-resolved=\"false\"></xref> with an arbitrary offset, which makes it as close to\nthe Noda Time non-system-specific &quot;local&quot; concept as exists in .NET.\n"
  example: []
  syntax:
    content: public DateTime ToDateTimeUnspecified()
    return:
      type: System.DateTime
      description: A <xref href="System.DateTime" data-throw-if-not-resolved="false"></xref> value for the same date and time as this value.
    content.vb: Public Function ToDateTimeUnspecified As Date
  overload: NodaTime.LocalDate.ToDateTimeUnspecified*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: NodaTime.LocalDate.FromDateTime(System.DateTime)
  commentId: M:NodaTime.LocalDate.FromDateTime(System.DateTime)
  id: FromDateTime(System.DateTime)
  parent: NodaTime.LocalDate
  langs:
  - csharp
  - vb
  name: FromDateTime(DateTime)
  nameWithType: LocalDate.FromDateTime(DateTime)
  fullName: NodaTime.LocalDate.FromDateTime(System.DateTime)
  type: Method
  source:
    remote:
      path: 2.3.x/src/NodaTime/LocalDate.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: FromDateTime
    path: src/NodaTime/LocalDate.cs
    startLine: 222
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nConverts a <xref href=\"System.DateTime\" data-throw-if-not-resolved=\"false\"></xref> of any kind to a LocalDate in the ISO calendar, ignoring the time of day.\nThis does not perform any time zone conversions, so a DateTime with a <xref href=\"System.DateTime.Kind\" data-throw-if-not-resolved=\"false\"></xref> of\n<xref href=\"System.DateTimeKind.Utc\" data-throw-if-not-resolved=\"false\"></xref> will still represent the same year/month/day - it won&apos;t be converted into the local system time.\n"
  example: []
  syntax:
    content: public static LocalDate FromDateTime(DateTime dateTime)
    parameters:
    - id: dateTime
      type: System.DateTime
      description: Value to convert into a Noda Time local date
    return:
      type: NodaTime.LocalDate
      description: A new <xref href="NodaTime.LocalDate" data-throw-if-not-resolved="false"></xref> with the same values as the specified <code>DateTime</code>.
    content.vb: Public Shared Function FromDateTime(dateTime As Date) As LocalDate
  overload: NodaTime.LocalDate.FromDateTime*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: NodaTime.LocalDate.FromDateTime(System.DateTime,NodaTime.CalendarSystem)
  commentId: M:NodaTime.LocalDate.FromDateTime(System.DateTime,NodaTime.CalendarSystem)
  id: FromDateTime(System.DateTime,NodaTime.CalendarSystem)
  parent: NodaTime.LocalDate
  langs:
  - csharp
  - vb
  name: FromDateTime(DateTime, CalendarSystem)
  nameWithType: LocalDate.FromDateTime(DateTime, CalendarSystem)
  fullName: NodaTime.LocalDate.FromDateTime(System.DateTime, NodaTime.CalendarSystem)
  type: Method
  source:
    remote:
      path: 2.3.x/src/NodaTime/LocalDate.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: FromDateTime
    path: src/NodaTime/LocalDate.cs
    startLine: 236
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nConverts a <xref href=\"System.DateTime\" data-throw-if-not-resolved=\"false\"></xref> of any kind to a LocalDate in the specified calendar, ignoring the time of day.\nThis does not perform any time zone conversions, so a DateTime with a <xref href=\"System.DateTime.Kind\" data-throw-if-not-resolved=\"false\"></xref> of\n<xref href=\"System.DateTimeKind.Utc\" data-throw-if-not-resolved=\"false\"></xref> will still represent the same year/month/day - it won&apos;t be converted into the local system time.\n"
  example: []
  syntax:
    content: public static LocalDate FromDateTime(DateTime dateTime, CalendarSystem calendar)
    parameters:
    - id: dateTime
      type: System.DateTime
      description: Value to convert into a Noda Time local date
    - id: calendar
      type: NodaTime.CalendarSystem
      description: The calendar system to convert into
    return:
      type: NodaTime.LocalDate
      description: A new <xref href="NodaTime.LocalDate" data-throw-if-not-resolved="false"></xref> with the same values as the specified <code>DateTime</code>.
    content.vb: Public Shared Function FromDateTime(dateTime As Date, calendar As CalendarSystem) As LocalDate
  overload: NodaTime.LocalDate.FromDateTime*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: NodaTime.LocalDate.FromWeekYearWeekAndDay(System.Int32,System.Int32,NodaTime.IsoDayOfWeek)
  commentId: M:NodaTime.LocalDate.FromWeekYearWeekAndDay(System.Int32,System.Int32,NodaTime.IsoDayOfWeek)
  id: FromWeekYearWeekAndDay(System.Int32,System.Int32,NodaTime.IsoDayOfWeek)
  parent: NodaTime.LocalDate
  langs:
  - csharp
  - vb
  name: FromWeekYearWeekAndDay(Int32, Int32, IsoDayOfWeek)
  nameWithType: LocalDate.FromWeekYearWeekAndDay(Int32, Int32, IsoDayOfWeek)
  fullName: NodaTime.LocalDate.FromWeekYearWeekAndDay(System.Int32, System.Int32, NodaTime.IsoDayOfWeek)
  type: Method
  source:
    remote:
      path: 2.3.x/src/NodaTime/LocalDate.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: FromWeekYearWeekAndDay
    path: src/NodaTime/LocalDate.cs
    startLine: 250
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nReturns the local date corresponding to the given &quot;week year&quot;, &quot;week of week year&quot;, and &quot;day of week&quot;\nin the ISO calendar system, using the ISO week-year rules.\n"
  example: []
  syntax:
    content: public static LocalDate FromWeekYearWeekAndDay(int weekYear, int weekOfWeekYear, IsoDayOfWeek dayOfWeek)
    parameters:
    - id: weekYear
      type: System.Int32
      description: ISO-8601 week year of value to return
    - id: weekOfWeekYear
      type: System.Int32
      description: ISO-8601 week of week year of value to return
    - id: dayOfWeek
      type: NodaTime.IsoDayOfWeek
      description: ISO-8601 day of week to return
    return:
      type: NodaTime.LocalDate
      description: The date corresponding to the given week year / week of week year / day of week.
    content.vb: Public Shared Function FromWeekYearWeekAndDay(weekYear As Integer, weekOfWeekYear As Integer, dayOfWeek As IsoDayOfWeek) As LocalDate
  overload: NodaTime.LocalDate.FromWeekYearWeekAndDay*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: NodaTime.LocalDate.FromYearMonthWeekAndDay(System.Int32,System.Int32,System.Int32,NodaTime.IsoDayOfWeek)
  commentId: M:NodaTime.LocalDate.FromYearMonthWeekAndDay(System.Int32,System.Int32,System.Int32,NodaTime.IsoDayOfWeek)
  id: FromYearMonthWeekAndDay(System.Int32,System.Int32,System.Int32,NodaTime.IsoDayOfWeek)
  parent: NodaTime.LocalDate
  langs:
  - csharp
  - vb
  name: FromYearMonthWeekAndDay(Int32, Int32, Int32, IsoDayOfWeek)
  nameWithType: LocalDate.FromYearMonthWeekAndDay(Int32, Int32, Int32, IsoDayOfWeek)
  fullName: NodaTime.LocalDate.FromYearMonthWeekAndDay(System.Int32, System.Int32, System.Int32, NodaTime.IsoDayOfWeek)
  type: Method
  source:
    remote:
      path: 2.3.x/src/NodaTime/LocalDate.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: FromYearMonthWeekAndDay
    path: src/NodaTime/LocalDate.cs
    startLine: 270
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nReturns the local date corresponding to a particular occurrence of a day-of-week\nwithin a year and month. For example, this method can be used to ask for &quot;the third Monday in April 2012&quot;.\n"
  remarks: "\nThe returned date is always in the ISO calendar. This method is unrelated to week-years and any rules for\n&quot;business weeks&quot; and the like - if a month begins on a Friday, then asking for the first Friday will give\nthat day, for example.\n"
  example: []
  syntax:
    content: public static LocalDate FromYearMonthWeekAndDay(int year, int month, int occurrence, IsoDayOfWeek dayOfWeek)
    parameters:
    - id: year
      type: System.Int32
      description: The year of the value to return.
    - id: month
      type: System.Int32
      description: The month of the value to return.
    - id: occurrence
      type: System.Int32
      description: >-
        The occurrence of the value to return, which must be in the range [1, 5]. The value 5 can

        be used to always return the last occurrence of the specified day-of-week, even if there are only 4

        occurrences of that day-of-week in the month.
    - id: dayOfWeek
      type: NodaTime.IsoDayOfWeek
      description: The day-of-week of the value to return.
    return:
      type: NodaTime.LocalDate
      description: >-
        The date corresponding to the given year and month, on the given occurrence of the

        given day of week.
    content.vb: Public Shared Function FromYearMonthWeekAndDay(year As Integer, month As Integer, occurrence As Integer, dayOfWeek As IsoDayOfWeek) As LocalDate
  overload: NodaTime.LocalDate.FromYearMonthWeekAndDay*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: NodaTime.LocalDate.op_Addition(NodaTime.LocalDate,NodaTime.Period)
  commentId: M:NodaTime.LocalDate.op_Addition(NodaTime.LocalDate,NodaTime.Period)
  id: op_Addition(NodaTime.LocalDate,NodaTime.Period)
  parent: NodaTime.LocalDate
  langs:
  - csharp
  - vb
  name: Addition(LocalDate, Period)
  nameWithType: LocalDate.Addition(LocalDate, Period)
  fullName: NodaTime.LocalDate.Addition(NodaTime.LocalDate, NodaTime.Period)
  type: Operator
  source:
    remote:
      path: 2.3.x/src/NodaTime/LocalDate.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: op_Addition
    path: src/NodaTime/LocalDate.cs
    startLine: 298
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nAdds the specified period to the date.\nFields are added in descending order of significance (years first, then months, and so on).\n"
  example: []
  syntax:
    content: public static LocalDate operator +(LocalDate date, Period period)
    parameters:
    - id: date
      type: NodaTime.LocalDate
      description: The date to add the period to
    - id: period
      type: NodaTime.Period
      description: The period to add. Must not contain any (non-zero) time units.
    return:
      type: NodaTime.LocalDate
      description: The sum of the given date and period
    content.vb: Public Shared Operator +(date As LocalDate, period As Period) As LocalDate
  overload: NodaTime.LocalDate.op_Addition*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: NodaTime.LocalDate.Add(NodaTime.LocalDate,NodaTime.Period)
  commentId: M:NodaTime.LocalDate.Add(NodaTime.LocalDate,NodaTime.Period)
  id: Add(NodaTime.LocalDate,NodaTime.Period)
  parent: NodaTime.LocalDate
  langs:
  - csharp
  - vb
  name: Add(LocalDate, Period)
  nameWithType: LocalDate.Add(LocalDate, Period)
  fullName: NodaTime.LocalDate.Add(NodaTime.LocalDate, NodaTime.Period)
  type: Method
  source:
    remote:
      path: 2.3.x/src/NodaTime/LocalDate.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: Add
    path: src/NodaTime/LocalDate.cs
    startLine: 313
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nAdds the specified period to the date.\nFields are added in descending order of significance (years first, then months, and so on).\nFriendly alternative to <code>operator+()</code>.\n"
  example: []
  syntax:
    content: public static LocalDate Add(LocalDate date, Period period)
    parameters:
    - id: date
      type: NodaTime.LocalDate
      description: The date to add the period to
    - id: period
      type: NodaTime.Period
      description: The period to add. Must not contain any (non-zero) time units.
    return:
      type: NodaTime.LocalDate
      description: The sum of the given date and period
    content.vb: Public Shared Function Add(date As LocalDate, period As Period) As LocalDate
  overload: NodaTime.LocalDate.Add*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: NodaTime.LocalDate.Plus(NodaTime.Period)
  commentId: M:NodaTime.LocalDate.Plus(NodaTime.Period)
  id: Plus(NodaTime.Period)
  parent: NodaTime.LocalDate
  langs:
  - csharp
  - vb
  name: Plus(Period)
  nameWithType: LocalDate.Plus(Period)
  fullName: NodaTime.LocalDate.Plus(NodaTime.Period)
  type: Method
  source:
    remote:
      path: 2.3.x/src/NodaTime/LocalDate.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: Plus
    path: src/NodaTime/LocalDate.cs
    startLine: 322
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nAdds the specified period to this date.\nFields are added in descending order of significance (years first, then months, and so on).\nFluent alternative to <code>operator+()</code>.\n"
  example: []
  syntax:
    content: public LocalDate Plus(Period period)
    parameters:
    - id: period
      type: NodaTime.Period
      description: The period to add. Must not contain any (non-zero) time units.
    return:
      type: NodaTime.LocalDate
      description: The sum of this date and the given period
    content.vb: Public Function Plus(period As Period) As LocalDate
  overload: NodaTime.LocalDate.Plus*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: NodaTime.LocalDate.op_Addition(NodaTime.LocalDate,NodaTime.LocalTime)
  commentId: M:NodaTime.LocalDate.op_Addition(NodaTime.LocalDate,NodaTime.LocalTime)
  id: op_Addition(NodaTime.LocalDate,NodaTime.LocalTime)
  parent: NodaTime.LocalDate
  langs:
  - csharp
  - vb
  name: Addition(LocalDate, LocalTime)
  nameWithType: LocalDate.Addition(LocalDate, LocalTime)
  fullName: NodaTime.LocalDate.Addition(NodaTime.LocalDate, NodaTime.LocalTime)
  type: Operator
  source:
    remote:
      path: 2.3.x/src/NodaTime/LocalDate.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: op_Addition
    path: src/NodaTime/LocalDate.cs
    startLine: 332
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nCombines the given <xref href=\"NodaTime.LocalDate\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"NodaTime.LocalTime\" data-throw-if-not-resolved=\"false\"></xref> components\ninto a single <xref href=\"NodaTime.LocalDateTime\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public static LocalDateTime operator +(LocalDate date, LocalTime time)
    parameters:
    - id: date
      type: NodaTime.LocalDate
      description: The date to add the time to
    - id: time
      type: NodaTime.LocalTime
      description: The time to add
    return:
      type: NodaTime.LocalDateTime
      description: The sum of the given date and time
    content.vb: Public Shared Operator +(date As LocalDate, time As LocalTime) As LocalDateTime
  overload: NodaTime.LocalDate.op_Addition*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: NodaTime.LocalDate.op_Subtraction(NodaTime.LocalDate,NodaTime.Period)
  commentId: M:NodaTime.LocalDate.op_Subtraction(NodaTime.LocalDate,NodaTime.Period)
  id: op_Subtraction(NodaTime.LocalDate,NodaTime.Period)
  parent: NodaTime.LocalDate
  langs:
  - csharp
  - vb
  name: Subtraction(LocalDate, Period)
  nameWithType: LocalDate.Subtraction(LocalDate, Period)
  fullName: NodaTime.LocalDate.Subtraction(NodaTime.LocalDate, NodaTime.Period)
  type: Operator
  source:
    remote:
      path: 2.3.x/src/NodaTime/LocalDate.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: op_Subtraction
    path: src/NodaTime/LocalDate.cs
    startLine: 342
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nSubtracts the specified period from the date.\nFields are subtracted in descending order of significance (years first, then months, and so on).\nThis is a convenience operator over the <xref href=\"NodaTime.LocalDate.Minus(NodaTime.Period)\" data-throw-if-not-resolved=\"false\"></xref> method.\n"
  example: []
  syntax:
    content: public static LocalDate operator -(LocalDate date, Period period)
    parameters:
    - id: date
      type: NodaTime.LocalDate
      description: The date to subtract the period from
    - id: period
      type: NodaTime.Period
      description: The period to subtract. Must not contain any (non-zero) time units.
    return:
      type: NodaTime.LocalDate
      description: The result of subtracting the given period from the date
    content.vb: Public Shared Operator -(date As LocalDate, period As Period) As LocalDate
  overload: NodaTime.LocalDate.op_Subtraction*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: NodaTime.LocalDate.Subtract(NodaTime.LocalDate,NodaTime.Period)
  commentId: M:NodaTime.LocalDate.Subtract(NodaTime.LocalDate,NodaTime.Period)
  id: Subtract(NodaTime.LocalDate,NodaTime.Period)
  parent: NodaTime.LocalDate
  langs:
  - csharp
  - vb
  name: Subtract(LocalDate, Period)
  nameWithType: LocalDate.Subtract(LocalDate, Period)
  fullName: NodaTime.LocalDate.Subtract(NodaTime.LocalDate, NodaTime.Period)
  type: Method
  source:
    remote:
      path: 2.3.x/src/NodaTime/LocalDate.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: Subtract
    path: src/NodaTime/LocalDate.cs
    startLine: 357
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nSubtracts the specified period from the date.\nFields are subtracted in descending order of significance (years first, then months, and so on).\nFriendly alternative to <code>operator-()</code>.\n"
  example: []
  syntax:
    content: public static LocalDate Subtract(LocalDate date, Period period)
    parameters:
    - id: date
      type: NodaTime.LocalDate
      description: The date to subtract the period from
    - id: period
      type: NodaTime.Period
      description: The period to subtract. Must not contain any (non-zero) time units.
    return:
      type: NodaTime.LocalDate
      description: The result of subtracting the given period from the date.
    content.vb: Public Shared Function Subtract(date As LocalDate, period As Period) As LocalDate
  overload: NodaTime.LocalDate.Subtract*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: NodaTime.LocalDate.Minus(NodaTime.Period)
  commentId: M:NodaTime.LocalDate.Minus(NodaTime.Period)
  id: Minus(NodaTime.Period)
  parent: NodaTime.LocalDate
  langs:
  - csharp
  - vb
  name: Minus(Period)
  nameWithType: LocalDate.Minus(Period)
  fullName: NodaTime.LocalDate.Minus(NodaTime.Period)
  type: Method
  source:
    remote:
      path: 2.3.x/src/NodaTime/LocalDate.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: Minus
    path: src/NodaTime/LocalDate.cs
    startLine: 366
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nSubtracts the specified period from this date.\nFields are subtracted in descending order of significance (years first, then months, and so on).\nFluent alternative to <code>operator-()</code>.\n"
  example: []
  syntax:
    content: public LocalDate Minus(Period period)
    parameters:
    - id: period
      type: NodaTime.Period
      description: The period to subtract. Must not contain any (non-zero) time units.
    return:
      type: NodaTime.LocalDate
      description: The result of subtracting the given period from this date.
    content.vb: Public Function Minus(period As Period) As LocalDate
  overload: NodaTime.LocalDate.Minus*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: NodaTime.LocalDate.op_Subtraction(NodaTime.LocalDate,NodaTime.LocalDate)
  commentId: M:NodaTime.LocalDate.op_Subtraction(NodaTime.LocalDate,NodaTime.LocalDate)
  id: op_Subtraction(NodaTime.LocalDate,NodaTime.LocalDate)
  parent: NodaTime.LocalDate
  langs:
  - csharp
  - vb
  name: Subtraction(LocalDate, LocalDate)
  nameWithType: LocalDate.Subtraction(LocalDate, LocalDate)
  fullName: NodaTime.LocalDate.Subtraction(NodaTime.LocalDate, NodaTime.LocalDate)
  type: Operator
  source:
    remote:
      path: 2.3.x/src/NodaTime/LocalDate.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: op_Subtraction
    path: src/NodaTime/LocalDate.cs
    startLine: 382
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nSubtracts one date from another, returning the result as a <xref href=\"NodaTime.Period\" data-throw-if-not-resolved=\"false\"></xref> with units of years, months and days.\n"
  remarks: "\nThis is simply a convenience operator for calling <xref href=\"NodaTime.Period.Between(NodaTime.LocalDate%2cNodaTime.LocalDate)\" data-throw-if-not-resolved=\"false\"></xref>.\nThe calendar systems of the two dates must be the same; an exception will be thrown otherwise.\n"
  example: []
  syntax:
    content: public static Period operator -(LocalDate lhs, LocalDate rhs)
    parameters:
    - id: lhs
      type: NodaTime.LocalDate
      description: The date to subtract from
    - id: rhs
      type: NodaTime.LocalDate
      description: The date to subtract
    return:
      type: NodaTime.Period
      description: The result of subtracting one date from another.
    content.vb: Public Shared Operator -(lhs As LocalDate, rhs As LocalDate) As Period
  overload: NodaTime.LocalDate.op_Subtraction*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<code data-dev-comment-type=\"paramref\" class=\"paramref\">lhs</code> and <code data-dev-comment-type=\"paramref\" class=\"paramref\">rhs</code> are not in the same calendar system.\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: NodaTime.LocalDate.Subtract(NodaTime.LocalDate,NodaTime.LocalDate)
  commentId: M:NodaTime.LocalDate.Subtract(NodaTime.LocalDate,NodaTime.LocalDate)
  id: Subtract(NodaTime.LocalDate,NodaTime.LocalDate)
  parent: NodaTime.LocalDate
  langs:
  - csharp
  - vb
  name: Subtract(LocalDate, LocalDate)
  nameWithType: LocalDate.Subtract(LocalDate, LocalDate)
  fullName: NodaTime.LocalDate.Subtract(NodaTime.LocalDate, NodaTime.LocalDate)
  type: Method
  source:
    remote:
      path: 2.3.x/src/NodaTime/LocalDate.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: Subtract
    path: src/NodaTime/LocalDate.cs
    startLine: 394
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nSubtracts one date from another, returning the result as a <xref href=\"NodaTime.Period\" data-throw-if-not-resolved=\"false\"></xref> with units of years, months and days.\n"
  remarks: "\nThis is simply a convenience method for calling <xref href=\"NodaTime.Period.Between(NodaTime.LocalDate%2cNodaTime.LocalDate)\" data-throw-if-not-resolved=\"false\"></xref>.\nThe calendar systems of the two dates must be the same.\n"
  example: []
  syntax:
    content: public static Period Subtract(LocalDate lhs, LocalDate rhs)
    parameters:
    - id: lhs
      type: NodaTime.LocalDate
      description: The date to subtract from
    - id: rhs
      type: NodaTime.LocalDate
      description: The date to subtract
    return:
      type: NodaTime.Period
      description: The result of subtracting one date from another.
    content.vb: Public Shared Function Subtract(lhs As LocalDate, rhs As LocalDate) As Period
  overload: NodaTime.LocalDate.Subtract*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: NodaTime.LocalDate.Minus(NodaTime.LocalDate)
  commentId: M:NodaTime.LocalDate.Minus(NodaTime.LocalDate)
  id: Minus(NodaTime.LocalDate)
  parent: NodaTime.LocalDate
  langs:
  - csharp
  - vb
  name: Minus(LocalDate)
  nameWithType: LocalDate.Minus(LocalDate)
  fullName: NodaTime.LocalDate.Minus(NodaTime.LocalDate)
  type: Method
  source:
    remote:
      path: 2.3.x/src/NodaTime/LocalDate.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: Minus
    path: src/NodaTime/LocalDate.cs
    startLine: 403
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nSubtracts the specified date from this date, returning the result as a <xref href=\"NodaTime.Period\" data-throw-if-not-resolved=\"false\"></xref> with units of years, months and days.\nFluent alternative to <code>operator-()</code>.\n"
  remarks: The specified date must be in the same calendar system as this.
  example: []
  syntax:
    content: public Period Minus(LocalDate date)
    parameters:
    - id: date
      type: NodaTime.LocalDate
      description: The date to subtract from this
    return:
      type: NodaTime.Period
      description: The difference between the specified date and this one
    content.vb: Public Function Minus(date As LocalDate) As Period
  overload: NodaTime.LocalDate.Minus*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: NodaTime.LocalDate.op_Equality(NodaTime.LocalDate,NodaTime.LocalDate)
  commentId: M:NodaTime.LocalDate.op_Equality(NodaTime.LocalDate,NodaTime.LocalDate)
  id: op_Equality(NodaTime.LocalDate,NodaTime.LocalDate)
  parent: NodaTime.LocalDate
  langs:
  - csharp
  - vb
  name: Equality(LocalDate, LocalDate)
  nameWithType: LocalDate.Equality(LocalDate, LocalDate)
  fullName: NodaTime.LocalDate.Equality(NodaTime.LocalDate, NodaTime.LocalDate)
  type: Operator
  source:
    remote:
      path: 2.3.x/src/NodaTime/LocalDate.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: op_Equality
    path: src/NodaTime/LocalDate.cs
    startLine: 412
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nCompares two <xref href=\"NodaTime.LocalDate\" data-throw-if-not-resolved=\"false\"></xref> values for equality. This requires\nthat the dates be the same, within the same calendar.\n"
  example: []
  syntax:
    content: public static bool operator ==(LocalDate lhs, LocalDate rhs)
    parameters:
    - id: lhs
      type: NodaTime.LocalDate
      description: The first value to compare
    - id: rhs
      type: NodaTime.LocalDate
      description: The second value to compare
    return:
      type: System.Boolean
      description: True if the two dates are the same and in the same calendar; false otherwise
    content.vb: Public Shared Operator =(lhs As LocalDate, rhs As LocalDate) As Boolean
  overload: NodaTime.LocalDate.op_Equality*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: NodaTime.LocalDate.op_Inequality(NodaTime.LocalDate,NodaTime.LocalDate)
  commentId: M:NodaTime.LocalDate.op_Inequality(NodaTime.LocalDate,NodaTime.LocalDate)
  id: op_Inequality(NodaTime.LocalDate,NodaTime.LocalDate)
  parent: NodaTime.LocalDate
  langs:
  - csharp
  - vb
  name: Inequality(LocalDate, LocalDate)
  nameWithType: LocalDate.Inequality(LocalDate, LocalDate)
  fullName: NodaTime.LocalDate.Inequality(NodaTime.LocalDate, NodaTime.LocalDate)
  type: Operator
  source:
    remote:
      path: 2.3.x/src/NodaTime/LocalDate.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: op_Inequality
    path: src/NodaTime/LocalDate.cs
    startLine: 420
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nCompares two <xref href=\"NodaTime.LocalDate\" data-throw-if-not-resolved=\"false\"></xref> values for inequality.\n"
  example: []
  syntax:
    content: public static bool operator !=(LocalDate lhs, LocalDate rhs)
    parameters:
    - id: lhs
      type: NodaTime.LocalDate
      description: The first value to compare
    - id: rhs
      type: NodaTime.LocalDate
      description: The second value to compare
    return:
      type: System.Boolean
      description: False if the two dates are the same and in the same calendar; true otherwise
    content.vb: Public Shared Operator <>(lhs As LocalDate, rhs As LocalDate) As Boolean
  overload: NodaTime.LocalDate.op_Inequality*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: NodaTime.LocalDate.op_LessThan(NodaTime.LocalDate,NodaTime.LocalDate)
  commentId: M:NodaTime.LocalDate.op_LessThan(NodaTime.LocalDate,NodaTime.LocalDate)
  id: op_LessThan(NodaTime.LocalDate,NodaTime.LocalDate)
  parent: NodaTime.LocalDate
  langs:
  - csharp
  - vb
  name: LessThan(LocalDate, LocalDate)
  nameWithType: LocalDate.LessThan(LocalDate, LocalDate)
  fullName: NodaTime.LocalDate.LessThan(NodaTime.LocalDate, NodaTime.LocalDate)
  type: Operator
  source:
    remote:
      path: 2.3.x/src/NodaTime/LocalDate.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: op_LessThan
    path: src/NodaTime/LocalDate.cs
    startLine: 438
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nCompares two dates to see if the left one is strictly earlier than the right\none.\n"
  remarks: "\nOnly dates with the same calendar system can be compared. See the top-level type\ndocumentation for more information about comparisons.\n"
  example: []
  syntax:
    content: public static bool operator <(LocalDate lhs, LocalDate rhs)
    parameters:
    - id: lhs
      type: NodaTime.LocalDate
      description: First operand of the comparison
    - id: rhs
      type: NodaTime.LocalDate
      description: Second operand of the comparison
    return:
      type: System.Boolean
      description: true if the <code data-dev-comment-type="paramref" class="paramref">lhs</code> is strictly earlier than <code data-dev-comment-type="paramref" class="paramref">rhs</code>, false otherwise.
    content.vb: Public Shared Operator <(lhs As LocalDate, rhs As LocalDate) As Boolean
  overload: NodaTime.LocalDate.op_LessThan*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: >-
      The calendar system of <code data-dev-comment-type="paramref" class="paramref">rhs</code> is not the same

      as the calendar of <code data-dev-comment-type="paramref" class="paramref">lhs</code>.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: NodaTime.LocalDate.op_LessThanOrEqual(NodaTime.LocalDate,NodaTime.LocalDate)
  commentId: M:NodaTime.LocalDate.op_LessThanOrEqual(NodaTime.LocalDate,NodaTime.LocalDate)
  id: op_LessThanOrEqual(NodaTime.LocalDate,NodaTime.LocalDate)
  parent: NodaTime.LocalDate
  langs:
  - csharp
  - vb
  name: LessThanOrEqual(LocalDate, LocalDate)
  nameWithType: LocalDate.LessThanOrEqual(LocalDate, LocalDate)
  fullName: NodaTime.LocalDate.LessThanOrEqual(NodaTime.LocalDate, NodaTime.LocalDate)
  type: Operator
  source:
    remote:
      path: 2.3.x/src/NodaTime/LocalDate.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: op_LessThanOrEqual
    path: src/NodaTime/LocalDate.cs
    startLine: 457
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nCompares two dates to see if the left one is earlier than or equal to the right\none.\n"
  remarks: "\nOnly dates with the same calendar system can be compared. See the top-level type\ndocumentation for more information about comparisons.\n"
  example: []
  syntax:
    content: public static bool operator <=(LocalDate lhs, LocalDate rhs)
    parameters:
    - id: lhs
      type: NodaTime.LocalDate
      description: First operand of the comparison
    - id: rhs
      type: NodaTime.LocalDate
      description: Second operand of the comparison
    return:
      type: System.Boolean
      description: true if the <code data-dev-comment-type="paramref" class="paramref">lhs</code> is earlier than or equal to <code data-dev-comment-type="paramref" class="paramref">rhs</code>, false otherwise.
    content.vb: Public Shared Operator <=(lhs As LocalDate, rhs As LocalDate) As Boolean
  overload: NodaTime.LocalDate.op_LessThanOrEqual*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: >-
      The calendar system of <code data-dev-comment-type="paramref" class="paramref">rhs</code> is not the same

      as the calendar of <code data-dev-comment-type="paramref" class="paramref">lhs</code>.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: NodaTime.LocalDate.op_GreaterThan(NodaTime.LocalDate,NodaTime.LocalDate)
  commentId: M:NodaTime.LocalDate.op_GreaterThan(NodaTime.LocalDate,NodaTime.LocalDate)
  id: op_GreaterThan(NodaTime.LocalDate,NodaTime.LocalDate)
  parent: NodaTime.LocalDate
  langs:
  - csharp
  - vb
  name: GreaterThan(LocalDate, LocalDate)
  nameWithType: LocalDate.GreaterThan(LocalDate, LocalDate)
  fullName: NodaTime.LocalDate.GreaterThan(NodaTime.LocalDate, NodaTime.LocalDate)
  type: Operator
  source:
    remote:
      path: 2.3.x/src/NodaTime/LocalDate.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: op_GreaterThan
    path: src/NodaTime/LocalDate.cs
    startLine: 476
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nCompares two dates to see if the left one is strictly later than the right\none.\n"
  remarks: "\nOnly dates with the same calendar system can be compared. See the top-level type\ndocumentation for more information about comparisons.\n"
  example: []
  syntax:
    content: public static bool operator>(LocalDate lhs, LocalDate rhs)
    parameters:
    - id: lhs
      type: NodaTime.LocalDate
      description: First operand of the comparison
    - id: rhs
      type: NodaTime.LocalDate
      description: Second operand of the comparison
    return:
      type: System.Boolean
      description: true if the <code data-dev-comment-type="paramref" class="paramref">lhs</code> is strictly later than <code data-dev-comment-type="paramref" class="paramref">rhs</code>, false otherwise.
    content.vb: Public Shared Operator>(lhs As LocalDate, rhs As LocalDate) As Boolean
  overload: NodaTime.LocalDate.op_GreaterThan*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: >-
      The calendar system of <code data-dev-comment-type="paramref" class="paramref">rhs</code> is not the same

      as the calendar of <code data-dev-comment-type="paramref" class="paramref">lhs</code>.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: NodaTime.LocalDate.op_GreaterThanOrEqual(NodaTime.LocalDate,NodaTime.LocalDate)
  commentId: M:NodaTime.LocalDate.op_GreaterThanOrEqual(NodaTime.LocalDate,NodaTime.LocalDate)
  id: op_GreaterThanOrEqual(NodaTime.LocalDate,NodaTime.LocalDate)
  parent: NodaTime.LocalDate
  langs:
  - csharp
  - vb
  name: GreaterThanOrEqual(LocalDate, LocalDate)
  nameWithType: LocalDate.GreaterThanOrEqual(LocalDate, LocalDate)
  fullName: NodaTime.LocalDate.GreaterThanOrEqual(NodaTime.LocalDate, NodaTime.LocalDate)
  type: Operator
  source:
    remote:
      path: 2.3.x/src/NodaTime/LocalDate.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: op_GreaterThanOrEqual
    path: src/NodaTime/LocalDate.cs
    startLine: 495
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nCompares two dates to see if the left one is later than or equal to the right\none.\n"
  remarks: "\nOnly dates with the same calendar system can be compared. See the top-level type\ndocumentation for more information about comparisons.\n"
  example: []
  syntax:
    content: public static bool operator >=(LocalDate lhs, LocalDate rhs)
    parameters:
    - id: lhs
      type: NodaTime.LocalDate
      description: First operand of the comparison
    - id: rhs
      type: NodaTime.LocalDate
      description: Second operand of the comparison
    return:
      type: System.Boolean
      description: true if the <code data-dev-comment-type="paramref" class="paramref">lhs</code> is later than or equal to <code data-dev-comment-type="paramref" class="paramref">rhs</code>, false otherwise.
    content.vb: Public Shared Operator >=(lhs As LocalDate, rhs As LocalDate) As Boolean
  overload: NodaTime.LocalDate.op_GreaterThanOrEqual*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: >-
      The calendar system of <code data-dev-comment-type="paramref" class="paramref">rhs</code> is not the same

      as the calendar of <code data-dev-comment-type="paramref" class="paramref">lhs</code>.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: NodaTime.LocalDate.CompareTo(NodaTime.LocalDate)
  commentId: M:NodaTime.LocalDate.CompareTo(NodaTime.LocalDate)
  id: CompareTo(NodaTime.LocalDate)
  parent: NodaTime.LocalDate
  langs:
  - csharp
  - vb
  name: CompareTo(LocalDate)
  nameWithType: LocalDate.CompareTo(LocalDate)
  fullName: NodaTime.LocalDate.CompareTo(NodaTime.LocalDate)
  type: Method
  source:
    remote:
      path: 2.3.x/src/NodaTime/LocalDate.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: CompareTo
    path: src/NodaTime/LocalDate.cs
    startLine: 516
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nIndicates whether this date is earlier, later or the same as another one.\n"
  remarks: "\nOnly dates within the same calendar systems can be compared with this method. Attempting to compare\ndates within different calendars will fail with an <xref href=\"System.ArgumentException\" data-throw-if-not-resolved=\"false\"></xref>. Ideally, comparisons\nbetween values in different calendars would be a compile-time failure, but failing at execution time\nis almost always preferable to continuing.\n"
  example: []
  syntax:
    content: public int CompareTo(LocalDate other)
    parameters:
    - id: other
      type: NodaTime.LocalDate
      description: The other date to compare this one with
    return:
      type: System.Int32
      description: >-
        A value less than zero if this date is earlier than <code data-dev-comment-type="paramref" class="paramref">other</code>;

        zero if this date is the same as <code data-dev-comment-type="paramref" class="paramref">other</code>; a value greater than zero if this date is

        later than <code data-dev-comment-type="paramref" class="paramref">other</code>.
    content.vb: Public Function CompareTo(other As LocalDate) As Integer
  overload: NodaTime.LocalDate.CompareTo*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: >-
      The calendar system of <code data-dev-comment-type="paramref" class="paramref">other</code> is not the

      same as the calendar system of this value.
  implements:
  - System.IComparable{NodaTime.LocalDate}.CompareTo(NodaTime.LocalDate)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: NodaTime.LocalDate.System#IComparable#CompareTo(System.Object)
  commentId: M:NodaTime.LocalDate.System#IComparable#CompareTo(System.Object)
  id: System#IComparable#CompareTo(System.Object)
  isEii: true
  parent: NodaTime.LocalDate
  langs:
  - csharp
  - vb
  name: IComparable.CompareTo(Object)
  nameWithType: LocalDate.IComparable.CompareTo(Object)
  fullName: NodaTime.LocalDate.System.IComparable.CompareTo(System.Object)
  type: Method
  source:
    remote:
      path: 2.3.x/src/NodaTime/LocalDate.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: System.IComparable.CompareTo
    path: src/NodaTime/LocalDate.cs
    startLine: 534
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nImplementation of <xref href=\"System.IComparable.CompareTo(System.Object)\" data-throw-if-not-resolved=\"false\"></xref> to compare two LocalDates.\n"
  remarks: "\nThis uses explicit interface implementation to avoid it being called accidentally. The generic implementation should usually be preferred.\n"
  example: []
  syntax:
    content: int IComparable.CompareTo(object obj)
    parameters:
    - id: obj
      type: System.Object
      description: The object to compare this value with.
    return:
      type: System.Int32
      description: >
        The result of comparing this LocalDate with another one; see <xref href="NodaTime.LocalDate.CompareTo(NodaTime.LocalDate)" data-throw-if-not-resolved="false"></xref> for general details.

        If <code data-dev-comment-type="paramref" class="paramref">obj</code> is null, this method returns a value greater than 0.
    content.vb: Function System.IComparable.CompareTo(obj As Object) As Integer Implements IComparable.CompareTo
  overload: NodaTime.LocalDate.System#IComparable#CompareTo*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: >-
      <code data-dev-comment-type="paramref" class="paramref">obj</code> is non-null but does not refer to an instance of <xref href="NodaTime.LocalDate" data-throw-if-not-resolved="false"></xref>, or refers
          to a date in a different calendar system.
  implements:
  - System.IComparable.CompareTo(System.Object)
  nameWithType.vb: LocalDate.System.IComparable.CompareTo(Object)
  name.vb: System.IComparable.CompareTo(Object)
- uid: NodaTime.LocalDate.Max(NodaTime.LocalDate,NodaTime.LocalDate)
  commentId: M:NodaTime.LocalDate.Max(NodaTime.LocalDate,NodaTime.LocalDate)
  id: Max(NodaTime.LocalDate,NodaTime.LocalDate)
  parent: NodaTime.LocalDate
  langs:
  - csharp
  - vb
  name: Max(LocalDate, LocalDate)
  nameWithType: LocalDate.Max(LocalDate, LocalDate)
  fullName: NodaTime.LocalDate.Max(NodaTime.LocalDate, NodaTime.LocalDate)
  type: Method
  source:
    remote:
      path: 2.3.x/src/NodaTime/LocalDate.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: Max
    path: src/NodaTime/LocalDate.cs
    startLine: 551
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nReturns the later date of the given two.\n"
  example: []
  syntax:
    content: public static LocalDate Max(LocalDate x, LocalDate y)
    parameters:
    - id: x
      type: NodaTime.LocalDate
      description: The first date to compare.
    - id: y
      type: NodaTime.LocalDate
      description: The second date to compare.
    return:
      type: NodaTime.LocalDate
      description: The later date of <code data-dev-comment-type="paramref" class="paramref">x</code> or <code data-dev-comment-type="paramref" class="paramref">y</code>.
    content.vb: Public Shared Function Max(x As LocalDate, y As LocalDate) As LocalDate
  overload: NodaTime.LocalDate.Max*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: The two dates have different calendar systems.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: NodaTime.LocalDate.Min(NodaTime.LocalDate,NodaTime.LocalDate)
  commentId: M:NodaTime.LocalDate.Min(NodaTime.LocalDate,NodaTime.LocalDate)
  id: Min(NodaTime.LocalDate,NodaTime.LocalDate)
  parent: NodaTime.LocalDate
  langs:
  - csharp
  - vb
  name: Min(LocalDate, LocalDate)
  nameWithType: LocalDate.Min(LocalDate, LocalDate)
  fullName: NodaTime.LocalDate.Min(NodaTime.LocalDate, NodaTime.LocalDate)
  type: Method
  source:
    remote:
      path: 2.3.x/src/NodaTime/LocalDate.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: Min
    path: src/NodaTime/LocalDate.cs
    startLine: 564
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nReturns the earlier date of the given two.\n"
  example: []
  syntax:
    content: public static LocalDate Min(LocalDate x, LocalDate y)
    parameters:
    - id: x
      type: NodaTime.LocalDate
      description: The first date to compare.
    - id: y
      type: NodaTime.LocalDate
      description: The second date to compare.
    return:
      type: NodaTime.LocalDate
      description: The earlier date of <code data-dev-comment-type="paramref" class="paramref">x</code> or <code data-dev-comment-type="paramref" class="paramref">y</code>.
    content.vb: Public Shared Function Min(x As LocalDate, y As LocalDate) As LocalDate
  overload: NodaTime.LocalDate.Min*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: The two dates have different calendar systems.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: NodaTime.LocalDate.GetHashCode
  commentId: M:NodaTime.LocalDate.GetHashCode
  id: GetHashCode
  parent: NodaTime.LocalDate
  langs:
  - csharp
  - vb
  name: GetHashCode()
  nameWithType: LocalDate.GetHashCode()
  fullName: NodaTime.LocalDate.GetHashCode()
  type: Method
  source:
    remote:
      path: 2.3.x/src/NodaTime/LocalDate.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: GetHashCode
    path: src/NodaTime/LocalDate.cs
    startLine: 574
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nReturns a hash code for this local date.\n"
  example: []
  syntax:
    content: public override int GetHashCode()
    return:
      type: System.Int32
      description: A hash code for this local date.
    content.vb: Public Overrides Function GetHashCode As Integer
  overridden: System.ValueType.GetHashCode
  overload: NodaTime.LocalDate.GetHashCode*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: NodaTime.LocalDate.Equals(System.Object)
  commentId: M:NodaTime.LocalDate.Equals(System.Object)
  id: Equals(System.Object)
  parent: NodaTime.LocalDate
  langs:
  - csharp
  - vb
  name: Equals(Object)
  nameWithType: LocalDate.Equals(Object)
  fullName: NodaTime.LocalDate.Equals(System.Object)
  type: Method
  source:
    remote:
      path: 2.3.x/src/NodaTime/LocalDate.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: Equals
    path: src/NodaTime/LocalDate.cs
    startLine: 582
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nCompares two <xref href=\"NodaTime.LocalDate\" data-throw-if-not-resolved=\"false\"></xref> values for equality. This requires\nthat the dates be the same, within the same calendar.\n"
  example: []
  syntax:
    content: public override bool Equals(object obj)
    parameters:
    - id: obj
      type: System.Object
      description: The object to compare this date with.
    return:
      type: System.Boolean
      description: True if the given value is another local date equal to this one; false otherwise.
    content.vb: Public Overrides Function Equals(obj As Object) As Boolean
  overridden: System.ValueType.Equals(System.Object)
  overload: NodaTime.LocalDate.Equals*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: NodaTime.LocalDate.Equals(NodaTime.LocalDate)
  commentId: M:NodaTime.LocalDate.Equals(NodaTime.LocalDate)
  id: Equals(NodaTime.LocalDate)
  parent: NodaTime.LocalDate
  langs:
  - csharp
  - vb
  name: Equals(LocalDate)
  nameWithType: LocalDate.Equals(LocalDate)
  fullName: NodaTime.LocalDate.Equals(NodaTime.LocalDate)
  type: Method
  source:
    remote:
      path: 2.3.x/src/NodaTime/LocalDate.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: Equals
    path: src/NodaTime/LocalDate.cs
    startLine: 590
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nCompares two <xref href=\"NodaTime.LocalDate\" data-throw-if-not-resolved=\"false\"></xref> values for equality. This requires\nthat the dates be the same, within the same calendar.\n"
  example: []
  syntax:
    content: public bool Equals(LocalDate other)
    parameters:
    - id: other
      type: NodaTime.LocalDate
      description: The value to compare this date with.
    return:
      type: System.Boolean
      description: True if the given value is another local date equal to this one; false otherwise.
    content.vb: Public Function Equals(other As LocalDate) As Boolean
  overload: NodaTime.LocalDate.Equals*
  implements:
  - System.IEquatable{NodaTime.LocalDate}.Equals(NodaTime.LocalDate)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: NodaTime.LocalDate.AtStartOfDayInZone(NodaTime.DateTimeZone)
  commentId: M:NodaTime.LocalDate.AtStartOfDayInZone(NodaTime.DateTimeZone)
  id: AtStartOfDayInZone(NodaTime.DateTimeZone)
  parent: NodaTime.LocalDate
  langs:
  - csharp
  - vb
  name: AtStartOfDayInZone(DateTimeZone)
  nameWithType: LocalDate.AtStartOfDayInZone(DateTimeZone)
  fullName: NodaTime.LocalDate.AtStartOfDayInZone(NodaTime.DateTimeZone)
  type: Method
  source:
    remote:
      path: 2.3.x/src/NodaTime/LocalDate.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: AtStartOfDayInZone
    path: src/NodaTime/LocalDate.cs
    startLine: 603
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nResolves this local date into a <xref href=\"NodaTime.ZonedDateTime\" data-throw-if-not-resolved=\"false\"></xref> in the given time zone representing the\nstart of this date in the given zone.\n"
  remarks: "\nThis is a convenience method for calling <xref href=\"NodaTime.DateTimeZone.AtStartOfDay(NodaTime.LocalDate)\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public ZonedDateTime AtStartOfDayInZone(DateTimeZone zone)
    parameters:
    - id: zone
      type: NodaTime.DateTimeZone
      description: The time zone to map this local date into
    return:
      type: NodaTime.ZonedDateTime
      description: The <xref href="NodaTime.ZonedDateTime" data-throw-if-not-resolved="false"></xref> representing the earliest time on this date, in the given time zone.
    content.vb: Public Function AtStartOfDayInZone(zone As DateTimeZone) As ZonedDateTime
  overload: NodaTime.LocalDate.AtStartOfDayInZone*
  exceptions:
  - type: NodaTime.SkippedTimeException
    commentId: T:NodaTime.SkippedTimeException
    description: >-
      The entire day was skipped due to a very large time zone transition.

      (This is extremely rare.)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: NodaTime.LocalDate.WithCalendar(NodaTime.CalendarSystem)
  commentId: M:NodaTime.LocalDate.WithCalendar(NodaTime.CalendarSystem)
  id: WithCalendar(NodaTime.CalendarSystem)
  parent: NodaTime.LocalDate
  langs:
  - csharp
  - vb
  name: WithCalendar(CalendarSystem)
  nameWithType: LocalDate.WithCalendar(CalendarSystem)
  fullName: NodaTime.LocalDate.WithCalendar(NodaTime.CalendarSystem)
  type: Method
  source:
    remote:
      path: 2.3.x/src/NodaTime/LocalDate.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: WithCalendar
    path: src/NodaTime/LocalDate.cs
    startLine: 617
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nCreates a new LocalDate representing the same physical date, but in a different calendar.\nThe returned LocalDate is likely to have different field values to this one.\nFor example, January 1st 1970 in the Gregorian calendar was December 19th 1969 in the Julian calendar.\n"
  example: []
  syntax:
    content: public LocalDate WithCalendar(CalendarSystem calendar)
    parameters:
    - id: calendar
      type: NodaTime.CalendarSystem
      description: The calendar system to convert this local date to.
    return:
      type: NodaTime.LocalDate
      description: The converted LocalDate
    content.vb: Public Function WithCalendar(calendar As CalendarSystem) As LocalDate
  overload: NodaTime.LocalDate.WithCalendar*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: NodaTime.LocalDate.PlusYears(System.Int32)
  commentId: M:NodaTime.LocalDate.PlusYears(System.Int32)
  id: PlusYears(System.Int32)
  parent: NodaTime.LocalDate
  langs:
  - csharp
  - vb
  name: PlusYears(Int32)
  nameWithType: LocalDate.PlusYears(Int32)
  fullName: NodaTime.LocalDate.PlusYears(System.Int32)
  type: Method
  source:
    remote:
      path: 2.3.x/src/NodaTime/LocalDate.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: PlusYears
    path: src/NodaTime/LocalDate.cs
    startLine: 634
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nReturns a new LocalDate representing the current value with the given number of years added.\n"
  remarks: "\nIf the resulting date is invalid, lower fields (typically the day of month) are reduced to find a valid value.\nFor example, adding one year to February 29th 2012 will return February 28th 2013; subtracting one year from\nFebruary 29th 2012 will return February 28th 2011.\n"
  example: []
  syntax:
    content: public LocalDate PlusYears(int years)
    parameters:
    - id: years
      type: System.Int32
      description: The number of years to add
    return:
      type: NodaTime.LocalDate
      description: The current value plus the given number of years.
    content.vb: Public Function PlusYears(years As Integer) As LocalDate
  overload: NodaTime.LocalDate.PlusYears*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: NodaTime.LocalDate.PlusMonths(System.Int32)
  commentId: M:NodaTime.LocalDate.PlusMonths(System.Int32)
  id: PlusMonths(System.Int32)
  parent: NodaTime.LocalDate
  langs:
  - csharp
  - vb
  name: PlusMonths(Int32)
  nameWithType: LocalDate.PlusMonths(Int32)
  fullName: NodaTime.LocalDate.PlusMonths(System.Int32)
  type: Method
  source:
    remote:
      path: 2.3.x/src/NodaTime/LocalDate.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: PlusMonths
    path: src/NodaTime/LocalDate.cs
    startLine: 653
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nReturns a new LocalDate representing the current value with the given number of months added.\n"
  remarks: "\n<p>\nThis method does not try to maintain the year of the current value, so adding four months to a value in \nOctober will result in a value in the following February.\n</p>\n<p>\nIf the resulting date is invalid, the day of month is reduced to find a valid value.\nFor example, adding one month to January 30th 2011 will return February 28th 2011; subtracting one month from\nMarch 30th 2011 will return February 28th 2011.\n</p>\n"
  example: []
  syntax:
    content: public LocalDate PlusMonths(int months)
    parameters:
    - id: months
      type: System.Int32
      description: The number of months to add
    return:
      type: NodaTime.LocalDate
      description: The current date plus the given number of months
    content.vb: Public Function PlusMonths(months As Integer) As LocalDate
  overload: NodaTime.LocalDate.PlusMonths*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: NodaTime.LocalDate.PlusDays(System.Int32)
  commentId: M:NodaTime.LocalDate.PlusDays(System.Int32)
  id: PlusDays(System.Int32)
  parent: NodaTime.LocalDate
  langs:
  - csharp
  - vb
  name: PlusDays(Int32)
  nameWithType: LocalDate.PlusDays(Int32)
  fullName: NodaTime.LocalDate.PlusDays(System.Int32)
  type: Method
  source:
    remote:
      path: 2.3.x/src/NodaTime/LocalDate.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: PlusDays
    path: src/NodaTime/LocalDate.cs
    startLine: 667
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nReturns a new LocalDate representing the current value with the given number of days added.\n"
  remarks: "\n<p>\nThis method does not try to maintain the month or year of the current value, so adding 3 days to a value of January 30th\nwill result in a value of February 2nd.\n</p>\n"
  example: []
  syntax:
    content: public LocalDate PlusDays(int days)
    parameters:
    - id: days
      type: System.Int32
      description: The number of days to add
    return:
      type: NodaTime.LocalDate
      description: The current value plus the given number of days.
    content.vb: Public Function PlusDays(days As Integer) As LocalDate
  overload: NodaTime.LocalDate.PlusDays*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: NodaTime.LocalDate.PlusWeeks(System.Int32)
  commentId: M:NodaTime.LocalDate.PlusWeeks(System.Int32)
  id: PlusWeeks(System.Int32)
  parent: NodaTime.LocalDate
  langs:
  - csharp
  - vb
  name: PlusWeeks(Int32)
  nameWithType: LocalDate.PlusWeeks(Int32)
  fullName: NodaTime.LocalDate.PlusWeeks(System.Int32)
  type: Method
  source:
    remote:
      path: 2.3.x/src/NodaTime/LocalDate.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: PlusWeeks
    path: src/NodaTime/LocalDate.cs
    startLine: 675
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nReturns a new LocalDate representing the current value with the given number of weeks added.\n"
  example: []
  syntax:
    content: public LocalDate PlusWeeks(int weeks)
    parameters:
    - id: weeks
      type: System.Int32
      description: The number of weeks to add
    return:
      type: NodaTime.LocalDate
      description: The current value plus the given number of weeks.
    content.vb: Public Function PlusWeeks(weeks As Integer) As LocalDate
  overload: NodaTime.LocalDate.PlusWeeks*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: NodaTime.LocalDate.Next(NodaTime.IsoDayOfWeek)
  commentId: M:NodaTime.LocalDate.Next(NodaTime.IsoDayOfWeek)
  id: Next(NodaTime.IsoDayOfWeek)
  parent: NodaTime.LocalDate
  langs:
  - csharp
  - vb
  name: Next(IsoDayOfWeek)
  nameWithType: LocalDate.Next(IsoDayOfWeek)
  fullName: NodaTime.LocalDate.Next(NodaTime.IsoDayOfWeek)
  type: Method
  source:
    remote:
      path: 2.3.x/src/NodaTime/LocalDate.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: Next
    path: src/NodaTime/LocalDate.cs
    startLine: 688
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nReturns the next <xref href=\"NodaTime.LocalDate\" data-throw-if-not-resolved=\"false\"></xref> falling on the specified <xref href=\"NodaTime.IsoDayOfWeek\" data-throw-if-not-resolved=\"false\"></xref>.\nThis is a strict &quot;next&quot; - if this date on already falls on the target\nday of the week, the returned value will be a week later.\n"
  example: []
  syntax:
    content: public LocalDate Next(IsoDayOfWeek targetDayOfWeek)
    parameters:
    - id: targetDayOfWeek
      type: NodaTime.IsoDayOfWeek
      description: The ISO day of the week to return the next date of.
    return:
      type: NodaTime.LocalDate
      description: The next <xref href="NodaTime.LocalDate" data-throw-if-not-resolved="false"></xref> falling on the specified day of the week.
    content.vb: Public Function Next(targetDayOfWeek As IsoDayOfWeek) As LocalDate
  overload: NodaTime.LocalDate.Next*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: The underlying calendar doesn&apos;t use ISO days of the week.
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: >-
      <code data-dev-comment-type="paramref" class="paramref">targetDayOfWeek</code> is not a valid day of the
          week (Monday to Sunday).
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: NodaTime.LocalDate.Previous(NodaTime.IsoDayOfWeek)
  commentId: M:NodaTime.LocalDate.Previous(NodaTime.IsoDayOfWeek)
  id: Previous(NodaTime.IsoDayOfWeek)
  parent: NodaTime.LocalDate
  langs:
  - csharp
  - vb
  name: Previous(IsoDayOfWeek)
  nameWithType: LocalDate.Previous(IsoDayOfWeek)
  fullName: NodaTime.LocalDate.Previous(NodaTime.IsoDayOfWeek)
  type: Method
  source:
    remote:
      path: 2.3.x/src/NodaTime/LocalDate.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: Previous
    path: src/NodaTime/LocalDate.cs
    startLine: 716
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nReturns the previous <xref href=\"NodaTime.LocalDate\" data-throw-if-not-resolved=\"false\"></xref> falling on the specified <xref href=\"NodaTime.IsoDayOfWeek\" data-throw-if-not-resolved=\"false\"></xref>.\nThis is a strict &quot;previous&quot; - if this date on already falls on the target\nday of the week, the returned value will be a week earlier.\n"
  example: []
  syntax:
    content: public LocalDate Previous(IsoDayOfWeek targetDayOfWeek)
    parameters:
    - id: targetDayOfWeek
      type: NodaTime.IsoDayOfWeek
      description: The ISO day of the week to return the previous date of.
    return:
      type: NodaTime.LocalDate
      description: The previous <xref href="NodaTime.LocalDate" data-throw-if-not-resolved="false"></xref> falling on the specified day of the week.
    content.vb: Public Function Previous(targetDayOfWeek As IsoDayOfWeek) As LocalDate
  overload: NodaTime.LocalDate.Previous*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: The underlying calendar doesn&apos;t use ISO days of the week.
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: >-
      <code data-dev-comment-type="paramref" class="paramref">targetDayOfWeek</code> is not a valid day of the
          week (Monday to Sunday).
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: NodaTime.LocalDate.WithOffset(NodaTime.Offset)
  commentId: M:NodaTime.LocalDate.WithOffset(NodaTime.Offset)
  id: WithOffset(NodaTime.Offset)
  parent: NodaTime.LocalDate
  langs:
  - csharp
  - vb
  name: WithOffset(Offset)
  nameWithType: LocalDate.WithOffset(Offset)
  fullName: NodaTime.LocalDate.WithOffset(NodaTime.Offset)
  type: Method
  source:
    remote:
      path: 2.3.x/src/NodaTime/LocalDate.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: WithOffset
    path: src/NodaTime/LocalDate.cs
    startLine: 740
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nReturns an <xref href=\"NodaTime.OffsetDate\" data-throw-if-not-resolved=\"false\"></xref> for this local date with the given offset.\n"
  remarks: This method is purely a convenient alternative to calling the <xref href="NodaTime.OffsetDate" data-throw-if-not-resolved="false"></xref> constructor directly.
  example: []
  syntax:
    content: public OffsetDate WithOffset(Offset offset)
    parameters:
    - id: offset
      type: NodaTime.Offset
      description: The offset to apply.
    return:
      type: NodaTime.OffsetDate
      description: The result of this date offset by the given amount.
    content.vb: Public Function WithOffset(offset As Offset) As OffsetDate
  overload: NodaTime.LocalDate.WithOffset*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: NodaTime.LocalDate.At(NodaTime.LocalTime)
  commentId: M:NodaTime.LocalDate.At(NodaTime.LocalTime)
  id: At(NodaTime.LocalTime)
  parent: NodaTime.LocalDate
  langs:
  - csharp
  - vb
  name: At(LocalTime)
  nameWithType: LocalDate.At(LocalTime)
  fullName: NodaTime.LocalDate.At(NodaTime.LocalTime)
  type: Method
  source:
    remote:
      path: 2.3.x/src/NodaTime/LocalDate.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: At
    path: src/NodaTime/LocalDate.cs
    startLine: 750
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nCombines this <xref href=\"NodaTime.LocalDate\" data-throw-if-not-resolved=\"false\"></xref> with the given <xref href=\"NodaTime.LocalTime\" data-throw-if-not-resolved=\"false\"></xref>\ninto a single <xref href=\"NodaTime.LocalDateTime\" data-throw-if-not-resolved=\"false\"></xref>.\nFluent alternative to <code>operator+()</code>.\n"
  example: []
  syntax:
    content: public LocalDateTime At(LocalTime time)
    parameters:
    - id: time
      type: NodaTime.LocalTime
      description: The time to combine with this date.
    return:
      type: NodaTime.LocalDateTime
      description: The <xref href="NodaTime.LocalDateTime" data-throw-if-not-resolved="false"></xref> representation of the given time on this date
    content.vb: Public Function At(time As LocalTime) As LocalDateTime
  overload: NodaTime.LocalDate.At*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: NodaTime.LocalDate.With(System.Func{NodaTime.LocalDate,NodaTime.LocalDate})
  commentId: M:NodaTime.LocalDate.With(System.Func{NodaTime.LocalDate,NodaTime.LocalDate})
  id: With(System.Func{NodaTime.LocalDate,NodaTime.LocalDate})
  parent: NodaTime.LocalDate
  langs:
  - csharp
  - vb
  name: With(Func<LocalDate, LocalDate>)
  nameWithType: LocalDate.With(Func<LocalDate, LocalDate>)
  fullName: NodaTime.LocalDate.With(System.Func<NodaTime.LocalDate, NodaTime.LocalDate>)
  type: Method
  source:
    remote:
      path: 2.3.x/src/NodaTime/LocalDate.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: With
    path: src/NodaTime/LocalDate.cs
    startLine: 763
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nReturns this date, with the given adjuster applied to it.\n"
  remarks: "\nIf the adjuster attempts to construct an invalid date (such as by trying\nto set a day-of-month of 30 in February), any exception thrown by\nthat construction attempt will be propagated through this method.\n"
  example: []
  syntax:
    content: public LocalDate With(Func<LocalDate, LocalDate> adjuster)
    parameters:
    - id: adjuster
      type: System.Func{NodaTime.LocalDate,NodaTime.LocalDate}
      description: The adjuster to apply.
    return:
      type: NodaTime.LocalDate
      description: The adjusted date.
    content.vb: Public Function With(adjuster As Func(Of LocalDate, LocalDate)) As LocalDate
  overload: NodaTime.LocalDate.With*
  nameWithType.vb: LocalDate.With(Func(Of LocalDate, LocalDate))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: NodaTime.LocalDate.With(System.Func(Of NodaTime.LocalDate, NodaTime.LocalDate))
  name.vb: With(Func(Of LocalDate, LocalDate))
- uid: NodaTime.LocalDate.Deconstruct(System.Int32@,System.Int32@,System.Int32@)
  commentId: M:NodaTime.LocalDate.Deconstruct(System.Int32@,System.Int32@,System.Int32@)
  id: Deconstruct(System.Int32@,System.Int32@,System.Int32@)
  parent: NodaTime.LocalDate
  langs:
  - csharp
  - vb
  name: Deconstruct(out Int32, out Int32, out Int32)
  nameWithType: LocalDate.Deconstruct(out Int32, out Int32, out Int32)
  fullName: NodaTime.LocalDate.Deconstruct(out System.Int32, out System.Int32, out System.Int32)
  type: Method
  source:
    remote:
      path: 2.3.x/src/NodaTime/LocalDate.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: Deconstruct
    path: src/NodaTime/LocalDate.cs
    startLine: 773
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nDeconstructs the current instance into its components.\n"
  example: []
  syntax:
    content: public void Deconstruct(out int year, out int month, out int day)
    parameters:
    - id: year
      type: System.Int32
      description: The year component of the date.
    - id: month
      type: System.Int32
      description: The month component of the date.
    - id: day
      type: System.Int32
      description: The day component of the date.
    content.vb: Public Sub Deconstruct(ByRef year As Integer, ByRef month As Integer, ByRef day As Integer)
  overload: NodaTime.LocalDate.Deconstruct*
  nameWithType.vb: LocalDate.Deconstruct(ByRef Int32, ByRef Int32, ByRef Int32)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: NodaTime.LocalDate.Deconstruct(ByRef System.Int32, ByRef System.Int32, ByRef System.Int32)
  name.vb: Deconstruct(ByRef Int32, ByRef Int32, ByRef Int32)
- uid: NodaTime.LocalDate.Deconstruct(System.Int32@,System.Int32@,System.Int32@,NodaTime.CalendarSystem@)
  commentId: M:NodaTime.LocalDate.Deconstruct(System.Int32@,System.Int32@,System.Int32@,NodaTime.CalendarSystem@)
  id: Deconstruct(System.Int32@,System.Int32@,System.Int32@,NodaTime.CalendarSystem@)
  parent: NodaTime.LocalDate
  langs:
  - csharp
  - vb
  name: Deconstruct(out Int32, out Int32, out Int32, out CalendarSystem)
  nameWithType: LocalDate.Deconstruct(out Int32, out Int32, out Int32, out CalendarSystem)
  fullName: NodaTime.LocalDate.Deconstruct(out System.Int32, out System.Int32, out System.Int32, out NodaTime.CalendarSystem)
  type: Method
  source:
    remote:
      path: 2.3.x/src/NodaTime/LocalDate.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: Deconstruct
    path: src/NodaTime/LocalDate.cs
    startLine: 788
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nDeconstructs the current instance into its components.\n"
  example: []
  syntax:
    content: public void Deconstruct(out int year, out int month, out int day, out CalendarSystem calendar)
    parameters:
    - id: year
      type: System.Int32
      description: The year component of the date.
    - id: month
      type: System.Int32
      description: The month component of the date.
    - id: day
      type: System.Int32
      description: The day component of the date.
    - id: calendar
      type: NodaTime.CalendarSystem
      description: The <xref href="NodaTime.CalendarSystem" data-throw-if-not-resolved="false"></xref> associated with the date.
    content.vb: Public Sub Deconstruct(ByRef year As Integer, ByRef month As Integer, ByRef day As Integer, ByRef calendar As CalendarSystem)
  overload: NodaTime.LocalDate.Deconstruct*
  nameWithType.vb: LocalDate.Deconstruct(ByRef Int32, ByRef Int32, ByRef Int32, ByRef CalendarSystem)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: NodaTime.LocalDate.Deconstruct(ByRef System.Int32, ByRef System.Int32, ByRef System.Int32, ByRef NodaTime.CalendarSystem)
  name.vb: Deconstruct(ByRef Int32, ByRef Int32, ByRef Int32, ByRef CalendarSystem)
- uid: NodaTime.LocalDate.ToString
  commentId: M:NodaTime.LocalDate.ToString
  id: ToString
  parent: NodaTime.LocalDate
  langs:
  - csharp
  - vb
  name: ToString()
  nameWithType: LocalDate.ToString()
  fullName: NodaTime.LocalDate.ToString()
  type: Method
  source:
    remote:
      path: 2.3.x/src/NodaTime/LocalDate.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: ToString
    path: src/NodaTime/LocalDate.cs
    startLine: 805
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nReturns a <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref> that represents this instance.\n"
  example: []
  syntax:
    content: public override string ToString()
    return:
      type: System.String
      description: "\nThe value of the current instance in the default format pattern (&quot;D&quot;), using the current thread&apos;s\nculture to obtain a format provider.\n"
    content.vb: Public Overrides Function ToString As String
  overridden: System.ValueType.ToString
  overload: NodaTime.LocalDate.ToString*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: NodaTime.LocalDate.ToString(System.String,System.IFormatProvider)
  commentId: M:NodaTime.LocalDate.ToString(System.String,System.IFormatProvider)
  id: ToString(System.String,System.IFormatProvider)
  parent: NodaTime.LocalDate
  langs:
  - csharp
  - vb
  name: ToString(String, IFormatProvider)
  nameWithType: LocalDate.ToString(String, IFormatProvider)
  fullName: NodaTime.LocalDate.ToString(System.String, System.IFormatProvider)
  type: Method
  source:
    remote:
      path: 2.3.x/src/NodaTime/LocalDate.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: ToString
    path: src/NodaTime/LocalDate.cs
    startLine: 820
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nFormats the value of the current instance using the specified pattern.\n"
  example: []
  syntax:
    content: public string ToString(string patternText, IFormatProvider formatProvider)
    parameters:
    - id: patternText
      type: System.String
      description: >
        The <xref href="System.String" data-throw-if-not-resolved="false"></xref> specifying the pattern to use,

        or null to use the default format pattern (&quot;D&quot;).
    - id: formatProvider
      type: System.IFormatProvider
      description: >
        The <xref href="System.IFormatProvider" data-throw-if-not-resolved="false"></xref> to use when formatting the value,

        or null to use the current thread&apos;s culture to obtain a format provider.
    return:
      type: System.String
      description: "\nA <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref> containing the value of the current instance in the specified format.\n"
    content.vb: Public Function ToString(patternText As String, formatProvider As IFormatProvider) As String
  overload: NodaTime.LocalDate.ToString*
  implements:
  - System.IFormattable.ToString(System.String,System.IFormatProvider)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: NodaTime.LocalDate.System#Xml#Serialization#IXmlSerializable#GetSchema
  commentId: M:NodaTime.LocalDate.System#Xml#Serialization#IXmlSerializable#GetSchema
  id: System#Xml#Serialization#IXmlSerializable#GetSchema
  isEii: true
  parent: NodaTime.LocalDate
  langs:
  - csharp
  - vb
  name: IXmlSerializable.GetSchema()
  nameWithType: LocalDate.IXmlSerializable.GetSchema()
  fullName: NodaTime.LocalDate.System.Xml.Serialization.IXmlSerializable.GetSchema()
  type: Method
  source:
    remote:
      path: 2.3.x/src/NodaTime/LocalDate.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: System.Xml.Serialization.IXmlSerializable.GetSchema
    path: src/NodaTime/LocalDate.cs
    startLine: 826
  assemblies:
  - NodaTime
  namespace: NodaTime
  example: []
  syntax:
    content: XmlSchema IXmlSerializable.GetSchema()
    return:
      type: System.Xml.Schema.XmlSchema
    content.vb: Function System.Xml.Serialization.IXmlSerializable.GetSchema As XmlSchema Implements IXmlSerializable.GetSchema
  overload: NodaTime.LocalDate.System#Xml#Serialization#IXmlSerializable#GetSchema*
  implements:
  - System.Xml.Serialization.IXmlSerializable.GetSchema
  nameWithType.vb: LocalDate.System.Xml.Serialization.IXmlSerializable.GetSchema()
  name.vb: System.Xml.Serialization.IXmlSerializable.GetSchema()
- uid: NodaTime.LocalDate.System#Xml#Serialization#IXmlSerializable#ReadXml(System.Xml.XmlReader)
  commentId: M:NodaTime.LocalDate.System#Xml#Serialization#IXmlSerializable#ReadXml(System.Xml.XmlReader)
  id: System#Xml#Serialization#IXmlSerializable#ReadXml(System.Xml.XmlReader)
  isEii: true
  parent: NodaTime.LocalDate
  langs:
  - csharp
  - vb
  name: IXmlSerializable.ReadXml(XmlReader)
  nameWithType: LocalDate.IXmlSerializable.ReadXml(XmlReader)
  fullName: NodaTime.LocalDate.System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)
  type: Method
  source:
    remote:
      path: 2.3.x/src/NodaTime/LocalDate.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: System.Xml.Serialization.IXmlSerializable.ReadXml
    path: src/NodaTime/LocalDate.cs
    startLine: 829
  assemblies:
  - NodaTime
  namespace: NodaTime
  example: []
  syntax:
    content: void IXmlSerializable.ReadXml(XmlReader reader)
    parameters:
    - id: reader
      type: System.Xml.XmlReader
    content.vb: Sub System.Xml.Serialization.IXmlSerializable.ReadXml(reader As XmlReader) Implements IXmlSerializable.ReadXml
  overload: NodaTime.LocalDate.System#Xml#Serialization#IXmlSerializable#ReadXml*
  implements:
  - System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)
  nameWithType.vb: LocalDate.System.Xml.Serialization.IXmlSerializable.ReadXml(XmlReader)
  name.vb: System.Xml.Serialization.IXmlSerializable.ReadXml(XmlReader)
- uid: NodaTime.LocalDate.System#Xml#Serialization#IXmlSerializable#WriteXml(System.Xml.XmlWriter)
  commentId: M:NodaTime.LocalDate.System#Xml#Serialization#IXmlSerializable#WriteXml(System.Xml.XmlWriter)
  id: System#Xml#Serialization#IXmlSerializable#WriteXml(System.Xml.XmlWriter)
  isEii: true
  parent: NodaTime.LocalDate
  langs:
  - csharp
  - vb
  name: IXmlSerializable.WriteXml(XmlWriter)
  nameWithType: LocalDate.IXmlSerializable.WriteXml(XmlWriter)
  fullName: NodaTime.LocalDate.System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)
  type: Method
  source:
    remote:
      path: 2.3.x/src/NodaTime/LocalDate.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: System.Xml.Serialization.IXmlSerializable.WriteXml
    path: src/NodaTime/LocalDate.cs
    startLine: 846
  assemblies:
  - NodaTime
  namespace: NodaTime
  example: []
  syntax:
    content: void IXmlSerializable.WriteXml(XmlWriter writer)
    parameters:
    - id: writer
      type: System.Xml.XmlWriter
    content.vb: Sub System.Xml.Serialization.IXmlSerializable.WriteXml(writer As XmlWriter) Implements IXmlSerializable.WriteXml
  overload: NodaTime.LocalDate.System#Xml#Serialization#IXmlSerializable#WriteXml*
  implements:
  - System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)
  nameWithType.vb: LocalDate.System.Xml.Serialization.IXmlSerializable.WriteXml(XmlWriter)
  name.vb: System.Xml.Serialization.IXmlSerializable.WriteXml(XmlWriter)
- uid: NodaTime.LocalDate.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  commentId: M:NodaTime.LocalDate.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  id: System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  isEii: true
  parent: NodaTime.LocalDate
  langs:
  - csharp
  - vb
  name: ISerializable.GetObjectData(SerializationInfo, StreamingContext)
  nameWithType: LocalDate.ISerializable.GetObjectData(SerializationInfo, StreamingContext)
  fullName: NodaTime.LocalDate.System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext)
  type: Method
  source:
    remote:
      path: 2.3.x/src/NodaTime/LocalDate.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: System.Runtime.Serialization.ISerializable.GetObjectData
    path: src/NodaTime/LocalDate.cs
    startLine: 899
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nImplementation of <xref href=\"System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo%2cSystem.Runtime.Serialization.StreamingContext)\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: >-
      [SecurityCritical]

      void ISerializable.GetObjectData(SerializationInfo info, StreamingContext context)
    parameters:
    - id: info
      type: System.Runtime.Serialization.SerializationInfo
      description: The <xref href="System.Runtime.Serialization.SerializationInfo" data-throw-if-not-resolved="false"></xref> to populate with data.
    - id: context
      type: System.Runtime.Serialization.StreamingContext
      description: The destination for this serialization.
    content.vb: >-
      <SecurityCritical>

      Sub System.Runtime.Serialization.ISerializable.GetObjectData(info As SerializationInfo, context As StreamingContext) Implements ISerializable.GetObjectData
  overload: NodaTime.LocalDate.System#Runtime#Serialization#ISerializable#GetObjectData*
  implements:
  - System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  attributes:
  - type: System.Security.SecurityCriticalAttribute
    ctor: System.Security.SecurityCriticalAttribute.#ctor
    arguments: []
  nameWithType.vb: LocalDate.System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo, StreamingContext)
  name.vb: System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo, StreamingContext)
references:
- uid: NodaTime.LocalDate.CompareTo(NodaTime.LocalDate)
  commentId: M:NodaTime.LocalDate.CompareTo(NodaTime.LocalDate)
  isExternal: true
- uid: System.ArgumentException
  commentId: T:System.ArgumentException
  parent: System
  isExternal: true
  name: ArgumentException
  nameWithType: ArgumentException
  fullName: System.ArgumentException
- uid: NodaTime
  commentId: N:NodaTime
  name: NodaTime
  nameWithType: NodaTime
  fullName: NodaTime
- uid: System.IEquatable{NodaTime.LocalDate}
  commentId: T:System.IEquatable{NodaTime.LocalDate}
  parent: System
  definition: System.IEquatable`1
  name: IEquatable<LocalDate>
  nameWithType: IEquatable<LocalDate>
  fullName: System.IEquatable<NodaTime.LocalDate>
  nameWithType.vb: IEquatable(Of LocalDate)
  fullName.vb: System.IEquatable(Of NodaTime.LocalDate)
  name.vb: IEquatable(Of LocalDate)
  spec.csharp:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: NodaTime.LocalDate
    name: LocalDate
    nameWithType: LocalDate
    fullName: NodaTime.LocalDate
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: NodaTime.LocalDate
    name: LocalDate
    nameWithType: LocalDate
    fullName: NodaTime.LocalDate
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IComparable{NodaTime.LocalDate}
  commentId: T:System.IComparable{NodaTime.LocalDate}
  parent: System
  definition: System.IComparable`1
  name: IComparable<LocalDate>
  nameWithType: IComparable<LocalDate>
  fullName: System.IComparable<NodaTime.LocalDate>
  nameWithType.vb: IComparable(Of LocalDate)
  fullName.vb: System.IComparable(Of NodaTime.LocalDate)
  name.vb: IComparable(Of LocalDate)
  spec.csharp:
  - uid: System.IComparable`1
    name: IComparable
    nameWithType: IComparable
    fullName: System.IComparable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: NodaTime.LocalDate
    name: LocalDate
    nameWithType: LocalDate
    fullName: NodaTime.LocalDate
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.IComparable`1
    name: IComparable
    nameWithType: IComparable
    fullName: System.IComparable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: NodaTime.LocalDate
    name: LocalDate
    nameWithType: LocalDate
    fullName: NodaTime.LocalDate
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IComparable
  commentId: T:System.IComparable
  parent: System
  isExternal: true
  name: IComparable
  nameWithType: IComparable
  fullName: System.IComparable
- uid: System.IFormattable
  commentId: T:System.IFormattable
  parent: System
  isExternal: true
  name: IFormattable
  nameWithType: IFormattable
  fullName: System.IFormattable
- uid: System.Xml.Serialization.IXmlSerializable
  commentId: T:System.Xml.Serialization.IXmlSerializable
  parent: System.Xml.Serialization
  isExternal: true
  name: IXmlSerializable
  nameWithType: IXmlSerializable
  fullName: System.Xml.Serialization.IXmlSerializable
- uid: System.Runtime.Serialization.ISerializable
  commentId: T:System.Runtime.Serialization.ISerializable
  parent: System.Runtime.Serialization
  isExternal: true
  name: ISerializable
  nameWithType: ISerializable
  fullName: System.Runtime.Serialization.ISerializable
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: System.IEquatable`1
  commentId: T:System.IEquatable`1
  isExternal: true
  name: IEquatable<T>
  nameWithType: IEquatable<T>
  fullName: System.IEquatable<T>
  nameWithType.vb: IEquatable(Of T)
  fullName.vb: System.IEquatable(Of T)
  name.vb: IEquatable(Of T)
  spec.csharp:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IComparable`1
  commentId: T:System.IComparable`1
  isExternal: true
  name: IComparable<T>
  nameWithType: IComparable<T>
  fullName: System.IComparable<T>
  nameWithType.vb: IComparable(Of T)
  fullName.vb: System.IComparable(Of T)
  name.vb: IComparable(Of T)
  spec.csharp:
  - uid: System.IComparable`1
    name: IComparable
    nameWithType: IComparable
    fullName: System.IComparable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.IComparable`1
    name: IComparable
    nameWithType: IComparable
    fullName: System.IComparable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Xml.Serialization
  commentId: N:System.Xml.Serialization
  isExternal: true
  name: System.Xml.Serialization
  nameWithType: System.Xml.Serialization
  fullName: System.Xml.Serialization
- uid: System.Runtime.Serialization
  commentId: N:System.Runtime.Serialization
  isExternal: true
  name: System.Runtime.Serialization
  nameWithType: System.Runtime.Serialization
  fullName: System.Runtime.Serialization
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: NodaTime.LocalDate.MaxIsoValue*
  commentId: Overload:NodaTime.LocalDate.MaxIsoValue
  name: MaxIsoValue
  nameWithType: LocalDate.MaxIsoValue
  fullName: NodaTime.LocalDate.MaxIsoValue
- uid: NodaTime.LocalDate
  commentId: T:NodaTime.LocalDate
  parent: NodaTime
  name: LocalDate
  nameWithType: LocalDate
  fullName: NodaTime.LocalDate
- uid: NodaTime.LocalDate.MinIsoValue*
  commentId: Overload:NodaTime.LocalDate.MinIsoValue
  name: MinIsoValue
  nameWithType: LocalDate.MinIsoValue
  fullName: NodaTime.LocalDate.MinIsoValue
- uid: System.ArgumentOutOfRangeException
  commentId: T:System.ArgumentOutOfRangeException
  parent: System
  isExternal: true
  name: ArgumentOutOfRangeException
  nameWithType: ArgumentOutOfRangeException
  fullName: System.ArgumentOutOfRangeException
- uid: NodaTime.LocalDate.#ctor*
  commentId: Overload:NodaTime.LocalDate.#ctor
  name: LocalDate
  nameWithType: LocalDate.LocalDate
  fullName: NodaTime.LocalDate.LocalDate
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: NodaTime.CalendarSystem
  commentId: T:NodaTime.CalendarSystem
  parent: NodaTime
  name: CalendarSystem
  nameWithType: CalendarSystem
  fullName: NodaTime.CalendarSystem
- uid: NodaTime.Calendars.Era
  commentId: T:NodaTime.Calendars.Era
  parent: NodaTime.Calendars
  name: Era
  nameWithType: Era
  fullName: NodaTime.Calendars.Era
- uid: NodaTime.Calendars
  commentId: N:NodaTime.Calendars
  name: NodaTime.Calendars
  nameWithType: NodaTime.Calendars
  fullName: NodaTime.Calendars
- uid: NodaTime.LocalDate.Calendar*
  commentId: Overload:NodaTime.LocalDate.Calendar
  name: Calendar
  nameWithType: LocalDate.Calendar
  fullName: NodaTime.LocalDate.Calendar
- uid: NodaTime.LocalDate.Year*
  commentId: Overload:NodaTime.LocalDate.Year
  name: Year
  nameWithType: LocalDate.Year
  fullName: NodaTime.LocalDate.Year
- uid: NodaTime.LocalDate.Month*
  commentId: Overload:NodaTime.LocalDate.Month
  name: Month
  nameWithType: LocalDate.Month
  fullName: NodaTime.LocalDate.Month
- uid: NodaTime.LocalDate.Day*
  commentId: Overload:NodaTime.LocalDate.Day
  name: Day
  nameWithType: LocalDate.Day
  fullName: NodaTime.LocalDate.Day
- uid: NodaTime.IsoDayOfWeek
  commentId: T:NodaTime.IsoDayOfWeek
  parent: NodaTime
  name: IsoDayOfWeek
  nameWithType: IsoDayOfWeek
  fullName: NodaTime.IsoDayOfWeek
- uid: NodaTime.LocalDate.DayOfWeek*
  commentId: Overload:NodaTime.LocalDate.DayOfWeek
  name: DayOfWeek
  nameWithType: LocalDate.DayOfWeek
  fullName: NodaTime.LocalDate.DayOfWeek
- uid: NodaTime.LocalDate.YearOfEra*
  commentId: Overload:NodaTime.LocalDate.YearOfEra
  name: YearOfEra
  nameWithType: LocalDate.YearOfEra
  fullName: NodaTime.LocalDate.YearOfEra
- uid: NodaTime.LocalDate.Era*
  commentId: Overload:NodaTime.LocalDate.Era
  name: Era
  nameWithType: LocalDate.Era
  fullName: NodaTime.LocalDate.Era
- uid: NodaTime.LocalDate.DayOfYear*
  commentId: Overload:NodaTime.LocalDate.DayOfYear
  name: DayOfYear
  nameWithType: LocalDate.DayOfYear
  fullName: NodaTime.LocalDate.DayOfYear
- uid: NodaTime.LocalDateTime
  commentId: T:NodaTime.LocalDateTime
  parent: NodaTime
  name: LocalDateTime
  nameWithType: LocalDateTime
  fullName: NodaTime.LocalDateTime
- uid: NodaTime.LocalDate.AtMidnight*
  commentId: Overload:NodaTime.LocalDate.AtMidnight
  name: AtMidnight
  nameWithType: LocalDate.AtMidnight
  fullName: NodaTime.LocalDate.AtMidnight
- uid: System.DateTime
  commentId: T:System.DateTime
  parent: System
  isExternal: true
  name: DateTime
  nameWithType: DateTime
  fullName: System.DateTime
- uid: System.DateTime.Kind
  commentId: P:System.DateTime.Kind
  isExternal: true
- uid: System.DateTimeKind.Unspecified
  commentId: F:System.DateTimeKind.Unspecified
  isExternal: true
- uid: System.DateTime.ToLocalTime
  commentId: M:System.DateTime.ToLocalTime
  isExternal: true
- uid: System.DateTime.ToUniversalTime
  commentId: M:System.DateTime.ToUniversalTime
  isExternal: true
- uid: System.DateTimeOffset
  commentId: T:System.DateTimeOffset
  parent: System
  isExternal: true
  name: DateTimeOffset
  nameWithType: DateTimeOffset
  fullName: System.DateTimeOffset
- uid: NodaTime.LocalDate.ToDateTimeUnspecified*
  commentId: Overload:NodaTime.LocalDate.ToDateTimeUnspecified
  name: ToDateTimeUnspecified
  nameWithType: LocalDate.ToDateTimeUnspecified
  fullName: NodaTime.LocalDate.ToDateTimeUnspecified
- uid: System.DateTimeKind.Utc
  commentId: F:System.DateTimeKind.Utc
  isExternal: true
- uid: NodaTime.LocalDate.FromDateTime*
  commentId: Overload:NodaTime.LocalDate.FromDateTime
  name: FromDateTime
  nameWithType: LocalDate.FromDateTime
  fullName: NodaTime.LocalDate.FromDateTime
- uid: NodaTime.LocalDate.FromWeekYearWeekAndDay*
  commentId: Overload:NodaTime.LocalDate.FromWeekYearWeekAndDay
  name: FromWeekYearWeekAndDay
  nameWithType: LocalDate.FromWeekYearWeekAndDay
  fullName: NodaTime.LocalDate.FromWeekYearWeekAndDay
- uid: NodaTime.LocalDate.FromYearMonthWeekAndDay*
  commentId: Overload:NodaTime.LocalDate.FromYearMonthWeekAndDay
  name: FromYearMonthWeekAndDay
  nameWithType: LocalDate.FromYearMonthWeekAndDay
  fullName: NodaTime.LocalDate.FromYearMonthWeekAndDay
- uid: NodaTime.LocalDate.op_Addition*
  commentId: Overload:NodaTime.LocalDate.op_Addition
  name: Addition
  nameWithType: LocalDate.Addition
  fullName: NodaTime.LocalDate.Addition
- uid: NodaTime.Period
  commentId: T:NodaTime.Period
  parent: NodaTime
  name: Period
  nameWithType: Period
  fullName: NodaTime.Period
- uid: NodaTime.LocalDate.Add*
  commentId: Overload:NodaTime.LocalDate.Add
  name: Add
  nameWithType: LocalDate.Add
  fullName: NodaTime.LocalDate.Add
- uid: NodaTime.LocalDate.Plus*
  commentId: Overload:NodaTime.LocalDate.Plus
  name: Plus
  nameWithType: LocalDate.Plus
  fullName: NodaTime.LocalDate.Plus
- uid: NodaTime.LocalTime
  commentId: T:NodaTime.LocalTime
  parent: NodaTime
  name: LocalTime
  nameWithType: LocalTime
  fullName: NodaTime.LocalTime
- uid: NodaTime.LocalDate.Minus(NodaTime.Period)
  commentId: M:NodaTime.LocalDate.Minus(NodaTime.Period)
  isExternal: true
- uid: NodaTime.LocalDate.op_Subtraction*
  commentId: Overload:NodaTime.LocalDate.op_Subtraction
  name: Subtraction
  nameWithType: LocalDate.Subtraction
  fullName: NodaTime.LocalDate.Subtraction
- uid: NodaTime.LocalDate.Subtract*
  commentId: Overload:NodaTime.LocalDate.Subtract
  name: Subtract
  nameWithType: LocalDate.Subtract
  fullName: NodaTime.LocalDate.Subtract
- uid: NodaTime.LocalDate.Minus*
  commentId: Overload:NodaTime.LocalDate.Minus
  name: Minus
  nameWithType: LocalDate.Minus
  fullName: NodaTime.LocalDate.Minus
- uid: NodaTime.Period.Between(NodaTime.LocalDate,NodaTime.LocalDate)
  commentId: M:NodaTime.Period.Between(NodaTime.LocalDate,NodaTime.LocalDate)
  isExternal: true
- uid: NodaTime.LocalDate.op_Equality*
  commentId: Overload:NodaTime.LocalDate.op_Equality
  name: Equality
  nameWithType: LocalDate.Equality
  fullName: NodaTime.LocalDate.Equality
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: NodaTime.LocalDate.op_Inequality*
  commentId: Overload:NodaTime.LocalDate.op_Inequality
  name: Inequality
  nameWithType: LocalDate.Inequality
  fullName: NodaTime.LocalDate.Inequality
- uid: NodaTime.LocalDate.op_LessThan*
  commentId: Overload:NodaTime.LocalDate.op_LessThan
  name: LessThan
  nameWithType: LocalDate.LessThan
  fullName: NodaTime.LocalDate.LessThan
- uid: NodaTime.LocalDate.op_LessThanOrEqual*
  commentId: Overload:NodaTime.LocalDate.op_LessThanOrEqual
  name: LessThanOrEqual
  nameWithType: LocalDate.LessThanOrEqual
  fullName: NodaTime.LocalDate.LessThanOrEqual
- uid: NodaTime.LocalDate.op_GreaterThan*
  commentId: Overload:NodaTime.LocalDate.op_GreaterThan
  name: GreaterThan
  nameWithType: LocalDate.GreaterThan
  fullName: NodaTime.LocalDate.GreaterThan
- uid: NodaTime.LocalDate.op_GreaterThanOrEqual*
  commentId: Overload:NodaTime.LocalDate.op_GreaterThanOrEqual
  name: GreaterThanOrEqual
  nameWithType: LocalDate.GreaterThanOrEqual
  fullName: NodaTime.LocalDate.GreaterThanOrEqual
- uid: NodaTime.LocalDate.CompareTo*
  commentId: Overload:NodaTime.LocalDate.CompareTo
  name: CompareTo
  nameWithType: LocalDate.CompareTo
  fullName: NodaTime.LocalDate.CompareTo
- uid: System.IComparable{NodaTime.LocalDate}.CompareTo(NodaTime.LocalDate)
  commentId: M:System.IComparable{NodaTime.LocalDate}.CompareTo(NodaTime.LocalDate)
  parent: System.IComparable{NodaTime.LocalDate}
  definition: System.IComparable`1.CompareTo(`0)
  name: CompareTo(LocalDate)
  nameWithType: IComparable<LocalDate>.CompareTo(LocalDate)
  fullName: System.IComparable<NodaTime.LocalDate>.CompareTo(NodaTime.LocalDate)
  nameWithType.vb: IComparable(Of LocalDate).CompareTo(LocalDate)
  fullName.vb: System.IComparable(Of NodaTime.LocalDate).CompareTo(NodaTime.LocalDate)
  spec.csharp:
  - uid: System.IComparable`1.CompareTo(`0)
    name: CompareTo
    nameWithType: IComparable<LocalDate>.CompareTo
    fullName: System.IComparable<NodaTime.LocalDate>.CompareTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: NodaTime.LocalDate
    name: LocalDate
    nameWithType: LocalDate
    fullName: NodaTime.LocalDate
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IComparable`1.CompareTo(`0)
    name: CompareTo
    nameWithType: IComparable(Of LocalDate).CompareTo
    fullName: System.IComparable(Of NodaTime.LocalDate).CompareTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: NodaTime.LocalDate
    name: LocalDate
    nameWithType: LocalDate
    fullName: NodaTime.LocalDate
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IComparable`1.CompareTo(`0)
  commentId: M:System.IComparable`1.CompareTo(`0)
  isExternal: true
  name: CompareTo(T)
  nameWithType: IComparable<T>.CompareTo(T)
  fullName: System.IComparable<T>.CompareTo(T)
  nameWithType.vb: IComparable(Of T).CompareTo(T)
  fullName.vb: System.IComparable(Of T).CompareTo(T)
  spec.csharp:
  - uid: System.IComparable`1.CompareTo(`0)
    name: CompareTo
    nameWithType: IComparable<T>.CompareTo
    fullName: System.IComparable<T>.CompareTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IComparable`1.CompareTo(`0)
    name: CompareTo
    nameWithType: IComparable(Of T).CompareTo
    fullName: System.IComparable(Of T).CompareTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IComparable.CompareTo(System.Object)
  commentId: M:System.IComparable.CompareTo(System.Object)
  parent: System.IComparable
  isExternal: true
  name: CompareTo(Object)
  nameWithType: IComparable.CompareTo(Object)
  fullName: System.IComparable.CompareTo(System.Object)
  spec.csharp:
  - uid: System.IComparable.CompareTo(System.Object)
    name: CompareTo
    nameWithType: IComparable.CompareTo
    fullName: System.IComparable.CompareTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IComparable.CompareTo(System.Object)
    name: CompareTo
    nameWithType: IComparable.CompareTo
    fullName: System.IComparable.CompareTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: NodaTime.LocalDate.System#IComparable#CompareTo*
  commentId: Overload:NodaTime.LocalDate.System#IComparable#CompareTo
  name: IComparable.CompareTo
  nameWithType: LocalDate.IComparable.CompareTo
  fullName: NodaTime.LocalDate.System.IComparable.CompareTo
  nameWithType.vb: LocalDate.System.IComparable.CompareTo
  name.vb: System.IComparable.CompareTo
- uid: NodaTime.LocalDate.Max*
  commentId: Overload:NodaTime.LocalDate.Max
  name: Max
  nameWithType: LocalDate.Max
  fullName: NodaTime.LocalDate.Max
- uid: NodaTime.LocalDate.Min*
  commentId: Overload:NodaTime.LocalDate.Min
  name: Min
  nameWithType: LocalDate.Min
  fullName: NodaTime.LocalDate.Min
- uid: System.ValueType.GetHashCode
  commentId: M:System.ValueType.GetHashCode
  parent: System.ValueType
  isExternal: true
  name: GetHashCode()
  nameWithType: ValueType.GetHashCode()
  fullName: System.ValueType.GetHashCode()
  spec.csharp:
  - uid: System.ValueType.GetHashCode
    name: GetHashCode
    nameWithType: ValueType.GetHashCode
    fullName: System.ValueType.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.ValueType.GetHashCode
    name: GetHashCode
    nameWithType: ValueType.GetHashCode
    fullName: System.ValueType.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: NodaTime.LocalDate.GetHashCode*
  commentId: Overload:NodaTime.LocalDate.GetHashCode
  name: GetHashCode
  nameWithType: LocalDate.GetHashCode
  fullName: NodaTime.LocalDate.GetHashCode
- uid: System.ValueType
  commentId: T:System.ValueType
  parent: System
  isExternal: true
  name: ValueType
  nameWithType: ValueType
  fullName: System.ValueType
- uid: System.ValueType.Equals(System.Object)
  commentId: M:System.ValueType.Equals(System.Object)
  parent: System.ValueType
  isExternal: true
  name: Equals(Object)
  nameWithType: ValueType.Equals(Object)
  fullName: System.ValueType.Equals(System.Object)
  spec.csharp:
  - uid: System.ValueType.Equals(System.Object)
    name: Equals
    nameWithType: ValueType.Equals
    fullName: System.ValueType.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.ValueType.Equals(System.Object)
    name: Equals
    nameWithType: ValueType.Equals
    fullName: System.ValueType.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: NodaTime.LocalDate.Equals*
  commentId: Overload:NodaTime.LocalDate.Equals
  name: Equals
  nameWithType: LocalDate.Equals
  fullName: NodaTime.LocalDate.Equals
- uid: System.IEquatable{NodaTime.LocalDate}.Equals(NodaTime.LocalDate)
  commentId: M:System.IEquatable{NodaTime.LocalDate}.Equals(NodaTime.LocalDate)
  parent: System.IEquatable{NodaTime.LocalDate}
  definition: System.IEquatable`1.Equals(`0)
  name: Equals(LocalDate)
  nameWithType: IEquatable<LocalDate>.Equals(LocalDate)
  fullName: System.IEquatable<NodaTime.LocalDate>.Equals(NodaTime.LocalDate)
  nameWithType.vb: IEquatable(Of LocalDate).Equals(LocalDate)
  fullName.vb: System.IEquatable(Of NodaTime.LocalDate).Equals(NodaTime.LocalDate)
  spec.csharp:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    nameWithType: IEquatable<LocalDate>.Equals
    fullName: System.IEquatable<NodaTime.LocalDate>.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: NodaTime.LocalDate
    name: LocalDate
    nameWithType: LocalDate
    fullName: NodaTime.LocalDate
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    nameWithType: IEquatable(Of LocalDate).Equals
    fullName: System.IEquatable(Of NodaTime.LocalDate).Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: NodaTime.LocalDate
    name: LocalDate
    nameWithType: LocalDate
    fullName: NodaTime.LocalDate
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IEquatable`1.Equals(`0)
  commentId: M:System.IEquatable`1.Equals(`0)
  isExternal: true
  name: Equals(T)
  nameWithType: IEquatable<T>.Equals(T)
  fullName: System.IEquatable<T>.Equals(T)
  nameWithType.vb: IEquatable(Of T).Equals(T)
  fullName.vb: System.IEquatable(Of T).Equals(T)
  spec.csharp:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    nameWithType: IEquatable<T>.Equals
    fullName: System.IEquatable<T>.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    nameWithType: IEquatable(Of T).Equals
    fullName: System.IEquatable(Of T).Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: NodaTime.ZonedDateTime
  commentId: T:NodaTime.ZonedDateTime
  parent: NodaTime
  name: ZonedDateTime
  nameWithType: ZonedDateTime
  fullName: NodaTime.ZonedDateTime
- uid: NodaTime.DateTimeZone.AtStartOfDay(NodaTime.LocalDate)
  commentId: M:NodaTime.DateTimeZone.AtStartOfDay(NodaTime.LocalDate)
  parent: NodaTime.DateTimeZone
  name: AtStartOfDay(LocalDate)
  nameWithType: DateTimeZone.AtStartOfDay(LocalDate)
  fullName: NodaTime.DateTimeZone.AtStartOfDay(NodaTime.LocalDate)
  spec.csharp:
  - uid: NodaTime.DateTimeZone.AtStartOfDay(NodaTime.LocalDate)
    name: AtStartOfDay
    nameWithType: DateTimeZone.AtStartOfDay
    fullName: NodaTime.DateTimeZone.AtStartOfDay
  - name: (
    nameWithType: (
    fullName: (
  - uid: NodaTime.LocalDate
    name: LocalDate
    nameWithType: LocalDate
    fullName: NodaTime.LocalDate
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NodaTime.DateTimeZone.AtStartOfDay(NodaTime.LocalDate)
    name: AtStartOfDay
    nameWithType: DateTimeZone.AtStartOfDay
    fullName: NodaTime.DateTimeZone.AtStartOfDay
  - name: (
    nameWithType: (
    fullName: (
  - uid: NodaTime.LocalDate
    name: LocalDate
    nameWithType: LocalDate
    fullName: NodaTime.LocalDate
  - name: )
    nameWithType: )
    fullName: )
- uid: NodaTime.SkippedTimeException
  commentId: T:NodaTime.SkippedTimeException
  name: SkippedTimeException
  nameWithType: SkippedTimeException
  fullName: NodaTime.SkippedTimeException
- uid: NodaTime.LocalDate.AtStartOfDayInZone*
  commentId: Overload:NodaTime.LocalDate.AtStartOfDayInZone
  name: AtStartOfDayInZone
  nameWithType: LocalDate.AtStartOfDayInZone
  fullName: NodaTime.LocalDate.AtStartOfDayInZone
- uid: NodaTime.DateTimeZone
  commentId: T:NodaTime.DateTimeZone
  parent: NodaTime
  name: DateTimeZone
  nameWithType: DateTimeZone
  fullName: NodaTime.DateTimeZone
- uid: NodaTime.LocalDate.WithCalendar*
  commentId: Overload:NodaTime.LocalDate.WithCalendar
  name: WithCalendar
  nameWithType: LocalDate.WithCalendar
  fullName: NodaTime.LocalDate.WithCalendar
- uid: NodaTime.LocalDate.PlusYears*
  commentId: Overload:NodaTime.LocalDate.PlusYears
  name: PlusYears
  nameWithType: LocalDate.PlusYears
  fullName: NodaTime.LocalDate.PlusYears
- uid: NodaTime.LocalDate.PlusMonths*
  commentId: Overload:NodaTime.LocalDate.PlusMonths
  name: PlusMonths
  nameWithType: LocalDate.PlusMonths
  fullName: NodaTime.LocalDate.PlusMonths
- uid: NodaTime.LocalDate.PlusDays*
  commentId: Overload:NodaTime.LocalDate.PlusDays
  name: PlusDays
  nameWithType: LocalDate.PlusDays
  fullName: NodaTime.LocalDate.PlusDays
- uid: NodaTime.LocalDate.PlusWeeks*
  commentId: Overload:NodaTime.LocalDate.PlusWeeks
  name: PlusWeeks
  nameWithType: LocalDate.PlusWeeks
  fullName: NodaTime.LocalDate.PlusWeeks
- uid: System.InvalidOperationException
  commentId: T:System.InvalidOperationException
  isExternal: true
- uid: NodaTime.LocalDate.Next*
  commentId: Overload:NodaTime.LocalDate.Next
  name: Next
  nameWithType: LocalDate.Next
  fullName: NodaTime.LocalDate.Next
- uid: NodaTime.LocalDate.Previous*
  commentId: Overload:NodaTime.LocalDate.Previous
  name: Previous
  nameWithType: LocalDate.Previous
  fullName: NodaTime.LocalDate.Previous
- uid: NodaTime.OffsetDate
  commentId: T:NodaTime.OffsetDate
  parent: NodaTime
  name: OffsetDate
  nameWithType: OffsetDate
  fullName: NodaTime.OffsetDate
- uid: NodaTime.LocalDate.WithOffset*
  commentId: Overload:NodaTime.LocalDate.WithOffset
  name: WithOffset
  nameWithType: LocalDate.WithOffset
  fullName: NodaTime.LocalDate.WithOffset
- uid: NodaTime.Offset
  commentId: T:NodaTime.Offset
  parent: NodaTime
  name: Offset
  nameWithType: Offset
  fullName: NodaTime.Offset
- uid: NodaTime.LocalDate.At*
  commentId: Overload:NodaTime.LocalDate.At
  name: At
  nameWithType: LocalDate.At
  fullName: NodaTime.LocalDate.At
- uid: NodaTime.LocalDate.With*
  commentId: Overload:NodaTime.LocalDate.With
  name: With
  nameWithType: LocalDate.With
  fullName: NodaTime.LocalDate.With
- uid: System.Func{NodaTime.LocalDate,NodaTime.LocalDate}
  commentId: T:System.Func{NodaTime.LocalDate,NodaTime.LocalDate}
  parent: System
  definition: System.Func`2
  name: Func<LocalDate, LocalDate>
  nameWithType: Func<LocalDate, LocalDate>
  fullName: System.Func<NodaTime.LocalDate, NodaTime.LocalDate>
  nameWithType.vb: Func(Of LocalDate, LocalDate)
  fullName.vb: System.Func(Of NodaTime.LocalDate, NodaTime.LocalDate)
  name.vb: Func(Of LocalDate, LocalDate)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: NodaTime.LocalDate
    name: LocalDate
    nameWithType: LocalDate
    fullName: NodaTime.LocalDate
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: NodaTime.LocalDate
    name: LocalDate
    nameWithType: LocalDate
    fullName: NodaTime.LocalDate
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: NodaTime.LocalDate
    name: LocalDate
    nameWithType: LocalDate
    fullName: NodaTime.LocalDate
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: NodaTime.LocalDate
    name: LocalDate
    nameWithType: LocalDate
    fullName: NodaTime.LocalDate
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func`2
  commentId: T:System.Func`2
  isExternal: true
  name: Func<T, TResult>
  nameWithType: Func<T, TResult>
  fullName: System.Func<T, TResult>
  nameWithType.vb: Func(Of T, TResult)
  fullName.vb: System.Func(Of T, TResult)
  name.vb: Func(Of T, TResult)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: NodaTime.LocalDate.Deconstruct*
  commentId: Overload:NodaTime.LocalDate.Deconstruct
  name: Deconstruct
  nameWithType: LocalDate.Deconstruct
  fullName: NodaTime.LocalDate.Deconstruct
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.ValueType.ToString
  commentId: M:System.ValueType.ToString
  parent: System.ValueType
  isExternal: true
  name: ToString()
  nameWithType: ValueType.ToString()
  fullName: System.ValueType.ToString()
  spec.csharp:
  - uid: System.ValueType.ToString
    name: ToString
    nameWithType: ValueType.ToString
    fullName: System.ValueType.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.ValueType.ToString
    name: ToString
    nameWithType: ValueType.ToString
    fullName: System.ValueType.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: NodaTime.LocalDate.ToString*
  commentId: Overload:NodaTime.LocalDate.ToString
  name: ToString
  nameWithType: LocalDate.ToString
  fullName: NodaTime.LocalDate.ToString
- uid: System.IFormatProvider
  commentId: T:System.IFormatProvider
  parent: System
  isExternal: true
  name: IFormatProvider
  nameWithType: IFormatProvider
  fullName: System.IFormatProvider
- uid: System.IFormattable.ToString(System.String,System.IFormatProvider)
  commentId: M:System.IFormattable.ToString(System.String,System.IFormatProvider)
  parent: System.IFormattable
  isExternal: true
  name: ToString(String, IFormatProvider)
  nameWithType: IFormattable.ToString(String, IFormatProvider)
  fullName: System.IFormattable.ToString(System.String, System.IFormatProvider)
  spec.csharp:
  - uid: System.IFormattable.ToString(System.String,System.IFormatProvider)
    name: ToString
    nameWithType: IFormattable.ToString
    fullName: System.IFormattable.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.IFormatProvider
    name: IFormatProvider
    nameWithType: IFormatProvider
    fullName: System.IFormatProvider
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IFormattable.ToString(System.String,System.IFormatProvider)
    name: ToString
    nameWithType: IFormattable.ToString
    fullName: System.IFormattable.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.IFormatProvider
    name: IFormatProvider
    nameWithType: IFormatProvider
    fullName: System.IFormatProvider
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: NodaTime.LocalDate.System#Xml#Serialization#IXmlSerializable#GetSchema*
  commentId: Overload:NodaTime.LocalDate.System#Xml#Serialization#IXmlSerializable#GetSchema
  name: IXmlSerializable.GetSchema
  nameWithType: LocalDate.IXmlSerializable.GetSchema
  fullName: NodaTime.LocalDate.System.Xml.Serialization.IXmlSerializable.GetSchema
  nameWithType.vb: LocalDate.System.Xml.Serialization.IXmlSerializable.GetSchema
  name.vb: System.Xml.Serialization.IXmlSerializable.GetSchema
- uid: System.Xml.Serialization.IXmlSerializable.GetSchema
  commentId: M:System.Xml.Serialization.IXmlSerializable.GetSchema
  parent: System.Xml.Serialization.IXmlSerializable
  isExternal: true
  name: GetSchema()
  nameWithType: IXmlSerializable.GetSchema()
  fullName: System.Xml.Serialization.IXmlSerializable.GetSchema()
  spec.csharp:
  - uid: System.Xml.Serialization.IXmlSerializable.GetSchema
    name: GetSchema
    nameWithType: IXmlSerializable.GetSchema
    fullName: System.Xml.Serialization.IXmlSerializable.GetSchema
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Xml.Serialization.IXmlSerializable.GetSchema
    name: GetSchema
    nameWithType: IXmlSerializable.GetSchema
    fullName: System.Xml.Serialization.IXmlSerializable.GetSchema
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Xml.Schema.XmlSchema
  commentId: T:System.Xml.Schema.XmlSchema
  parent: System.Xml.Schema
  isExternal: true
  name: XmlSchema
  nameWithType: XmlSchema
  fullName: System.Xml.Schema.XmlSchema
- uid: System.Xml.Schema
  commentId: N:System.Xml.Schema
  isExternal: true
  name: System.Xml.Schema
  nameWithType: System.Xml.Schema
  fullName: System.Xml.Schema
- uid: NodaTime.LocalDate.System#Xml#Serialization#IXmlSerializable#ReadXml*
  commentId: Overload:NodaTime.LocalDate.System#Xml#Serialization#IXmlSerializable#ReadXml
  name: IXmlSerializable.ReadXml
  nameWithType: LocalDate.IXmlSerializable.ReadXml
  fullName: NodaTime.LocalDate.System.Xml.Serialization.IXmlSerializable.ReadXml
  nameWithType.vb: LocalDate.System.Xml.Serialization.IXmlSerializable.ReadXml
  name.vb: System.Xml.Serialization.IXmlSerializable.ReadXml
- uid: System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)
  commentId: M:System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)
  parent: System.Xml.Serialization.IXmlSerializable
  isExternal: true
  name: ReadXml(XmlReader)
  nameWithType: IXmlSerializable.ReadXml(XmlReader)
  fullName: System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)
  spec.csharp:
  - uid: System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)
    name: ReadXml
    nameWithType: IXmlSerializable.ReadXml
    fullName: System.Xml.Serialization.IXmlSerializable.ReadXml
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Xml.XmlReader
    name: XmlReader
    nameWithType: XmlReader
    fullName: System.Xml.XmlReader
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)
    name: ReadXml
    nameWithType: IXmlSerializable.ReadXml
    fullName: System.Xml.Serialization.IXmlSerializable.ReadXml
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Xml.XmlReader
    name: XmlReader
    nameWithType: XmlReader
    fullName: System.Xml.XmlReader
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Xml.XmlReader
  commentId: T:System.Xml.XmlReader
  parent: System.Xml
  isExternal: true
  name: XmlReader
  nameWithType: XmlReader
  fullName: System.Xml.XmlReader
- uid: System.Xml
  commentId: N:System.Xml
  isExternal: true
  name: System.Xml
  nameWithType: System.Xml
  fullName: System.Xml
- uid: NodaTime.LocalDate.System#Xml#Serialization#IXmlSerializable#WriteXml*
  commentId: Overload:NodaTime.LocalDate.System#Xml#Serialization#IXmlSerializable#WriteXml
  name: IXmlSerializable.WriteXml
  nameWithType: LocalDate.IXmlSerializable.WriteXml
  fullName: NodaTime.LocalDate.System.Xml.Serialization.IXmlSerializable.WriteXml
  nameWithType.vb: LocalDate.System.Xml.Serialization.IXmlSerializable.WriteXml
  name.vb: System.Xml.Serialization.IXmlSerializable.WriteXml
- uid: System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)
  commentId: M:System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)
  parent: System.Xml.Serialization.IXmlSerializable
  isExternal: true
  name: WriteXml(XmlWriter)
  nameWithType: IXmlSerializable.WriteXml(XmlWriter)
  fullName: System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)
  spec.csharp:
  - uid: System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)
    name: WriteXml
    nameWithType: IXmlSerializable.WriteXml
    fullName: System.Xml.Serialization.IXmlSerializable.WriteXml
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Xml.XmlWriter
    name: XmlWriter
    nameWithType: XmlWriter
    fullName: System.Xml.XmlWriter
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)
    name: WriteXml
    nameWithType: IXmlSerializable.WriteXml
    fullName: System.Xml.Serialization.IXmlSerializable.WriteXml
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Xml.XmlWriter
    name: XmlWriter
    nameWithType: XmlWriter
    fullName: System.Xml.XmlWriter
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Xml.XmlWriter
  commentId: T:System.Xml.XmlWriter
  parent: System.Xml
  isExternal: true
  name: XmlWriter
  nameWithType: XmlWriter
  fullName: System.Xml.XmlWriter
- uid: System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  commentId: M:System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  parent: System.Runtime.Serialization.ISerializable
  isExternal: true
  name: GetObjectData(SerializationInfo, StreamingContext)
  nameWithType: ISerializable.GetObjectData(SerializationInfo, StreamingContext)
  fullName: System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext)
  spec.csharp:
  - uid: System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
    name: GetObjectData
    nameWithType: ISerializable.GetObjectData
    fullName: System.Runtime.Serialization.ISerializable.GetObjectData
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Runtime.Serialization.SerializationInfo
    name: SerializationInfo
    nameWithType: SerializationInfo
    fullName: System.Runtime.Serialization.SerializationInfo
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Runtime.Serialization.StreamingContext
    name: StreamingContext
    nameWithType: StreamingContext
    fullName: System.Runtime.Serialization.StreamingContext
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
    name: GetObjectData
    nameWithType: ISerializable.GetObjectData
    fullName: System.Runtime.Serialization.ISerializable.GetObjectData
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Runtime.Serialization.SerializationInfo
    name: SerializationInfo
    nameWithType: SerializationInfo
    fullName: System.Runtime.Serialization.SerializationInfo
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Runtime.Serialization.StreamingContext
    name: StreamingContext
    nameWithType: StreamingContext
    fullName: System.Runtime.Serialization.StreamingContext
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Runtime.Serialization.SerializationInfo
  commentId: T:System.Runtime.Serialization.SerializationInfo
  parent: System.Runtime.Serialization
  isExternal: true
  name: SerializationInfo
  nameWithType: SerializationInfo
  fullName: System.Runtime.Serialization.SerializationInfo
- uid: NodaTime.LocalDate.System#Runtime#Serialization#ISerializable#GetObjectData*
  commentId: Overload:NodaTime.LocalDate.System#Runtime#Serialization#ISerializable#GetObjectData
  name: ISerializable.GetObjectData
  nameWithType: LocalDate.ISerializable.GetObjectData
  fullName: NodaTime.LocalDate.System.Runtime.Serialization.ISerializable.GetObjectData
  nameWithType.vb: LocalDate.System.Runtime.Serialization.ISerializable.GetObjectData
  name.vb: System.Runtime.Serialization.ISerializable.GetObjectData
- uid: System.Runtime.Serialization.StreamingContext
  commentId: T:System.Runtime.Serialization.StreamingContext
  parent: System.Runtime.Serialization
  isExternal: true
  name: StreamingContext
  nameWithType: StreamingContext
  fullName: System.Runtime.Serialization.StreamingContext
shouldSkipMarkup: true
