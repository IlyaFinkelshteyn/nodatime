### YamlMime:ManagedReference
items:
- uid: NodaTime.DateInterval
  commentId: T:NodaTime.DateInterval
  id: DateInterval
  parent: NodaTime
  children:
  - NodaTime.DateInterval.#ctor(NodaTime.LocalDate,NodaTime.LocalDate)
  - NodaTime.DateInterval.Calendar
  - NodaTime.DateInterval.Contains(NodaTime.DateInterval)
  - NodaTime.DateInterval.Contains(NodaTime.LocalDate)
  - NodaTime.DateInterval.Deconstruct(NodaTime.LocalDate@,NodaTime.LocalDate@)
  - NodaTime.DateInterval.End
  - NodaTime.DateInterval.Equals(NodaTime.DateInterval)
  - NodaTime.DateInterval.Equals(System.Object)
  - NodaTime.DateInterval.GetEnumerator
  - NodaTime.DateInterval.GetHashCode
  - NodaTime.DateInterval.Intersection(NodaTime.DateInterval)
  - NodaTime.DateInterval.Length
  - NodaTime.DateInterval.op_Equality(NodaTime.DateInterval,NodaTime.DateInterval)
  - NodaTime.DateInterval.op_Inequality(NodaTime.DateInterval,NodaTime.DateInterval)
  - NodaTime.DateInterval.Start
  - NodaTime.DateInterval.System#Collections#IEnumerable#GetEnumerator
  - NodaTime.DateInterval.ToString
  - NodaTime.DateInterval.Union(NodaTime.DateInterval)
  langs:
  - csharp
  - vb
  name: DateInterval
  nameWithType: DateInterval
  fullName: NodaTime.DateInterval
  type: Class
  source:
    remote:
      path: 2.3.x/src/NodaTime/DateInterval.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: DateInterval
    path: src/NodaTime/DateInterval.cs
    startLine: 27
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nAn interval between two dates.\n"
  remarks: "\n<p>\nThe two dates must be in the same calendar, and the end date must not be earlier than the start date.\n</p>\n<p>\nThe end date is deemed to be part of the range, as this matches many real life uses of\ndate ranges. For example, if someone says &quot;I&apos;m going to be on holiday from Monday to Friday,&quot; they\nusually mean that Friday is part of their holiday.\n</p>\n"
  example: []
  syntax:
    content: 'public sealed class DateInterval : IEquatable<DateInterval>, IEnumerable<LocalDate>, IEnumerable'
    content.vb: >-
      Public NotInheritable Class DateInterval
          Implements IEquatable(Of DateInterval), IEnumerable(Of LocalDate), IEnumerable
  inheritance:
  - System.Object
  implements:
  - System.IEquatable{NodaTime.DateInterval}
  - System.Collections.Generic.IEnumerable{NodaTime.LocalDate}
  - System.Collections.IEnumerable
  inheritedMembers:
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - sealed
  - class
  modifiers.vb:
  - Public
  - NotInheritable
  - Class
- uid: NodaTime.DateInterval.Start
  commentId: P:NodaTime.DateInterval.Start
  id: Start
  parent: NodaTime.DateInterval
  langs:
  - csharp
  - vb
  name: Start
  nameWithType: DateInterval.Start
  fullName: NodaTime.DateInterval.Start
  type: Property
  source:
    remote:
      path: 2.3.x/src/NodaTime/DateInterval.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: Start
    path: src/NodaTime/DateInterval.cs
    startLine: 34
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nGets the start date of the interval.\n"
  example: []
  syntax:
    content: public LocalDate Start { get; }
    parameters: []
    return:
      type: NodaTime.LocalDate
      description: The start date of the interval.
    content.vb: Public ReadOnly Property Start As LocalDate
  overload: NodaTime.DateInterval.Start*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: NodaTime.DateInterval.End
  commentId: P:NodaTime.DateInterval.End
  id: End
  parent: NodaTime.DateInterval
  langs:
  - csharp
  - vb
  name: End
  nameWithType: DateInterval.End
  fullName: NodaTime.DateInterval.End
  type: Property
  source:
    remote:
      path: 2.3.x/src/NodaTime/DateInterval.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: End
    path: src/NodaTime/DateInterval.cs
    startLine: 40
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nGets the end date of the interval.\n"
  example: []
  syntax:
    content: public LocalDate End { get; }
    parameters: []
    return:
      type: NodaTime.LocalDate
      description: The end date of the interval.
    content.vb: Public ReadOnly Property End As LocalDate
  overload: NodaTime.DateInterval.End*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: NodaTime.DateInterval.#ctor(NodaTime.LocalDate,NodaTime.LocalDate)
  commentId: M:NodaTime.DateInterval.#ctor(NodaTime.LocalDate,NodaTime.LocalDate)
  id: '#ctor(NodaTime.LocalDate,NodaTime.LocalDate)'
  parent: NodaTime.DateInterval
  langs:
  - csharp
  - vb
  name: DateInterval(LocalDate, LocalDate)
  nameWithType: DateInterval.DateInterval(LocalDate, LocalDate)
  fullName: NodaTime.DateInterval.DateInterval(NodaTime.LocalDate, NodaTime.LocalDate)
  type: Constructor
  source:
    remote:
      path: 2.3.x/src/NodaTime/DateInterval.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: .ctor
    path: src/NodaTime/DateInterval.cs
    startLine: 52
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nConstructs a date interval from a start date and an end date, both of which are included\nin the interval.\n"
  example: []
  syntax:
    content: public DateInterval(LocalDate start, LocalDate end)
    parameters:
    - id: start
      type: NodaTime.LocalDate
      description: Start date of the interval
    - id: end
      type: NodaTime.LocalDate
      description: End date of the interval
    content.vb: Public Sub New(start As LocalDate, end As LocalDate)
  overload: NodaTime.DateInterval.#ctor*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: >
      <code data-dev-comment-type="paramref" class="paramref">end</code> is earlier than <code data-dev-comment-type="paramref" class="paramref">start</code>
          or the two dates are in different calendars.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: NodaTime.DateInterval.GetHashCode
  commentId: M:NodaTime.DateInterval.GetHashCode
  id: GetHashCode
  parent: NodaTime.DateInterval
  langs:
  - csharp
  - vb
  name: GetHashCode()
  nameWithType: DateInterval.GetHashCode()
  fullName: NodaTime.DateInterval.GetHashCode()
  type: Method
  source:
    remote:
      path: 2.3.x/src/NodaTime/DateInterval.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: GetHashCode
    path: src/NodaTime/DateInterval.cs
    startLine: 65
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nReturns the hash code for this interval, consistent with <xref href=\"NodaTime.DateInterval.Equals(NodaTime.DateInterval)\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public override int GetHashCode()
    return:
      type: System.Int32
      description: The hash code for this interval.
    content.vb: Public Overrides Function GetHashCode As Integer
  overridden: System.Object.GetHashCode
  overload: NodaTime.DateInterval.GetHashCode*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: NodaTime.DateInterval.op_Equality(NodaTime.DateInterval,NodaTime.DateInterval)
  commentId: M:NodaTime.DateInterval.op_Equality(NodaTime.DateInterval,NodaTime.DateInterval)
  id: op_Equality(NodaTime.DateInterval,NodaTime.DateInterval)
  parent: NodaTime.DateInterval
  langs:
  - csharp
  - vb
  name: Equality(DateInterval, DateInterval)
  nameWithType: DateInterval.Equality(DateInterval, DateInterval)
  fullName: NodaTime.DateInterval.Equality(NodaTime.DateInterval, NodaTime.DateInterval)
  type: Operator
  source:
    remote:
      path: 2.3.x/src/NodaTime/DateInterval.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: op_Equality
    path: src/NodaTime/DateInterval.cs
    startLine: 80
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nCompares two <xref href=\"NodaTime.DateInterval\" data-throw-if-not-resolved=\"false\"></xref> values for equality.\n"
  remarks: "\nDate intervals are equal if they have the same start and end dates.\n"
  example: []
  syntax:
    content: public static bool operator ==(DateInterval lhs, DateInterval rhs)
    parameters:
    - id: lhs
      type: NodaTime.DateInterval
      description: The first value to compare
    - id: rhs
      type: NodaTime.DateInterval
      description: The second value to compare
    return:
      type: System.Boolean
      description: True if the two date intervals have the same properties; false otherwise.
    content.vb: Public Shared Operator =(lhs As DateInterval, rhs As DateInterval) As Boolean
  overload: NodaTime.DateInterval.op_Equality*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: NodaTime.DateInterval.op_Inequality(NodaTime.DateInterval,NodaTime.DateInterval)
  commentId: M:NodaTime.DateInterval.op_Inequality(NodaTime.DateInterval,NodaTime.DateInterval)
  id: op_Inequality(NodaTime.DateInterval,NodaTime.DateInterval)
  parent: NodaTime.DateInterval
  langs:
  - csharp
  - vb
  name: Inequality(DateInterval, DateInterval)
  nameWithType: DateInterval.Inequality(DateInterval, DateInterval)
  fullName: NodaTime.DateInterval.Inequality(NodaTime.DateInterval, NodaTime.DateInterval)
  type: Operator
  source:
    remote:
      path: 2.3.x/src/NodaTime/DateInterval.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: op_Inequality
    path: src/NodaTime/DateInterval.cs
    startLine: 102
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nCompares two <xref href=\"NodaTime.DateInterval\" data-throw-if-not-resolved=\"false\"></xref> values for inequality.\n"
  remarks: "\nDate intervals are equal if they have the same start and end dates.\n"
  example: []
  syntax:
    content: public static bool operator !=(DateInterval lhs, DateInterval rhs)
    parameters:
    - id: lhs
      type: NodaTime.DateInterval
      description: The first value to compare
    - id: rhs
      type: NodaTime.DateInterval
      description: The second value to compare
    return:
      type: System.Boolean
      description: False if the two date intervals have the same start and end date; true otherwise.
    content.vb: Public Shared Operator <>(lhs As DateInterval, rhs As DateInterval) As Boolean
  overload: NodaTime.DateInterval.op_Inequality*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: NodaTime.DateInterval.Equals(NodaTime.DateInterval)
  commentId: M:NodaTime.DateInterval.Equals(NodaTime.DateInterval)
  id: Equals(NodaTime.DateInterval)
  parent: NodaTime.DateInterval
  langs:
  - csharp
  - vb
  name: Equals(DateInterval)
  nameWithType: DateInterval.Equals(DateInterval)
  fullName: NodaTime.DateInterval.Equals(NodaTime.DateInterval)
  type: Method
  source:
    remote:
      path: 2.3.x/src/NodaTime/DateInterval.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: Equals
    path: src/NodaTime/DateInterval.cs
    startLine: 112
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nCompares the given date interval for equality with this one.\n"
  remarks: "\nDate intervals are equal if they have the same start and end dates.\n"
  example: []
  syntax:
    content: public bool Equals(DateInterval other)
    parameters:
    - id: other
      type: NodaTime.DateInterval
      description: The date interval to compare this one with.
    return:
      type: System.Boolean
      description: True if this date interval has the same same start and end date as the one specified.
    content.vb: Public Function Equals(other As DateInterval) As Boolean
  overload: NodaTime.DateInterval.Equals*
  implements:
  - System.IEquatable{NodaTime.DateInterval}.Equals(NodaTime.DateInterval)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: NodaTime.DateInterval.Equals(System.Object)
  commentId: M:NodaTime.DateInterval.Equals(System.Object)
  id: Equals(System.Object)
  parent: NodaTime.DateInterval
  langs:
  - csharp
  - vb
  name: Equals(Object)
  nameWithType: DateInterval.Equals(Object)
  fullName: NodaTime.DateInterval.Equals(System.Object)
  type: Method
  source:
    remote:
      path: 2.3.x/src/NodaTime/DateInterval.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: Equals
    path: src/NodaTime/DateInterval.cs
    startLine: 119
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nCompares the given object for equality with this one, as per <xref href=\"NodaTime.DateInterval.Equals(NodaTime.DateInterval)\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public override bool Equals(object obj)
    parameters:
    - id: obj
      type: System.Object
      description: The value to compare this one with.
    return:
      type: System.Boolean
      description: true if the other object is a date interval equal to this one, consistent with <xref href="NodaTime.DateInterval.Equals(NodaTime.DateInterval)" data-throw-if-not-resolved="false"></xref>.
    content.vb: Public Overrides Function Equals(obj As Object) As Boolean
  overridden: System.Object.Equals(System.Object)
  overload: NodaTime.DateInterval.Equals*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: NodaTime.DateInterval.Contains(NodaTime.LocalDate)
  commentId: M:NodaTime.DateInterval.Contains(NodaTime.LocalDate)
  id: Contains(NodaTime.LocalDate)
  parent: NodaTime.DateInterval
  langs:
  - csharp
  - vb
  name: Contains(LocalDate)
  nameWithType: DateInterval.Contains(LocalDate)
  fullName: NodaTime.DateInterval.Contains(NodaTime.LocalDate)
  type: Method
  source:
    remote:
      path: 2.3.x/src/NodaTime/DateInterval.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: Contains
    path: src/NodaTime/DateInterval.cs
    startLine: 130
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nChecks whether the given date is within this date interval. This requires\nthat the date is not earlier than the start date, and not later than the end\ndate.\n"
  example: []
  syntax:
    content: public bool Contains(LocalDate date)
    parameters:
    - id: date
      type: NodaTime.LocalDate
      description: The date to check for containment within this interval.
    return:
      type: System.Boolean
      description: <code>true</code> if <code data-dev-comment-type="paramref" class="paramref">date</code> is within this interval; <code>false</code> otherwise.
    content.vb: Public Function Contains(date As LocalDate) As Boolean
  overload: NodaTime.DateInterval.Contains*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: >-
      <code data-dev-comment-type="paramref" class="paramref">date</code> is not in the same
          calendar as the start and end date of this interval.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: NodaTime.DateInterval.Contains(NodaTime.DateInterval)
  commentId: M:NodaTime.DateInterval.Contains(NodaTime.DateInterval)
  id: Contains(NodaTime.DateInterval)
  parent: NodaTime.DateInterval
  langs:
  - csharp
  - vb
  name: Contains(DateInterval)
  nameWithType: DateInterval.Contains(DateInterval)
  fullName: NodaTime.DateInterval.Contains(NodaTime.DateInterval)
  type: Method
  source:
    remote:
      path: 2.3.x/src/NodaTime/DateInterval.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: Contains
    path: src/NodaTime/DateInterval.cs
    startLine: 149
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nChecks whether the given interval is within this interval. This requires that the start date of the specified\ninterval is not earlier than the start date of this interval, and the end date of the specified interval is not\nlater than the end date of this interval.\n"
  remarks: "\nAn interval contains another interval with same start and end dates, or itself.\n"
  example: []
  syntax:
    content: public bool Contains(DateInterval interval)
    parameters:
    - id: interval
      type: NodaTime.DateInterval
      description: The interval to check for containment within this interval.
    return:
      type: System.Boolean
      description: <code>true</code> if <code data-dev-comment-type="paramref" class="paramref">interval</code> is within this interval; <code>false</code> otherwise.
    content.vb: Public Function Contains(interval As DateInterval) As Boolean
  overload: NodaTime.DateInterval.Contains*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: >-
      <code data-dev-comment-type="paramref" class="paramref">interval</code> uses a different
          calendar to this date interval.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: NodaTime.DateInterval.Length
  commentId: P:NodaTime.DateInterval.Length
  id: Length
  parent: NodaTime.DateInterval
  langs:
  - csharp
  - vb
  name: Length
  nameWithType: DateInterval.Length
  fullName: NodaTime.DateInterval.Length
  type: Property
  source:
    remote:
      path: 2.3.x/src/NodaTime/DateInterval.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: Length
    path: src/NodaTime/DateInterval.cs
    startLine: 159
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nGets the length of this date interval in days. This will always be at least 1.\n"
  example: []
  syntax:
    content: public int Length { get; }
    parameters: []
    return:
      type: System.Int32
      description: The length of this date interval in days.
    content.vb: Public ReadOnly Property Length As Integer
  overload: NodaTime.DateInterval.Length*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: NodaTime.DateInterval.Calendar
  commentId: P:NodaTime.DateInterval.Calendar
  id: Calendar
  parent: NodaTime.DateInterval
  langs:
  - csharp
  - vb
  name: Calendar
  nameWithType: DateInterval.Calendar
  fullName: NodaTime.DateInterval.Calendar
  type: Property
  source:
    remote:
      path: 2.3.x/src/NodaTime/DateInterval.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: Calendar
    path: src/NodaTime/DateInterval.cs
    startLine: 168
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nGets the calendar system of the dates in this interval.\n"
  example: []
  syntax:
    content: public CalendarSystem Calendar { get; }
    parameters: []
    return:
      type: NodaTime.CalendarSystem
      description: The calendar system of the dates in this interval.
    content.vb: Public ReadOnly Property Calendar As CalendarSystem
  overload: NodaTime.DateInterval.Calendar*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: NodaTime.DateInterval.ToString
  commentId: M:NodaTime.DateInterval.ToString
  id: ToString
  parent: NodaTime.DateInterval
  langs:
  - csharp
  - vb
  name: ToString()
  nameWithType: DateInterval.ToString()
  fullName: NodaTime.DateInterval.ToString()
  type: Method
  source:
    remote:
      path: 2.3.x/src/NodaTime/DateInterval.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: ToString
    path: src/NodaTime/DateInterval.cs
    startLine: 178
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nReturns a string representation of this interval.\n"
  example: []
  syntax:
    content: public override string ToString()
    return:
      type: System.String
      description: "\nA string representation of this interval, as <code>[start, end]</code>,\nwhere &quot;start&quot; and &quot;end&quot; are the dates formatted using an ISO-8601 compatible pattern.\n"
    content.vb: Public Overrides Function ToString As String
  overridden: System.Object.ToString
  overload: NodaTime.DateInterval.ToString*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: NodaTime.DateInterval.Deconstruct(NodaTime.LocalDate@,NodaTime.LocalDate@)
  commentId: M:NodaTime.DateInterval.Deconstruct(NodaTime.LocalDate@,NodaTime.LocalDate@)
  id: Deconstruct(NodaTime.LocalDate@,NodaTime.LocalDate@)
  parent: NodaTime.DateInterval
  langs:
  - csharp
  - vb
  name: Deconstruct(out LocalDate, out LocalDate)
  nameWithType: DateInterval.Deconstruct(out LocalDate, out LocalDate)
  fullName: NodaTime.DateInterval.Deconstruct(out NodaTime.LocalDate, out NodaTime.LocalDate)
  type: Method
  source:
    remote:
      path: 2.3.x/src/NodaTime/DateInterval.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: Deconstruct
    path: src/NodaTime/DateInterval.cs
    startLine: 190
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nDeconstruct this date interval into its components.\n"
  example: []
  syntax:
    content: public void Deconstruct(out LocalDate start, out LocalDate end)
    parameters:
    - id: start
      type: NodaTime.LocalDate
      description: The <xref href="NodaTime.LocalDate" data-throw-if-not-resolved="false"></xref> representing the start of the interval.
    - id: end
      type: NodaTime.LocalDate
      description: The <xref href="NodaTime.LocalDate" data-throw-if-not-resolved="false"></xref> representing the end of the interval.
    content.vb: Public Sub Deconstruct(ByRef start As LocalDate, ByRef end As LocalDate)
  overload: NodaTime.DateInterval.Deconstruct*
  nameWithType.vb: DateInterval.Deconstruct(ByRef LocalDate, ByRef LocalDate)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: NodaTime.DateInterval.Deconstruct(ByRef NodaTime.LocalDate, ByRef NodaTime.LocalDate)
  name.vb: Deconstruct(ByRef LocalDate, ByRef LocalDate)
- uid: NodaTime.DateInterval.Intersection(NodaTime.DateInterval)
  commentId: M:NodaTime.DateInterval.Intersection(NodaTime.DateInterval)
  id: Intersection(NodaTime.DateInterval)
  parent: NodaTime.DateInterval
  langs:
  - csharp
  - vb
  name: Intersection(DateInterval)
  nameWithType: DateInterval.Intersection(DateInterval)
  fullName: NodaTime.DateInterval.Intersection(NodaTime.DateInterval)
  type: Method
  source:
    remote:
      path: 2.3.x/src/NodaTime/DateInterval.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: Intersection
    path: src/NodaTime/DateInterval.cs
    startLine: 208
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nReturns the intersection between the given interval and this interval.\n"
  example: []
  syntax:
    content: public DateInterval Intersection(DateInterval interval)
    parameters:
    - id: interval
      type: NodaTime.DateInterval
      description: "\nThe specified interval to intersect with this one.\n"
    return:
      type: NodaTime.DateInterval
      description: "\nA <xref href=\"NodaTime.DateInterval\" data-throw-if-not-resolved=\"false\"></xref> corresponding to the intersection between the given interval and the current\ninstance. If there is no intersection, a null reference is returned.\n"
    content.vb: Public Function Intersection(interval As DateInterval) As DateInterval
  overload: NodaTime.DateInterval.Intersection*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: >-
      <code data-dev-comment-type="paramref" class="paramref">interval</code> uses a different
          calendar to this date interval.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: NodaTime.DateInterval.Union(NodaTime.DateInterval)
  commentId: M:NodaTime.DateInterval.Union(NodaTime.DateInterval)
  id: Union(NodaTime.DateInterval)
  parent: NodaTime.DateInterval
  langs:
  - csharp
  - vb
  name: Union(DateInterval)
  nameWithType: DateInterval.Union(DateInterval)
  fullName: NodaTime.DateInterval.Union(NodaTime.DateInterval)
  type: Method
  source:
    remote:
      path: 2.3.x/src/NodaTime/DateInterval.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: Union
    path: src/NodaTime/DateInterval.cs
    startLine: 227
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nReturns the union between the given interval and this interval, as long as they&apos;re overlapping or contiguous.\n"
  example: []
  syntax:
    content: public DateInterval Union(DateInterval interval)
    parameters:
    - id: interval
      type: NodaTime.DateInterval
      description: The specified interval from which to generate the union interval.
    return:
      type: NodaTime.DateInterval
      description: "\nA <xref href=\"NodaTime.DateInterval\" data-throw-if-not-resolved=\"false\"></xref> corresponding to the union between the given interval and the current\ninstance, in the case the intervals overlap or are contiguous; a null reference otherwise.\n"
    content.vb: Public Function Union(interval As DateInterval) As DateInterval
  overload: NodaTime.DateInterval.Union*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: <code data-dev-comment-type="paramref" class="paramref">interval</code> uses a different calendar to this date interval.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: NodaTime.DateInterval.GetEnumerator
  commentId: M:NodaTime.DateInterval.GetEnumerator
  id: GetEnumerator
  parent: NodaTime.DateInterval
  langs:
  - csharp
  - vb
  name: GetEnumerator()
  nameWithType: DateInterval.GetEnumerator()
  fullName: NodaTime.DateInterval.GetEnumerator()
  type: Method
  source:
    remote:
      path: 2.3.x/src/NodaTime/DateInterval.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: GetEnumerator
    path: src/NodaTime/DateInterval.cs
    startLine: 256
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nReturns an enumerator for the dates in the interval, including both <xref href=\"NodaTime.DateInterval.Start\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"NodaTime.DateInterval.End\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public IEnumerator<LocalDate> GetEnumerator()
    return:
      type: System.Collections.Generic.IEnumerator{NodaTime.LocalDate}
      description: An enumerator for the interval.
    content.vb: Public Function GetEnumerator As IEnumerator(Of LocalDate)
  overload: NodaTime.DateInterval.GetEnumerator*
  implements:
  - System.Collections.Generic.IEnumerable{NodaTime.LocalDate}.GetEnumerator
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: NodaTime.DateInterval.System#Collections#IEnumerable#GetEnumerator
  commentId: M:NodaTime.DateInterval.System#Collections#IEnumerable#GetEnumerator
  id: System#Collections#IEnumerable#GetEnumerator
  isEii: true
  parent: NodaTime.DateInterval
  langs:
  - csharp
  - vb
  name: IEnumerable.GetEnumerator()
  nameWithType: DateInterval.IEnumerable.GetEnumerator()
  fullName: NodaTime.DateInterval.System.Collections.IEnumerable.GetEnumerator()
  type: Method
  source:
    remote:
      path: 2.3.x/src/NodaTime/DateInterval.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: System.Collections.IEnumerable.GetEnumerator
    path: src/NodaTime/DateInterval.cs
    startLine: 272
  assemblies:
  - NodaTime
  namespace: NodaTime
  example: []
  syntax:
    content: IEnumerator IEnumerable.GetEnumerator()
    return:
      type: System.Collections.IEnumerator
    content.vb: Function System.Collections.IEnumerable.GetEnumerator As IEnumerator Implements IEnumerable.GetEnumerator
  overload: NodaTime.DateInterval.System#Collections#IEnumerable#GetEnumerator*
  implements:
  - System.Collections.IEnumerable.GetEnumerator
  nameWithType.vb: DateInterval.System.Collections.IEnumerable.GetEnumerator()
  name.vb: System.Collections.IEnumerable.GetEnumerator()
references:
- uid: NodaTime
  commentId: N:NodaTime
  name: NodaTime
  nameWithType: NodaTime
  fullName: NodaTime
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.IEquatable{NodaTime.DateInterval}
  commentId: T:System.IEquatable{NodaTime.DateInterval}
  parent: System
  definition: System.IEquatable`1
  name: IEquatable<DateInterval>
  nameWithType: IEquatable<DateInterval>
  fullName: System.IEquatable<NodaTime.DateInterval>
  nameWithType.vb: IEquatable(Of DateInterval)
  fullName.vb: System.IEquatable(Of NodaTime.DateInterval)
  name.vb: IEquatable(Of DateInterval)
  spec.csharp:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: NodaTime.DateInterval
    name: DateInterval
    nameWithType: DateInterval
    fullName: NodaTime.DateInterval
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: NodaTime.DateInterval
    name: DateInterval
    nameWithType: DateInterval
    fullName: NodaTime.DateInterval
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{NodaTime.LocalDate}
  commentId: T:System.Collections.Generic.IEnumerable{NodaTime.LocalDate}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<LocalDate>
  nameWithType: IEnumerable<LocalDate>
  fullName: System.Collections.Generic.IEnumerable<NodaTime.LocalDate>
  nameWithType.vb: IEnumerable(Of LocalDate)
  fullName.vb: System.Collections.Generic.IEnumerable(Of NodaTime.LocalDate)
  name.vb: IEnumerable(Of LocalDate)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: NodaTime.LocalDate
    name: LocalDate
    nameWithType: LocalDate
    fullName: NodaTime.LocalDate
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: NodaTime.LocalDate
    name: LocalDate
    nameWithType: LocalDate
    fullName: NodaTime.LocalDate
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.IEnumerable
  commentId: T:System.Collections.IEnumerable
  parent: System.Collections
  isExternal: true
  name: IEnumerable
  nameWithType: IEnumerable
  fullName: System.Collections.IEnumerable
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: System.IEquatable`1
  commentId: T:System.IEquatable`1
  isExternal: true
  name: IEquatable<T>
  nameWithType: IEquatable<T>
  fullName: System.IEquatable<T>
  nameWithType.vb: IEquatable(Of T)
  fullName.vb: System.IEquatable(Of T)
  name.vb: IEquatable(Of T)
  spec.csharp:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: System.Collections
  commentId: N:System.Collections
  isExternal: true
  name: System.Collections
  nameWithType: System.Collections
  fullName: System.Collections
- uid: NodaTime.DateInterval.Start*
  commentId: Overload:NodaTime.DateInterval.Start
  name: Start
  nameWithType: DateInterval.Start
  fullName: NodaTime.DateInterval.Start
- uid: NodaTime.LocalDate
  commentId: T:NodaTime.LocalDate
  parent: NodaTime
  name: LocalDate
  nameWithType: LocalDate
  fullName: NodaTime.LocalDate
- uid: NodaTime.DateInterval.End*
  commentId: Overload:NodaTime.DateInterval.End
  name: End
  nameWithType: DateInterval.End
  fullName: NodaTime.DateInterval.End
- uid: System.ArgumentException
  commentId: T:System.ArgumentException
  parent: System
  isExternal: true
  name: ArgumentException
  nameWithType: ArgumentException
  fullName: System.ArgumentException
- uid: NodaTime.DateInterval.#ctor*
  commentId: Overload:NodaTime.DateInterval.#ctor
  name: DateInterval
  nameWithType: DateInterval.DateInterval
  fullName: NodaTime.DateInterval.DateInterval
- uid: NodaTime.DateInterval.Equals(NodaTime.DateInterval)
  commentId: M:NodaTime.DateInterval.Equals(NodaTime.DateInterval)
  isExternal: true
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: NodaTime.DateInterval.GetHashCode*
  commentId: Overload:NodaTime.DateInterval.GetHashCode
  name: GetHashCode
  nameWithType: DateInterval.GetHashCode
  fullName: NodaTime.DateInterval.GetHashCode
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: NodaTime.DateInterval
  commentId: T:NodaTime.DateInterval
  parent: NodaTime
  name: DateInterval
  nameWithType: DateInterval
  fullName: NodaTime.DateInterval
- uid: NodaTime.DateInterval.op_Equality*
  commentId: Overload:NodaTime.DateInterval.op_Equality
  name: Equality
  nameWithType: DateInterval.Equality
  fullName: NodaTime.DateInterval.Equality
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: NodaTime.DateInterval.op_Inequality*
  commentId: Overload:NodaTime.DateInterval.op_Inequality
  name: Inequality
  nameWithType: DateInterval.Inequality
  fullName: NodaTime.DateInterval.Inequality
- uid: NodaTime.DateInterval.Equals*
  commentId: Overload:NodaTime.DateInterval.Equals
  name: Equals
  nameWithType: DateInterval.Equals
  fullName: NodaTime.DateInterval.Equals
- uid: System.IEquatable{NodaTime.DateInterval}.Equals(NodaTime.DateInterval)
  commentId: M:System.IEquatable{NodaTime.DateInterval}.Equals(NodaTime.DateInterval)
  parent: System.IEquatable{NodaTime.DateInterval}
  definition: System.IEquatable`1.Equals(`0)
  name: Equals(DateInterval)
  nameWithType: IEquatable<DateInterval>.Equals(DateInterval)
  fullName: System.IEquatable<NodaTime.DateInterval>.Equals(NodaTime.DateInterval)
  nameWithType.vb: IEquatable(Of DateInterval).Equals(DateInterval)
  fullName.vb: System.IEquatable(Of NodaTime.DateInterval).Equals(NodaTime.DateInterval)
  spec.csharp:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    nameWithType: IEquatable<DateInterval>.Equals
    fullName: System.IEquatable<NodaTime.DateInterval>.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: NodaTime.DateInterval
    name: DateInterval
    nameWithType: DateInterval
    fullName: NodaTime.DateInterval
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    nameWithType: IEquatable(Of DateInterval).Equals
    fullName: System.IEquatable(Of NodaTime.DateInterval).Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: NodaTime.DateInterval
    name: DateInterval
    nameWithType: DateInterval
    fullName: NodaTime.DateInterval
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IEquatable`1.Equals(`0)
  commentId: M:System.IEquatable`1.Equals(`0)
  isExternal: true
  name: Equals(T)
  nameWithType: IEquatable<T>.Equals(T)
  fullName: System.IEquatable<T>.Equals(T)
  nameWithType.vb: IEquatable(Of T).Equals(T)
  fullName.vb: System.IEquatable(Of T).Equals(T)
  spec.csharp:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    nameWithType: IEquatable<T>.Equals
    fullName: System.IEquatable<T>.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    nameWithType: IEquatable(Of T).Equals
    fullName: System.IEquatable(Of T).Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: NodaTime.DateInterval.Contains*
  commentId: Overload:NodaTime.DateInterval.Contains
  name: Contains
  nameWithType: DateInterval.Contains
  fullName: NodaTime.DateInterval.Contains
- uid: NodaTime.DateInterval.Length*
  commentId: Overload:NodaTime.DateInterval.Length
  name: Length
  nameWithType: DateInterval.Length
  fullName: NodaTime.DateInterval.Length
- uid: NodaTime.DateInterval.Calendar*
  commentId: Overload:NodaTime.DateInterval.Calendar
  name: Calendar
  nameWithType: DateInterval.Calendar
  fullName: NodaTime.DateInterval.Calendar
- uid: NodaTime.CalendarSystem
  commentId: T:NodaTime.CalendarSystem
  parent: NodaTime
  name: CalendarSystem
  nameWithType: CalendarSystem
  fullName: NodaTime.CalendarSystem
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: NodaTime.DateInterval.ToString*
  commentId: Overload:NodaTime.DateInterval.ToString
  name: ToString
  nameWithType: DateInterval.ToString
  fullName: NodaTime.DateInterval.ToString
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: NodaTime.DateInterval.Deconstruct*
  commentId: Overload:NodaTime.DateInterval.Deconstruct
  name: Deconstruct
  nameWithType: DateInterval.Deconstruct
  fullName: NodaTime.DateInterval.Deconstruct
- uid: NodaTime.DateInterval.Intersection*
  commentId: Overload:NodaTime.DateInterval.Intersection
  name: Intersection
  nameWithType: DateInterval.Intersection
  fullName: NodaTime.DateInterval.Intersection
- uid: NodaTime.DateInterval.Union*
  commentId: Overload:NodaTime.DateInterval.Union
  name: Union
  nameWithType: DateInterval.Union
  fullName: NodaTime.DateInterval.Union
- uid: NodaTime.DateInterval.Start
  commentId: P:NodaTime.DateInterval.Start
  isExternal: true
- uid: NodaTime.DateInterval.End
  commentId: P:NodaTime.DateInterval.End
  isExternal: true
- uid: NodaTime.DateInterval.GetEnumerator*
  commentId: Overload:NodaTime.DateInterval.GetEnumerator
  name: GetEnumerator
  nameWithType: DateInterval.GetEnumerator
  fullName: NodaTime.DateInterval.GetEnumerator
- uid: System.Collections.Generic.IEnumerable{NodaTime.LocalDate}.GetEnumerator
  commentId: M:System.Collections.Generic.IEnumerable{NodaTime.LocalDate}.GetEnumerator
  parent: System.Collections.Generic.IEnumerable{NodaTime.LocalDate}
  definition: System.Collections.Generic.IEnumerable`1.GetEnumerator
  name: GetEnumerator()
  nameWithType: IEnumerable<LocalDate>.GetEnumerator()
  fullName: System.Collections.Generic.IEnumerable<NodaTime.LocalDate>.GetEnumerator()
  nameWithType.vb: IEnumerable(Of LocalDate).GetEnumerator()
  fullName.vb: System.Collections.Generic.IEnumerable(Of NodaTime.LocalDate).GetEnumerator()
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable<LocalDate>.GetEnumerator
    fullName: System.Collections.Generic.IEnumerable<NodaTime.LocalDate>.GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable(Of LocalDate).GetEnumerator
    fullName: System.Collections.Generic.IEnumerable(Of NodaTime.LocalDate).GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerator{NodaTime.LocalDate}
  commentId: T:System.Collections.Generic.IEnumerator{NodaTime.LocalDate}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerator`1
  name: IEnumerator<LocalDate>
  nameWithType: IEnumerator<LocalDate>
  fullName: System.Collections.Generic.IEnumerator<NodaTime.LocalDate>
  nameWithType.vb: IEnumerator(Of LocalDate)
  fullName.vb: System.Collections.Generic.IEnumerator(Of NodaTime.LocalDate)
  name.vb: IEnumerator(Of LocalDate)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    nameWithType: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: NodaTime.LocalDate
    name: LocalDate
    nameWithType: LocalDate
    fullName: NodaTime.LocalDate
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    nameWithType: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: NodaTime.LocalDate
    name: LocalDate
    nameWithType: LocalDate
    fullName: NodaTime.LocalDate
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
  commentId: M:System.Collections.Generic.IEnumerable`1.GetEnumerator
  isExternal: true
  name: GetEnumerator()
  nameWithType: IEnumerable<T>.GetEnumerator()
  fullName: System.Collections.Generic.IEnumerable<T>.GetEnumerator()
  nameWithType.vb: IEnumerable(Of T).GetEnumerator()
  fullName.vb: System.Collections.Generic.IEnumerable(Of T).GetEnumerator()
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable<T>.GetEnumerator
    fullName: System.Collections.Generic.IEnumerable<T>.GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable(Of T).GetEnumerator
    fullName: System.Collections.Generic.IEnumerable(Of T).GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerator`1
  commentId: T:System.Collections.Generic.IEnumerator`1
  isExternal: true
  name: IEnumerator<T>
  nameWithType: IEnumerator<T>
  fullName: System.Collections.Generic.IEnumerator<T>
  nameWithType.vb: IEnumerator(Of T)
  fullName.vb: System.Collections.Generic.IEnumerator(Of T)
  name.vb: IEnumerator(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    nameWithType: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    nameWithType: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: NodaTime.DateInterval.System#Collections#IEnumerable#GetEnumerator*
  commentId: Overload:NodaTime.DateInterval.System#Collections#IEnumerable#GetEnumerator
  name: IEnumerable.GetEnumerator
  nameWithType: DateInterval.IEnumerable.GetEnumerator
  fullName: NodaTime.DateInterval.System.Collections.IEnumerable.GetEnumerator
  nameWithType.vb: DateInterval.System.Collections.IEnumerable.GetEnumerator
  name.vb: System.Collections.IEnumerable.GetEnumerator
- uid: System.Collections.IEnumerable.GetEnumerator
  commentId: M:System.Collections.IEnumerable.GetEnumerator
  parent: System.Collections.IEnumerable
  isExternal: true
  name: GetEnumerator()
  nameWithType: IEnumerable.GetEnumerator()
  fullName: System.Collections.IEnumerable.GetEnumerator()
  spec.csharp:
  - uid: System.Collections.IEnumerable.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable.GetEnumerator
    fullName: System.Collections.IEnumerable.GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.IEnumerable.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable.GetEnumerator
    fullName: System.Collections.IEnumerable.GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.IEnumerator
  commentId: T:System.Collections.IEnumerator
  parent: System.Collections
  isExternal: true
  name: IEnumerator
  nameWithType: IEnumerator
  fullName: System.Collections.IEnumerator
shouldSkipMarkup: true
