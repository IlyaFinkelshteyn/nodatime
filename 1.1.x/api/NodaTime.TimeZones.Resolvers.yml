### YamlMime:ManagedReference
items:
- uid: NodaTime.TimeZones.Resolvers
  commentId: T:NodaTime.TimeZones.Resolvers
  id: Resolvers
  parent: NodaTime.TimeZones
  children:
  - NodaTime.TimeZones.Resolvers.CreateMappingResolver(NodaTime.TimeZones.AmbiguousTimeResolver,NodaTime.TimeZones.SkippedTimeResolver)
  - NodaTime.TimeZones.Resolvers.LenientResolver
  - NodaTime.TimeZones.Resolvers.ReturnEarlier
  - NodaTime.TimeZones.Resolvers.ReturnEndOfIntervalBefore
  - NodaTime.TimeZones.Resolvers.ReturnLater
  - NodaTime.TimeZones.Resolvers.ReturnStartOfIntervalAfter
  - NodaTime.TimeZones.Resolvers.StrictResolver
  - NodaTime.TimeZones.Resolvers.ThrowWhenAmbiguous
  - NodaTime.TimeZones.Resolvers.ThrowWhenSkipped
  langs:
  - csharp
  - vb
  name: Resolvers
  nameWithType: Resolvers
  fullName: NodaTime.TimeZones.Resolvers
  type: Class
  source:
    remote:
      path: 1.1.x/src/NodaTime/TimeZones/Resolvers.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: Resolvers
    path: src/NodaTime/TimeZones/Resolvers.cs
    startLine: 14
  assemblies:
  - NodaTime
  namespace: NodaTime.TimeZones
  summary: "\n&quot;Constant&quot; fields representing commonly-used implementations of the resolver delegates,\nand a method to combine two &quot;partial&quot; resolvers into a full one.\n"
  example: []
  syntax:
    content: public static class Resolvers
    content.vb: Public Module Resolvers
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
- uid: NodaTime.TimeZones.Resolvers.ReturnEarlier
  commentId: F:NodaTime.TimeZones.Resolvers.ReturnEarlier
  id: ReturnEarlier
  parent: NodaTime.TimeZones.Resolvers
  langs:
  - csharp
  - vb
  name: ReturnEarlier
  nameWithType: Resolvers.ReturnEarlier
  fullName: NodaTime.TimeZones.Resolvers.ReturnEarlier
  type: Field
  source:
    remote:
      path: 1.1.x/src/NodaTime/TimeZones/Resolvers.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: ReturnEarlier
    path: src/NodaTime/TimeZones/Resolvers.cs
    startLine: 19
  assemblies:
  - NodaTime
  namespace: NodaTime.TimeZones
  summary: "\n<xref href=\"NodaTime.TimeZones.AmbiguousTimeResolver\" data-throw-if-not-resolved=\"false\"></xref> which returns the earlier of the two matching times.\n"
  example: []
  syntax:
    content: public static readonly AmbiguousTimeResolver ReturnEarlier
    return:
      type: NodaTime.TimeZones.AmbiguousTimeResolver
    content.vb: Public Shared ReadOnly ReturnEarlier As AmbiguousTimeResolver
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: NodaTime.TimeZones.Resolvers.ReturnLater
  commentId: F:NodaTime.TimeZones.Resolvers.ReturnLater
  id: ReturnLater
  parent: NodaTime.TimeZones.Resolvers
  langs:
  - csharp
  - vb
  name: ReturnLater
  nameWithType: Resolvers.ReturnLater
  fullName: NodaTime.TimeZones.Resolvers.ReturnLater
  type: Field
  source:
    remote:
      path: 1.1.x/src/NodaTime/TimeZones/Resolvers.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: ReturnLater
    path: src/NodaTime/TimeZones/Resolvers.cs
    startLine: 24
  assemblies:
  - NodaTime
  namespace: NodaTime.TimeZones
  summary: "\n<xref href=\"NodaTime.TimeZones.AmbiguousTimeResolver\" data-throw-if-not-resolved=\"false\"></xref> which returns the later of the two matching times.\n"
  example: []
  syntax:
    content: public static readonly AmbiguousTimeResolver ReturnLater
    return:
      type: NodaTime.TimeZones.AmbiguousTimeResolver
    content.vb: Public Shared ReadOnly ReturnLater As AmbiguousTimeResolver
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: NodaTime.TimeZones.Resolvers.ThrowWhenAmbiguous
  commentId: F:NodaTime.TimeZones.Resolvers.ThrowWhenAmbiguous
  id: ThrowWhenAmbiguous
  parent: NodaTime.TimeZones.Resolvers
  langs:
  - csharp
  - vb
  name: ThrowWhenAmbiguous
  nameWithType: Resolvers.ThrowWhenAmbiguous
  fullName: NodaTime.TimeZones.Resolvers.ThrowWhenAmbiguous
  type: Field
  source:
    remote:
      path: 1.1.x/src/NodaTime/TimeZones/Resolvers.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: ThrowWhenAmbiguous
    path: src/NodaTime/TimeZones/Resolvers.cs
    startLine: 29
  assemblies:
  - NodaTime
  namespace: NodaTime.TimeZones
  summary: "\n<xref href=\"NodaTime.TimeZones.AmbiguousTimeResolver\" data-throw-if-not-resolved=\"false\"></xref> which simply throws an <xref href=\"NodaTime.AmbiguousTimeException\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public static readonly AmbiguousTimeResolver ThrowWhenAmbiguous
    return:
      type: NodaTime.TimeZones.AmbiguousTimeResolver
    content.vb: Public Shared ReadOnly ThrowWhenAmbiguous As AmbiguousTimeResolver
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: NodaTime.TimeZones.Resolvers.ReturnEndOfIntervalBefore
  commentId: F:NodaTime.TimeZones.Resolvers.ReturnEndOfIntervalBefore
  id: ReturnEndOfIntervalBefore
  parent: NodaTime.TimeZones.Resolvers
  langs:
  - csharp
  - vb
  name: ReturnEndOfIntervalBefore
  nameWithType: Resolvers.ReturnEndOfIntervalBefore
  fullName: NodaTime.TimeZones.Resolvers.ReturnEndOfIntervalBefore
  type: Field
  source:
    remote:
      path: 1.1.x/src/NodaTime/TimeZones/Resolvers.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: ReturnEndOfIntervalBefore
    path: src/NodaTime/TimeZones/Resolvers.cs
    startLine: 38
  assemblies:
  - NodaTime
  namespace: NodaTime.TimeZones
  summary: "\n<xref href=\"NodaTime.TimeZones.SkippedTimeResolver\" data-throw-if-not-resolved=\"false\"></xref> which returns the final tick of the time zone interval\nbefore the &quot;gap&quot;.\n"
  example: []
  syntax:
    content: public static readonly SkippedTimeResolver ReturnEndOfIntervalBefore
    return:
      type: NodaTime.TimeZones.SkippedTimeResolver
    content.vb: Public Shared ReadOnly ReturnEndOfIntervalBefore As SkippedTimeResolver
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: NodaTime.TimeZones.Resolvers.ReturnStartOfIntervalAfter
  commentId: F:NodaTime.TimeZones.Resolvers.ReturnStartOfIntervalAfter
  id: ReturnStartOfIntervalAfter
  parent: NodaTime.TimeZones.Resolvers
  langs:
  - csharp
  - vb
  name: ReturnStartOfIntervalAfter
  nameWithType: Resolvers.ReturnStartOfIntervalAfter
  fullName: NodaTime.TimeZones.Resolvers.ReturnStartOfIntervalAfter
  type: Field
  source:
    remote:
      path: 1.1.x/src/NodaTime/TimeZones/Resolvers.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: ReturnStartOfIntervalAfter
    path: src/NodaTime/TimeZones/Resolvers.cs
    startLine: 48
  assemblies:
  - NodaTime
  namespace: NodaTime.TimeZones
  summary: "\n<xref href=\"NodaTime.TimeZones.SkippedTimeResolver\" data-throw-if-not-resolved=\"false\"></xref> which returns the first tick of the time zone interval\nafter the &quot;gap&quot;.\n"
  example: []
  syntax:
    content: public static readonly SkippedTimeResolver ReturnStartOfIntervalAfter
    return:
      type: NodaTime.TimeZones.SkippedTimeResolver
    content.vb: Public Shared ReadOnly ReturnStartOfIntervalAfter As SkippedTimeResolver
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: NodaTime.TimeZones.Resolvers.ThrowWhenSkipped
  commentId: F:NodaTime.TimeZones.Resolvers.ThrowWhenSkipped
  id: ThrowWhenSkipped
  parent: NodaTime.TimeZones.Resolvers
  langs:
  - csharp
  - vb
  name: ThrowWhenSkipped
  nameWithType: Resolvers.ThrowWhenSkipped
  fullName: NodaTime.TimeZones.Resolvers.ThrowWhenSkipped
  type: Field
  source:
    remote:
      path: 1.1.x/src/NodaTime/TimeZones/Resolvers.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: ThrowWhenSkipped
    path: src/NodaTime/TimeZones/Resolvers.cs
    startLine: 61
  assemblies:
  - NodaTime
  namespace: NodaTime.TimeZones
  summary: "\n<xref href=\"NodaTime.TimeZones.SkippedTimeResolver\" data-throw-if-not-resolved=\"false\"></xref> which simply throws a <xref href=\"NodaTime.SkippedTimeException\" data-throw-if-not-resolved=\"false\"></xref> (assuming\nthe arguments are all non-null).\n"
  example: []
  syntax:
    content: public static readonly SkippedTimeResolver ThrowWhenSkipped
    return:
      type: NodaTime.TimeZones.SkippedTimeResolver
    content.vb: Public Shared ReadOnly ThrowWhenSkipped As SkippedTimeResolver
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: NodaTime.TimeZones.Resolvers.StrictResolver
  commentId: F:NodaTime.TimeZones.Resolvers.StrictResolver
  id: StrictResolver
  parent: NodaTime.TimeZones.Resolvers
  langs:
  - csharp
  - vb
  name: StrictResolver
  nameWithType: Resolvers.StrictResolver
  fullName: NodaTime.TimeZones.Resolvers.StrictResolver
  type: Field
  source:
    remote:
      path: 1.1.x/src/NodaTime/TimeZones/Resolvers.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: StrictResolver
    path: src/NodaTime/TimeZones/Resolvers.cs
    startLine: 75
  assemblies:
  - NodaTime
  namespace: NodaTime.TimeZones
  summary: "\n<xref href=\"NodaTime.TimeZones.ZoneLocalMappingResolver\" data-throw-if-not-resolved=\"false\"></xref> which only ever succeeds in the (usual) case where the result\nof the mapping is unambiguous. Otherwise, it throws <xref href=\"NodaTime.SkippedTimeException\" data-throw-if-not-resolved=\"false\"></xref> or\n<xref href=\"NodaTime.AmbiguousTimeException\" data-throw-if-not-resolved=\"false\"></xref>. This resolver combines <xref href=\"NodaTime.TimeZones.Resolvers.ThrowWhenAmbiguous\" data-throw-if-not-resolved=\"false\"></xref> and\n<xref href=\"NodaTime.TimeZones.Resolvers.ThrowWhenSkipped\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public static readonly ZoneLocalMappingResolver StrictResolver
    return:
      type: NodaTime.TimeZones.ZoneLocalMappingResolver
    content.vb: Public Shared ReadOnly StrictResolver As ZoneLocalMappingResolver
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: NodaTime.TimeZones.Resolvers.LenientResolver
  commentId: F:NodaTime.TimeZones.Resolvers.LenientResolver
  id: LenientResolver
  parent: NodaTime.TimeZones.Resolvers
  langs:
  - csharp
  - vb
  name: LenientResolver
  nameWithType: Resolvers.LenientResolver
  fullName: NodaTime.TimeZones.Resolvers.LenientResolver
  type: Field
  source:
    remote:
      path: 1.1.x/src/NodaTime/TimeZones/Resolvers.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: LenientResolver
    path: src/NodaTime/TimeZones/Resolvers.cs
    startLine: 82
  assemblies:
  - NodaTime
  namespace: NodaTime.TimeZones
  summary: "\n<xref href=\"NodaTime.TimeZones.ZoneLocalMappingResolver\" data-throw-if-not-resolved=\"false\"></xref> which never throws an exception due to ambiguity or skipped time.\nAmbiguity is handled by returning the later occurrence, and skipped times are mapped to the start of the zone interval\nafter the gap. This resolver combines <xref href=\"NodaTime.TimeZones.Resolvers.ReturnLater\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"NodaTime.TimeZones.Resolvers.ReturnStartOfIntervalAfter\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public static readonly ZoneLocalMappingResolver LenientResolver
    return:
      type: NodaTime.TimeZones.ZoneLocalMappingResolver
    content.vb: Public Shared ReadOnly LenientResolver As ZoneLocalMappingResolver
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: NodaTime.TimeZones.Resolvers.CreateMappingResolver(NodaTime.TimeZones.AmbiguousTimeResolver,NodaTime.TimeZones.SkippedTimeResolver)
  commentId: M:NodaTime.TimeZones.Resolvers.CreateMappingResolver(NodaTime.TimeZones.AmbiguousTimeResolver,NodaTime.TimeZones.SkippedTimeResolver)
  id: CreateMappingResolver(NodaTime.TimeZones.AmbiguousTimeResolver,NodaTime.TimeZones.SkippedTimeResolver)
  parent: NodaTime.TimeZones.Resolvers
  langs:
  - csharp
  - vb
  name: CreateMappingResolver(AmbiguousTimeResolver, SkippedTimeResolver)
  nameWithType: Resolvers.CreateMappingResolver(AmbiguousTimeResolver, SkippedTimeResolver)
  fullName: NodaTime.TimeZones.Resolvers.CreateMappingResolver(NodaTime.TimeZones.AmbiguousTimeResolver, NodaTime.TimeZones.SkippedTimeResolver)
  type: Method
  source:
    remote:
      path: 1.1.x/src/NodaTime/TimeZones/Resolvers.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: CreateMappingResolver
    path: src/NodaTime/TimeZones/Resolvers.cs
    startLine: 94
  assemblies:
  - NodaTime
  namespace: NodaTime.TimeZones
  summary: "\nCombines an <xref href=\"NodaTime.TimeZones.AmbiguousTimeResolver\" data-throw-if-not-resolved=\"false\"></xref> and a <xref href=\"NodaTime.TimeZones.SkippedTimeResolver\" data-throw-if-not-resolved=\"false\"></xref> into a <xref href=\"NodaTime.TimeZones.ZoneLocalMappingResolver\" data-throw-if-not-resolved=\"false\"></xref>\nin the obvious way: unambiguous mappings are returned directly, ambiguous mappings are delegated to the given\nAmbiguousTimeResolver, and &quot;skipped&quot; mappings are delegated to the given SkippedTimeResolver.\n"
  example: []
  syntax:
    content: public static ZoneLocalMappingResolver CreateMappingResolver(AmbiguousTimeResolver ambiguousTimeResolver, SkippedTimeResolver skippedTimeResolver)
    parameters:
    - id: ambiguousTimeResolver
      type: NodaTime.TimeZones.AmbiguousTimeResolver
      description: Resolver to use for ambiguous mappings.
    - id: skippedTimeResolver
      type: NodaTime.TimeZones.SkippedTimeResolver
      description: Resolver to use for &quot;skipped&quot; mappings.
    return:
      type: NodaTime.TimeZones.ZoneLocalMappingResolver
      description: The logical combination of the two resolvers.
    content.vb: Public Shared Function CreateMappingResolver(ambiguousTimeResolver As AmbiguousTimeResolver, skippedTimeResolver As SkippedTimeResolver) As ZoneLocalMappingResolver
  overload: NodaTime.TimeZones.Resolvers.CreateMappingResolver*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: >-
      <code data-dev-comment-type="paramref" class="paramref">ambiguousTimeResolver</code> or

      <code data-dev-comment-type="paramref" class="paramref">skippedTimeResolver</code> is null.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
references:
- uid: NodaTime.TimeZones
  commentId: N:NodaTime.TimeZones
  name: NodaTime.TimeZones
  nameWithType: NodaTime.TimeZones
  fullName: NodaTime.TimeZones
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: NodaTime.TimeZones.AmbiguousTimeResolver
  commentId: T:NodaTime.TimeZones.AmbiguousTimeResolver
  parent: NodaTime.TimeZones
  name: AmbiguousTimeResolver
  nameWithType: AmbiguousTimeResolver
  fullName: NodaTime.TimeZones.AmbiguousTimeResolver
- uid: NodaTime.AmbiguousTimeException
  commentId: T:NodaTime.AmbiguousTimeException
  name: AmbiguousTimeException
  nameWithType: AmbiguousTimeException
  fullName: NodaTime.AmbiguousTimeException
- uid: NodaTime.TimeZones.SkippedTimeResolver
  commentId: T:NodaTime.TimeZones.SkippedTimeResolver
  parent: NodaTime.TimeZones
  name: SkippedTimeResolver
  nameWithType: SkippedTimeResolver
  fullName: NodaTime.TimeZones.SkippedTimeResolver
- uid: NodaTime.SkippedTimeException
  commentId: T:NodaTime.SkippedTimeException
  name: SkippedTimeException
  nameWithType: SkippedTimeException
  fullName: NodaTime.SkippedTimeException
- uid: NodaTime.TimeZones.ZoneLocalMappingResolver
  commentId: T:NodaTime.TimeZones.ZoneLocalMappingResolver
  parent: NodaTime.TimeZones
  name: ZoneLocalMappingResolver
  nameWithType: ZoneLocalMappingResolver
  fullName: NodaTime.TimeZones.ZoneLocalMappingResolver
- uid: NodaTime.TimeZones.Resolvers.ThrowWhenAmbiguous
  commentId: F:NodaTime.TimeZones.Resolvers.ThrowWhenAmbiguous
  isExternal: true
- uid: NodaTime.TimeZones.Resolvers.ThrowWhenSkipped
  commentId: F:NodaTime.TimeZones.Resolvers.ThrowWhenSkipped
  isExternal: true
- uid: NodaTime.TimeZones.Resolvers.ReturnLater
  commentId: F:NodaTime.TimeZones.Resolvers.ReturnLater
  isExternal: true
- uid: NodaTime.TimeZones.Resolvers.ReturnStartOfIntervalAfter
  commentId: F:NodaTime.TimeZones.Resolvers.ReturnStartOfIntervalAfter
  isExternal: true
- uid: System.ArgumentNullException
  commentId: T:System.ArgumentNullException
  isExternal: true
- uid: NodaTime.TimeZones.Resolvers.CreateMappingResolver*
  commentId: Overload:NodaTime.TimeZones.Resolvers.CreateMappingResolver
  name: CreateMappingResolver
  nameWithType: Resolvers.CreateMappingResolver
  fullName: NodaTime.TimeZones.Resolvers.CreateMappingResolver
shouldSkipMarkup: true
