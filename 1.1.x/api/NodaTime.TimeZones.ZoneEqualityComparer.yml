### YamlMime:ManagedReference
items:
- uid: NodaTime.TimeZones.ZoneEqualityComparer
  commentId: T:NodaTime.TimeZones.ZoneEqualityComparer
  id: ZoneEqualityComparer
  parent: NodaTime.TimeZones
  children:
  - NodaTime.TimeZones.ZoneEqualityComparer.Equals(NodaTime.DateTimeZone,NodaTime.DateTimeZone)
  - NodaTime.TimeZones.ZoneEqualityComparer.ForInterval(NodaTime.Interval)
  - NodaTime.TimeZones.ZoneEqualityComparer.GetHashCode(NodaTime.DateTimeZone)
  - NodaTime.TimeZones.ZoneEqualityComparer.WithOptions(NodaTime.TimeZones.ZoneEqualityComparer.Options)
  langs:
  - csharp
  - vb
  name: ZoneEqualityComparer
  nameWithType: ZoneEqualityComparer
  fullName: NodaTime.TimeZones.ZoneEqualityComparer
  type: Class
  source:
    remote:
      path: 1.1.x/src/NodaTime/TimeZones/ZoneEqualityComparer.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: ZoneEqualityComparer
    path: src/NodaTime/TimeZones/ZoneEqualityComparer.cs
    startLine: 21
  assemblies:
  - NodaTime
  namespace: NodaTime.TimeZones
  summary: "\nEquality comparer for time zones, comparing specific aspects of the zone intervals within\na time zone for a specific interval of the time line.\n"
  remarks: "\nThe default behaviour of this comparator is to consider two time zones to be equal if they share the same wall\noffsets at all points within a given time interval, regardless of other aspects of each\n<xref href=\"NodaTime.TimeZones.ZoneInterval\" data-throw-if-not-resolved=\"false\"></xref> within the two time zones. This behaviour can be changed using the\n<xref href=\"NodaTime.TimeZones.ZoneEqualityComparer.WithOptions(NodaTime.TimeZones.ZoneEqualityComparer.Options)\" data-throw-if-not-resolved=\"false\"></xref> method.\n"
  example: []
  syntax:
    content: 'public sealed class ZoneEqualityComparer : IEqualityComparer<DateTimeZone>'
    content.vb: >-
      Public NotInheritable Class ZoneEqualityComparer
          Implements IEqualityComparer(Of DateTimeZone)
  inheritance:
  - System.Object
  implements:
  - System.Collections.Generic.IEqualityComparer{NodaTime.DateTimeZone}
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - sealed
  - class
  modifiers.vb:
  - Public
  - NotInheritable
  - Class
- uid: NodaTime.TimeZones.ZoneEqualityComparer.ForInterval(NodaTime.Interval)
  commentId: M:NodaTime.TimeZones.ZoneEqualityComparer.ForInterval(NodaTime.Interval)
  id: ForInterval(NodaTime.Interval)
  parent: NodaTime.TimeZones.ZoneEqualityComparer
  langs:
  - csharp
  - vb
  name: ForInterval(Interval)
  nameWithType: ZoneEqualityComparer.ForInterval(Interval)
  fullName: NodaTime.TimeZones.ZoneEqualityComparer.ForInterval(NodaTime.Interval)
  type: Method
  source:
    remote:
      path: 1.1.x/src/NodaTime/TimeZones/ZoneEqualityComparer.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: ForInterval
    path: src/NodaTime/TimeZones/ZoneEqualityComparer.cs
    startLine: 148
  assemblies:
  - NodaTime
  namespace: NodaTime.TimeZones
  summary: "\nReturns a <xref href=\"NodaTime.TimeZones.ZoneEqualityComparer\" data-throw-if-not-resolved=\"false\"></xref> for the given interval with the default options.\n"
  remarks: "\nThe default behaviour of this comparator is to consider two time zones to be equal if they share the same wall\noffsets at all points within a given interval.\nTo specify non-default options, call the <xref href=\"NodaTime.TimeZones.ZoneEqualityComparer.WithOptions(NodaTime.TimeZones.ZoneEqualityComparer.Options)\" data-throw-if-not-resolved=\"false\"></xref> method on the result\nof this method."
  example: []
  syntax:
    content: public static ZoneEqualityComparer ForInterval(Interval interval)
    parameters:
    - id: interval
      type: NodaTime.Interval
      description: The interval over which to compare time zones.
    return:
      type: NodaTime.TimeZones.ZoneEqualityComparer
      description: A ZoneEqualityComparer for the given interval with the default options.
    content.vb: Public Shared Function ForInterval(interval As Interval) As ZoneEqualityComparer
  overload: NodaTime.TimeZones.ZoneEqualityComparer.ForInterval*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: NodaTime.TimeZones.ZoneEqualityComparer.WithOptions(NodaTime.TimeZones.ZoneEqualityComparer.Options)
  commentId: M:NodaTime.TimeZones.ZoneEqualityComparer.WithOptions(NodaTime.TimeZones.ZoneEqualityComparer.Options)
  id: WithOptions(NodaTime.TimeZones.ZoneEqualityComparer.Options)
  parent: NodaTime.TimeZones.ZoneEqualityComparer
  langs:
  - csharp
  - vb
  name: WithOptions(ZoneEqualityComparer.Options)
  nameWithType: ZoneEqualityComparer.WithOptions(ZoneEqualityComparer.Options)
  fullName: NodaTime.TimeZones.ZoneEqualityComparer.WithOptions(NodaTime.TimeZones.ZoneEqualityComparer.Options)
  type: Method
  source:
    remote:
      path: 1.1.x/src/NodaTime/TimeZones/ZoneEqualityComparer.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: WithOptions
    path: src/NodaTime/TimeZones/ZoneEqualityComparer.cs
    startLine: 163
  assemblies:
  - NodaTime
  namespace: NodaTime.TimeZones
  summary: "\nReturns a comparer operating over the same interval as this one, but with the given\nset of options.\n"
  remarks: "\nThis method does not modify the comparer on which it&apos;s called.\n"
  example: []
  syntax:
    content: public ZoneEqualityComparer WithOptions(ZoneEqualityComparer.Options options)
    parameters:
    - id: options
      type: NodaTime.TimeZones.ZoneEqualityComparer.Options
      description: New set of options, which must consist of flags defined within the <xref href="NodaTime.TimeZones.ZoneEqualityComparer.Options" data-throw-if-not-resolved="false"></xref> enum.
    return:
      type: NodaTime.TimeZones.ZoneEqualityComparer
      description: A comparer operating over the same interval as this one, but with the given set of options.
    content.vb: Public Function WithOptions(options As ZoneEqualityComparer.Options) As ZoneEqualityComparer
  overload: NodaTime.TimeZones.ZoneEqualityComparer.WithOptions*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: The specified options are invalid.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: NodaTime.TimeZones.ZoneEqualityComparer.Equals(NodaTime.DateTimeZone,NodaTime.DateTimeZone)
  commentId: M:NodaTime.TimeZones.ZoneEqualityComparer.Equals(NodaTime.DateTimeZone,NodaTime.DateTimeZone)
  id: Equals(NodaTime.DateTimeZone,NodaTime.DateTimeZone)
  parent: NodaTime.TimeZones.ZoneEqualityComparer
  langs:
  - csharp
  - vb
  name: Equals(DateTimeZone, DateTimeZone)
  nameWithType: ZoneEqualityComparer.Equals(DateTimeZone, DateTimeZone)
  fullName: NodaTime.TimeZones.ZoneEqualityComparer.Equals(NodaTime.DateTimeZone, NodaTime.DateTimeZone)
  type: Method
  source:
    remote:
      path: 1.1.x/src/NodaTime/TimeZones/ZoneEqualityComparer.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: Equals
    path: src/NodaTime/TimeZones/ZoneEqualityComparer.cs
    startLine: 174
  assemblies:
  - NodaTime
  namespace: NodaTime.TimeZones
  summary: "\nCompares two time zones for equality according to the options and interval provided to this comparer.\n"
  example: []
  syntax:
    content: public bool Equals(DateTimeZone x, DateTimeZone y)
    parameters:
    - id: x
      type: NodaTime.DateTimeZone
      description: The first <xref href="NodaTime.DateTimeZone" data-throw-if-not-resolved="false"></xref> to compare.
    - id: y
      type: NodaTime.DateTimeZone
      description: The second <xref href="NodaTime.DateTimeZone" data-throw-if-not-resolved="false"></xref> to compare.
    return:
      type: System.Boolean
      description: <code>true</code> if the specified time zones are equal under the options and interval of this comparer; otherwise, <code>false</code>.
    content.vb: Public Function Equals(x As DateTimeZone, y As DateTimeZone) As Boolean
  overload: NodaTime.TimeZones.ZoneEqualityComparer.Equals*
  implements:
  - System.Collections.Generic.IEqualityComparer{NodaTime.DateTimeZone}.Equals(NodaTime.DateTimeZone,NodaTime.DateTimeZone)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: NodaTime.TimeZones.ZoneEqualityComparer.GetHashCode(NodaTime.DateTimeZone)
  commentId: M:NodaTime.TimeZones.ZoneEqualityComparer.GetHashCode(NodaTime.DateTimeZone)
  id: GetHashCode(NodaTime.DateTimeZone)
  parent: NodaTime.TimeZones.ZoneEqualityComparer
  langs:
  - csharp
  - vb
  name: GetHashCode(DateTimeZone)
  nameWithType: ZoneEqualityComparer.GetHashCode(DateTimeZone)
  fullName: NodaTime.TimeZones.ZoneEqualityComparer.GetHashCode(NodaTime.DateTimeZone)
  type: Method
  source:
    remote:
      path: 1.1.x/src/NodaTime/TimeZones/ZoneEqualityComparer.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: GetHashCode
    path: src/NodaTime/TimeZones/ZoneEqualityComparer.cs
    startLine: 200
  assemblies:
  - NodaTime
  namespace: NodaTime.TimeZones
  summary: "\nReturns a hash code for the specified time zone.\n"
  remarks: "\nThe hash code generated by any instance of <code>ZoneEqualityComparer</code> will be equal to the hash code\ngenerated by any other instance constructed with the same options and interval, for the same time zone (or equal ones).\nTwo instances of <code>ZoneEqualityComparer</code> with different options or intervals may (but may not) produce\ndifferent hash codes for the same zone.\n"
  example: []
  syntax:
    content: public int GetHashCode(DateTimeZone obj)
    parameters:
    - id: obj
      type: NodaTime.DateTimeZone
      description: The time zone to compute a hash code for.
    return:
      type: System.Int32
      description: A hash code for the specified object.
    content.vb: Public Function GetHashCode(obj As DateTimeZone) As Integer
  overload: NodaTime.TimeZones.ZoneEqualityComparer.GetHashCode*
  implements:
  - System.Collections.Generic.IEqualityComparer{NodaTime.DateTimeZone}.GetHashCode(NodaTime.DateTimeZone)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: NodaTime.TimeZones.ZoneInterval
  commentId: T:NodaTime.TimeZones.ZoneInterval
  parent: NodaTime.TimeZones
  name: ZoneInterval
  nameWithType: ZoneInterval
  fullName: NodaTime.TimeZones.ZoneInterval
- uid: NodaTime.TimeZones.ZoneEqualityComparer.WithOptions(NodaTime.TimeZones.ZoneEqualityComparer.Options)
  commentId: M:NodaTime.TimeZones.ZoneEqualityComparer.WithOptions(NodaTime.TimeZones.ZoneEqualityComparer.Options)
  isExternal: true
- uid: NodaTime.TimeZones
  commentId: N:NodaTime.TimeZones
  name: NodaTime.TimeZones
  nameWithType: NodaTime.TimeZones
  fullName: NodaTime.TimeZones
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Collections.Generic.IEqualityComparer{NodaTime.DateTimeZone}
  commentId: T:System.Collections.Generic.IEqualityComparer{NodaTime.DateTimeZone}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEqualityComparer`1
  name: IEqualityComparer<DateTimeZone>
  nameWithType: IEqualityComparer<DateTimeZone>
  fullName: System.Collections.Generic.IEqualityComparer<NodaTime.DateTimeZone>
  nameWithType.vb: IEqualityComparer(Of DateTimeZone)
  fullName.vb: System.Collections.Generic.IEqualityComparer(Of NodaTime.DateTimeZone)
  name.vb: IEqualityComparer(Of DateTimeZone)
  spec.csharp:
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: NodaTime.DateTimeZone
    name: DateTimeZone
    nameWithType: DateTimeZone
    fullName: NodaTime.DateTimeZone
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: NodaTime.DateTimeZone
    name: DateTimeZone
    nameWithType: DateTimeZone
    fullName: NodaTime.DateTimeZone
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: System.Collections.Generic.IEqualityComparer`1
  commentId: T:System.Collections.Generic.IEqualityComparer`1
  isExternal: true
  name: IEqualityComparer<T>
  nameWithType: IEqualityComparer<T>
  fullName: System.Collections.Generic.IEqualityComparer<T>
  nameWithType.vb: IEqualityComparer(Of T)
  fullName.vb: System.Collections.Generic.IEqualityComparer(Of T)
  name.vb: IEqualityComparer(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: NodaTime.TimeZones.ZoneEqualityComparer
  commentId: T:NodaTime.TimeZones.ZoneEqualityComparer
  parent: NodaTime.TimeZones
  name: ZoneEqualityComparer
  nameWithType: ZoneEqualityComparer
  fullName: NodaTime.TimeZones.ZoneEqualityComparer
- uid: NodaTime.TimeZones.ZoneEqualityComparer.ForInterval*
  commentId: Overload:NodaTime.TimeZones.ZoneEqualityComparer.ForInterval
  name: ForInterval
  nameWithType: ZoneEqualityComparer.ForInterval
  fullName: NodaTime.TimeZones.ZoneEqualityComparer.ForInterval
- uid: NodaTime.Interval
  commentId: T:NodaTime.Interval
  parent: NodaTime
  name: Interval
  nameWithType: Interval
  fullName: NodaTime.Interval
- uid: NodaTime
  commentId: N:NodaTime
  name: NodaTime
  nameWithType: NodaTime
  fullName: NodaTime
- uid: NodaTime.TimeZones.ZoneEqualityComparer.Options
  commentId: T:NodaTime.TimeZones.ZoneEqualityComparer.Options
  parent: NodaTime.TimeZones
  name: ZoneEqualityComparer.Options
  nameWithType: ZoneEqualityComparer.Options
  fullName: NodaTime.TimeZones.ZoneEqualityComparer.Options
- uid: System.ArgumentOutOfRangeException
  commentId: T:System.ArgumentOutOfRangeException
  parent: System
  isExternal: true
  name: ArgumentOutOfRangeException
  nameWithType: ArgumentOutOfRangeException
  fullName: System.ArgumentOutOfRangeException
- uid: NodaTime.TimeZones.ZoneEqualityComparer.WithOptions*
  commentId: Overload:NodaTime.TimeZones.ZoneEqualityComparer.WithOptions
  name: WithOptions
  nameWithType: ZoneEqualityComparer.WithOptions
  fullName: NodaTime.TimeZones.ZoneEqualityComparer.WithOptions
- uid: NodaTime.DateTimeZone
  commentId: T:NodaTime.DateTimeZone
  parent: NodaTime
  name: DateTimeZone
  nameWithType: DateTimeZone
  fullName: NodaTime.DateTimeZone
- uid: NodaTime.TimeZones.ZoneEqualityComparer.Equals*
  commentId: Overload:NodaTime.TimeZones.ZoneEqualityComparer.Equals
  name: Equals
  nameWithType: ZoneEqualityComparer.Equals
  fullName: NodaTime.TimeZones.ZoneEqualityComparer.Equals
- uid: System.Collections.Generic.IEqualityComparer{NodaTime.DateTimeZone}.Equals(NodaTime.DateTimeZone,NodaTime.DateTimeZone)
  commentId: M:System.Collections.Generic.IEqualityComparer{NodaTime.DateTimeZone}.Equals(NodaTime.DateTimeZone,NodaTime.DateTimeZone)
  parent: System.Collections.Generic.IEqualityComparer{NodaTime.DateTimeZone}
  definition: System.Collections.Generic.IEqualityComparer`1.Equals(`0,`0)
  name: Equals(DateTimeZone, DateTimeZone)
  nameWithType: IEqualityComparer<DateTimeZone>.Equals(DateTimeZone, DateTimeZone)
  fullName: System.Collections.Generic.IEqualityComparer<NodaTime.DateTimeZone>.Equals(NodaTime.DateTimeZone, NodaTime.DateTimeZone)
  nameWithType.vb: IEqualityComparer(Of DateTimeZone).Equals(DateTimeZone, DateTimeZone)
  fullName.vb: System.Collections.Generic.IEqualityComparer(Of NodaTime.DateTimeZone).Equals(NodaTime.DateTimeZone, NodaTime.DateTimeZone)
  spec.csharp:
  - uid: System.Collections.Generic.IEqualityComparer`1.Equals(`0,`0)
    name: Equals
    nameWithType: IEqualityComparer<DateTimeZone>.Equals
    fullName: System.Collections.Generic.IEqualityComparer<NodaTime.DateTimeZone>.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: NodaTime.DateTimeZone
    name: DateTimeZone
    nameWithType: DateTimeZone
    fullName: NodaTime.DateTimeZone
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: NodaTime.DateTimeZone
    name: DateTimeZone
    nameWithType: DateTimeZone
    fullName: NodaTime.DateTimeZone
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.IEqualityComparer`1.Equals(`0,`0)
    name: Equals
    nameWithType: IEqualityComparer(Of DateTimeZone).Equals
    fullName: System.Collections.Generic.IEqualityComparer(Of NodaTime.DateTimeZone).Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: NodaTime.DateTimeZone
    name: DateTimeZone
    nameWithType: DateTimeZone
    fullName: NodaTime.DateTimeZone
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: NodaTime.DateTimeZone
    name: DateTimeZone
    nameWithType: DateTimeZone
    fullName: NodaTime.DateTimeZone
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Collections.Generic.IEqualityComparer`1.Equals(`0,`0)
  commentId: M:System.Collections.Generic.IEqualityComparer`1.Equals(`0,`0)
  isExternal: true
  name: Equals(T, T)
  nameWithType: IEqualityComparer<T>.Equals(T, T)
  fullName: System.Collections.Generic.IEqualityComparer<T>.Equals(T, T)
  nameWithType.vb: IEqualityComparer(Of T).Equals(T, T)
  fullName.vb: System.Collections.Generic.IEqualityComparer(Of T).Equals(T, T)
  spec.csharp:
  - uid: System.Collections.Generic.IEqualityComparer`1.Equals(`0,`0)
    name: Equals
    nameWithType: IEqualityComparer<T>.Equals
    fullName: System.Collections.Generic.IEqualityComparer<T>.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.IEqualityComparer`1.Equals(`0,`0)
    name: Equals
    nameWithType: IEqualityComparer(Of T).Equals
    fullName: System.Collections.Generic.IEqualityComparer(Of T).Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: NodaTime.TimeZones.ZoneEqualityComparer.GetHashCode*
  commentId: Overload:NodaTime.TimeZones.ZoneEqualityComparer.GetHashCode
  name: GetHashCode
  nameWithType: ZoneEqualityComparer.GetHashCode
  fullName: NodaTime.TimeZones.ZoneEqualityComparer.GetHashCode
- uid: System.Collections.Generic.IEqualityComparer{NodaTime.DateTimeZone}.GetHashCode(NodaTime.DateTimeZone)
  commentId: M:System.Collections.Generic.IEqualityComparer{NodaTime.DateTimeZone}.GetHashCode(NodaTime.DateTimeZone)
  parent: System.Collections.Generic.IEqualityComparer{NodaTime.DateTimeZone}
  definition: System.Collections.Generic.IEqualityComparer`1.GetHashCode(`0)
  name: GetHashCode(DateTimeZone)
  nameWithType: IEqualityComparer<DateTimeZone>.GetHashCode(DateTimeZone)
  fullName: System.Collections.Generic.IEqualityComparer<NodaTime.DateTimeZone>.GetHashCode(NodaTime.DateTimeZone)
  nameWithType.vb: IEqualityComparer(Of DateTimeZone).GetHashCode(DateTimeZone)
  fullName.vb: System.Collections.Generic.IEqualityComparer(Of NodaTime.DateTimeZone).GetHashCode(NodaTime.DateTimeZone)
  spec.csharp:
  - uid: System.Collections.Generic.IEqualityComparer`1.GetHashCode(`0)
    name: GetHashCode
    nameWithType: IEqualityComparer<DateTimeZone>.GetHashCode
    fullName: System.Collections.Generic.IEqualityComparer<NodaTime.DateTimeZone>.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: NodaTime.DateTimeZone
    name: DateTimeZone
    nameWithType: DateTimeZone
    fullName: NodaTime.DateTimeZone
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.IEqualityComparer`1.GetHashCode(`0)
    name: GetHashCode
    nameWithType: IEqualityComparer(Of DateTimeZone).GetHashCode
    fullName: System.Collections.Generic.IEqualityComparer(Of NodaTime.DateTimeZone).GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: NodaTime.DateTimeZone
    name: DateTimeZone
    nameWithType: DateTimeZone
    fullName: NodaTime.DateTimeZone
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Collections.Generic.IEqualityComparer`1.GetHashCode(`0)
  commentId: M:System.Collections.Generic.IEqualityComparer`1.GetHashCode(`0)
  isExternal: true
  name: GetHashCode(T)
  nameWithType: IEqualityComparer<T>.GetHashCode(T)
  fullName: System.Collections.Generic.IEqualityComparer<T>.GetHashCode(T)
  nameWithType.vb: IEqualityComparer(Of T).GetHashCode(T)
  fullName.vb: System.Collections.Generic.IEqualityComparer(Of T).GetHashCode(T)
  spec.csharp:
  - uid: System.Collections.Generic.IEqualityComparer`1.GetHashCode(`0)
    name: GetHashCode
    nameWithType: IEqualityComparer<T>.GetHashCode
    fullName: System.Collections.Generic.IEqualityComparer<T>.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.IEqualityComparer`1.GetHashCode(`0)
    name: GetHashCode
    nameWithType: IEqualityComparer(Of T).GetHashCode
    fullName: System.Collections.Generic.IEqualityComparer(Of T).GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
shouldSkipMarkup: true
