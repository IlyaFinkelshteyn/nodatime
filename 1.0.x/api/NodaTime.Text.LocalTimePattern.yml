### YamlMime:ManagedReference
items:
- uid: NodaTime.Text.LocalTimePattern
  commentId: T:NodaTime.Text.LocalTimePattern
  id: LocalTimePattern
  parent: NodaTime.Text
  children:
  - NodaTime.Text.LocalTimePattern.Create(System.String,System.Globalization.CultureInfo)
  - NodaTime.Text.LocalTimePattern.Create(System.String,System.Globalization.CultureInfo,NodaTime.LocalTime)
  - NodaTime.Text.LocalTimePattern.CreateWithCurrentCulture(System.String)
  - NodaTime.Text.LocalTimePattern.CreateWithInvariantCulture(System.String)
  - NodaTime.Text.LocalTimePattern.ExtendedIsoPattern
  - NodaTime.Text.LocalTimePattern.Format(NodaTime.LocalTime)
  - NodaTime.Text.LocalTimePattern.Parse(System.String)
  - NodaTime.Text.LocalTimePattern.PatternText
  - NodaTime.Text.LocalTimePattern.TemplateValue
  - NodaTime.Text.LocalTimePattern.WithCulture(System.Globalization.CultureInfo)
  - NodaTime.Text.LocalTimePattern.WithTemplateValue(NodaTime.LocalTime)
  langs:
  - csharp
  - vb
  name: LocalTimePattern
  nameWithType: LocalTimePattern
  fullName: NodaTime.Text.LocalTimePattern
  type: Class
  source:
    remote:
      path: 1.0.x/src/NodaTime/Text/LocalTimePattern.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: LocalTimePattern
    path: src/NodaTime/Text/LocalTimePattern.cs
    startLine: 33
  assemblies:
  - NodaTime
  namespace: NodaTime.Text
  summary: "\nRepresents a pattern for parsing and formatting <xref href=\"NodaTime.LocalTime\" data-throw-if-not-resolved=\"false\"></xref> values.\n"
  example: []
  syntax:
    content: 'public sealed class LocalTimePattern : IPattern<LocalTime>'
    content.vb: >-
      Public NotInheritable Class LocalTimePattern
          Implements IPattern(Of LocalTime)
  inheritance:
  - System.Object
  implements:
  - NodaTime.Text.IPattern{NodaTime.LocalTime}
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - sealed
  - class
  modifiers.vb:
  - Public
  - NotInheritable
  - Class
- uid: NodaTime.Text.LocalTimePattern.ExtendedIsoPattern
  commentId: P:NodaTime.Text.LocalTimePattern.ExtendedIsoPattern
  id: ExtendedIsoPattern
  parent: NodaTime.Text.LocalTimePattern
  langs:
  - csharp
  - vb
  name: ExtendedIsoPattern
  nameWithType: LocalTimePattern.ExtendedIsoPattern
  fullName: NodaTime.Text.LocalTimePattern.ExtendedIsoPattern
  type: Property
  source:
    remote:
      path: 1.0.x/src/NodaTime/Text/LocalTimePattern.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: ExtendedIsoPattern
    path: src/NodaTime/Text/LocalTimePattern.cs
    startLine: 40
  assemblies:
  - NodaTime
  namespace: NodaTime.Text
  summary: "\nReturns an invariant local time pattern which is ISO-8601 compatible, providing up to 7 decimal places.\n(These digits are omitted when unnecessary.)\nThis corresponds to the text pattern &quot;HH&apos;:&apos;mm&apos;:&apos;ss;FFFFFFF&quot;.\n"
  example: []
  syntax:
    content: public static LocalTimePattern ExtendedIsoPattern { get; }
    parameters: []
    return:
      type: NodaTime.Text.LocalTimePattern
    content.vb: Public Shared ReadOnly Property ExtendedIsoPattern As LocalTimePattern
  overload: NodaTime.Text.LocalTimePattern.ExtendedIsoPattern*
  modifiers.csharp:
  - public
  - static
  - get
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: NodaTime.Text.LocalTimePattern.PatternText
  commentId: P:NodaTime.Text.LocalTimePattern.PatternText
  id: PatternText
  parent: NodaTime.Text.LocalTimePattern
  langs:
  - csharp
  - vb
  name: PatternText
  nameWithType: LocalTimePattern.PatternText
  fullName: NodaTime.Text.LocalTimePattern.PatternText
  type: Property
  source:
    remote:
      path: 1.0.x/src/NodaTime/Text/LocalTimePattern.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: PatternText
    path: src/NodaTime/Text/LocalTimePattern.cs
    startLine: 64
  assemblies:
  - NodaTime
  namespace: NodaTime.Text
  summary: "\nReturns the pattern text for this pattern, as supplied on creation.\n"
  example: []
  syntax:
    content: public string PatternText { get; }
    parameters: []
    return:
      type: System.String
    content.vb: Public ReadOnly Property PatternText As String
  overload: NodaTime.Text.LocalTimePattern.PatternText*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: NodaTime.Text.LocalTimePattern.TemplateValue
  commentId: P:NodaTime.Text.LocalTimePattern.TemplateValue
  id: TemplateValue
  parent: NodaTime.Text.LocalTimePattern
  langs:
  - csharp
  - vb
  name: TemplateValue
  nameWithType: LocalTimePattern.TemplateValue
  fullName: NodaTime.Text.LocalTimePattern.TemplateValue
  type: Property
  source:
    remote:
      path: 1.0.x/src/NodaTime/Text/LocalTimePattern.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: TemplateValue
    path: src/NodaTime/Text/LocalTimePattern.cs
    startLine: 75
  assemblies:
  - NodaTime
  namespace: NodaTime.Text
  summary: "\nReturns the value used as a template for parsing: any field values unspecified\nin the pattern are taken from the template.\n"
  example: []
  syntax:
    content: public LocalTime TemplateValue { get; }
    parameters: []
    return:
      type: NodaTime.LocalTime
    content.vb: Public ReadOnly Property TemplateValue As LocalTime
  overload: NodaTime.Text.LocalTimePattern.TemplateValue*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: NodaTime.Text.LocalTimePattern.Parse(System.String)
  commentId: M:NodaTime.Text.LocalTimePattern.Parse(System.String)
  id: Parse(System.String)
  parent: NodaTime.Text.LocalTimePattern
  langs:
  - csharp
  - vb
  name: Parse(String)
  nameWithType: LocalTimePattern.Parse(String)
  fullName: NodaTime.Text.LocalTimePattern.Parse(System.String)
  type: Method
  source:
    remote:
      path: 1.0.x/src/NodaTime/Text/LocalTimePattern.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: Parse
    path: src/NodaTime/Text/LocalTimePattern.cs
    startLine: 94
  assemblies:
  - NodaTime
  namespace: NodaTime.Text
  summary: "\nParses the given text value according to the rules of this pattern.\n"
  remarks: "\nThis method never throws an exception (barring a bug in Noda Time itself). Even errors such as\nthe argument being null are wrapped in a parse result.\n"
  example: []
  syntax:
    content: public ParseResult<LocalTime> Parse(string text)
    parameters:
    - id: text
      type: System.String
      description: The text value to parse.
    return:
      type: NodaTime.Text.ParseResult{NodaTime.LocalTime}
      description: The result of parsing, which may be successful or unsuccessful.
    content.vb: Public Function Parse(text As String) As ParseResult(Of LocalTime)
  overload: NodaTime.Text.LocalTimePattern.Parse*
  implements:
  - NodaTime.Text.IPattern{NodaTime.LocalTime}.Parse(System.String)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: NodaTime.Text.LocalTimePattern.Format(NodaTime.LocalTime)
  commentId: M:NodaTime.Text.LocalTimePattern.Format(NodaTime.LocalTime)
  id: Format(NodaTime.LocalTime)
  parent: NodaTime.Text.LocalTimePattern
  langs:
  - csharp
  - vb
  name: Format(LocalTime)
  nameWithType: LocalTimePattern.Format(LocalTime)
  fullName: NodaTime.Text.LocalTimePattern.Format(NodaTime.LocalTime)
  type: Method
  source:
    remote:
      path: 1.0.x/src/NodaTime/Text/LocalTimePattern.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: Format
    path: src/NodaTime/Text/LocalTimePattern.cs
    startLine: 104
  assemblies:
  - NodaTime
  namespace: NodaTime.Text
  summary: "\nFormats the given local time as text according to the rules of this pattern.\n"
  example: []
  syntax:
    content: public string Format(LocalTime value)
    parameters:
    - id: value
      type: NodaTime.LocalTime
      description: The local time to format.
    return:
      type: System.String
      description: The local time formatted according to this pattern.
    content.vb: Public Function Format(value As LocalTime) As String
  overload: NodaTime.Text.LocalTimePattern.Format*
  implements:
  - NodaTime.Text.IPattern{NodaTime.LocalTime}.Format(NodaTime.LocalTime)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: NodaTime.Text.LocalTimePattern.Create(System.String,System.Globalization.CultureInfo,NodaTime.LocalTime)
  commentId: M:NodaTime.Text.LocalTimePattern.Create(System.String,System.Globalization.CultureInfo,NodaTime.LocalTime)
  id: Create(System.String,System.Globalization.CultureInfo,NodaTime.LocalTime)
  parent: NodaTime.Text.LocalTimePattern
  langs:
  - csharp
  - vb
  name: Create(String, CultureInfo, LocalTime)
  nameWithType: LocalTimePattern.Create(String, CultureInfo, LocalTime)
  fullName: NodaTime.Text.LocalTimePattern.Create(System.String, System.Globalization.CultureInfo, NodaTime.LocalTime)
  type: Method
  source:
    remote:
      path: 1.0.x/src/NodaTime/Text/LocalTimePattern.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: Create
    path: src/NodaTime/Text/LocalTimePattern.cs
    startLine: 140
  assemblies:
  - NodaTime
  namespace: NodaTime.Text
  summary: "\nCreates a pattern for the given pattern text, culture, and template value.\n"
  remarks: "\nSee the user guide for the available pattern text options.\n"
  example: []
  syntax:
    content: public static LocalTimePattern Create(string patternText, CultureInfo cultureInfo, LocalTime templateValue)
    parameters:
    - id: patternText
      type: System.String
      description: Pattern text to create the pattern for
    - id: cultureInfo
      type: System.Globalization.CultureInfo
      description: The culture to use in the pattern
    - id: templateValue
      type: NodaTime.LocalTime
      description: Template value to use for unspecified fields
    return:
      type: NodaTime.Text.LocalTimePattern
      description: A pattern for parsing and formatting local times.
    content.vb: Public Shared Function Create(patternText As String, cultureInfo As CultureInfo, templateValue As LocalTime) As LocalTimePattern
  overload: NodaTime.Text.LocalTimePattern.Create*
  exceptions:
  - type: NodaTime.Text.InvalidPatternException
    commentId: T:NodaTime.Text.InvalidPatternException
    description: The pattern text was invalid.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: NodaTime.Text.LocalTimePattern.Create(System.String,System.Globalization.CultureInfo)
  commentId: M:NodaTime.Text.LocalTimePattern.Create(System.String,System.Globalization.CultureInfo)
  id: Create(System.String,System.Globalization.CultureInfo)
  parent: NodaTime.Text.LocalTimePattern
  langs:
  - csharp
  - vb
  name: Create(String, CultureInfo)
  nameWithType: LocalTimePattern.Create(String, CultureInfo)
  fullName: NodaTime.Text.LocalTimePattern.Create(System.String, System.Globalization.CultureInfo)
  type: Method
  source:
    remote:
      path: 1.0.x/src/NodaTime/Text/LocalTimePattern.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: Create
    path: src/NodaTime/Text/LocalTimePattern.cs
    startLine: 155
  assemblies:
  - NodaTime
  namespace: NodaTime.Text
  summary: "\nCreates a pattern for the given pattern text and culture, with a template value of midnight.\n"
  remarks: "\nSee the user guide for the available pattern text options.\n"
  example: []
  syntax:
    content: public static LocalTimePattern Create(string patternText, CultureInfo cultureInfo)
    parameters:
    - id: patternText
      type: System.String
      description: Pattern text to create the pattern for
    - id: cultureInfo
      type: System.Globalization.CultureInfo
      description: The culture to use in the pattern
    return:
      type: NodaTime.Text.LocalTimePattern
      description: A pattern for parsing and formatting local times.
    content.vb: Public Shared Function Create(patternText As String, cultureInfo As CultureInfo) As LocalTimePattern
  overload: NodaTime.Text.LocalTimePattern.Create*
  exceptions:
  - type: NodaTime.Text.InvalidPatternException
    commentId: T:NodaTime.Text.InvalidPatternException
    description: The pattern text was invalid.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: NodaTime.Text.LocalTimePattern.CreateWithCurrentCulture(System.String)
  commentId: M:NodaTime.Text.LocalTimePattern.CreateWithCurrentCulture(System.String)
  id: CreateWithCurrentCulture(System.String)
  parent: NodaTime.Text.LocalTimePattern
  langs:
  - csharp
  - vb
  name: CreateWithCurrentCulture(String)
  nameWithType: LocalTimePattern.CreateWithCurrentCulture(String)
  fullName: NodaTime.Text.LocalTimePattern.CreateWithCurrentCulture(System.String)
  type: Method
  source:
    remote:
      path: 1.0.x/src/NodaTime/Text/LocalTimePattern.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: CreateWithCurrentCulture
    path: src/NodaTime/Text/LocalTimePattern.cs
    startLine: 171
  assemblies:
  - NodaTime
  namespace: NodaTime.Text
  summary: "\nCreates a pattern for the given pattern text in the current thread&apos;s current culture.\n"
  remarks: "\nSee the user guide for the available pattern text options. Note that the current culture\nis captured at the time this method is called - it is not captured at the point of parsing\nor formatting values.\n"
  example: []
  syntax:
    content: public static LocalTimePattern CreateWithCurrentCulture(string patternText)
    parameters:
    - id: patternText
      type: System.String
      description: Pattern text to create the pattern for
    return:
      type: NodaTime.Text.LocalTimePattern
      description: A pattern for parsing and formatting local times.
    content.vb: Public Shared Function CreateWithCurrentCulture(patternText As String) As LocalTimePattern
  overload: NodaTime.Text.LocalTimePattern.CreateWithCurrentCulture*
  exceptions:
  - type: NodaTime.Text.InvalidPatternException
    commentId: T:NodaTime.Text.InvalidPatternException
    description: The pattern text was invalid.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: NodaTime.Text.LocalTimePattern.CreateWithInvariantCulture(System.String)
  commentId: M:NodaTime.Text.LocalTimePattern.CreateWithInvariantCulture(System.String)
  id: CreateWithInvariantCulture(System.String)
  parent: NodaTime.Text.LocalTimePattern
  langs:
  - csharp
  - vb
  name: CreateWithInvariantCulture(String)
  nameWithType: LocalTimePattern.CreateWithInvariantCulture(String)
  fullName: NodaTime.Text.LocalTimePattern.CreateWithInvariantCulture(System.String)
  type: Method
  source:
    remote:
      path: 1.0.x/src/NodaTime/Text/LocalTimePattern.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: CreateWithInvariantCulture
    path: src/NodaTime/Text/LocalTimePattern.cs
    startLine: 187
  assemblies:
  - NodaTime
  namespace: NodaTime.Text
  summary: "\nCreates a pattern for the given pattern text in the invariant culture.\n"
  remarks: "\nSee the user guide for the available pattern text options. Note that the current culture\nis captured at the time this method is called - it is not captured at the point of parsing\nor formatting values.\n"
  example: []
  syntax:
    content: public static LocalTimePattern CreateWithInvariantCulture(string patternText)
    parameters:
    - id: patternText
      type: System.String
      description: Pattern text to create the pattern for
    return:
      type: NodaTime.Text.LocalTimePattern
      description: A pattern for parsing and formatting local times.
    content.vb: Public Shared Function CreateWithInvariantCulture(patternText As String) As LocalTimePattern
  overload: NodaTime.Text.LocalTimePattern.CreateWithInvariantCulture*
  exceptions:
  - type: NodaTime.Text.InvalidPatternException
    commentId: T:NodaTime.Text.InvalidPatternException
    description: The pattern text was invalid.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: NodaTime.Text.LocalTimePattern.WithCulture(System.Globalization.CultureInfo)
  commentId: M:NodaTime.Text.LocalTimePattern.WithCulture(System.Globalization.CultureInfo)
  id: WithCulture(System.Globalization.CultureInfo)
  parent: NodaTime.Text.LocalTimePattern
  langs:
  - csharp
  - vb
  name: WithCulture(CultureInfo)
  nameWithType: LocalTimePattern.WithCulture(CultureInfo)
  fullName: NodaTime.Text.LocalTimePattern.WithCulture(System.Globalization.CultureInfo)
  type: Method
  source:
    remote:
      path: 1.0.x/src/NodaTime/Text/LocalTimePattern.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: WithCulture
    path: src/NodaTime/Text/LocalTimePattern.cs
    startLine: 209
  assemblies:
  - NodaTime
  namespace: NodaTime.Text
  summary: "\nCreates a pattern for the same original pattern text as this pattern, but with the specified\nculture.\n"
  example: []
  syntax:
    content: public LocalTimePattern WithCulture(CultureInfo cultureInfo)
    parameters:
    - id: cultureInfo
      type: System.Globalization.CultureInfo
      description: The culture to use in the new pattern.
    return:
      type: NodaTime.Text.LocalTimePattern
      description: A new pattern with the given culture.
    content.vb: Public Function WithCulture(cultureInfo As CultureInfo) As LocalTimePattern
  overload: NodaTime.Text.LocalTimePattern.WithCulture*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: NodaTime.Text.LocalTimePattern.WithTemplateValue(NodaTime.LocalTime)
  commentId: M:NodaTime.Text.LocalTimePattern.WithTemplateValue(NodaTime.LocalTime)
  id: WithTemplateValue(NodaTime.LocalTime)
  parent: NodaTime.Text.LocalTimePattern
  langs:
  - csharp
  - vb
  name: WithTemplateValue(LocalTime)
  nameWithType: LocalTimePattern.WithTemplateValue(LocalTime)
  fullName: NodaTime.Text.LocalTimePattern.WithTemplateValue(NodaTime.LocalTime)
  type: Method
  source:
    remote:
      path: 1.0.x/src/NodaTime/Text/LocalTimePattern.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: WithTemplateValue
    path: src/NodaTime/Text/LocalTimePattern.cs
    startLine: 219
  assemblies:
  - NodaTime
  namespace: NodaTime.Text
  summary: "\nCreates a pattern like this one, but with the specified template value.\n"
  example: []
  syntax:
    content: public LocalTimePattern WithTemplateValue(LocalTime newTemplateValue)
    parameters:
    - id: newTemplateValue
      type: NodaTime.LocalTime
      description: The template value for the new pattern, used to fill in unspecified fields.
    return:
      type: NodaTime.Text.LocalTimePattern
      description: A new pattern with the given template value.
    content.vb: Public Function WithTemplateValue(newTemplateValue As LocalTime) As LocalTimePattern
  overload: NodaTime.Text.LocalTimePattern.WithTemplateValue*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: NodaTime.LocalTime
  commentId: T:NodaTime.LocalTime
  parent: NodaTime
  name: LocalTime
  nameWithType: LocalTime
  fullName: NodaTime.LocalTime
- uid: System.Globalization.CultureInfo
  commentId: T:System.Globalization.CultureInfo
  parent: System.Globalization
  isExternal: true
  name: CultureInfo
  nameWithType: CultureInfo
  fullName: System.Globalization.CultureInfo
- uid: NodaTime.Text
  commentId: N:NodaTime.Text
  name: NodaTime.Text
  nameWithType: NodaTime.Text
  fullName: NodaTime.Text
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: NodaTime.Text.IPattern{NodaTime.LocalTime}
  commentId: T:NodaTime.Text.IPattern{NodaTime.LocalTime}
  parent: NodaTime.Text
  definition: NodaTime.Text.IPattern`1
  name: IPattern<LocalTime>
  nameWithType: IPattern<LocalTime>
  fullName: NodaTime.Text.IPattern<NodaTime.LocalTime>
  nameWithType.vb: IPattern(Of LocalTime)
  fullName.vb: NodaTime.Text.IPattern(Of NodaTime.LocalTime)
  name.vb: IPattern(Of LocalTime)
  spec.csharp:
  - uid: NodaTime.Text.IPattern`1
    name: IPattern
    nameWithType: IPattern
    fullName: NodaTime.Text.IPattern
  - name: <
    nameWithType: <
    fullName: <
  - uid: NodaTime.LocalTime
    name: LocalTime
    nameWithType: LocalTime
    fullName: NodaTime.LocalTime
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: NodaTime.Text.IPattern`1
    name: IPattern
    nameWithType: IPattern
    fullName: NodaTime.Text.IPattern
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: NodaTime.LocalTime
    name: LocalTime
    nameWithType: LocalTime
    fullName: NodaTime.LocalTime
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: NodaTime
  commentId: N:NodaTime
  name: NodaTime
  nameWithType: NodaTime
  fullName: NodaTime
- uid: System.Globalization
  commentId: N:System.Globalization
  isExternal: true
  name: System.Globalization
  nameWithType: System.Globalization
  fullName: System.Globalization
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: NodaTime.Text.IPattern`1
  commentId: T:NodaTime.Text.IPattern`1
  name: IPattern<T>
  nameWithType: IPattern<T>
  fullName: NodaTime.Text.IPattern<T>
  nameWithType.vb: IPattern(Of T)
  fullName.vb: NodaTime.Text.IPattern(Of T)
  name.vb: IPattern(Of T)
  spec.csharp:
  - uid: NodaTime.Text.IPattern`1
    name: IPattern
    nameWithType: IPattern
    fullName: NodaTime.Text.IPattern
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: NodaTime.Text.IPattern`1
    name: IPattern
    nameWithType: IPattern
    fullName: NodaTime.Text.IPattern
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: NodaTime.Text.LocalTimePattern.ExtendedIsoPattern*
  commentId: Overload:NodaTime.Text.LocalTimePattern.ExtendedIsoPattern
  name: ExtendedIsoPattern
  nameWithType: LocalTimePattern.ExtendedIsoPattern
  fullName: NodaTime.Text.LocalTimePattern.ExtendedIsoPattern
- uid: NodaTime.Text.LocalTimePattern
  commentId: T:NodaTime.Text.LocalTimePattern
  parent: NodaTime.Text
  name: LocalTimePattern
  nameWithType: LocalTimePattern
  fullName: NodaTime.Text.LocalTimePattern
- uid: NodaTime.Text.LocalTimePattern.PatternText*
  commentId: Overload:NodaTime.Text.LocalTimePattern.PatternText
  name: PatternText
  nameWithType: LocalTimePattern.PatternText
  fullName: NodaTime.Text.LocalTimePattern.PatternText
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: NodaTime.Text.LocalTimePattern.TemplateValue*
  commentId: Overload:NodaTime.Text.LocalTimePattern.TemplateValue
  name: TemplateValue
  nameWithType: LocalTimePattern.TemplateValue
  fullName: NodaTime.Text.LocalTimePattern.TemplateValue
- uid: NodaTime.Text.LocalTimePattern.Parse*
  commentId: Overload:NodaTime.Text.LocalTimePattern.Parse
  name: Parse
  nameWithType: LocalTimePattern.Parse
  fullName: NodaTime.Text.LocalTimePattern.Parse
- uid: NodaTime.Text.IPattern{NodaTime.LocalTime}.Parse(System.String)
  commentId: M:NodaTime.Text.IPattern{NodaTime.LocalTime}.Parse(System.String)
  parent: NodaTime.Text.IPattern{NodaTime.LocalTime}
  definition: NodaTime.Text.IPattern`1.Parse(System.String)
  name: Parse(String)
  nameWithType: IPattern<LocalTime>.Parse(String)
  fullName: NodaTime.Text.IPattern<NodaTime.LocalTime>.Parse(System.String)
  nameWithType.vb: IPattern(Of LocalTime).Parse(String)
  fullName.vb: NodaTime.Text.IPattern(Of NodaTime.LocalTime).Parse(System.String)
  spec.csharp:
  - uid: NodaTime.Text.IPattern`1.Parse(System.String)
    name: Parse
    nameWithType: IPattern<LocalTime>.Parse
    fullName: NodaTime.Text.IPattern<NodaTime.LocalTime>.Parse
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NodaTime.Text.IPattern`1.Parse(System.String)
    name: Parse
    nameWithType: IPattern(Of LocalTime).Parse
    fullName: NodaTime.Text.IPattern(Of NodaTime.LocalTime).Parse
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: NodaTime.Text.ParseResult{NodaTime.LocalTime}
  commentId: T:NodaTime.Text.ParseResult{NodaTime.LocalTime}
  parent: NodaTime.Text
  definition: NodaTime.Text.ParseResult`1
  name: ParseResult<LocalTime>
  nameWithType: ParseResult<LocalTime>
  fullName: NodaTime.Text.ParseResult<NodaTime.LocalTime>
  nameWithType.vb: ParseResult(Of LocalTime)
  fullName.vb: NodaTime.Text.ParseResult(Of NodaTime.LocalTime)
  name.vb: ParseResult(Of LocalTime)
  spec.csharp:
  - uid: NodaTime.Text.ParseResult`1
    name: ParseResult
    nameWithType: ParseResult
    fullName: NodaTime.Text.ParseResult
  - name: <
    nameWithType: <
    fullName: <
  - uid: NodaTime.LocalTime
    name: LocalTime
    nameWithType: LocalTime
    fullName: NodaTime.LocalTime
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: NodaTime.Text.ParseResult`1
    name: ParseResult
    nameWithType: ParseResult
    fullName: NodaTime.Text.ParseResult
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: NodaTime.LocalTime
    name: LocalTime
    nameWithType: LocalTime
    fullName: NodaTime.LocalTime
  - name: )
    nameWithType: )
    fullName: )
- uid: NodaTime.Text.IPattern`1.Parse(System.String)
  commentId: M:NodaTime.Text.IPattern`1.Parse(System.String)
  isExternal: true
  name: Parse(String)
  nameWithType: IPattern<T>.Parse(String)
  fullName: NodaTime.Text.IPattern<T>.Parse(System.String)
  nameWithType.vb: IPattern(Of T).Parse(String)
  fullName.vb: NodaTime.Text.IPattern(Of T).Parse(System.String)
  spec.csharp:
  - uid: NodaTime.Text.IPattern`1.Parse(System.String)
    name: Parse
    nameWithType: IPattern<T>.Parse
    fullName: NodaTime.Text.IPattern<T>.Parse
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NodaTime.Text.IPattern`1.Parse(System.String)
    name: Parse
    nameWithType: IPattern(Of T).Parse
    fullName: NodaTime.Text.IPattern(Of T).Parse
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: NodaTime.Text.ParseResult`1
  commentId: T:NodaTime.Text.ParseResult`1
  name: ParseResult<T>
  nameWithType: ParseResult<T>
  fullName: NodaTime.Text.ParseResult<T>
  nameWithType.vb: ParseResult(Of T)
  fullName.vb: NodaTime.Text.ParseResult(Of T)
  name.vb: ParseResult(Of T)
  spec.csharp:
  - uid: NodaTime.Text.ParseResult`1
    name: ParseResult
    nameWithType: ParseResult
    fullName: NodaTime.Text.ParseResult
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: NodaTime.Text.ParseResult`1
    name: ParseResult
    nameWithType: ParseResult
    fullName: NodaTime.Text.ParseResult
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: NodaTime.Text.LocalTimePattern.Format*
  commentId: Overload:NodaTime.Text.LocalTimePattern.Format
  name: Format
  nameWithType: LocalTimePattern.Format
  fullName: NodaTime.Text.LocalTimePattern.Format
- uid: NodaTime.Text.IPattern{NodaTime.LocalTime}.Format(NodaTime.LocalTime)
  commentId: M:NodaTime.Text.IPattern{NodaTime.LocalTime}.Format(NodaTime.LocalTime)
  parent: NodaTime.Text.IPattern{NodaTime.LocalTime}
  definition: NodaTime.Text.IPattern`1.Format(`0)
  name: Format(LocalTime)
  nameWithType: IPattern<LocalTime>.Format(LocalTime)
  fullName: NodaTime.Text.IPattern<NodaTime.LocalTime>.Format(NodaTime.LocalTime)
  nameWithType.vb: IPattern(Of LocalTime).Format(LocalTime)
  fullName.vb: NodaTime.Text.IPattern(Of NodaTime.LocalTime).Format(NodaTime.LocalTime)
  spec.csharp:
  - uid: NodaTime.Text.IPattern`1.Format(`0)
    name: Format
    nameWithType: IPattern<LocalTime>.Format
    fullName: NodaTime.Text.IPattern<NodaTime.LocalTime>.Format
  - name: (
    nameWithType: (
    fullName: (
  - uid: NodaTime.LocalTime
    name: LocalTime
    nameWithType: LocalTime
    fullName: NodaTime.LocalTime
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NodaTime.Text.IPattern`1.Format(`0)
    name: Format
    nameWithType: IPattern(Of LocalTime).Format
    fullName: NodaTime.Text.IPattern(Of NodaTime.LocalTime).Format
  - name: (
    nameWithType: (
    fullName: (
  - uid: NodaTime.LocalTime
    name: LocalTime
    nameWithType: LocalTime
    fullName: NodaTime.LocalTime
  - name: )
    nameWithType: )
    fullName: )
- uid: NodaTime.Text.IPattern`1.Format(`0)
  commentId: M:NodaTime.Text.IPattern`1.Format(`0)
  name: Format(T)
  nameWithType: IPattern<T>.Format(T)
  fullName: NodaTime.Text.IPattern<T>.Format(T)
  nameWithType.vb: IPattern(Of T).Format(T)
  fullName.vb: NodaTime.Text.IPattern(Of T).Format(T)
  spec.csharp:
  - uid: NodaTime.Text.IPattern`1.Format(`0)
    name: Format
    nameWithType: IPattern<T>.Format
    fullName: NodaTime.Text.IPattern<T>.Format
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NodaTime.Text.IPattern`1.Format(`0)
    name: Format
    nameWithType: IPattern(Of T).Format
    fullName: NodaTime.Text.IPattern(Of T).Format
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: NodaTime.Text.InvalidPatternException
  commentId: T:NodaTime.Text.InvalidPatternException
  name: InvalidPatternException
  nameWithType: InvalidPatternException
  fullName: NodaTime.Text.InvalidPatternException
- uid: NodaTime.Text.LocalTimePattern.Create*
  commentId: Overload:NodaTime.Text.LocalTimePattern.Create
  name: Create
  nameWithType: LocalTimePattern.Create
  fullName: NodaTime.Text.LocalTimePattern.Create
- uid: NodaTime.Text.LocalTimePattern.CreateWithCurrentCulture*
  commentId: Overload:NodaTime.Text.LocalTimePattern.CreateWithCurrentCulture
  name: CreateWithCurrentCulture
  nameWithType: LocalTimePattern.CreateWithCurrentCulture
  fullName: NodaTime.Text.LocalTimePattern.CreateWithCurrentCulture
- uid: NodaTime.Text.LocalTimePattern.CreateWithInvariantCulture*
  commentId: Overload:NodaTime.Text.LocalTimePattern.CreateWithInvariantCulture
  name: CreateWithInvariantCulture
  nameWithType: LocalTimePattern.CreateWithInvariantCulture
  fullName: NodaTime.Text.LocalTimePattern.CreateWithInvariantCulture
- uid: NodaTime.Text.LocalTimePattern.WithCulture*
  commentId: Overload:NodaTime.Text.LocalTimePattern.WithCulture
  name: WithCulture
  nameWithType: LocalTimePattern.WithCulture
  fullName: NodaTime.Text.LocalTimePattern.WithCulture
- uid: NodaTime.Text.LocalTimePattern.WithTemplateValue*
  commentId: Overload:NodaTime.Text.LocalTimePattern.WithTemplateValue
  name: WithTemplateValue
  nameWithType: LocalTimePattern.WithTemplateValue
  fullName: NodaTime.Text.LocalTimePattern.WithTemplateValue
shouldSkipMarkup: true
