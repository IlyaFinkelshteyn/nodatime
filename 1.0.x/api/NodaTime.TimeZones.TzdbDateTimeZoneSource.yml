### YamlMime:ManagedReference
items:
- uid: NodaTime.TimeZones.TzdbDateTimeZoneSource
  commentId: T:NodaTime.TimeZones.TzdbDateTimeZoneSource
  id: TzdbDateTimeZoneSource
  parent: NodaTime.TimeZones
  children:
  - NodaTime.TimeZones.TzdbDateTimeZoneSource.#ctor(System.Resources.ResourceManager)
  - NodaTime.TimeZones.TzdbDateTimeZoneSource.#ctor(System.Resources.ResourceSet)
  - NodaTime.TimeZones.TzdbDateTimeZoneSource.#ctor(System.String)
  - NodaTime.TimeZones.TzdbDateTimeZoneSource.#ctor(System.String,System.Reflection.Assembly)
  - NodaTime.TimeZones.TzdbDateTimeZoneSource.ForId(System.String)
  - NodaTime.TimeZones.TzdbDateTimeZoneSource.GetIds
  - NodaTime.TimeZones.TzdbDateTimeZoneSource.MapTimeZoneId(System.TimeZoneInfo)
  - NodaTime.TimeZones.TzdbDateTimeZoneSource.VersionId
  langs:
  - csharp
  - vb
  name: TzdbDateTimeZoneSource
  nameWithType: TzdbDateTimeZoneSource
  fullName: NodaTime.TimeZones.TzdbDateTimeZoneSource
  type: Class
  source:
    remote:
      path: 1.0.x/src/NodaTime/TimeZones/TzdbDateTimeZoneSource.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: TzdbDateTimeZoneSource
    path: src/NodaTime/TimeZones/TzdbDateTimeZoneSource.cs
    startLine: 36
  assemblies:
  - NodaTime
  namespace: NodaTime.TimeZones
  summary: "\nProvides an implementation of a <xref href=\"NodaTime.TimeZones.IDateTimeZoneSource\" data-throw-if-not-resolved=\"false\"></xref> that looks\nfor its time zone definitions from a named resource in an assembly.\n"
  remarks: "\nAll calls to <xref href=\"NodaTime.TimeZones.TzdbDateTimeZoneSource.ForId(System.String)\" data-throw-if-not-resolved=\"false\"></xref> for fixed-offset IDs advertised by the source (i.e. &quot;UTC&quot; and &quot;UTC+/-Offset&quot;)\nwill return zones equal to those returned by <xref href=\"NodaTime.DateTimeZone.ForOffset(NodaTime.Offset)\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: 'public sealed class TzdbDateTimeZoneSource : IDateTimeZoneSource'
    content.vb: >-
      Public NotInheritable Class TzdbDateTimeZoneSource
          Implements IDateTimeZoneSource
  inheritance:
  - System.Object
  implements:
  - NodaTime.TimeZones.IDateTimeZoneSource
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - sealed
  - class
  modifiers.vb:
  - Public
  - NotInheritable
  - Class
- uid: NodaTime.TimeZones.TzdbDateTimeZoneSource.#ctor(System.String)
  commentId: M:NodaTime.TimeZones.TzdbDateTimeZoneSource.#ctor(System.String)
  id: '#ctor(System.String)'
  parent: NodaTime.TimeZones.TzdbDateTimeZoneSource
  langs:
  - csharp
  - vb
  name: TzdbDateTimeZoneSource(String)
  nameWithType: TzdbDateTimeZoneSource.TzdbDateTimeZoneSource(String)
  fullName: NodaTime.TimeZones.TzdbDateTimeZoneSource.TzdbDateTimeZoneSource(System.String)
  type: Constructor
  source:
    remote:
      path: 1.0.x/src/NodaTime/TimeZones/TzdbDateTimeZoneSource.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: .ctor
    path: src/NodaTime/TimeZones/TzdbDateTimeZoneSource.cs
    startLine: 71
  assemblies:
  - NodaTime
  namespace: NodaTime.TimeZones
  summary: "\nInitializes a new instance of the <xref href=\"NodaTime.TimeZones.TzdbDateTimeZoneSource\" data-throw-if-not-resolved=\"false\"></xref> class.\n"
  example: []
  syntax:
    content: public TzdbDateTimeZoneSource(string baseName)
    parameters:
    - id: baseName
      type: System.String
      description: GetName of the base.
    content.vb: Public Sub New(baseName As String)
  overload: NodaTime.TimeZones.TzdbDateTimeZoneSource.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: NodaTime.TimeZones.TzdbDateTimeZoneSource.#ctor(System.String,System.Reflection.Assembly)
  commentId: M:NodaTime.TimeZones.TzdbDateTimeZoneSource.#ctor(System.String,System.Reflection.Assembly)
  id: '#ctor(System.String,System.Reflection.Assembly)'
  parent: NodaTime.TimeZones.TzdbDateTimeZoneSource
  langs:
  - csharp
  - vb
  name: TzdbDateTimeZoneSource(String, Assembly)
  nameWithType: TzdbDateTimeZoneSource.TzdbDateTimeZoneSource(String, Assembly)
  fullName: NodaTime.TimeZones.TzdbDateTimeZoneSource.TzdbDateTimeZoneSource(System.String, System.Reflection.Assembly)
  type: Constructor
  source:
    remote:
      path: 1.0.x/src/NodaTime/TimeZones/TzdbDateTimeZoneSource.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: .ctor
    path: src/NodaTime/TimeZones/TzdbDateTimeZoneSource.cs
    startLine: 80
  assemblies:
  - NodaTime
  namespace: NodaTime.TimeZones
  summary: "\nInitializes a new instance of the <xref href=\"NodaTime.TimeZones.TzdbDateTimeZoneSource\" data-throw-if-not-resolved=\"false\"></xref> class.\n"
  example: []
  syntax:
    content: public TzdbDateTimeZoneSource(string baseName, Assembly assembly)
    parameters:
    - id: baseName
      type: System.String
      description: GetName of the base.
    - id: assembly
      type: System.Reflection.Assembly
      description: The assembly to search for the time zone resources.
    content.vb: Public Sub New(baseName As String, assembly As Assembly)
  overload: NodaTime.TimeZones.TzdbDateTimeZoneSource.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: NodaTime.TimeZones.TzdbDateTimeZoneSource.#ctor(System.Resources.ResourceManager)
  commentId: M:NodaTime.TimeZones.TzdbDateTimeZoneSource.#ctor(System.Resources.ResourceManager)
  id: '#ctor(System.Resources.ResourceManager)'
  parent: NodaTime.TimeZones.TzdbDateTimeZoneSource
  langs:
  - csharp
  - vb
  name: TzdbDateTimeZoneSource(ResourceManager)
  nameWithType: TzdbDateTimeZoneSource.TzdbDateTimeZoneSource(ResourceManager)
  fullName: NodaTime.TimeZones.TzdbDateTimeZoneSource.TzdbDateTimeZoneSource(System.Resources.ResourceManager)
  type: Constructor
  source:
    remote:
      path: 1.0.x/src/NodaTime/TimeZones/TzdbDateTimeZoneSource.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: .ctor
    path: src/NodaTime/TimeZones/TzdbDateTimeZoneSource.cs
    startLine: 89
  assemblies:
  - NodaTime
  namespace: NodaTime.TimeZones
  summary: "\nInitializes a new instance of the <xref href=\"NodaTime.TimeZones.TzdbDateTimeZoneSource\" data-throw-if-not-resolved=\"false\"></xref> class.\n"
  example: []
  syntax:
    content: public TzdbDateTimeZoneSource(ResourceManager source)
    parameters:
    - id: source
      type: System.Resources.ResourceManager
      description: The <xref href="System.Resources.ResourceManager" data-throw-if-not-resolved="false"></xref> to search for the time zone resources.
    content.vb: Public Sub New(source As ResourceManager)
  overload: NodaTime.TimeZones.TzdbDateTimeZoneSource.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: NodaTime.TimeZones.TzdbDateTimeZoneSource.#ctor(System.Resources.ResourceSet)
  commentId: M:NodaTime.TimeZones.TzdbDateTimeZoneSource.#ctor(System.Resources.ResourceSet)
  id: '#ctor(System.Resources.ResourceSet)'
  parent: NodaTime.TimeZones.TzdbDateTimeZoneSource
  langs:
  - csharp
  - vb
  name: TzdbDateTimeZoneSource(ResourceSet)
  nameWithType: TzdbDateTimeZoneSource.TzdbDateTimeZoneSource(ResourceSet)
  fullName: NodaTime.TimeZones.TzdbDateTimeZoneSource.TzdbDateTimeZoneSource(System.Resources.ResourceSet)
  type: Constructor
  source:
    remote:
      path: 1.0.x/src/NodaTime/TimeZones/TzdbDateTimeZoneSource.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: .ctor
    path: src/NodaTime/TimeZones/TzdbDateTimeZoneSource.cs
    startLine: 98
  assemblies:
  - NodaTime
  namespace: NodaTime.TimeZones
  summary: "\nInitializes a new instance of the <xref href=\"NodaTime.TimeZones.TzdbDateTimeZoneSource\" data-throw-if-not-resolved=\"false\"></xref> class.\n"
  example: []
  syntax:
    content: public TzdbDateTimeZoneSource(ResourceSet source)
    parameters:
    - id: source
      type: System.Resources.ResourceSet
      description: The <xref href="System.Resources.ResourceSet" data-throw-if-not-resolved="false"></xref> to search for the time zone resources.
    content.vb: Public Sub New(source As ResourceSet)
  overload: NodaTime.TimeZones.TzdbDateTimeZoneSource.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: NodaTime.TimeZones.TzdbDateTimeZoneSource.ForId(System.String)
  commentId: M:NodaTime.TimeZones.TzdbDateTimeZoneSource.ForId(System.String)
  id: ForId(System.String)
  parent: NodaTime.TimeZones.TzdbDateTimeZoneSource
  langs:
  - csharp
  - vb
  name: ForId(String)
  nameWithType: TzdbDateTimeZoneSource.ForId(String)
  fullName: NodaTime.TimeZones.TzdbDateTimeZoneSource.ForId(System.String)
  type: Method
  source:
    remote:
      path: 1.0.x/src/NodaTime/TimeZones/TzdbDateTimeZoneSource.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: ForId
    path: src/NodaTime/TimeZones/TzdbDateTimeZoneSource.cs
    startLine: 122
  assemblies:
  - NodaTime
  namespace: NodaTime.TimeZones
  summary: "\nReturns the time zone definition associated with the given id.\n"
  example: []
  syntax:
    content: public DateTimeZone ForId(string id)
    parameters:
    - id: id
      type: System.String
      description: The id of the time zone to return.
    return:
      type: NodaTime.DateTimeZone
      description: "\nThe <xref href=\"NodaTime.DateTimeZone\" data-throw-if-not-resolved=\"false\"></xref> or null if there is no time zone with the given id.\n"
    content.vb: Public Function ForId(id As String) As DateTimeZone
  overload: NodaTime.TimeZones.TzdbDateTimeZoneSource.ForId*
  implements:
  - NodaTime.TimeZones.IDateTimeZoneSource.ForId(System.String)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: NodaTime.TimeZones.TzdbDateTimeZoneSource.GetIds
  commentId: M:NodaTime.TimeZones.TzdbDateTimeZoneSource.GetIds
  id: GetIds
  parent: NodaTime.TimeZones.TzdbDateTimeZoneSource
  langs:
  - csharp
  - vb
  name: GetIds()
  nameWithType: TzdbDateTimeZoneSource.GetIds()
  fullName: NodaTime.TimeZones.TzdbDateTimeZoneSource.GetIds()
  type: Method
  source:
    remote:
      path: 1.0.x/src/NodaTime/TimeZones/TzdbDateTimeZoneSource.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: GetIds
    path: src/NodaTime/TimeZones/TzdbDateTimeZoneSource.cs
    startLine: 131
  assemblies:
  - NodaTime
  namespace: NodaTime.TimeZones
  summary: "\nReturns a sequence of the available IDs from this source.\n"
  example: []
  syntax:
    content: public IEnumerable<string> GetIds()
    return:
      type: System.Collections.Generic.IEnumerable{System.String}
    content.vb: Public Function GetIds As IEnumerable(Of String)
  overload: NodaTime.TimeZones.TzdbDateTimeZoneSource.GetIds*
  implements:
  - NodaTime.TimeZones.IDateTimeZoneSource.GetIds
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: NodaTime.TimeZones.TzdbDateTimeZoneSource.VersionId
  commentId: P:NodaTime.TimeZones.TzdbDateTimeZoneSource.VersionId
  id: VersionId
  parent: NodaTime.TimeZones.TzdbDateTimeZoneSource
  langs:
  - csharp
  - vb
  name: VersionId
  nameWithType: TzdbDateTimeZoneSource.VersionId
  fullName: NodaTime.TimeZones.TzdbDateTimeZoneSource.VersionId
  type: Property
  source:
    remote:
      path: 1.0.x/src/NodaTime/TimeZones/TzdbDateTimeZoneSource.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: VersionId
    path: src/NodaTime/TimeZones/TzdbDateTimeZoneSource.cs
    startLine: 140
  assemblies:
  - NodaTime
  namespace: NodaTime.TimeZones
  summary: "\nReturns a version identifier for this source.\n"
  example: []
  syntax:
    content: public string VersionId { get; }
    parameters: []
    return:
      type: System.String
    content.vb: Public ReadOnly Property VersionId As String
  overload: NodaTime.TimeZones.TzdbDateTimeZoneSource.VersionId*
  implements:
  - NodaTime.TimeZones.IDateTimeZoneSource.VersionId
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: NodaTime.TimeZones.TzdbDateTimeZoneSource.MapTimeZoneId(System.TimeZoneInfo)
  commentId: M:NodaTime.TimeZones.TzdbDateTimeZoneSource.MapTimeZoneId(System.TimeZoneInfo)
  id: MapTimeZoneId(System.TimeZoneInfo)
  parent: NodaTime.TimeZones.TzdbDateTimeZoneSource
  langs:
  - csharp
  - vb
  name: MapTimeZoneId(TimeZoneInfo)
  nameWithType: TzdbDateTimeZoneSource.MapTimeZoneId(TimeZoneInfo)
  fullName: NodaTime.TimeZones.TzdbDateTimeZoneSource.MapTimeZoneId(System.TimeZoneInfo)
  type: Method
  source:
    remote:
      path: 1.0.x/src/NodaTime/TimeZones/TzdbDateTimeZoneSource.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: MapTimeZoneId
    path: src/NodaTime/TimeZones/TzdbDateTimeZoneSource.cs
    startLine: 145
  assemblies:
  - NodaTime
  namespace: NodaTime.TimeZones
  summary: "\nAttempts to map the system time zone to a zoneinfo ID, and return that ID.\n"
  example: []
  syntax:
    content: public string MapTimeZoneId(TimeZoneInfo zone)
    parameters:
    - id: zone
      type: System.TimeZoneInfo
    return:
      type: System.String
    content.vb: Public Function MapTimeZoneId(zone As TimeZoneInfo) As String
  overload: NodaTime.TimeZones.TzdbDateTimeZoneSource.MapTimeZoneId*
  implements:
  - NodaTime.TimeZones.IDateTimeZoneSource.MapTimeZoneId(System.TimeZoneInfo)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: NodaTime.TimeZones.IDateTimeZoneSource
  commentId: T:NodaTime.TimeZones.IDateTimeZoneSource
  parent: NodaTime.TimeZones
  name: IDateTimeZoneSource
  nameWithType: IDateTimeZoneSource
  fullName: NodaTime.TimeZones.IDateTimeZoneSource
- uid: NodaTime.TimeZones.TzdbDateTimeZoneSource.ForId(System.String)
  commentId: M:NodaTime.TimeZones.TzdbDateTimeZoneSource.ForId(System.String)
  isExternal: true
- uid: NodaTime.DateTimeZone.ForOffset(NodaTime.Offset)
  commentId: M:NodaTime.DateTimeZone.ForOffset(NodaTime.Offset)
  parent: NodaTime.DateTimeZone
  name: ForOffset(Offset)
  nameWithType: DateTimeZone.ForOffset(Offset)
  fullName: NodaTime.DateTimeZone.ForOffset(NodaTime.Offset)
  spec.csharp:
  - uid: NodaTime.DateTimeZone.ForOffset(NodaTime.Offset)
    name: ForOffset
    nameWithType: DateTimeZone.ForOffset
    fullName: NodaTime.DateTimeZone.ForOffset
  - name: (
    nameWithType: (
    fullName: (
  - uid: NodaTime.Offset
    name: Offset
    nameWithType: Offset
    fullName: NodaTime.Offset
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NodaTime.DateTimeZone.ForOffset(NodaTime.Offset)
    name: ForOffset
    nameWithType: DateTimeZone.ForOffset
    fullName: NodaTime.DateTimeZone.ForOffset
  - name: (
    nameWithType: (
    fullName: (
  - uid: NodaTime.Offset
    name: Offset
    nameWithType: Offset
    fullName: NodaTime.Offset
  - name: )
    nameWithType: )
    fullName: )
- uid: NodaTime.TimeZones
  commentId: N:NodaTime.TimeZones
  name: NodaTime.TimeZones
  nameWithType: NodaTime.TimeZones
  fullName: NodaTime.TimeZones
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: NodaTime.DateTimeZone
  commentId: T:NodaTime.DateTimeZone
  parent: NodaTime
  name: DateTimeZone
  nameWithType: DateTimeZone
  fullName: NodaTime.DateTimeZone
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: NodaTime
  commentId: N:NodaTime
  name: NodaTime
  nameWithType: NodaTime
  fullName: NodaTime
- uid: NodaTime.TimeZones.TzdbDateTimeZoneSource
  commentId: T:NodaTime.TimeZones.TzdbDateTimeZoneSource
  name: TzdbDateTimeZoneSource
  nameWithType: TzdbDateTimeZoneSource
  fullName: NodaTime.TimeZones.TzdbDateTimeZoneSource
- uid: NodaTime.TimeZones.TzdbDateTimeZoneSource.#ctor*
  commentId: Overload:NodaTime.TimeZones.TzdbDateTimeZoneSource.#ctor
  name: TzdbDateTimeZoneSource
  nameWithType: TzdbDateTimeZoneSource.TzdbDateTimeZoneSource
  fullName: NodaTime.TimeZones.TzdbDateTimeZoneSource.TzdbDateTimeZoneSource
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Reflection.Assembly
  commentId: T:System.Reflection.Assembly
  parent: System.Reflection
  isExternal: true
  name: Assembly
  nameWithType: Assembly
  fullName: System.Reflection.Assembly
- uid: System.Reflection
  commentId: N:System.Reflection
  isExternal: true
  name: System.Reflection
  nameWithType: System.Reflection
  fullName: System.Reflection
- uid: System.Resources.ResourceManager
  commentId: T:System.Resources.ResourceManager
  parent: System.Resources
  isExternal: true
  name: ResourceManager
  nameWithType: ResourceManager
  fullName: System.Resources.ResourceManager
- uid: System.Resources
  commentId: N:System.Resources
  isExternal: true
  name: System.Resources
  nameWithType: System.Resources
  fullName: System.Resources
- uid: System.Resources.ResourceSet
  commentId: T:System.Resources.ResourceSet
  parent: System.Resources
  isExternal: true
  name: ResourceSet
  nameWithType: ResourceSet
  fullName: System.Resources.ResourceSet
- uid: NodaTime.TimeZones.TzdbDateTimeZoneSource.ForId*
  commentId: Overload:NodaTime.TimeZones.TzdbDateTimeZoneSource.ForId
  name: ForId
  nameWithType: TzdbDateTimeZoneSource.ForId
  fullName: NodaTime.TimeZones.TzdbDateTimeZoneSource.ForId
- uid: NodaTime.TimeZones.IDateTimeZoneSource.ForId(System.String)
  commentId: M:NodaTime.TimeZones.IDateTimeZoneSource.ForId(System.String)
  parent: NodaTime.TimeZones.IDateTimeZoneSource
  isExternal: true
  name: ForId(String)
  nameWithType: IDateTimeZoneSource.ForId(String)
  fullName: NodaTime.TimeZones.IDateTimeZoneSource.ForId(System.String)
  spec.csharp:
  - uid: NodaTime.TimeZones.IDateTimeZoneSource.ForId(System.String)
    name: ForId
    nameWithType: IDateTimeZoneSource.ForId
    fullName: NodaTime.TimeZones.IDateTimeZoneSource.ForId
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NodaTime.TimeZones.IDateTimeZoneSource.ForId(System.String)
    name: ForId
    nameWithType: IDateTimeZoneSource.ForId
    fullName: NodaTime.TimeZones.IDateTimeZoneSource.ForId
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: NodaTime.TimeZones.TzdbDateTimeZoneSource.GetIds*
  commentId: Overload:NodaTime.TimeZones.TzdbDateTimeZoneSource.GetIds
  name: GetIds
  nameWithType: TzdbDateTimeZoneSource.GetIds
  fullName: NodaTime.TimeZones.TzdbDateTimeZoneSource.GetIds
- uid: NodaTime.TimeZones.IDateTimeZoneSource.GetIds
  commentId: M:NodaTime.TimeZones.IDateTimeZoneSource.GetIds
  parent: NodaTime.TimeZones.IDateTimeZoneSource
  name: GetIds()
  nameWithType: IDateTimeZoneSource.GetIds()
  fullName: NodaTime.TimeZones.IDateTimeZoneSource.GetIds()
  spec.csharp:
  - uid: NodaTime.TimeZones.IDateTimeZoneSource.GetIds
    name: GetIds
    nameWithType: IDateTimeZoneSource.GetIds
    fullName: NodaTime.TimeZones.IDateTimeZoneSource.GetIds
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NodaTime.TimeZones.IDateTimeZoneSource.GetIds
    name: GetIds
    nameWithType: IDateTimeZoneSource.GetIds
    fullName: NodaTime.TimeZones.IDateTimeZoneSource.GetIds
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{System.String}
  commentId: T:System.Collections.Generic.IEnumerable{System.String}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<String>
  nameWithType: IEnumerable<String>
  fullName: System.Collections.Generic.IEnumerable<System.String>
  nameWithType.vb: IEnumerable(Of String)
  fullName.vb: System.Collections.Generic.IEnumerable(Of System.String)
  name.vb: IEnumerable(Of String)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: NodaTime.TimeZones.TzdbDateTimeZoneSource.VersionId*
  commentId: Overload:NodaTime.TimeZones.TzdbDateTimeZoneSource.VersionId
  name: VersionId
  nameWithType: TzdbDateTimeZoneSource.VersionId
  fullName: NodaTime.TimeZones.TzdbDateTimeZoneSource.VersionId
- uid: NodaTime.TimeZones.IDateTimeZoneSource.VersionId
  commentId: P:NodaTime.TimeZones.IDateTimeZoneSource.VersionId
  parent: NodaTime.TimeZones.IDateTimeZoneSource
  name: VersionId
  nameWithType: IDateTimeZoneSource.VersionId
  fullName: NodaTime.TimeZones.IDateTimeZoneSource.VersionId
- uid: NodaTime.TimeZones.TzdbDateTimeZoneSource.MapTimeZoneId*
  commentId: Overload:NodaTime.TimeZones.TzdbDateTimeZoneSource.MapTimeZoneId
  name: MapTimeZoneId
  nameWithType: TzdbDateTimeZoneSource.MapTimeZoneId
  fullName: NodaTime.TimeZones.TzdbDateTimeZoneSource.MapTimeZoneId
- uid: NodaTime.TimeZones.IDateTimeZoneSource.MapTimeZoneId(System.TimeZoneInfo)
  commentId: M:NodaTime.TimeZones.IDateTimeZoneSource.MapTimeZoneId(System.TimeZoneInfo)
  parent: NodaTime.TimeZones.IDateTimeZoneSource
  isExternal: true
  name: MapTimeZoneId(TimeZoneInfo)
  nameWithType: IDateTimeZoneSource.MapTimeZoneId(TimeZoneInfo)
  fullName: NodaTime.TimeZones.IDateTimeZoneSource.MapTimeZoneId(System.TimeZoneInfo)
  spec.csharp:
  - uid: NodaTime.TimeZones.IDateTimeZoneSource.MapTimeZoneId(System.TimeZoneInfo)
    name: MapTimeZoneId
    nameWithType: IDateTimeZoneSource.MapTimeZoneId
    fullName: NodaTime.TimeZones.IDateTimeZoneSource.MapTimeZoneId
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.TimeZoneInfo
    name: TimeZoneInfo
    nameWithType: TimeZoneInfo
    fullName: System.TimeZoneInfo
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NodaTime.TimeZones.IDateTimeZoneSource.MapTimeZoneId(System.TimeZoneInfo)
    name: MapTimeZoneId
    nameWithType: IDateTimeZoneSource.MapTimeZoneId
    fullName: NodaTime.TimeZones.IDateTimeZoneSource.MapTimeZoneId
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.TimeZoneInfo
    name: TimeZoneInfo
    nameWithType: TimeZoneInfo
    fullName: System.TimeZoneInfo
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.TimeZoneInfo
  commentId: T:System.TimeZoneInfo
  parent: System
  isExternal: true
  name: TimeZoneInfo
  nameWithType: TimeZoneInfo
  fullName: System.TimeZoneInfo
shouldSkipMarkup: true
