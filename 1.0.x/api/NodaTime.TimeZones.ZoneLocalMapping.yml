### YamlMime:ManagedReference
items:
- uid: NodaTime.TimeZones.ZoneLocalMapping
  commentId: T:NodaTime.TimeZones.ZoneLocalMapping
  id: ZoneLocalMapping
  parent: NodaTime.TimeZones
  children:
  - NodaTime.TimeZones.ZoneLocalMapping.Count
  - NodaTime.TimeZones.ZoneLocalMapping.EarlyInterval
  - NodaTime.TimeZones.ZoneLocalMapping.First
  - NodaTime.TimeZones.ZoneLocalMapping.Last
  - NodaTime.TimeZones.ZoneLocalMapping.LateInterval
  - NodaTime.TimeZones.ZoneLocalMapping.LocalDateTime
  - NodaTime.TimeZones.ZoneLocalMapping.Single
  - NodaTime.TimeZones.ZoneLocalMapping.Zone
  langs:
  - csharp
  - vb
  name: ZoneLocalMapping
  nameWithType: ZoneLocalMapping
  fullName: NodaTime.TimeZones.ZoneLocalMapping
  type: Class
  source:
    remote:
      path: 1.0.x/src/NodaTime/TimeZones/ZoneLocalMapping.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: ZoneLocalMapping
    path: src/NodaTime/TimeZones/ZoneLocalMapping.cs
    startLine: 57
  assemblies:
  - NodaTime
  namespace: NodaTime.TimeZones
  summary: "\nThe result of mapping a <xref href=\"NodaTime.TimeZones.ZoneLocalMapping.LocalDateTime\" data-throw-if-not-resolved=\"false\"></xref> within a time zone, i.e. finding out\nat what &quot;global&quot; time the &quot;local&quot; time occurred.\n"
  remarks: "\n<p>\nThis class is used as the return type of <xref href=\"NodaTime.DateTimeZone.MapLocal(NodaTime.LocalDateTime)\" data-throw-if-not-resolved=\"false\"></xref>. It allows for\nfinely-grained handling of the three possible results:\n</p>\n<ul><li>Unambiguous mappingThe local time occurs exactly once in the target time zone.</li><li>Ambiguous mapping\n      The local time occurs twice in the target time zone, due to the offset from UTC\n      changing. This usually occurs for an autumnal daylight saving transition, where the clocks\n      are put back by an hour. If the clocks change from 2am to 1am for example, then 1:30am occurs\n      twice - once before the transition and once afterwards.\n</li><li>Impossible mapping\n  The local time does not occur at all in the target time zone, due to the offset from UTC\n  changing. This usually occurs for a vernal (spring-time) daylight saving transition, where the clocks\n  are put forward by an hour. If the clocks change from 1am to 2am for example, then 1:30am is\n  skipped entirely.\n</li></ul>\n"
  example: []
  syntax:
    content: public sealed class ZoneLocalMapping
    content.vb: Public NotInheritable Class ZoneLocalMapping
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - sealed
  - class
  modifiers.vb:
  - Public
  - NotInheritable
  - Class
- uid: NodaTime.TimeZones.ZoneLocalMapping.Count
  commentId: P:NodaTime.TimeZones.ZoneLocalMapping.Count
  id: Count
  parent: NodaTime.TimeZones.ZoneLocalMapping
  langs:
  - csharp
  - vb
  name: Count
  nameWithType: ZoneLocalMapping.Count
  fullName: NodaTime.TimeZones.ZoneLocalMapping.Count
  type: Property
  source:
    remote:
      path: 1.0.x/src/NodaTime/TimeZones/ZoneLocalMapping.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: Count
    path: src/NodaTime/TimeZones/ZoneLocalMapping.cs
    startLine: 79
  assemblies:
  - NodaTime
  namespace: NodaTime.TimeZones
  summary: "\nReturns the number of results within this mapping: the number of distinct\n<xref href=\"NodaTime.ZonedDateTime\" data-throw-if-not-resolved=\"false\"></xref> values which map to the original <xref href=\"NodaTime.TimeZones.ZoneLocalMapping.LocalDateTime\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public int Count { get; }
    parameters: []
    return:
      type: System.Int32
    content.vb: Public ReadOnly Property Count As Integer
  overload: NodaTime.TimeZones.ZoneLocalMapping.Count*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: NodaTime.TimeZones.ZoneLocalMapping.Zone
  commentId: P:NodaTime.TimeZones.ZoneLocalMapping.Zone
  id: Zone
  parent: NodaTime.TimeZones.ZoneLocalMapping
  langs:
  - csharp
  - vb
  name: Zone
  nameWithType: ZoneLocalMapping.Zone
  fullName: NodaTime.TimeZones.ZoneLocalMapping.Zone
  type: Property
  source:
    remote:
      path: 1.0.x/src/NodaTime/TimeZones/ZoneLocalMapping.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: Zone
    path: src/NodaTime/TimeZones/ZoneLocalMapping.cs
    startLine: 84
  assemblies:
  - NodaTime
  namespace: NodaTime.TimeZones
  summary: "\nReturns the <xref href=\"NodaTime.DateTimeZone\" data-throw-if-not-resolved=\"false\"></xref> in which this mapping was performed.\n"
  example: []
  syntax:
    content: public DateTimeZone Zone { get; }
    parameters: []
    return:
      type: NodaTime.DateTimeZone
    content.vb: Public ReadOnly Property Zone As DateTimeZone
  overload: NodaTime.TimeZones.ZoneLocalMapping.Zone*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: NodaTime.TimeZones.ZoneLocalMapping.LocalDateTime
  commentId: P:NodaTime.TimeZones.ZoneLocalMapping.LocalDateTime
  id: LocalDateTime
  parent: NodaTime.TimeZones.ZoneLocalMapping
  langs:
  - csharp
  - vb
  name: LocalDateTime
  nameWithType: ZoneLocalMapping.LocalDateTime
  fullName: NodaTime.TimeZones.ZoneLocalMapping.LocalDateTime
  type: Property
  source:
    remote:
      path: 1.0.x/src/NodaTime/TimeZones/ZoneLocalMapping.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: LocalDateTime
    path: src/NodaTime/TimeZones/ZoneLocalMapping.cs
    startLine: 89
  assemblies:
  - NodaTime
  namespace: NodaTime.TimeZones
  summary: "\nReturns the <xref href=\"NodaTime.TimeZones.ZoneLocalMapping.LocalDateTime\" data-throw-if-not-resolved=\"false\"></xref> which was mapped with in the time zone.\n"
  example: []
  syntax:
    content: public LocalDateTime LocalDateTime { get; }
    parameters: []
    return:
      type: NodaTime.LocalDateTime
    content.vb: Public ReadOnly Property LocalDateTime As LocalDateTime
  overload: NodaTime.TimeZones.ZoneLocalMapping.LocalDateTime*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: NodaTime.TimeZones.ZoneLocalMapping.EarlyInterval
  commentId: P:NodaTime.TimeZones.ZoneLocalMapping.EarlyInterval
  id: EarlyInterval
  parent: NodaTime.TimeZones.ZoneLocalMapping
  langs:
  - csharp
  - vb
  name: EarlyInterval
  nameWithType: ZoneLocalMapping.EarlyInterval
  fullName: NodaTime.TimeZones.ZoneLocalMapping.EarlyInterval
  type: Property
  source:
    remote:
      path: 1.0.x/src/NodaTime/TimeZones/ZoneLocalMapping.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: EarlyInterval
    path: src/NodaTime/TimeZones/ZoneLocalMapping.cs
    startLine: 97
  assemblies:
  - NodaTime
  namespace: NodaTime.TimeZones
  summary: "\nReturns the earlier <xref href=\"NodaTime.TimeZones.ZoneInterval\" data-throw-if-not-resolved=\"false\"></xref> within this mapping. For unambiguous\nmappings, this is the same as <xref href=\"NodaTime.TimeZones.ZoneLocalMapping.LateInterval\" data-throw-if-not-resolved=\"false\"></xref>; for ambiguous mappings,\nthis is the interval during which the mapped local time first occurs; for impossible\nmappings, this is the interval before which the mapped local time occurs.\n"
  example: []
  syntax:
    content: public ZoneInterval EarlyInterval { get; }
    parameters: []
    return:
      type: NodaTime.TimeZones.ZoneInterval
    content.vb: Public ReadOnly Property EarlyInterval As ZoneInterval
  overload: NodaTime.TimeZones.ZoneLocalMapping.EarlyInterval*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: NodaTime.TimeZones.ZoneLocalMapping.LateInterval
  commentId: P:NodaTime.TimeZones.ZoneLocalMapping.LateInterval
  id: LateInterval
  parent: NodaTime.TimeZones.ZoneLocalMapping
  langs:
  - csharp
  - vb
  name: LateInterval
  nameWithType: ZoneLocalMapping.LateInterval
  fullName: NodaTime.TimeZones.ZoneLocalMapping.LateInterval
  type: Property
  source:
    remote:
      path: 1.0.x/src/NodaTime/TimeZones/ZoneLocalMapping.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: LateInterval
    path: src/NodaTime/TimeZones/ZoneLocalMapping.cs
    startLine: 105
  assemblies:
  - NodaTime
  namespace: NodaTime.TimeZones
  summary: "\nReturns the later <xref href=\"NodaTime.TimeZones.ZoneInterval\" data-throw-if-not-resolved=\"false\"></xref> within this mapping. For unambiguous\nmappings, this is the same as <xref href=\"NodaTime.TimeZones.ZoneLocalMapping.EarlyInterval\" data-throw-if-not-resolved=\"false\"></xref>; for ambiguous mappings,\nthis is the interval during which the mapped local time last occurs; for impossible\nmappings, this is the interval after which the mapped local time occurs.\n"
  example: []
  syntax:
    content: public ZoneInterval LateInterval { get; }
    parameters: []
    return:
      type: NodaTime.TimeZones.ZoneInterval
    content.vb: Public ReadOnly Property LateInterval As ZoneInterval
  overload: NodaTime.TimeZones.ZoneLocalMapping.LateInterval*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: NodaTime.TimeZones.ZoneLocalMapping.Single
  commentId: M:NodaTime.TimeZones.ZoneLocalMapping.Single
  id: Single
  parent: NodaTime.TimeZones.ZoneLocalMapping
  langs:
  - csharp
  - vb
  name: Single()
  nameWithType: ZoneLocalMapping.Single()
  fullName: NodaTime.TimeZones.ZoneLocalMapping.Single()
  type: Method
  source:
    remote:
      path: 1.0.x/src/NodaTime/TimeZones/ZoneLocalMapping.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: Single
    path: src/NodaTime/TimeZones/ZoneLocalMapping.cs
    startLine: 114
  assemblies:
  - NodaTime
  namespace: NodaTime.TimeZones
  summary: "\nReturns the single <xref href=\"NodaTime.ZonedDateTime\" data-throw-if-not-resolved=\"false\"></xref> which maps to the original <xref href=\"NodaTime.TimeZones.ZoneLocalMapping.LocalDateTime\" data-throw-if-not-resolved=\"false\"></xref>\nin the mapped <xref href=\"NodaTime.DateTimeZone\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public ZonedDateTime Single()
    return:
      type: NodaTime.ZonedDateTime
      description: The unambiguous result of mapping the local date/time in the time zone.
    content.vb: Public Function Single As ZonedDateTime
  overload: NodaTime.TimeZones.ZoneLocalMapping.Single*
  exceptions:
  - type: NodaTime.SkippedTimeException
    commentId: T:NodaTime.SkippedTimeException
    description: The local date/time was skipped in the time zone.
  - type: NodaTime.AmbiguousTimeException
    commentId: T:NodaTime.AmbiguousTimeException
    description: The local date/time was ambiguous in the time zone.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: NodaTime.TimeZones.ZoneLocalMapping.First
  commentId: M:NodaTime.TimeZones.ZoneLocalMapping.First
  id: First
  parent: NodaTime.TimeZones.ZoneLocalMapping
  langs:
  - csharp
  - vb
  name: First()
  nameWithType: ZoneLocalMapping.First()
  fullName: NodaTime.TimeZones.ZoneLocalMapping.First()
  type: Method
  source:
    remote:
      path: 1.0.x/src/NodaTime/TimeZones/ZoneLocalMapping.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: First
    path: src/NodaTime/TimeZones/ZoneLocalMapping.cs
    startLine: 135
  assemblies:
  - NodaTime
  namespace: NodaTime.TimeZones
  summary: "\nReturns a <xref href=\"NodaTime.ZonedDateTime\" data-throw-if-not-resolved=\"false\"></xref> which maps to the original <xref href=\"NodaTime.TimeZones.ZoneLocalMapping.LocalDateTime\" data-throw-if-not-resolved=\"false\"></xref>\nin the mapped <xref href=\"NodaTime.DateTimeZone\" data-throw-if-not-resolved=\"false\"></xref>: either the single result if the mapping is unambiguous,\nor the earlier result if the local date/time occurs twice in the time zone due to a time zone\noffset change such as an autumnal daylight saving transition.\n"
  example: []
  syntax:
    content: public ZonedDateTime First()
    return:
      type: NodaTime.ZonedDateTime
      description: The unambiguous result of mapping a local date/time in a time zone.
    content.vb: Public Function First As ZonedDateTime
  overload: NodaTime.TimeZones.ZoneLocalMapping.First*
  exceptions:
  - type: NodaTime.SkippedTimeException
    commentId: T:NodaTime.SkippedTimeException
    description: The local date/time was skipped in the time zone.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: NodaTime.TimeZones.ZoneLocalMapping.Last
  commentId: M:NodaTime.TimeZones.ZoneLocalMapping.Last
  id: Last
  parent: NodaTime.TimeZones.ZoneLocalMapping
  langs:
  - csharp
  - vb
  name: Last()
  nameWithType: ZoneLocalMapping.Last()
  fullName: NodaTime.TimeZones.ZoneLocalMapping.Last()
  type: Method
  source:
    remote:
      path: 1.0.x/src/NodaTime/TimeZones/ZoneLocalMapping.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: Last
    path: src/NodaTime/TimeZones/ZoneLocalMapping.cs
    startLine: 154
  assemblies:
  - NodaTime
  namespace: NodaTime.TimeZones
  summary: "\nReturns a <xref href=\"NodaTime.ZonedDateTime\" data-throw-if-not-resolved=\"false\"></xref> which maps to the original <xref href=\"NodaTime.TimeZones.ZoneLocalMapping.LocalDateTime\" data-throw-if-not-resolved=\"false\"></xref>\nin the mapped <xref href=\"NodaTime.DateTimeZone\" data-throw-if-not-resolved=\"false\"></xref>: either the single result if the mapping is unambiguous,\nor the later result if the local date/time occurs twice in the time zone due to a time zone\noffset change such as an autumnal daylight saving transition.\n"
  example: []
  syntax:
    content: public ZonedDateTime Last()
    return:
      type: NodaTime.ZonedDateTime
      description: The unambiguous result of mapping a local date/time in a time zone.
    content.vb: Public Function Last As ZonedDateTime
  overload: NodaTime.TimeZones.ZoneLocalMapping.Last*
  exceptions:
  - type: NodaTime.SkippedTimeException
    commentId: T:NodaTime.SkippedTimeException
    description: The local date/time was skipped in the time zone.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: NodaTime.TimeZones.ZoneLocalMapping.LocalDateTime
  commentId: P:NodaTime.TimeZones.ZoneLocalMapping.LocalDateTime
  isExternal: true
- uid: NodaTime.DateTimeZone.MapLocal(NodaTime.LocalDateTime)
  commentId: M:NodaTime.DateTimeZone.MapLocal(NodaTime.LocalDateTime)
  parent: NodaTime.DateTimeZone
  name: MapLocal(LocalDateTime)
  nameWithType: DateTimeZone.MapLocal(LocalDateTime)
  fullName: NodaTime.DateTimeZone.MapLocal(NodaTime.LocalDateTime)
  spec.csharp:
  - uid: NodaTime.DateTimeZone.MapLocal(NodaTime.LocalDateTime)
    name: MapLocal
    nameWithType: DateTimeZone.MapLocal
    fullName: NodaTime.DateTimeZone.MapLocal
  - name: (
    nameWithType: (
    fullName: (
  - uid: NodaTime.LocalDateTime
    name: LocalDateTime
    nameWithType: LocalDateTime
    fullName: NodaTime.LocalDateTime
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NodaTime.DateTimeZone.MapLocal(NodaTime.LocalDateTime)
    name: MapLocal
    nameWithType: DateTimeZone.MapLocal
    fullName: NodaTime.DateTimeZone.MapLocal
  - name: (
    nameWithType: (
    fullName: (
  - uid: NodaTime.LocalDateTime
    name: LocalDateTime
    nameWithType: LocalDateTime
    fullName: NodaTime.LocalDateTime
  - name: )
    nameWithType: )
    fullName: )
- uid: NodaTime.TimeZones
  commentId: N:NodaTime.TimeZones
  name: NodaTime.TimeZones
  nameWithType: NodaTime.TimeZones
  fullName: NodaTime.TimeZones
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: NodaTime.DateTimeZone
  commentId: T:NodaTime.DateTimeZone
  parent: NodaTime
  name: DateTimeZone
  nameWithType: DateTimeZone
  fullName: NodaTime.DateTimeZone
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: NodaTime
  commentId: N:NodaTime
  name: NodaTime
  nameWithType: NodaTime
  fullName: NodaTime
- uid: NodaTime.ZonedDateTime
  commentId: T:NodaTime.ZonedDateTime
  parent: NodaTime
  name: ZonedDateTime
  nameWithType: ZonedDateTime
  fullName: NodaTime.ZonedDateTime
- uid: NodaTime.TimeZones.ZoneLocalMapping.Count*
  commentId: Overload:NodaTime.TimeZones.ZoneLocalMapping.Count
  name: Count
  nameWithType: ZoneLocalMapping.Count
  fullName: NodaTime.TimeZones.ZoneLocalMapping.Count
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: NodaTime.TimeZones.ZoneLocalMapping.Zone*
  commentId: Overload:NodaTime.TimeZones.ZoneLocalMapping.Zone
  name: Zone
  nameWithType: ZoneLocalMapping.Zone
  fullName: NodaTime.TimeZones.ZoneLocalMapping.Zone
- uid: NodaTime.TimeZones.ZoneLocalMapping.LocalDateTime*
  commentId: Overload:NodaTime.TimeZones.ZoneLocalMapping.LocalDateTime
  name: LocalDateTime
  nameWithType: ZoneLocalMapping.LocalDateTime
  fullName: NodaTime.TimeZones.ZoneLocalMapping.LocalDateTime
- uid: NodaTime.LocalDateTime
  commentId: T:NodaTime.LocalDateTime
  parent: NodaTime
  name: LocalDateTime
  nameWithType: LocalDateTime
  fullName: NodaTime.LocalDateTime
- uid: NodaTime.TimeZones.ZoneInterval
  commentId: T:NodaTime.TimeZones.ZoneInterval
  parent: NodaTime.TimeZones
  name: ZoneInterval
  nameWithType: ZoneInterval
  fullName: NodaTime.TimeZones.ZoneInterval
- uid: NodaTime.TimeZones.ZoneLocalMapping.LateInterval
  commentId: P:NodaTime.TimeZones.ZoneLocalMapping.LateInterval
  isExternal: true
- uid: NodaTime.TimeZones.ZoneLocalMapping.EarlyInterval*
  commentId: Overload:NodaTime.TimeZones.ZoneLocalMapping.EarlyInterval
  name: EarlyInterval
  nameWithType: ZoneLocalMapping.EarlyInterval
  fullName: NodaTime.TimeZones.ZoneLocalMapping.EarlyInterval
- uid: NodaTime.TimeZones.ZoneLocalMapping.EarlyInterval
  commentId: P:NodaTime.TimeZones.ZoneLocalMapping.EarlyInterval
  isExternal: true
- uid: NodaTime.TimeZones.ZoneLocalMapping.LateInterval*
  commentId: Overload:NodaTime.TimeZones.ZoneLocalMapping.LateInterval
  name: LateInterval
  nameWithType: ZoneLocalMapping.LateInterval
  fullName: NodaTime.TimeZones.ZoneLocalMapping.LateInterval
- uid: NodaTime.SkippedTimeException
  commentId: T:NodaTime.SkippedTimeException
  name: SkippedTimeException
  nameWithType: SkippedTimeException
  fullName: NodaTime.SkippedTimeException
- uid: NodaTime.AmbiguousTimeException
  commentId: T:NodaTime.AmbiguousTimeException
  name: AmbiguousTimeException
  nameWithType: AmbiguousTimeException
  fullName: NodaTime.AmbiguousTimeException
- uid: NodaTime.TimeZones.ZoneLocalMapping.Single*
  commentId: Overload:NodaTime.TimeZones.ZoneLocalMapping.Single
  name: Single
  nameWithType: ZoneLocalMapping.Single
  fullName: NodaTime.TimeZones.ZoneLocalMapping.Single
- uid: NodaTime.TimeZones.ZoneLocalMapping.First*
  commentId: Overload:NodaTime.TimeZones.ZoneLocalMapping.First
  name: First
  nameWithType: ZoneLocalMapping.First
  fullName: NodaTime.TimeZones.ZoneLocalMapping.First
- uid: NodaTime.TimeZones.ZoneLocalMapping.Last*
  commentId: Overload:NodaTime.TimeZones.ZoneLocalMapping.Last
  name: Last
  nameWithType: ZoneLocalMapping.Last
  fullName: NodaTime.TimeZones.ZoneLocalMapping.Last
shouldSkipMarkup: true
