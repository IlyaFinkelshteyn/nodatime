### YamlMime:ManagedReference
items:
- uid: NodaTime.Interval
  commentId: T:NodaTime.Interval
  id: Interval
  parent: NodaTime
  children:
  - NodaTime.Interval.#ctor(NodaTime.Instant,NodaTime.Instant)
  - NodaTime.Interval.Duration
  - NodaTime.Interval.End
  - NodaTime.Interval.Equals(NodaTime.Interval)
  - NodaTime.Interval.Equals(System.Object)
  - NodaTime.Interval.GetHashCode
  - NodaTime.Interval.op_Equality(NodaTime.Interval,NodaTime.Interval)
  - NodaTime.Interval.op_Inequality(NodaTime.Interval,NodaTime.Interval)
  - NodaTime.Interval.Start
  - NodaTime.Interval.ToString
  langs:
  - csharp
  - vb
  name: Interval
  nameWithType: Interval
  fullName: NodaTime.Interval
  type: Struct
  source:
    remote:
      path: 1.0.x/src/NodaTime/Interval.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: Interval
    path: src/NodaTime/Interval.cs
    startLine: 27
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nAn interval between two instants in time (start and end). The interval include the start instant and excludes\nthe end instant. The end may equal the start (resulting in an empty interval), but will not be before the start.\n"
  example: []
  syntax:
    content: 'public struct Interval : IEquatable<Interval>'
    content.vb: >-
      Public Structure Interval
          Implements IEquatable(Of Interval)
  implements:
  - System.IEquatable{NodaTime.Interval}
  inheritedMembers:
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetType
  modifiers.csharp:
  - public
  - struct
  modifiers.vb:
  - Public
  - Structure
- uid: NodaTime.Interval.#ctor(NodaTime.Instant,NodaTime.Instant)
  commentId: M:NodaTime.Interval.#ctor(NodaTime.Instant,NodaTime.Instant)
  id: '#ctor(NodaTime.Instant,NodaTime.Instant)'
  parent: NodaTime.Interval
  langs:
  - csharp
  - vb
  name: Interval(Instant, Instant)
  nameWithType: Interval.Interval(Instant, Instant)
  fullName: NodaTime.Interval.Interval(NodaTime.Instant, NodaTime.Instant)
  type: Constructor
  source:
    remote:
      path: 1.0.x/src/NodaTime/Interval.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: .ctor
    path: src/NodaTime/Interval.cs
    startLine: 43
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nInitializes a new instance of the <xref href=\"NodaTime.Interval\" data-throw-if-not-resolved=\"false\"></xref> struct.\nThe interval includes the <code data-dev-comment-type=\"paramref\" class=\"paramref\">start</code> instant and excludes the\n<code data-dev-comment-type=\"paramref\" class=\"paramref\">end</code> instant. The end may equal the start (resulting in an empty interval), but must not be before the start.\n"
  example: []
  syntax:
    content: public Interval(Instant start, Instant end)
    parameters:
    - id: start
      type: NodaTime.Instant
      description: The start <xref href="NodaTime.Instant" data-throw-if-not-resolved="false"></xref>.
    - id: end
      type: NodaTime.Instant
      description: The end <xref href="NodaTime.Instant" data-throw-if-not-resolved="false"></xref>.
    content.vb: Public Sub New(start As Instant, end As Instant)
  overload: NodaTime.Interval.#ctor*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: <code data-dev-comment-type="paramref" class="paramref">end</code> is earlier than <code data-dev-comment-type="paramref" class="paramref">start</code>.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: NodaTime.Interval.Start
  commentId: P:NodaTime.Interval.Start
  id: Start
  parent: NodaTime.Interval
  langs:
  - csharp
  - vb
  name: Start
  nameWithType: Interval.Start
  fullName: NodaTime.Interval.Start
  type: Property
  source:
    remote:
      path: 1.0.x/src/NodaTime/Interval.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: Start
    path: src/NodaTime/Interval.cs
    startLine: 60
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nGets the start instant.\n"
  remarks: "\nThis will never be later than <xref href=\"NodaTime.Interval.End\" data-throw-if-not-resolved=\"false\"></xref>, though it may be equal to it.\n"
  example: []
  syntax:
    content: public Instant Start { get; }
    parameters: []
    return:
      type: NodaTime.Instant
      description: The start <xref href="NodaTime.Instant" data-throw-if-not-resolved="false"></xref>.
    content.vb: Public ReadOnly Property Start As Instant
  overload: NodaTime.Interval.Start*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: NodaTime.Interval.End
  commentId: P:NodaTime.Interval.End
  id: End
  parent: NodaTime.Interval
  langs:
  - csharp
  - vb
  name: End
  nameWithType: Interval.End
  fullName: NodaTime.Interval.End
  type: Property
  source:
    remote:
      path: 1.0.x/src/NodaTime/Interval.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: End
    path: src/NodaTime/Interval.cs
    startLine: 69
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nGets the end instant.\n"
  remarks: "\nThis will never be earlier than <xref href=\"NodaTime.Interval.Start\" data-throw-if-not-resolved=\"false\"></xref>, though it may be equal to it.\n"
  example: []
  syntax:
    content: public Instant End { get; }
    parameters: []
    return:
      type: NodaTime.Instant
      description: The end <xref href="NodaTime.Instant" data-throw-if-not-resolved="false"></xref>.
    content.vb: Public ReadOnly Property End As Instant
  overload: NodaTime.Interval.End*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: NodaTime.Interval.Duration
  commentId: P:NodaTime.Interval.Duration
  id: Duration
  parent: NodaTime.Interval
  langs:
  - csharp
  - vb
  name: Duration
  nameWithType: Interval.Duration
  fullName: NodaTime.Interval.Duration
  type: Property
  source:
    remote:
      path: 1.0.x/src/NodaTime/Interval.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: Duration
    path: src/NodaTime/Interval.cs
    startLine: 78
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nReturns the duration of the interval.\n"
  remarks: "\nThis will always be a non-negative duration, though it may be zero.\n"
  example: []
  syntax:
    content: public Duration Duration { get; }
    parameters: []
    return:
      type: NodaTime.Duration
      description: The duration of the interval.
    content.vb: Public ReadOnly Property Duration As Duration
  overload: NodaTime.Interval.Duration*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: NodaTime.Interval.Equals(NodaTime.Interval)
  commentId: M:NodaTime.Interval.Equals(NodaTime.Interval)
  id: Equals(NodaTime.Interval)
  parent: NodaTime.Interval
  langs:
  - csharp
  - vb
  name: Equals(Interval)
  nameWithType: Interval.Equals(Interval)
  fullName: NodaTime.Interval.Equals(NodaTime.Interval)
  type: Method
  source:
    remote:
      path: 1.0.x/src/NodaTime/Interval.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: Equals
    path: src/NodaTime/Interval.cs
    startLine: 89
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nIndicates whether the value of this interval is equal to the value of the specified interval.\n"
  example: []
  syntax:
    content: public bool Equals(Interval other)
    parameters:
    - id: other
      type: NodaTime.Interval
      description: The value to compare with this instance.
    return:
      type: System.Boolean
      description: "\ntrue if the value of this instant is equal to the value of the <code data-dev-comment-type=\"paramref\" class=\"paramref\">other</code> parameter;\notherwise, false.\n"
    content.vb: Public Function Equals(other As Interval) As Boolean
  overload: NodaTime.Interval.Equals*
  implements:
  - System.IEquatable{NodaTime.Interval}.Equals(NodaTime.Interval)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: NodaTime.Interval.Equals(System.Object)
  commentId: M:NodaTime.Interval.Equals(System.Object)
  id: Equals(System.Object)
  parent: NodaTime.Interval
  langs:
  - csharp
  - vb
  name: Equals(Object)
  nameWithType: Interval.Equals(Object)
  fullName: NodaTime.Interval.Equals(System.Object)
  type: Method
  source:
    remote:
      path: 1.0.x/src/NodaTime/Interval.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: Equals
    path: src/NodaTime/Interval.cs
    startLine: 105
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nDetermines whether the specified <xref href=\"System.Object\" data-throw-if-not-resolved=\"false\"></xref> is equal to this instance.\n"
  example: []
  syntax:
    content: public override bool Equals(object obj)
    parameters:
    - id: obj
      type: System.Object
      description: The <xref href="System.Object" data-throw-if-not-resolved="false"></xref> to compare with this instance.
    return:
      type: System.Boolean
      description: "\n<code>true</code> if the specified <xref href=\"System.Object\" data-throw-if-not-resolved=\"false\"></xref> is equal to this instance;\notherwise, <code>false</code>.\n"
    content.vb: Public Overrides Function Equals(obj As Object) As Boolean
  overridden: System.ValueType.Equals(System.Object)
  overload: NodaTime.Interval.Equals*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: NodaTime.Interval.GetHashCode
  commentId: M:NodaTime.Interval.GetHashCode
  id: GetHashCode
  parent: NodaTime.Interval
  langs:
  - csharp
  - vb
  name: GetHashCode()
  nameWithType: Interval.GetHashCode()
  fullName: NodaTime.Interval.GetHashCode()
  type: Method
  source:
    remote:
      path: 1.0.x/src/NodaTime/Interval.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: GetHashCode
    path: src/NodaTime/Interval.cs
    startLine: 121
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nReturns the hash code for this instance.\n"
  example: []
  syntax:
    content: public override int GetHashCode()
    return:
      type: System.Int32
      description: "\nA 32-bit signed integer that is the hash code for this instance.\n"
    content.vb: Public Overrides Function GetHashCode As Integer
  overridden: System.ValueType.GetHashCode
  overload: NodaTime.Interval.GetHashCode*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: NodaTime.Interval.ToString
  commentId: M:NodaTime.Interval.ToString
  id: ToString
  parent: NodaTime.Interval
  langs:
  - csharp
  - vb
  name: ToString()
  nameWithType: Interval.ToString()
  fullName: NodaTime.Interval.ToString()
  type: Method
  source:
    remote:
      path: 1.0.x/src/NodaTime/Interval.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: ToString
    path: src/NodaTime/Interval.cs
    startLine: 134
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nReturns a string representation of this interval. The format of this string is\nnot yet specified, and may change without notice. \n"
  example: []
  syntax:
    content: public override string ToString()
    return:
      type: System.String
      description: A string representation of this interval.
    content.vb: Public Overrides Function ToString As String
  overridden: System.ValueType.ToString
  overload: NodaTime.Interval.ToString*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: NodaTime.Interval.op_Equality(NodaTime.Interval,NodaTime.Interval)
  commentId: M:NodaTime.Interval.op_Equality(NodaTime.Interval,NodaTime.Interval)
  id: op_Equality(NodaTime.Interval,NodaTime.Interval)
  parent: NodaTime.Interval
  langs:
  - csharp
  - vb
  name: Equality(Interval, Interval)
  nameWithType: Interval.Equality(Interval, Interval)
  fullName: NodaTime.Interval.Equality(NodaTime.Interval, NodaTime.Interval)
  type: Operator
  source:
    remote:
      path: 1.0.x/src/NodaTime/Interval.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: op_Equality
    path: src/NodaTime/Interval.cs
    startLine: 147
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nImplements the operator ==.\n"
  example: []
  syntax:
    content: public static bool operator ==(Interval left, Interval right)
    parameters:
    - id: left
      type: NodaTime.Interval
      description: The left.
    - id: right
      type: NodaTime.Interval
      description: The right.
    return:
      type: System.Boolean
      description: The result of the operator.
    content.vb: Public Shared Operator =(left As Interval, right As Interval) As Boolean
  overload: NodaTime.Interval.op_Equality*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: NodaTime.Interval.op_Inequality(NodaTime.Interval,NodaTime.Interval)
  commentId: M:NodaTime.Interval.op_Inequality(NodaTime.Interval,NodaTime.Interval)
  id: op_Inequality(NodaTime.Interval,NodaTime.Interval)
  parent: NodaTime.Interval
  langs:
  - csharp
  - vb
  name: Inequality(Interval, Interval)
  nameWithType: Interval.Inequality(Interval, Interval)
  fullName: NodaTime.Interval.Inequality(NodaTime.Interval, NodaTime.Interval)
  type: Operator
  source:
    remote:
      path: 1.0.x/src/NodaTime/Interval.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: op_Inequality
    path: src/NodaTime/Interval.cs
    startLine: 158
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nImplements the operator !=.\n"
  example: []
  syntax:
    content: public static bool operator !=(Interval left, Interval right)
    parameters:
    - id: left
      type: NodaTime.Interval
      description: The left.
    - id: right
      type: NodaTime.Interval
      description: The right.
    return:
      type: System.Boolean
      description: The result of the operator.
    content.vb: Public Shared Operator <>(left As Interval, right As Interval) As Boolean
  overload: NodaTime.Interval.op_Inequality*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
references:
- uid: NodaTime
  commentId: N:NodaTime
  name: NodaTime
  nameWithType: NodaTime
  fullName: NodaTime
- uid: System.IEquatable{NodaTime.Interval}
  commentId: T:System.IEquatable{NodaTime.Interval}
  parent: System
  definition: System.IEquatable`1
  name: IEquatable<Interval>
  nameWithType: IEquatable<Interval>
  fullName: System.IEquatable<NodaTime.Interval>
  nameWithType.vb: IEquatable(Of Interval)
  fullName.vb: System.IEquatable(Of NodaTime.Interval)
  name.vb: IEquatable(Of Interval)
  spec.csharp:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: NodaTime.Interval
    name: Interval
    nameWithType: Interval
    fullName: NodaTime.Interval
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: NodaTime.Interval
    name: Interval
    nameWithType: Interval
    fullName: NodaTime.Interval
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IEquatable`1
  commentId: T:System.IEquatable`1
  isExternal: true
  name: IEquatable<T>
  nameWithType: IEquatable<T>
  fullName: System.IEquatable<T>
  nameWithType.vb: IEquatable(Of T)
  fullName.vb: System.IEquatable(Of T)
  name.vb: IEquatable(Of T)
  spec.csharp:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: NodaTime.Interval
  commentId: T:NodaTime.Interval
  parent: NodaTime
  name: Interval
  nameWithType: Interval
  fullName: NodaTime.Interval
- uid: NodaTime.Instant
  commentId: T:NodaTime.Instant
  parent: NodaTime
  name: Instant
  nameWithType: Instant
  fullName: NodaTime.Instant
- uid: System.ArgumentOutOfRangeException
  commentId: T:System.ArgumentOutOfRangeException
  parent: System
  isExternal: true
  name: ArgumentOutOfRangeException
  nameWithType: ArgumentOutOfRangeException
  fullName: System.ArgumentOutOfRangeException
- uid: NodaTime.Interval.#ctor*
  commentId: Overload:NodaTime.Interval.#ctor
  name: Interval
  nameWithType: Interval.Interval
  fullName: NodaTime.Interval.Interval
- uid: NodaTime.Interval.End
  commentId: P:NodaTime.Interval.End
  isExternal: true
- uid: NodaTime.Interval.Start*
  commentId: Overload:NodaTime.Interval.Start
  name: Start
  nameWithType: Interval.Start
  fullName: NodaTime.Interval.Start
- uid: NodaTime.Interval.Start
  commentId: P:NodaTime.Interval.Start
  isExternal: true
- uid: NodaTime.Interval.End*
  commentId: Overload:NodaTime.Interval.End
  name: End
  nameWithType: Interval.End
  fullName: NodaTime.Interval.End
- uid: NodaTime.Interval.Duration*
  commentId: Overload:NodaTime.Interval.Duration
  name: Duration
  nameWithType: Interval.Duration
  fullName: NodaTime.Interval.Duration
- uid: NodaTime.Duration
  commentId: T:NodaTime.Duration
  parent: NodaTime
  name: Duration
  nameWithType: Duration
  fullName: NodaTime.Duration
- uid: NodaTime.Interval.Equals*
  commentId: Overload:NodaTime.Interval.Equals
  name: Equals
  nameWithType: Interval.Equals
  fullName: NodaTime.Interval.Equals
- uid: System.IEquatable{NodaTime.Interval}.Equals(NodaTime.Interval)
  commentId: M:System.IEquatable{NodaTime.Interval}.Equals(NodaTime.Interval)
  parent: System.IEquatable{NodaTime.Interval}
  definition: System.IEquatable`1.Equals(`0)
  name: Equals(Interval)
  nameWithType: IEquatable<Interval>.Equals(Interval)
  fullName: System.IEquatable<NodaTime.Interval>.Equals(NodaTime.Interval)
  nameWithType.vb: IEquatable(Of Interval).Equals(Interval)
  fullName.vb: System.IEquatable(Of NodaTime.Interval).Equals(NodaTime.Interval)
  spec.csharp:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    nameWithType: IEquatable<Interval>.Equals
    fullName: System.IEquatable<NodaTime.Interval>.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: NodaTime.Interval
    name: Interval
    nameWithType: Interval
    fullName: NodaTime.Interval
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    nameWithType: IEquatable(Of Interval).Equals
    fullName: System.IEquatable(Of NodaTime.Interval).Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: NodaTime.Interval
    name: Interval
    nameWithType: Interval
    fullName: NodaTime.Interval
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.IEquatable`1.Equals(`0)
  commentId: M:System.IEquatable`1.Equals(`0)
  isExternal: true
  name: Equals(T)
  nameWithType: IEquatable<T>.Equals(T)
  fullName: System.IEquatable<T>.Equals(T)
  nameWithType.vb: IEquatable(Of T).Equals(T)
  fullName.vb: System.IEquatable(Of T).Equals(T)
  spec.csharp:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    nameWithType: IEquatable<T>.Equals
    fullName: System.IEquatable<T>.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    nameWithType: IEquatable(Of T).Equals
    fullName: System.IEquatable(Of T).Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.ValueType.Equals(System.Object)
  commentId: M:System.ValueType.Equals(System.Object)
  parent: System.ValueType
  isExternal: true
  name: Equals(Object)
  nameWithType: ValueType.Equals(Object)
  fullName: System.ValueType.Equals(System.Object)
  spec.csharp:
  - uid: System.ValueType.Equals(System.Object)
    name: Equals
    nameWithType: ValueType.Equals
    fullName: System.ValueType.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.ValueType.Equals(System.Object)
    name: Equals
    nameWithType: ValueType.Equals
    fullName: System.ValueType.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.ValueType
  commentId: T:System.ValueType
  parent: System
  isExternal: true
  name: ValueType
  nameWithType: ValueType
  fullName: System.ValueType
- uid: System.ValueType.GetHashCode
  commentId: M:System.ValueType.GetHashCode
  parent: System.ValueType
  isExternal: true
  name: GetHashCode()
  nameWithType: ValueType.GetHashCode()
  fullName: System.ValueType.GetHashCode()
  spec.csharp:
  - uid: System.ValueType.GetHashCode
    name: GetHashCode
    nameWithType: ValueType.GetHashCode
    fullName: System.ValueType.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.ValueType.GetHashCode
    name: GetHashCode
    nameWithType: ValueType.GetHashCode
    fullName: System.ValueType.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: NodaTime.Interval.GetHashCode*
  commentId: Overload:NodaTime.Interval.GetHashCode
  name: GetHashCode
  nameWithType: Interval.GetHashCode
  fullName: NodaTime.Interval.GetHashCode
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.ValueType.ToString
  commentId: M:System.ValueType.ToString
  parent: System.ValueType
  isExternal: true
  name: ToString()
  nameWithType: ValueType.ToString()
  fullName: System.ValueType.ToString()
  spec.csharp:
  - uid: System.ValueType.ToString
    name: ToString
    nameWithType: ValueType.ToString
    fullName: System.ValueType.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.ValueType.ToString
    name: ToString
    nameWithType: ValueType.ToString
    fullName: System.ValueType.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: NodaTime.Interval.ToString*
  commentId: Overload:NodaTime.Interval.ToString
  name: ToString
  nameWithType: Interval.ToString
  fullName: NodaTime.Interval.ToString
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: NodaTime.Interval.op_Equality*
  commentId: Overload:NodaTime.Interval.op_Equality
  name: Equality
  nameWithType: Interval.Equality
  fullName: NodaTime.Interval.Equality
- uid: NodaTime.Interval.op_Inequality*
  commentId: Overload:NodaTime.Interval.op_Inequality
  name: Inequality
  nameWithType: Interval.Inequality
  fullName: NodaTime.Interval.Inequality
shouldSkipMarkup: true
