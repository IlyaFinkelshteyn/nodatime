### YamlMime:ManagedReference
items:
- uid: NodaTime.LocalTime
  commentId: T:NodaTime.LocalTime
  id: LocalTime
  parent: NodaTime
  children:
  - NodaTime.LocalTime.#ctor(System.Int32,System.Int32)
  - NodaTime.LocalTime.#ctor(System.Int32,System.Int32,System.Int32)
  - NodaTime.LocalTime.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)
  - NodaTime.LocalTime.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)
  - NodaTime.LocalTime.Add(NodaTime.LocalTime,NodaTime.Period)
  - NodaTime.LocalTime.ClockHourOfHalfDay
  - NodaTime.LocalTime.CompareTo(NodaTime.LocalTime)
  - NodaTime.LocalTime.Equals(NodaTime.LocalTime)
  - NodaTime.LocalTime.Equals(System.Object)
  - NodaTime.LocalTime.FromHourMinuteSecondTick(System.Int32,System.Int32,System.Int32,System.Int32)
  - NodaTime.LocalTime.GetHashCode
  - NodaTime.LocalTime.Hour
  - NodaTime.LocalTime.LocalDateTime
  - NodaTime.LocalTime.Midnight
  - NodaTime.LocalTime.Millisecond
  - NodaTime.LocalTime.Minus(NodaTime.Period)
  - NodaTime.LocalTime.Minute
  - NodaTime.LocalTime.Noon
  - NodaTime.LocalTime.op_Addition(NodaTime.LocalTime,NodaTime.Period)
  - NodaTime.LocalTime.op_Equality(NodaTime.LocalTime,NodaTime.LocalTime)
  - NodaTime.LocalTime.op_GreaterThan(NodaTime.LocalTime,NodaTime.LocalTime)
  - NodaTime.LocalTime.op_GreaterThanOrEqual(NodaTime.LocalTime,NodaTime.LocalTime)
  - NodaTime.LocalTime.op_Inequality(NodaTime.LocalTime,NodaTime.LocalTime)
  - NodaTime.LocalTime.op_LessThan(NodaTime.LocalTime,NodaTime.LocalTime)
  - NodaTime.LocalTime.op_LessThanOrEqual(NodaTime.LocalTime,NodaTime.LocalTime)
  - NodaTime.LocalTime.op_Subtraction(NodaTime.LocalTime,NodaTime.Period)
  - NodaTime.LocalTime.Plus(NodaTime.Period)
  - NodaTime.LocalTime.PlusHours(System.Int64)
  - NodaTime.LocalTime.PlusMilliseconds(System.Int64)
  - NodaTime.LocalTime.PlusMinutes(System.Int64)
  - NodaTime.LocalTime.PlusSeconds(System.Int64)
  - NodaTime.LocalTime.PlusTicks(System.Int64)
  - NodaTime.LocalTime.Second
  - NodaTime.LocalTime.Subtract(NodaTime.LocalTime,NodaTime.Period)
  - NodaTime.LocalTime.TickOfDay
  - NodaTime.LocalTime.TickOfSecond
  - NodaTime.LocalTime.ToString
  - NodaTime.LocalTime.ToString(System.String,System.IFormatProvider)
  langs:
  - csharp
  - vb
  name: LocalTime
  nameWithType: LocalTime
  fullName: NodaTime.LocalTime
  type: Struct
  source:
    remote:
      path: 1.0.x/src/NodaTime/LocalTime.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: LocalTime
    path: src/NodaTime/LocalTime.cs
    startLine: 30
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nLocalTime is an immutable struct representing a time of day, with no reference\nto a particular calendar, time zone or date.\n"
  example: []
  syntax:
    content: 'public struct LocalTime : IEquatable<LocalTime>, IComparable<LocalTime>, IFormattable'
    content.vb: >-
      Public Structure LocalTime
          Implements IEquatable(Of LocalTime), IComparable(Of LocalTime), IFormattable
  implements:
  - System.IEquatable{NodaTime.LocalTime}
  - System.IComparable{NodaTime.LocalTime}
  - System.IFormattable
  inheritedMembers:
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetType
  modifiers.csharp:
  - public
  - struct
  modifiers.vb:
  - Public
  - Structure
- uid: NodaTime.LocalTime.Midnight
  commentId: F:NodaTime.LocalTime.Midnight
  id: Midnight
  parent: NodaTime.LocalTime
  langs:
  - csharp
  - vb
  name: Midnight
  nameWithType: LocalTime.Midnight
  fullName: NodaTime.LocalTime.Midnight
  type: Field
  source:
    remote:
      path: 1.0.x/src/NodaTime/LocalTime.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: Midnight
    path: src/NodaTime/LocalTime.cs
    startLine: 35
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nLocal time at midnight, i.e. 0 hours, 0 minutes, 0 seconds.\n"
  example: []
  syntax:
    content: public static readonly LocalTime Midnight
    return:
      type: NodaTime.LocalTime
    content.vb: Public Shared ReadOnly Midnight As LocalTime
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: NodaTime.LocalTime.Noon
  commentId: F:NodaTime.LocalTime.Noon
  id: Noon
  parent: NodaTime.LocalTime
  langs:
  - csharp
  - vb
  name: Noon
  nameWithType: LocalTime.Noon
  fullName: NodaTime.LocalTime.Noon
  type: Field
  source:
    remote:
      path: 1.0.x/src/NodaTime/LocalTime.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: Noon
    path: src/NodaTime/LocalTime.cs
    startLine: 39
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nLocal time at noon, i.e. 12 hours, 0 minutes, 0 seconds.\n"
  example: []
  syntax:
    content: public static readonly LocalTime Noon
    return:
      type: NodaTime.LocalTime
    content.vb: Public Shared ReadOnly Noon As LocalTime
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: NodaTime.LocalTime.#ctor(System.Int32,System.Int32)
  commentId: M:NodaTime.LocalTime.#ctor(System.Int32,System.Int32)
  id: '#ctor(System.Int32,System.Int32)'
  parent: NodaTime.LocalTime
  langs:
  - csharp
  - vb
  name: LocalTime(Int32, Int32)
  nameWithType: LocalTime.LocalTime(Int32, Int32)
  fullName: NodaTime.LocalTime.LocalTime(System.Int32, System.Int32)
  type: Constructor
  source:
    remote:
      path: 1.0.x/src/NodaTime/LocalTime.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: .ctor
    path: src/NodaTime/LocalTime.cs
    startLine: 53
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nCreates a local time at the given hour and minute, with second, millisecond-of-second\nand tick-of-millisecond values of zero.\n"
  example: []
  syntax:
    content: public LocalTime(int hour, int minute)
    parameters:
    - id: hour
      type: System.Int32
      description: The hour of day.
    - id: minute
      type: System.Int32
      description: The minute of the hour.
    content.vb: Public Sub New(hour As Integer, minute As Integer)
  overload: NodaTime.LocalTime.#ctor*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: The parameters do not form a valid time
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: NodaTime.LocalTime.#ctor(System.Int32,System.Int32,System.Int32)
  commentId: M:NodaTime.LocalTime.#ctor(System.Int32,System.Int32,System.Int32)
  id: '#ctor(System.Int32,System.Int32,System.Int32)'
  parent: NodaTime.LocalTime
  langs:
  - csharp
  - vb
  name: LocalTime(Int32, Int32, Int32)
  nameWithType: LocalTime.LocalTime(Int32, Int32, Int32)
  fullName: NodaTime.LocalTime.LocalTime(System.Int32, System.Int32, System.Int32)
  type: Constructor
  source:
    remote:
      path: 1.0.x/src/NodaTime/LocalTime.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: .ctor
    path: src/NodaTime/LocalTime.cs
    startLine: 71
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nCreates a local time at the given hour, minute and second,\nwith millisecond-of-second and tick-of-millisecond values of zero.\n"
  example: []
  syntax:
    content: public LocalTime(int hour, int minute, int second)
    parameters:
    - id: hour
      type: System.Int32
      description: The hour of day.
    - id: minute
      type: System.Int32
      description: The minute of the hour.
    - id: second
      type: System.Int32
      description: The second of the minute.
    content.vb: Public Sub New(hour As Integer, minute As Integer, second As Integer)
  overload: NodaTime.LocalTime.#ctor*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: The parameters do not form a valid time
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: NodaTime.LocalTime.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)
  commentId: M:NodaTime.LocalTime.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)
  id: '#ctor(System.Int32,System.Int32,System.Int32,System.Int32)'
  parent: NodaTime.LocalTime
  langs:
  - csharp
  - vb
  name: LocalTime(Int32, Int32, Int32, Int32)
  nameWithType: LocalTime.LocalTime(Int32, Int32, Int32, Int32)
  fullName: NodaTime.LocalTime.LocalTime(System.Int32, System.Int32, System.Int32, System.Int32)
  type: Constructor
  source:
    remote:
      path: 1.0.x/src/NodaTime/LocalTime.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: .ctor
    path: src/NodaTime/LocalTime.cs
    startLine: 92
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nCreates a local time at the given hour, minute, second and millisecond,\nwith a tick-of-millisecond value of zero.\n"
  example: []
  syntax:
    content: public LocalTime(int hour, int minute, int second, int millisecond)
    parameters:
    - id: hour
      type: System.Int32
      description: The hour of day.
    - id: minute
      type: System.Int32
      description: The minute of the hour.
    - id: second
      type: System.Int32
      description: The second of the minute.
    - id: millisecond
      type: System.Int32
      description: The millisecond of the second.
    content.vb: Public Sub New(hour As Integer, minute As Integer, second As Integer, millisecond As Integer)
  overload: NodaTime.LocalTime.#ctor*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: The parameters do not form a valid time
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: NodaTime.LocalTime.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)
  commentId: M:NodaTime.LocalTime.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)
  id: '#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)'
  parent: NodaTime.LocalTime
  langs:
  - csharp
  - vb
  name: LocalTime(Int32, Int32, Int32, Int32, Int32)
  nameWithType: LocalTime.LocalTime(Int32, Int32, Int32, Int32, Int32)
  fullName: NodaTime.LocalTime.LocalTime(System.Int32, System.Int32, System.Int32, System.Int32, System.Int32)
  type: Constructor
  source:
    remote:
      path: 1.0.x/src/NodaTime/LocalTime.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: .ctor
    path: src/NodaTime/LocalTime.cs
    startLine: 115
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nCreates a local time at the given hour, minute, second, millisecond and tick within millisecond.\n"
  example: []
  syntax:
    content: public LocalTime(int hour, int minute, int second, int millisecond, int tickWithinMillisecond)
    parameters:
    - id: hour
      type: System.Int32
      description: The hour of day.
    - id: minute
      type: System.Int32
      description: The minute of the hour.
    - id: second
      type: System.Int32
      description: The second of the minute.
    - id: millisecond
      type: System.Int32
      description: The millisecond of the second.
    - id: tickWithinMillisecond
      type: System.Int32
      description: The tick within the millisecond.
    content.vb: Public Sub New(hour As Integer, minute As Integer, second As Integer, millisecond As Integer, tickWithinMillisecond As Integer)
  overload: NodaTime.LocalTime.#ctor*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: The parameters do not form a valid time
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: NodaTime.LocalTime.FromHourMinuteSecondTick(System.Int32,System.Int32,System.Int32,System.Int32)
  commentId: M:NodaTime.LocalTime.FromHourMinuteSecondTick(System.Int32,System.Int32,System.Int32,System.Int32)
  id: FromHourMinuteSecondTick(System.Int32,System.Int32,System.Int32,System.Int32)
  parent: NodaTime.LocalTime
  langs:
  - csharp
  - vb
  name: FromHourMinuteSecondTick(Int32, Int32, Int32, Int32)
  nameWithType: LocalTime.FromHourMinuteSecondTick(Int32, Int32, Int32, Int32)
  fullName: NodaTime.LocalTime.FromHourMinuteSecondTick(System.Int32, System.Int32, System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: 1.0.x/src/NodaTime/LocalTime.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: FromHourMinuteSecondTick
    path: src/NodaTime/LocalTime.cs
    startLine: 140
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nFactory method for creating a local time from the hour of day, minute of hour, second of minute, and tick of second.\nThis is not a constructor overload as it would have the same signature as the one taking millisecond of second.\n"
  example: []
  syntax:
    content: public static LocalTime FromHourMinuteSecondTick(int hour, int minute, int second, int tickWithinSecond)
    parameters:
    - id: hour
      type: System.Int32
      description: The hour of day in the desired time, in the range [0, 23].
    - id: minute
      type: System.Int32
      description: The minute of hour in the desired time, in the range [0, 59].
    - id: second
      type: System.Int32
      description: The second of minute in the desired time, in the range [0, 59].
    - id: tickWithinSecond
      type: System.Int32
      description: The tick within the second in the desired time, in the range [0, 9999999].
    return:
      type: NodaTime.LocalTime
      description: The resulting time.
    content.vb: Public Shared Function FromHourMinuteSecondTick(hour As Integer, minute As Integer, second As Integer, tickWithinSecond As Integer) As LocalTime
  overload: NodaTime.LocalTime.FromHourMinuteSecondTick*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: The parameters do not form a valid time
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: NodaTime.LocalTime.Hour
  commentId: P:NodaTime.LocalTime.Hour
  id: Hour
  parent: NodaTime.LocalTime
  langs:
  - csharp
  - vb
  name: Hour
  nameWithType: LocalTime.Hour
  fullName: NodaTime.LocalTime.Hour
  type: Property
  source:
    remote:
      path: 1.0.x/src/NodaTime/LocalTime.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: Hour
    path: src/NodaTime/LocalTime.cs
    startLine: 164
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nGets the hour of day of this local time, in the range 0 to 23 inclusive.\n"
  example: []
  syntax:
    content: public int Hour { get; }
    parameters: []
    return:
      type: System.Int32
    content.vb: Public ReadOnly Property Hour As Integer
  overload: NodaTime.LocalTime.Hour*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: NodaTime.LocalTime.ClockHourOfHalfDay
  commentId: P:NodaTime.LocalTime.ClockHourOfHalfDay
  id: ClockHourOfHalfDay
  parent: NodaTime.LocalTime
  langs:
  - csharp
  - vb
  name: ClockHourOfHalfDay
  nameWithType: LocalTime.ClockHourOfHalfDay
  fullName: NodaTime.LocalTime.ClockHourOfHalfDay
  type: Property
  source:
    remote:
      path: 1.0.x/src/NodaTime/LocalTime.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: ClockHourOfHalfDay
    path: src/NodaTime/LocalTime.cs
    startLine: 169
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nGets the hour of the half-day of this local time, in the range 1 to 12 inclusive.\n"
  example: []
  syntax:
    content: public int ClockHourOfHalfDay { get; }
    parameters: []
    return:
      type: System.Int32
    content.vb: Public ReadOnly Property ClockHourOfHalfDay As Integer
  overload: NodaTime.LocalTime.ClockHourOfHalfDay*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: NodaTime.LocalTime.Minute
  commentId: P:NodaTime.LocalTime.Minute
  id: Minute
  parent: NodaTime.LocalTime
  langs:
  - csharp
  - vb
  name: Minute
  nameWithType: LocalTime.Minute
  fullName: NodaTime.LocalTime.Minute
  type: Property
  source:
    remote:
      path: 1.0.x/src/NodaTime/LocalTime.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: Minute
    path: src/NodaTime/LocalTime.cs
    startLine: 174
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nGets the minute of this local time, in the range 0 to 59 inclusive.\n"
  example: []
  syntax:
    content: public int Minute { get; }
    parameters: []
    return:
      type: System.Int32
    content.vb: Public ReadOnly Property Minute As Integer
  overload: NodaTime.LocalTime.Minute*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: NodaTime.LocalTime.Second
  commentId: P:NodaTime.LocalTime.Second
  id: Second
  parent: NodaTime.LocalTime
  langs:
  - csharp
  - vb
  name: Second
  nameWithType: LocalTime.Second
  fullName: NodaTime.LocalTime.Second
  type: Property
  source:
    remote:
      path: 1.0.x/src/NodaTime/LocalTime.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: Second
    path: src/NodaTime/LocalTime.cs
    startLine: 179
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nGets the second of this local time within the minute, in the range 0 to 59 inclusive.\n"
  example: []
  syntax:
    content: public int Second { get; }
    parameters: []
    return:
      type: System.Int32
    content.vb: Public ReadOnly Property Second As Integer
  overload: NodaTime.LocalTime.Second*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: NodaTime.LocalTime.Millisecond
  commentId: P:NodaTime.LocalTime.Millisecond
  id: Millisecond
  parent: NodaTime.LocalTime
  langs:
  - csharp
  - vb
  name: Millisecond
  nameWithType: LocalTime.Millisecond
  fullName: NodaTime.LocalTime.Millisecond
  type: Property
  source:
    remote:
      path: 1.0.x/src/NodaTime/LocalTime.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: Millisecond
    path: src/NodaTime/LocalTime.cs
    startLine: 184
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nGets the millisecond of this local time within the second, in the range 0 to 999 inclusive.\n"
  example: []
  syntax:
    content: public int Millisecond { get; }
    parameters: []
    return:
      type: System.Int32
    content.vb: Public ReadOnly Property Millisecond As Integer
  overload: NodaTime.LocalTime.Millisecond*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: NodaTime.LocalTime.TickOfSecond
  commentId: P:NodaTime.LocalTime.TickOfSecond
  id: TickOfSecond
  parent: NodaTime.LocalTime
  langs:
  - csharp
  - vb
  name: TickOfSecond
  nameWithType: LocalTime.TickOfSecond
  fullName: NodaTime.LocalTime.TickOfSecond
  type: Property
  source:
    remote:
      path: 1.0.x/src/NodaTime/LocalTime.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: TickOfSecond
    path: src/NodaTime/LocalTime.cs
    startLine: 189
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nGets the tick of this local time within the second, in the range 0 to 9,999,999 inclusive.\n"
  example: []
  syntax:
    content: public int TickOfSecond { get; }
    parameters: []
    return:
      type: System.Int32
    content.vb: Public ReadOnly Property TickOfSecond As Integer
  overload: NodaTime.LocalTime.TickOfSecond*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: NodaTime.LocalTime.TickOfDay
  commentId: P:NodaTime.LocalTime.TickOfDay
  id: TickOfDay
  parent: NodaTime.LocalTime
  langs:
  - csharp
  - vb
  name: TickOfDay
  nameWithType: LocalTime.TickOfDay
  fullName: NodaTime.LocalTime.TickOfDay
  type: Property
  source:
    remote:
      path: 1.0.x/src/NodaTime/LocalTime.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: TickOfDay
    path: src/NodaTime/LocalTime.cs
    startLine: 196
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nGets the tick of this local time within the day, in the range 0 to 863,999,999,999 inclusive.\n"
  example: []
  syntax:
    content: public long TickOfDay { get; }
    parameters: []
    return:
      type: System.Int64
    content.vb: Public ReadOnly Property TickOfDay As Long
  overload: NodaTime.LocalTime.TickOfDay*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: NodaTime.LocalTime.LocalDateTime
  commentId: P:NodaTime.LocalTime.LocalDateTime
  id: LocalDateTime
  parent: NodaTime.LocalTime
  langs:
  - csharp
  - vb
  name: LocalDateTime
  nameWithType: LocalTime.LocalDateTime
  fullName: NodaTime.LocalTime.LocalDateTime
  type: Property
  source:
    remote:
      path: 1.0.x/src/NodaTime/LocalTime.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: LocalDateTime
    path: src/NodaTime/LocalTime.cs
    startLine: 201
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nReturns a LocalDateTime with this local time, on January 1st 1970 in the ISO calendar.\n"
  example: []
  syntax:
    content: public LocalDateTime LocalDateTime { get; }
    parameters: []
    return:
      type: NodaTime.LocalDateTime
    content.vb: Public ReadOnly Property LocalDateTime As LocalDateTime
  overload: NodaTime.LocalTime.LocalDateTime*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: NodaTime.LocalTime.op_Addition(NodaTime.LocalTime,NodaTime.Period)
  commentId: M:NodaTime.LocalTime.op_Addition(NodaTime.LocalTime,NodaTime.Period)
  id: op_Addition(NodaTime.LocalTime,NodaTime.Period)
  parent: NodaTime.LocalTime
  langs:
  - csharp
  - vb
  name: Addition(LocalTime, Period)
  nameWithType: LocalTime.Addition(LocalTime, Period)
  fullName: NodaTime.LocalTime.Addition(NodaTime.LocalTime, NodaTime.Period)
  type: Operator
  source:
    remote:
      path: 1.0.x/src/NodaTime/LocalTime.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: op_Addition
    path: src/NodaTime/LocalTime.cs
    startLine: 210
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nCreates a new local time by adding a period to an existing time. The period must not contain\nany date-related units (days etc) with non-zero values.\n"
  example: []
  syntax:
    content: public static LocalTime operator +(LocalTime time, Period period)
    parameters:
    - id: time
      type: NodaTime.LocalTime
      description: The time to add the period to
    - id: period
      type: NodaTime.Period
      description: The period to add
    return:
      type: NodaTime.LocalTime
      description: The result of adding the period to the time, wrapping via midnight if necessary
    content.vb: Public Shared Operator +(time As LocalTime, period As Period) As LocalTime
  overload: NodaTime.LocalTime.op_Addition*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: NodaTime.LocalTime.Add(NodaTime.LocalTime,NodaTime.Period)
  commentId: M:NodaTime.LocalTime.Add(NodaTime.LocalTime,NodaTime.Period)
  id: Add(NodaTime.LocalTime,NodaTime.Period)
  parent: NodaTime.LocalTime
  langs:
  - csharp
  - vb
  name: Add(LocalTime, Period)
  nameWithType: LocalTime.Add(LocalTime, Period)
  fullName: NodaTime.LocalTime.Add(NodaTime.LocalTime, NodaTime.Period)
  type: Method
  source:
    remote:
      path: 1.0.x/src/NodaTime/LocalTime.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: Add
    path: src/NodaTime/LocalTime.cs
    startLine: 223
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nAdds the specified period to the time. Friendly alternative to <code>operator+()</code>.\n"
  example: []
  syntax:
    content: public static LocalTime Add(LocalTime time, Period period)
    parameters:
    - id: time
      type: NodaTime.LocalTime
      description: The time to add the period to
    - id: period
      type: NodaTime.Period
      description: The period to add. Must not contain any (non-zero) date units.
    return:
      type: NodaTime.LocalTime
      description: The sum of the given time and period
    content.vb: Public Shared Function Add(time As LocalTime, period As Period) As LocalTime
  overload: NodaTime.LocalTime.Add*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: NodaTime.LocalTime.Plus(NodaTime.Period)
  commentId: M:NodaTime.LocalTime.Plus(NodaTime.Period)
  id: Plus(NodaTime.Period)
  parent: NodaTime.LocalTime
  langs:
  - csharp
  - vb
  name: Plus(Period)
  nameWithType: LocalTime.Plus(Period)
  fullName: NodaTime.LocalTime.Plus(NodaTime.Period)
  type: Method
  source:
    remote:
      path: 1.0.x/src/NodaTime/LocalTime.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: Plus
    path: src/NodaTime/LocalTime.cs
    startLine: 233
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nAdds the specified period to this time. Fluent alternative to <code>operator+()</code>.\n"
  example: []
  syntax:
    content: public LocalTime Plus(Period period)
    parameters:
    - id: period
      type: NodaTime.Period
      description: The period to add. Must not contain any (non-zero) date units.
    return:
      type: NodaTime.LocalTime
      description: The sum of this time and the given period
    content.vb: Public Function Plus(period As Period) As LocalTime
  overload: NodaTime.LocalTime.Plus*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: NodaTime.LocalTime.op_Subtraction(NodaTime.LocalTime,NodaTime.Period)
  commentId: M:NodaTime.LocalTime.op_Subtraction(NodaTime.LocalTime,NodaTime.Period)
  id: op_Subtraction(NodaTime.LocalTime,NodaTime.Period)
  parent: NodaTime.LocalTime
  langs:
  - csharp
  - vb
  name: Subtraction(LocalTime, Period)
  nameWithType: LocalTime.Subtraction(LocalTime, Period)
  fullName: NodaTime.LocalTime.Subtraction(NodaTime.LocalTime, NodaTime.Period)
  type: Operator
  source:
    remote:
      path: 1.0.x/src/NodaTime/LocalTime.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: op_Subtraction
    path: src/NodaTime/LocalTime.cs
    startLine: 245
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nCreates a new local time by subtracting a period from an existing time. The period must not contain\nany date-related units (days etc) with non-zero values.\n"
  example: []
  syntax:
    content: public static LocalTime operator -(LocalTime time, Period period)
    parameters:
    - id: time
      type: NodaTime.LocalTime
      description: The time to subtract the period from
    - id: period
      type: NodaTime.Period
      description: The period to subtract
    return:
      type: NodaTime.LocalTime
      description: The result of subtract the period from the time, wrapping via midnight if necessary
    content.vb: Public Shared Operator -(time As LocalTime, period As Period) As LocalTime
  overload: NodaTime.LocalTime.op_Subtraction*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: NodaTime.LocalTime.Subtract(NodaTime.LocalTime,NodaTime.Period)
  commentId: M:NodaTime.LocalTime.Subtract(NodaTime.LocalTime,NodaTime.Period)
  id: Subtract(NodaTime.LocalTime,NodaTime.Period)
  parent: NodaTime.LocalTime
  langs:
  - csharp
  - vb
  name: Subtract(LocalTime, Period)
  nameWithType: LocalTime.Subtract(LocalTime, Period)
  fullName: NodaTime.LocalTime.Subtract(NodaTime.LocalTime, NodaTime.Period)
  type: Method
  source:
    remote:
      path: 1.0.x/src/NodaTime/LocalTime.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: Subtract
    path: src/NodaTime/LocalTime.cs
    startLine: 258
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nSubtracts the specified period from the time. Friendly alternative to <code>operator-()</code>.\n"
  example: []
  syntax:
    content: public static LocalTime Subtract(LocalTime time, Period period)
    parameters:
    - id: time
      type: NodaTime.LocalTime
      description: The time to subtract the period from
    - id: period
      type: NodaTime.Period
      description: The period to subtract. Must not contain any (non-zero) date units.
    return:
      type: NodaTime.LocalTime
      description: The result of subtracting the given period from the time.
    content.vb: Public Shared Function Subtract(time As LocalTime, period As Period) As LocalTime
  overload: NodaTime.LocalTime.Subtract*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: NodaTime.LocalTime.Minus(NodaTime.Period)
  commentId: M:NodaTime.LocalTime.Minus(NodaTime.Period)
  id: Minus(NodaTime.Period)
  parent: NodaTime.LocalTime
  langs:
  - csharp
  - vb
  name: Minus(Period)
  nameWithType: LocalTime.Minus(Period)
  fullName: NodaTime.LocalTime.Minus(NodaTime.Period)
  type: Method
  source:
    remote:
      path: 1.0.x/src/NodaTime/LocalTime.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: Minus
    path: src/NodaTime/LocalTime.cs
    startLine: 268
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nSubtracts the specified period from this time. Fluent alternative to <code>operator-()</code>.\n"
  example: []
  syntax:
    content: public LocalTime Minus(Period period)
    parameters:
    - id: period
      type: NodaTime.Period
      description: The period to subtract. Must not contain any (non-zero) date units.
    return:
      type: NodaTime.LocalTime
      description: The result of subtracting the given period from this time.
    content.vb: Public Function Minus(period As Period) As LocalTime
  overload: NodaTime.LocalTime.Minus*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: NodaTime.LocalTime.op_Equality(NodaTime.LocalTime,NodaTime.LocalTime)
  commentId: M:NodaTime.LocalTime.op_Equality(NodaTime.LocalTime,NodaTime.LocalTime)
  id: op_Equality(NodaTime.LocalTime,NodaTime.LocalTime)
  parent: NodaTime.LocalTime
  langs:
  - csharp
  - vb
  name: Equality(LocalTime, LocalTime)
  nameWithType: LocalTime.Equality(LocalTime, LocalTime)
  fullName: NodaTime.LocalTime.Equality(NodaTime.LocalTime, NodaTime.LocalTime)
  type: Operator
  source:
    remote:
      path: 1.0.x/src/NodaTime/LocalTime.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: op_Equality
    path: src/NodaTime/LocalTime.cs
    startLine: 280
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nCompares two local times for equality, by checking whether they represent\nthe exact same local time, down to the tick.\n"
  example: []
  syntax:
    content: public static bool operator ==(LocalTime lhs, LocalTime rhs)
    parameters:
    - id: lhs
      type: NodaTime.LocalTime
      description: The first value to compare
    - id: rhs
      type: NodaTime.LocalTime
      description: The second value to compare
    return:
      type: System.Boolean
      description: True if the two times are the same; false otherwise
    content.vb: Public Shared Operator =(lhs As LocalTime, rhs As LocalTime) As Boolean
  overload: NodaTime.LocalTime.op_Equality*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: NodaTime.LocalTime.op_Inequality(NodaTime.LocalTime,NodaTime.LocalTime)
  commentId: M:NodaTime.LocalTime.op_Inequality(NodaTime.LocalTime,NodaTime.LocalTime)
  id: op_Inequality(NodaTime.LocalTime,NodaTime.LocalTime)
  parent: NodaTime.LocalTime
  langs:
  - csharp
  - vb
  name: Inequality(LocalTime, LocalTime)
  nameWithType: LocalTime.Inequality(LocalTime, LocalTime)
  fullName: NodaTime.LocalTime.Inequality(NodaTime.LocalTime, NodaTime.LocalTime)
  type: Operator
  source:
    remote:
      path: 1.0.x/src/NodaTime/LocalTime.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: op_Inequality
    path: src/NodaTime/LocalTime.cs
    startLine: 291
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nCompares two local times for inequality.\n"
  example: []
  syntax:
    content: public static bool operator !=(LocalTime lhs, LocalTime rhs)
    parameters:
    - id: lhs
      type: NodaTime.LocalTime
      description: The first value to compare
    - id: rhs
      type: NodaTime.LocalTime
      description: The second value to compare
    return:
      type: System.Boolean
      description: False if the two times are the same; true otherwise
    content.vb: Public Shared Operator <>(lhs As LocalTime, rhs As LocalTime) As Boolean
  overload: NodaTime.LocalTime.op_Inequality*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: NodaTime.LocalTime.op_LessThan(NodaTime.LocalTime,NodaTime.LocalTime)
  commentId: M:NodaTime.LocalTime.op_LessThan(NodaTime.LocalTime,NodaTime.LocalTime)
  id: op_LessThan(NodaTime.LocalTime,NodaTime.LocalTime)
  parent: NodaTime.LocalTime
  langs:
  - csharp
  - vb
  name: LessThan(LocalTime, LocalTime)
  nameWithType: LocalTime.LessThan(LocalTime, LocalTime)
  fullName: NodaTime.LocalTime.LessThan(NodaTime.LocalTime, NodaTime.LocalTime)
  type: Operator
  source:
    remote:
      path: 1.0.x/src/NodaTime/LocalTime.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: op_LessThan
    path: src/NodaTime/LocalTime.cs
    startLine: 303
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nCompares two LocalTime values to see if the left one is strictly earlier than the right\none.\n"
  example: []
  syntax:
    content: public static bool operator <(LocalTime lhs, LocalTime rhs)
    parameters:
    - id: lhs
      type: NodaTime.LocalTime
      description: First operand of the comparison
    - id: rhs
      type: NodaTime.LocalTime
      description: Second operand of the comparison
    return:
      type: System.Boolean
      description: true if the <code data-dev-comment-type="paramref" class="paramref">lhs</code> is strictly earlier than <code data-dev-comment-type="paramref" class="paramref">rhs</code>, false otherwise.
    content.vb: Public Shared Operator <(lhs As LocalTime, rhs As LocalTime) As Boolean
  overload: NodaTime.LocalTime.op_LessThan*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: NodaTime.LocalTime.op_LessThanOrEqual(NodaTime.LocalTime,NodaTime.LocalTime)
  commentId: M:NodaTime.LocalTime.op_LessThanOrEqual(NodaTime.LocalTime,NodaTime.LocalTime)
  id: op_LessThanOrEqual(NodaTime.LocalTime,NodaTime.LocalTime)
  parent: NodaTime.LocalTime
  langs:
  - csharp
  - vb
  name: LessThanOrEqual(LocalTime, LocalTime)
  nameWithType: LocalTime.LessThanOrEqual(LocalTime, LocalTime)
  fullName: NodaTime.LocalTime.LessThanOrEqual(NodaTime.LocalTime, NodaTime.LocalTime)
  type: Operator
  source:
    remote:
      path: 1.0.x/src/NodaTime/LocalTime.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: op_LessThanOrEqual
    path: src/NodaTime/LocalTime.cs
    startLine: 315
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nCompares two LocalTime values to see if the left one is earlier than or equal to the right\none.\n"
  example: []
  syntax:
    content: public static bool operator <=(LocalTime lhs, LocalTime rhs)
    parameters:
    - id: lhs
      type: NodaTime.LocalTime
      description: First operand of the comparison
    - id: rhs
      type: NodaTime.LocalTime
      description: Second operand of the comparison
    return:
      type: System.Boolean
      description: true if the <code data-dev-comment-type="paramref" class="paramref">lhs</code> is earlier than or equal to <code data-dev-comment-type="paramref" class="paramref">rhs</code>, false otherwise.
    content.vb: Public Shared Operator <=(lhs As LocalTime, rhs As LocalTime) As Boolean
  overload: NodaTime.LocalTime.op_LessThanOrEqual*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: NodaTime.LocalTime.op_GreaterThan(NodaTime.LocalTime,NodaTime.LocalTime)
  commentId: M:NodaTime.LocalTime.op_GreaterThan(NodaTime.LocalTime,NodaTime.LocalTime)
  id: op_GreaterThan(NodaTime.LocalTime,NodaTime.LocalTime)
  parent: NodaTime.LocalTime
  langs:
  - csharp
  - vb
  name: GreaterThan(LocalTime, LocalTime)
  nameWithType: LocalTime.GreaterThan(LocalTime, LocalTime)
  fullName: NodaTime.LocalTime.GreaterThan(NodaTime.LocalTime, NodaTime.LocalTime)
  type: Operator
  source:
    remote:
      path: 1.0.x/src/NodaTime/LocalTime.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: op_GreaterThan
    path: src/NodaTime/LocalTime.cs
    startLine: 327
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nCompares two LocalTime values to see if the left one is strictly later than the right\none.\n"
  example: []
  syntax:
    content: public static bool operator>(LocalTime lhs, LocalTime rhs)
    parameters:
    - id: lhs
      type: NodaTime.LocalTime
      description: First operand of the comparison
    - id: rhs
      type: NodaTime.LocalTime
      description: Second operand of the comparison
    return:
      type: System.Boolean
      description: true if the <code data-dev-comment-type="paramref" class="paramref">lhs</code> is strictly later than <code data-dev-comment-type="paramref" class="paramref">rhs</code>, false otherwise.
    content.vb: Public Shared Operator>(lhs As LocalTime, rhs As LocalTime) As Boolean
  overload: NodaTime.LocalTime.op_GreaterThan*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: NodaTime.LocalTime.op_GreaterThanOrEqual(NodaTime.LocalTime,NodaTime.LocalTime)
  commentId: M:NodaTime.LocalTime.op_GreaterThanOrEqual(NodaTime.LocalTime,NodaTime.LocalTime)
  id: op_GreaterThanOrEqual(NodaTime.LocalTime,NodaTime.LocalTime)
  parent: NodaTime.LocalTime
  langs:
  - csharp
  - vb
  name: GreaterThanOrEqual(LocalTime, LocalTime)
  nameWithType: LocalTime.GreaterThanOrEqual(LocalTime, LocalTime)
  fullName: NodaTime.LocalTime.GreaterThanOrEqual(NodaTime.LocalTime, NodaTime.LocalTime)
  type: Operator
  source:
    remote:
      path: 1.0.x/src/NodaTime/LocalTime.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: op_GreaterThanOrEqual
    path: src/NodaTime/LocalTime.cs
    startLine: 339
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nCompares two LocalTime values to see if the left one is later than or equal to the right\none.\n"
  example: []
  syntax:
    content: public static bool operator >=(LocalTime lhs, LocalTime rhs)
    parameters:
    - id: lhs
      type: NodaTime.LocalTime
      description: First operand of the comparison
    - id: rhs
      type: NodaTime.LocalTime
      description: Second operand of the comparison
    return:
      type: System.Boolean
      description: true if the <code data-dev-comment-type="paramref" class="paramref">lhs</code> is later than or equal to <code data-dev-comment-type="paramref" class="paramref">rhs</code>, false otherwise.
    content.vb: Public Shared Operator >=(lhs As LocalTime, rhs As LocalTime) As Boolean
  overload: NodaTime.LocalTime.op_GreaterThanOrEqual*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: NodaTime.LocalTime.CompareTo(NodaTime.LocalTime)
  commentId: M:NodaTime.LocalTime.CompareTo(NodaTime.LocalTime)
  id: CompareTo(NodaTime.LocalTime)
  parent: NodaTime.LocalTime
  langs:
  - csharp
  - vb
  name: CompareTo(LocalTime)
  nameWithType: LocalTime.CompareTo(LocalTime)
  fullName: NodaTime.LocalTime.CompareTo(NodaTime.LocalTime)
  type: Method
  source:
    remote:
      path: 1.0.x/src/NodaTime/LocalTime.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: CompareTo
    path: src/NodaTime/LocalTime.cs
    startLine: 351
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nIndicates whether this time is earlier, later or the same as another one.\n"
  example: []
  syntax:
    content: public int CompareTo(LocalTime other)
    parameters:
    - id: other
      type: NodaTime.LocalTime
      description: The other date/time to compare this one with
    return:
      type: System.Int32
      description: >-
        A value less than zero if this time is earlier than <code data-dev-comment-type="paramref" class="paramref">other</code>;

        zero if this time is the same as <code data-dev-comment-type="paramref" class="paramref">other</code>; a value greater than zero if this time is

        later than <code data-dev-comment-type="paramref" class="paramref">other</code>.
    content.vb: Public Function CompareTo(other As LocalTime) As Integer
  overload: NodaTime.LocalTime.CompareTo*
  implements:
  - System.IComparable{NodaTime.LocalTime}.CompareTo(NodaTime.LocalTime)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: NodaTime.LocalTime.GetHashCode
  commentId: M:NodaTime.LocalTime.GetHashCode
  id: GetHashCode
  parent: NodaTime.LocalTime
  langs:
  - csharp
  - vb
  name: GetHashCode()
  nameWithType: LocalTime.GetHashCode()
  fullName: NodaTime.LocalTime.GetHashCode()
  type: Method
  source:
    remote:
      path: 1.0.x/src/NodaTime/LocalTime.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: GetHashCode
    path: src/NodaTime/LocalTime.cs
    startLine: 360
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nReturns a hash code for this local time.\n"
  example: []
  syntax:
    content: public override int GetHashCode()
    return:
      type: System.Int32
      description: A hash code for this local time.
    content.vb: Public Overrides Function GetHashCode As Integer
  overridden: System.ValueType.GetHashCode
  overload: NodaTime.LocalTime.GetHashCode*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: NodaTime.LocalTime.Equals(NodaTime.LocalTime)
  commentId: M:NodaTime.LocalTime.Equals(NodaTime.LocalTime)
  id: Equals(NodaTime.LocalTime)
  parent: NodaTime.LocalTime
  langs:
  - csharp
  - vb
  name: Equals(LocalTime)
  nameWithType: LocalTime.Equals(LocalTime)
  fullName: NodaTime.LocalTime.Equals(NodaTime.LocalTime)
  type: Method
  source:
    remote:
      path: 1.0.x/src/NodaTime/LocalTime.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: Equals
    path: src/NodaTime/LocalTime.cs
    startLine: 371
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nCompares this local time with the specified one for equality,\nby checking whether the two values represent the exact same local time, down to the tick.\n"
  example: []
  syntax:
    content: public bool Equals(LocalTime other)
    parameters:
    - id: other
      type: NodaTime.LocalTime
      description: The other local time to compare this one with
    return:
      type: System.Boolean
      description: True if the specified time is equal to this one; false otherwise
    content.vb: Public Function Equals(other As LocalTime) As Boolean
  overload: NodaTime.LocalTime.Equals*
  implements:
  - System.IEquatable{NodaTime.LocalTime}.Equals(NodaTime.LocalTime)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: NodaTime.LocalTime.Equals(System.Object)
  commentId: M:NodaTime.LocalTime.Equals(System.Object)
  id: Equals(System.Object)
  parent: NodaTime.LocalTime
  langs:
  - csharp
  - vb
  name: Equals(Object)
  nameWithType: LocalTime.Equals(Object)
  fullName: NodaTime.LocalTime.Equals(System.Object)
  type: Method
  source:
    remote:
      path: 1.0.x/src/NodaTime/LocalTime.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: Equals
    path: src/NodaTime/LocalTime.cs
    startLine: 382
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nCompares this local time with the specified reference. A local time is\nonly equal to another local time with the same underlying tick value.\n"
  example: []
  syntax:
    content: public override bool Equals(object obj)
    parameters:
    - id: obj
      type: System.Object
      description: The object to compare this one with
    return:
      type: System.Boolean
      description: True if the specified value is a local time is equal to this one; false otherwise
    content.vb: Public Overrides Function Equals(obj As Object) As Boolean
  overridden: System.ValueType.Equals(System.Object)
  overload: NodaTime.LocalTime.Equals*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: NodaTime.LocalTime.PlusHours(System.Int64)
  commentId: M:NodaTime.LocalTime.PlusHours(System.Int64)
  id: PlusHours(System.Int64)
  parent: NodaTime.LocalTime
  langs:
  - csharp
  - vb
  name: PlusHours(Int64)
  nameWithType: LocalTime.PlusHours(Int64)
  fullName: NodaTime.LocalTime.PlusHours(System.Int64)
  type: Method
  source:
    remote:
      path: 1.0.x/src/NodaTime/LocalTime.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: PlusHours
    path: src/NodaTime/LocalTime.cs
    startLine: 399
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nReturns a new LocalTime representing the current value with the given number of hours added.\n"
  remarks: "\nIf the value goes past the start or end of the day, it wraps - so 11pm plus two hours is 1am, for example.\n"
  example: []
  syntax:
    content: public LocalTime PlusHours(long hours)
    parameters:
    - id: hours
      type: System.Int64
      description: The number of hours to add
    return:
      type: NodaTime.LocalTime
      description: The current value plus the given number of hours.
    content.vb: Public Function PlusHours(hours As Long) As LocalTime
  overload: NodaTime.LocalTime.PlusHours*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: NodaTime.LocalTime.PlusMinutes(System.Int64)
  commentId: M:NodaTime.LocalTime.PlusMinutes(System.Int64)
  id: PlusMinutes(System.Int64)
  parent: NodaTime.LocalTime
  langs:
  - csharp
  - vb
  name: PlusMinutes(Int64)
  nameWithType: LocalTime.PlusMinutes(Int64)
  fullName: NodaTime.LocalTime.PlusMinutes(System.Int64)
  type: Method
  source:
    remote:
      path: 1.0.x/src/NodaTime/LocalTime.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: PlusMinutes
    path: src/NodaTime/LocalTime.cs
    startLine: 412
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nReturns a new LocalTime representing the current value with the given number of minutes added.\n"
  remarks: "\nIf the value goes past the start or end of the day, it wraps - so 11pm plus 120 minutes is 1am, for example.\n"
  example: []
  syntax:
    content: public LocalTime PlusMinutes(long minutes)
    parameters:
    - id: minutes
      type: System.Int64
      description: The number of minutes to add
    return:
      type: NodaTime.LocalTime
      description: The current value plus the given number of minutes.
    content.vb: Public Function PlusMinutes(minutes As Long) As LocalTime
  overload: NodaTime.LocalTime.PlusMinutes*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: NodaTime.LocalTime.PlusSeconds(System.Int64)
  commentId: M:NodaTime.LocalTime.PlusSeconds(System.Int64)
  id: PlusSeconds(System.Int64)
  parent: NodaTime.LocalTime
  langs:
  - csharp
  - vb
  name: PlusSeconds(Int64)
  nameWithType: LocalTime.PlusSeconds(Int64)
  fullName: NodaTime.LocalTime.PlusSeconds(System.Int64)
  type: Method
  source:
    remote:
      path: 1.0.x/src/NodaTime/LocalTime.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: PlusSeconds
    path: src/NodaTime/LocalTime.cs
    startLine: 425
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nReturns a new LocalTime representing the current value with the given number of seconds added.\n"
  remarks: "\nIf the value goes past the start or end of the day, it wraps - so 11:59pm plus 120 seconds is 12:01am, for example.\n"
  example: []
  syntax:
    content: public LocalTime PlusSeconds(long seconds)
    parameters:
    - id: seconds
      type: System.Int64
      description: The number of seconds to add
    return:
      type: NodaTime.LocalTime
      description: The current value plus the given number of seconds.
    content.vb: Public Function PlusSeconds(seconds As Long) As LocalTime
  overload: NodaTime.LocalTime.PlusSeconds*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: NodaTime.LocalTime.PlusMilliseconds(System.Int64)
  commentId: M:NodaTime.LocalTime.PlusMilliseconds(System.Int64)
  id: PlusMilliseconds(System.Int64)
  parent: NodaTime.LocalTime
  langs:
  - csharp
  - vb
  name: PlusMilliseconds(Int64)
  nameWithType: LocalTime.PlusMilliseconds(Int64)
  fullName: NodaTime.LocalTime.PlusMilliseconds(System.Int64)
  type: Method
  source:
    remote:
      path: 1.0.x/src/NodaTime/LocalTime.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: PlusMilliseconds
    path: src/NodaTime/LocalTime.cs
    startLine: 435
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nReturns a new LocalTime representing the current value with the given number of milliseconds added.\n"
  example: []
  syntax:
    content: public LocalTime PlusMilliseconds(long milliseconds)
    parameters:
    - id: milliseconds
      type: System.Int64
      description: The number of milliseconds to add
    return:
      type: NodaTime.LocalTime
      description: The current value plus the given number of milliseconds.
    content.vb: Public Function PlusMilliseconds(milliseconds As Long) As LocalTime
  overload: NodaTime.LocalTime.PlusMilliseconds*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: NodaTime.LocalTime.PlusTicks(System.Int64)
  commentId: M:NodaTime.LocalTime.PlusTicks(System.Int64)
  id: PlusTicks(System.Int64)
  parent: NodaTime.LocalTime
  langs:
  - csharp
  - vb
  name: PlusTicks(Int64)
  nameWithType: LocalTime.PlusTicks(Int64)
  fullName: NodaTime.LocalTime.PlusTicks(System.Int64)
  type: Method
  source:
    remote:
      path: 1.0.x/src/NodaTime/LocalTime.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: PlusTicks
    path: src/NodaTime/LocalTime.cs
    startLine: 445
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nReturns a new LocalTime representing the current value with the given number of ticks added.\n"
  example: []
  syntax:
    content: public LocalTime PlusTicks(long ticks)
    parameters:
    - id: ticks
      type: System.Int64
      description: The number of ticks to add
    return:
      type: NodaTime.LocalTime
      description: The current value plus the given number of ticks.
    content.vb: Public Function PlusTicks(ticks As Long) As LocalTime
  overload: NodaTime.LocalTime.PlusTicks*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: NodaTime.LocalTime.ToString
  commentId: M:NodaTime.LocalTime.ToString
  id: ToString
  parent: NodaTime.LocalTime
  langs:
  - csharp
  - vb
  name: ToString()
  nameWithType: LocalTime.ToString()
  fullName: NodaTime.LocalTime.ToString()
  type: Method
  source:
    remote:
      path: 1.0.x/src/NodaTime/LocalTime.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: ToString
    path: src/NodaTime/LocalTime.cs
    startLine: 458
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nReturns a <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref> that represents this instance.\n"
  example: []
  syntax:
    content: public override string ToString()
    return:
      type: System.String
      description: "\nThe value of the current instance in the standard format pattern, using the current thread&apos;s\nculture to obtain a format provider.\n"
    content.vb: Public Overrides Function ToString As String
  overridden: System.ValueType.ToString
  overload: NodaTime.LocalTime.ToString*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: NodaTime.LocalTime.ToString(System.String,System.IFormatProvider)
  commentId: M:NodaTime.LocalTime.ToString(System.String,System.IFormatProvider)
  id: ToString(System.String,System.IFormatProvider)
  parent: NodaTime.LocalTime
  langs:
  - csharp
  - vb
  name: ToString(String, IFormatProvider)
  nameWithType: LocalTime.ToString(String, IFormatProvider)
  fullName: NodaTime.LocalTime.ToString(System.String, System.IFormatProvider)
  type: Method
  source:
    remote:
      path: 1.0.x/src/NodaTime/LocalTime.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: ToString
    path: src/NodaTime/LocalTime.cs
    startLine: 476
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nFormats the value of the current instance using the specified pattern.\n"
  example: []
  syntax:
    content: public string ToString(string patternText, IFormatProvider formatProvider)
    parameters:
    - id: patternText
      type: System.String
      description: >
        The <xref href="System.String" data-throw-if-not-resolved="false"></xref> specifying the pattern to use,

        or null to use the default format pattern.
    - id: formatProvider
      type: System.IFormatProvider
      description: >
        The <xref href="System.IFormatProvider" data-throw-if-not-resolved="false"></xref> to use when formatting the value,

        or null to use the current thread&apos;s culture to obtain a format provider.
    return:
      type: System.String
      description: "\nA <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref> containing the value of the current instance in the specified format.\n"
    content.vb: Public Function ToString(patternText As String, formatProvider As IFormatProvider) As String
  overload: NodaTime.LocalTime.ToString*
  implements:
  - System.IFormattable.ToString(System.String,System.IFormatProvider)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: NodaTime
  commentId: N:NodaTime
  name: NodaTime
  nameWithType: NodaTime
  fullName: NodaTime
- uid: System.IEquatable{NodaTime.LocalTime}
  commentId: T:System.IEquatable{NodaTime.LocalTime}
  parent: System
  definition: System.IEquatable`1
  name: IEquatable<LocalTime>
  nameWithType: IEquatable<LocalTime>
  fullName: System.IEquatable<NodaTime.LocalTime>
  nameWithType.vb: IEquatable(Of LocalTime)
  fullName.vb: System.IEquatable(Of NodaTime.LocalTime)
  name.vb: IEquatable(Of LocalTime)
  spec.csharp:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: NodaTime.LocalTime
    name: LocalTime
    nameWithType: LocalTime
    fullName: NodaTime.LocalTime
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: NodaTime.LocalTime
    name: LocalTime
    nameWithType: LocalTime
    fullName: NodaTime.LocalTime
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IComparable{NodaTime.LocalTime}
  commentId: T:System.IComparable{NodaTime.LocalTime}
  parent: System
  definition: System.IComparable`1
  name: IComparable<LocalTime>
  nameWithType: IComparable<LocalTime>
  fullName: System.IComparable<NodaTime.LocalTime>
  nameWithType.vb: IComparable(Of LocalTime)
  fullName.vb: System.IComparable(Of NodaTime.LocalTime)
  name.vb: IComparable(Of LocalTime)
  spec.csharp:
  - uid: System.IComparable`1
    name: IComparable
    nameWithType: IComparable
    fullName: System.IComparable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: NodaTime.LocalTime
    name: LocalTime
    nameWithType: LocalTime
    fullName: NodaTime.LocalTime
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.IComparable`1
    name: IComparable
    nameWithType: IComparable
    fullName: System.IComparable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: NodaTime.LocalTime
    name: LocalTime
    nameWithType: LocalTime
    fullName: NodaTime.LocalTime
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IFormattable
  commentId: T:System.IFormattable
  parent: System
  isExternal: true
  name: IFormattable
  nameWithType: IFormattable
  fullName: System.IFormattable
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IEquatable`1
  commentId: T:System.IEquatable`1
  isExternal: true
  name: IEquatable<T>
  nameWithType: IEquatable<T>
  fullName: System.IEquatable<T>
  nameWithType.vb: IEquatable(Of T)
  fullName.vb: System.IEquatable(Of T)
  name.vb: IEquatable(Of T)
  spec.csharp:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: System.IComparable`1
  commentId: T:System.IComparable`1
  isExternal: true
  name: IComparable<T>
  nameWithType: IComparable<T>
  fullName: System.IComparable<T>
  nameWithType.vb: IComparable(Of T)
  fullName.vb: System.IComparable(Of T)
  name.vb: IComparable(Of T)
  spec.csharp:
  - uid: System.IComparable`1
    name: IComparable
    nameWithType: IComparable
    fullName: System.IComparable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.IComparable`1
    name: IComparable
    nameWithType: IComparable
    fullName: System.IComparable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: NodaTime.LocalTime
  commentId: T:NodaTime.LocalTime
  parent: NodaTime
  name: LocalTime
  nameWithType: LocalTime
  fullName: NodaTime.LocalTime
- uid: System.ArgumentOutOfRangeException
  commentId: T:System.ArgumentOutOfRangeException
  parent: System
  isExternal: true
  name: ArgumentOutOfRangeException
  nameWithType: ArgumentOutOfRangeException
  fullName: System.ArgumentOutOfRangeException
- uid: NodaTime.LocalTime.#ctor*
  commentId: Overload:NodaTime.LocalTime.#ctor
  name: LocalTime
  nameWithType: LocalTime.LocalTime
  fullName: NodaTime.LocalTime.LocalTime
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: NodaTime.LocalTime.FromHourMinuteSecondTick*
  commentId: Overload:NodaTime.LocalTime.FromHourMinuteSecondTick
  name: FromHourMinuteSecondTick
  nameWithType: LocalTime.FromHourMinuteSecondTick
  fullName: NodaTime.LocalTime.FromHourMinuteSecondTick
- uid: NodaTime.LocalTime.Hour*
  commentId: Overload:NodaTime.LocalTime.Hour
  name: Hour
  nameWithType: LocalTime.Hour
  fullName: NodaTime.LocalTime.Hour
- uid: NodaTime.LocalTime.ClockHourOfHalfDay*
  commentId: Overload:NodaTime.LocalTime.ClockHourOfHalfDay
  name: ClockHourOfHalfDay
  nameWithType: LocalTime.ClockHourOfHalfDay
  fullName: NodaTime.LocalTime.ClockHourOfHalfDay
- uid: NodaTime.LocalTime.Minute*
  commentId: Overload:NodaTime.LocalTime.Minute
  name: Minute
  nameWithType: LocalTime.Minute
  fullName: NodaTime.LocalTime.Minute
- uid: NodaTime.LocalTime.Second*
  commentId: Overload:NodaTime.LocalTime.Second
  name: Second
  nameWithType: LocalTime.Second
  fullName: NodaTime.LocalTime.Second
- uid: NodaTime.LocalTime.Millisecond*
  commentId: Overload:NodaTime.LocalTime.Millisecond
  name: Millisecond
  nameWithType: LocalTime.Millisecond
  fullName: NodaTime.LocalTime.Millisecond
- uid: NodaTime.LocalTime.TickOfSecond*
  commentId: Overload:NodaTime.LocalTime.TickOfSecond
  name: TickOfSecond
  nameWithType: LocalTime.TickOfSecond
  fullName: NodaTime.LocalTime.TickOfSecond
- uid: NodaTime.LocalTime.TickOfDay*
  commentId: Overload:NodaTime.LocalTime.TickOfDay
  name: TickOfDay
  nameWithType: LocalTime.TickOfDay
  fullName: NodaTime.LocalTime.TickOfDay
- uid: System.Int64
  commentId: T:System.Int64
  parent: System
  isExternal: true
  name: Int64
  nameWithType: Int64
  fullName: System.Int64
- uid: NodaTime.LocalTime.LocalDateTime*
  commentId: Overload:NodaTime.LocalTime.LocalDateTime
  name: LocalDateTime
  nameWithType: LocalTime.LocalDateTime
  fullName: NodaTime.LocalTime.LocalDateTime
- uid: NodaTime.LocalDateTime
  commentId: T:NodaTime.LocalDateTime
  parent: NodaTime
  name: LocalDateTime
  nameWithType: LocalDateTime
  fullName: NodaTime.LocalDateTime
- uid: NodaTime.LocalTime.op_Addition*
  commentId: Overload:NodaTime.LocalTime.op_Addition
  name: Addition
  nameWithType: LocalTime.Addition
  fullName: NodaTime.LocalTime.Addition
- uid: NodaTime.Period
  commentId: T:NodaTime.Period
  parent: NodaTime
  name: Period
  nameWithType: Period
  fullName: NodaTime.Period
- uid: NodaTime.LocalTime.Add*
  commentId: Overload:NodaTime.LocalTime.Add
  name: Add
  nameWithType: LocalTime.Add
  fullName: NodaTime.LocalTime.Add
- uid: NodaTime.LocalTime.Plus*
  commentId: Overload:NodaTime.LocalTime.Plus
  name: Plus
  nameWithType: LocalTime.Plus
  fullName: NodaTime.LocalTime.Plus
- uid: NodaTime.LocalTime.op_Subtraction*
  commentId: Overload:NodaTime.LocalTime.op_Subtraction
  name: Subtraction
  nameWithType: LocalTime.Subtraction
  fullName: NodaTime.LocalTime.Subtraction
- uid: NodaTime.LocalTime.Subtract*
  commentId: Overload:NodaTime.LocalTime.Subtract
  name: Subtract
  nameWithType: LocalTime.Subtract
  fullName: NodaTime.LocalTime.Subtract
- uid: NodaTime.LocalTime.Minus*
  commentId: Overload:NodaTime.LocalTime.Minus
  name: Minus
  nameWithType: LocalTime.Minus
  fullName: NodaTime.LocalTime.Minus
- uid: NodaTime.LocalTime.op_Equality*
  commentId: Overload:NodaTime.LocalTime.op_Equality
  name: Equality
  nameWithType: LocalTime.Equality
  fullName: NodaTime.LocalTime.Equality
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: NodaTime.LocalTime.op_Inequality*
  commentId: Overload:NodaTime.LocalTime.op_Inequality
  name: Inequality
  nameWithType: LocalTime.Inequality
  fullName: NodaTime.LocalTime.Inequality
- uid: NodaTime.LocalTime.op_LessThan*
  commentId: Overload:NodaTime.LocalTime.op_LessThan
  name: LessThan
  nameWithType: LocalTime.LessThan
  fullName: NodaTime.LocalTime.LessThan
- uid: NodaTime.LocalTime.op_LessThanOrEqual*
  commentId: Overload:NodaTime.LocalTime.op_LessThanOrEqual
  name: LessThanOrEqual
  nameWithType: LocalTime.LessThanOrEqual
  fullName: NodaTime.LocalTime.LessThanOrEqual
- uid: NodaTime.LocalTime.op_GreaterThan*
  commentId: Overload:NodaTime.LocalTime.op_GreaterThan
  name: GreaterThan
  nameWithType: LocalTime.GreaterThan
  fullName: NodaTime.LocalTime.GreaterThan
- uid: NodaTime.LocalTime.op_GreaterThanOrEqual*
  commentId: Overload:NodaTime.LocalTime.op_GreaterThanOrEqual
  name: GreaterThanOrEqual
  nameWithType: LocalTime.GreaterThanOrEqual
  fullName: NodaTime.LocalTime.GreaterThanOrEqual
- uid: NodaTime.LocalTime.CompareTo*
  commentId: Overload:NodaTime.LocalTime.CompareTo
  name: CompareTo
  nameWithType: LocalTime.CompareTo
  fullName: NodaTime.LocalTime.CompareTo
- uid: System.IComparable{NodaTime.LocalTime}.CompareTo(NodaTime.LocalTime)
  commentId: M:System.IComparable{NodaTime.LocalTime}.CompareTo(NodaTime.LocalTime)
  parent: System.IComparable{NodaTime.LocalTime}
  definition: System.IComparable`1.CompareTo(`0)
  name: CompareTo(LocalTime)
  nameWithType: IComparable<LocalTime>.CompareTo(LocalTime)
  fullName: System.IComparable<NodaTime.LocalTime>.CompareTo(NodaTime.LocalTime)
  nameWithType.vb: IComparable(Of LocalTime).CompareTo(LocalTime)
  fullName.vb: System.IComparable(Of NodaTime.LocalTime).CompareTo(NodaTime.LocalTime)
  spec.csharp:
  - uid: System.IComparable`1.CompareTo(`0)
    name: CompareTo
    nameWithType: IComparable<LocalTime>.CompareTo
    fullName: System.IComparable<NodaTime.LocalTime>.CompareTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: NodaTime.LocalTime
    name: LocalTime
    nameWithType: LocalTime
    fullName: NodaTime.LocalTime
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IComparable`1.CompareTo(`0)
    name: CompareTo
    nameWithType: IComparable(Of LocalTime).CompareTo
    fullName: System.IComparable(Of NodaTime.LocalTime).CompareTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: NodaTime.LocalTime
    name: LocalTime
    nameWithType: LocalTime
    fullName: NodaTime.LocalTime
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IComparable`1.CompareTo(`0)
  commentId: M:System.IComparable`1.CompareTo(`0)
  isExternal: true
  name: CompareTo(T)
  nameWithType: IComparable<T>.CompareTo(T)
  fullName: System.IComparable<T>.CompareTo(T)
  nameWithType.vb: IComparable(Of T).CompareTo(T)
  fullName.vb: System.IComparable(Of T).CompareTo(T)
  spec.csharp:
  - uid: System.IComparable`1.CompareTo(`0)
    name: CompareTo
    nameWithType: IComparable<T>.CompareTo
    fullName: System.IComparable<T>.CompareTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IComparable`1.CompareTo(`0)
    name: CompareTo
    nameWithType: IComparable(Of T).CompareTo
    fullName: System.IComparable(Of T).CompareTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.ValueType.GetHashCode
  commentId: M:System.ValueType.GetHashCode
  parent: System.ValueType
  isExternal: true
  name: GetHashCode()
  nameWithType: ValueType.GetHashCode()
  fullName: System.ValueType.GetHashCode()
  spec.csharp:
  - uid: System.ValueType.GetHashCode
    name: GetHashCode
    nameWithType: ValueType.GetHashCode
    fullName: System.ValueType.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.ValueType.GetHashCode
    name: GetHashCode
    nameWithType: ValueType.GetHashCode
    fullName: System.ValueType.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: NodaTime.LocalTime.GetHashCode*
  commentId: Overload:NodaTime.LocalTime.GetHashCode
  name: GetHashCode
  nameWithType: LocalTime.GetHashCode
  fullName: NodaTime.LocalTime.GetHashCode
- uid: System.ValueType
  commentId: T:System.ValueType
  parent: System
  isExternal: true
  name: ValueType
  nameWithType: ValueType
  fullName: System.ValueType
- uid: NodaTime.LocalTime.Equals*
  commentId: Overload:NodaTime.LocalTime.Equals
  name: Equals
  nameWithType: LocalTime.Equals
  fullName: NodaTime.LocalTime.Equals
- uid: System.IEquatable{NodaTime.LocalTime}.Equals(NodaTime.LocalTime)
  commentId: M:System.IEquatable{NodaTime.LocalTime}.Equals(NodaTime.LocalTime)
  parent: System.IEquatable{NodaTime.LocalTime}
  definition: System.IEquatable`1.Equals(`0)
  name: Equals(LocalTime)
  nameWithType: IEquatable<LocalTime>.Equals(LocalTime)
  fullName: System.IEquatable<NodaTime.LocalTime>.Equals(NodaTime.LocalTime)
  nameWithType.vb: IEquatable(Of LocalTime).Equals(LocalTime)
  fullName.vb: System.IEquatable(Of NodaTime.LocalTime).Equals(NodaTime.LocalTime)
  spec.csharp:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    nameWithType: IEquatable<LocalTime>.Equals
    fullName: System.IEquatable<NodaTime.LocalTime>.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: NodaTime.LocalTime
    name: LocalTime
    nameWithType: LocalTime
    fullName: NodaTime.LocalTime
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    nameWithType: IEquatable(Of LocalTime).Equals
    fullName: System.IEquatable(Of NodaTime.LocalTime).Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: NodaTime.LocalTime
    name: LocalTime
    nameWithType: LocalTime
    fullName: NodaTime.LocalTime
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IEquatable`1.Equals(`0)
  commentId: M:System.IEquatable`1.Equals(`0)
  isExternal: true
  name: Equals(T)
  nameWithType: IEquatable<T>.Equals(T)
  fullName: System.IEquatable<T>.Equals(T)
  nameWithType.vb: IEquatable(Of T).Equals(T)
  fullName.vb: System.IEquatable(Of T).Equals(T)
  spec.csharp:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    nameWithType: IEquatable<T>.Equals
    fullName: System.IEquatable<T>.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    nameWithType: IEquatable(Of T).Equals
    fullName: System.IEquatable(Of T).Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.ValueType.Equals(System.Object)
  commentId: M:System.ValueType.Equals(System.Object)
  parent: System.ValueType
  isExternal: true
  name: Equals(Object)
  nameWithType: ValueType.Equals(Object)
  fullName: System.ValueType.Equals(System.Object)
  spec.csharp:
  - uid: System.ValueType.Equals(System.Object)
    name: Equals
    nameWithType: ValueType.Equals
    fullName: System.ValueType.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.ValueType.Equals(System.Object)
    name: Equals
    nameWithType: ValueType.Equals
    fullName: System.ValueType.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: NodaTime.LocalTime.PlusHours*
  commentId: Overload:NodaTime.LocalTime.PlusHours
  name: PlusHours
  nameWithType: LocalTime.PlusHours
  fullName: NodaTime.LocalTime.PlusHours
- uid: NodaTime.LocalTime.PlusMinutes*
  commentId: Overload:NodaTime.LocalTime.PlusMinutes
  name: PlusMinutes
  nameWithType: LocalTime.PlusMinutes
  fullName: NodaTime.LocalTime.PlusMinutes
- uid: NodaTime.LocalTime.PlusSeconds*
  commentId: Overload:NodaTime.LocalTime.PlusSeconds
  name: PlusSeconds
  nameWithType: LocalTime.PlusSeconds
  fullName: NodaTime.LocalTime.PlusSeconds
- uid: NodaTime.LocalTime.PlusMilliseconds*
  commentId: Overload:NodaTime.LocalTime.PlusMilliseconds
  name: PlusMilliseconds
  nameWithType: LocalTime.PlusMilliseconds
  fullName: NodaTime.LocalTime.PlusMilliseconds
- uid: NodaTime.LocalTime.PlusTicks*
  commentId: Overload:NodaTime.LocalTime.PlusTicks
  name: PlusTicks
  nameWithType: LocalTime.PlusTicks
  fullName: NodaTime.LocalTime.PlusTicks
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.ValueType.ToString
  commentId: M:System.ValueType.ToString
  parent: System.ValueType
  isExternal: true
  name: ToString()
  nameWithType: ValueType.ToString()
  fullName: System.ValueType.ToString()
  spec.csharp:
  - uid: System.ValueType.ToString
    name: ToString
    nameWithType: ValueType.ToString
    fullName: System.ValueType.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.ValueType.ToString
    name: ToString
    nameWithType: ValueType.ToString
    fullName: System.ValueType.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: NodaTime.LocalTime.ToString*
  commentId: Overload:NodaTime.LocalTime.ToString
  name: ToString
  nameWithType: LocalTime.ToString
  fullName: NodaTime.LocalTime.ToString
- uid: System.IFormatProvider
  commentId: T:System.IFormatProvider
  parent: System
  isExternal: true
  name: IFormatProvider
  nameWithType: IFormatProvider
  fullName: System.IFormatProvider
- uid: System.IFormattable.ToString(System.String,System.IFormatProvider)
  commentId: M:System.IFormattable.ToString(System.String,System.IFormatProvider)
  parent: System.IFormattable
  isExternal: true
  name: ToString(String, IFormatProvider)
  nameWithType: IFormattable.ToString(String, IFormatProvider)
  fullName: System.IFormattable.ToString(System.String, System.IFormatProvider)
  spec.csharp:
  - uid: System.IFormattable.ToString(System.String,System.IFormatProvider)
    name: ToString
    nameWithType: IFormattable.ToString
    fullName: System.IFormattable.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.IFormatProvider
    name: IFormatProvider
    nameWithType: IFormatProvider
    fullName: System.IFormatProvider
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IFormattable.ToString(System.String,System.IFormatProvider)
    name: ToString
    nameWithType: IFormattable.ToString
    fullName: System.IFormattable.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.IFormatProvider
    name: IFormatProvider
    nameWithType: IFormatProvider
    fullName: System.IFormatProvider
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
shouldSkipMarkup: true
