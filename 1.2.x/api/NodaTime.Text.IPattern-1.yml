### YamlMime:ManagedReference
items:
- uid: NodaTime.Text.IPattern`1
  commentId: T:NodaTime.Text.IPattern`1
  id: IPattern`1
  parent: NodaTime.Text
  children:
  - NodaTime.Text.IPattern`1.Format(`0)
  - NodaTime.Text.IPattern`1.Parse(System.String)
  langs:
  - csharp
  - vb
  name: IPattern<T>
  nameWithType: IPattern<T>
  fullName: NodaTime.Text.IPattern<T>
  type: Interface
  source:
    remote:
      path: 1.2.x/src/NodaTime/Text/IPattern.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: IPattern
    path: src/NodaTime/Text/IPattern.cs
    startLine: 18
  assemblies:
  - NodaTime
  namespace: NodaTime.Text
  summary: "\nGeneric interface supporting parsing and formatting. Parsing always results in a \n<xref href=\"NodaTime.Text.ParseResult%601\" data-throw-if-not-resolved=\"false\"></xref> which can represent success or failure.\n"
  remarks: "\nIdiomatic text handling in Noda Time involves creating a pattern once and reusing it multiple\ntimes, rather than specifying the pattern text repeatedly. All patterns are immutable and thread-safe,\nand include the culture used for localization purposes.\n"
  example: []
  syntax:
    content: public interface IPattern<T>
    typeParameters:
    - id: T
      description: Type of value to parse or format.
    content.vb: Public Interface IPattern(Of T)
  nameWithType.vb: IPattern(Of T)
  modifiers.csharp:
  - public
  - interface
  modifiers.vb:
  - Public
  - Interface
  fullName.vb: NodaTime.Text.IPattern(Of T)
  name.vb: IPattern(Of T)
- uid: NodaTime.Text.IPattern`1.Parse(System.String)
  commentId: M:NodaTime.Text.IPattern`1.Parse(System.String)
  id: Parse(System.String)
  parent: NodaTime.Text.IPattern`1
  langs:
  - csharp
  - vb
  name: Parse(String)
  nameWithType: IPattern<T>.Parse(String)
  fullName: NodaTime.Text.IPattern<T>.Parse(System.String)
  type: Method
  source:
    remote:
      path: 1.2.x/src/NodaTime/Text/IPattern.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: Parse
    path: src/NodaTime/Text/IPattern.cs
    startLine: 29
  assemblies:
  - NodaTime
  namespace: NodaTime.Text
  summary: "\nParses the given text value according to the rules of this pattern.\n"
  remarks: "\nThis method never throws an exception (barring a bug in Noda Time itself). Even errors such as\nthe argument being null are wrapped in a parse result.\n"
  example: []
  syntax:
    content: ParseResult<T> Parse(string text)
    parameters:
    - id: text
      type: System.String
      description: The text value to parse.
    return:
      type: NodaTime.Text.ParseResult{{T}}
      description: The result of parsing, which may be successful or unsuccessful.
    content.vb: Function Parse(text As String) As ParseResult(Of T)
  overload: NodaTime.Text.IPattern`1.Parse*
  nameWithType.vb: IPattern(Of T).Parse(String)
  fullName.vb: NodaTime.Text.IPattern(Of T).Parse(System.String)
- uid: NodaTime.Text.IPattern`1.Format(`0)
  commentId: M:NodaTime.Text.IPattern`1.Format(`0)
  id: Format(`0)
  parent: NodaTime.Text.IPattern`1
  langs:
  - csharp
  - vb
  name: Format(T)
  nameWithType: IPattern<T>.Format(T)
  fullName: NodaTime.Text.IPattern<T>.Format(T)
  type: Method
  source:
    remote:
      path: 1.2.x/src/NodaTime/Text/IPattern.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: Format
    path: src/NodaTime/Text/IPattern.cs
    startLine: 36
  assemblies:
  - NodaTime
  namespace: NodaTime.Text
  summary: "\nFormats the given value as text according to the rules of this pattern.\n"
  example: []
  syntax:
    content: string Format(T value)
    parameters:
    - id: value
      type: '{T}'
      description: The value to format.
    return:
      type: System.String
      description: The value formatted according to this pattern.
    content.vb: Function Format(value As T) As String
  overload: NodaTime.Text.IPattern`1.Format*
  nameWithType.vb: IPattern(Of T).Format(T)
  fullName.vb: NodaTime.Text.IPattern(Of T).Format(T)
references:
- uid: NodaTime.Text.ParseResult`1
  commentId: T:NodaTime.Text.ParseResult`1
  name: ParseResult<T>
  nameWithType: ParseResult<T>
  fullName: NodaTime.Text.ParseResult<T>
  nameWithType.vb: ParseResult(Of T)
  fullName.vb: NodaTime.Text.ParseResult(Of T)
  name.vb: ParseResult(Of T)
  spec.csharp:
  - uid: NodaTime.Text.ParseResult`1
    name: ParseResult
    nameWithType: ParseResult
    fullName: NodaTime.Text.ParseResult
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: NodaTime.Text.ParseResult`1
    name: ParseResult
    nameWithType: ParseResult
    fullName: NodaTime.Text.ParseResult
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: NodaTime.Text
  commentId: N:NodaTime.Text
  name: NodaTime.Text
  nameWithType: NodaTime.Text
  fullName: NodaTime.Text
- uid: NodaTime.Text.IPattern`1.Parse*
  commentId: Overload:NodaTime.Text.IPattern`1.Parse
  name: Parse
  nameWithType: IPattern<T>.Parse
  fullName: NodaTime.Text.IPattern<T>.Parse
  nameWithType.vb: IPattern(Of T).Parse
  fullName.vb: NodaTime.Text.IPattern(Of T).Parse
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: NodaTime.Text.ParseResult{{T}}
  commentId: T:NodaTime.Text.ParseResult{`0}
  parent: NodaTime.Text
  definition: NodaTime.Text.ParseResult`1
  name: ParseResult<T>
  nameWithType: ParseResult<T>
  fullName: NodaTime.Text.ParseResult<T>
  nameWithType.vb: ParseResult(Of T)
  fullName.vb: NodaTime.Text.ParseResult(Of T)
  name.vb: ParseResult(Of T)
  spec.csharp:
  - uid: NodaTime.Text.ParseResult`1
    name: ParseResult
    nameWithType: ParseResult
    fullName: NodaTime.Text.ParseResult
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: NodaTime.Text.ParseResult`1
    name: ParseResult
    nameWithType: ParseResult
    fullName: NodaTime.Text.ParseResult
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: NodaTime.Text.IPattern`1.Format*
  commentId: Overload:NodaTime.Text.IPattern`1.Format
  name: Format
  nameWithType: IPattern<T>.Format
  fullName: NodaTime.Text.IPattern<T>.Format
  nameWithType.vb: IPattern(Of T).Format
  fullName.vb: NodaTime.Text.IPattern(Of T).Format
- uid: '{T}'
  commentId: '!:T'
  definition: T
  name: T
  nameWithType: T
  fullName: T
- uid: T
  name: T
  nameWithType: T
  fullName: T
shouldSkipMarkup: true
