### YamlMime:ManagedReference
items:
- uid: NodaTime.Serialization.JsonNet.NodaConverterBase`1
  commentId: T:NodaTime.Serialization.JsonNet.NodaConverterBase`1
  id: NodaConverterBase`1
  parent: NodaTime.Serialization.JsonNet
  children:
  - NodaTime.Serialization.JsonNet.NodaConverterBase`1.CanConvert(System.Type)
  - NodaTime.Serialization.JsonNet.NodaConverterBase`1.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)
  - NodaTime.Serialization.JsonNet.NodaConverterBase`1.ReadJsonImpl(Newtonsoft.Json.JsonReader,Newtonsoft.Json.JsonSerializer)
  - NodaTime.Serialization.JsonNet.NodaConverterBase`1.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)
  - NodaTime.Serialization.JsonNet.NodaConverterBase`1.WriteJsonImpl(Newtonsoft.Json.JsonWriter,`0,Newtonsoft.Json.JsonSerializer)
  langs:
  - csharp
  - vb
  name: NodaConverterBase<T>
  nameWithType: NodaConverterBase<T>
  fullName: NodaTime.Serialization.JsonNet.NodaConverterBase<T>
  type: Class
  source:
    remote:
      path: 1.2.x/src/NodaTime.Serialization.JsonNet/NodaConverterBase.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: NodaConverterBase
    path: src/NodaTime.Serialization.JsonNet/NodaConverterBase.cs
    startLine: 16
  assemblies:
  - NodaTime.Serialization.JsonNet
  namespace: NodaTime.Serialization.JsonNet
  summary: "\nBase class for all the Json.NET converters which handle value types (which is most of them).\nThis deals handles all the boilerplate code dealing with nullity.\n"
  example: []
  syntax:
    content: 'public abstract class NodaConverterBase<T> : JsonConverter'
    typeParameters:
    - id: T
      description: The type to convert to/from JSON.
    content.vb: >-
      Public MustInherit Class NodaConverterBase(Of T)
          Inherits JsonConverter
  inheritance:
  - System.Object
  - Newtonsoft.Json.JsonConverter
  derivedClasses:
  - NodaTime.Serialization.JsonNet.NodaPatternConverter`1
  inheritedMembers:
  - Newtonsoft.Json.JsonConverter.GetSchema
  - Newtonsoft.Json.JsonConverter.CanRead
  - Newtonsoft.Json.JsonConverter.CanWrite
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  nameWithType.vb: NodaConverterBase(Of T)
  modifiers.csharp:
  - public
  - abstract
  - class
  modifiers.vb:
  - Public
  - MustInherit
  - Class
  fullName.vb: NodaTime.Serialization.JsonNet.NodaConverterBase(Of T)
  name.vb: NodaConverterBase(Of T)
- uid: NodaTime.Serialization.JsonNet.NodaConverterBase`1.CanConvert(System.Type)
  commentId: M:NodaTime.Serialization.JsonNet.NodaConverterBase`1.CanConvert(System.Type)
  id: CanConvert(System.Type)
  parent: NodaTime.Serialization.JsonNet.NodaConverterBase`1
  langs:
  - csharp
  - vb
  name: CanConvert(Type)
  nameWithType: NodaConverterBase<T>.CanConvert(Type)
  fullName: NodaTime.Serialization.JsonNet.NodaConverterBase<T>.CanConvert(System.Type)
  type: Method
  source:
    remote:
      path: 1.2.x/src/NodaTime.Serialization.JsonNet/NodaConverterBase.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: CanConvert
    path: src/NodaTime.Serialization.JsonNet/NodaConverterBase.cs
    startLine: 26
  assemblies:
  - NodaTime.Serialization.JsonNet
  namespace: NodaTime.Serialization.JsonNet
  summary: "\nReturns whether or not this converter supports the given type.\n"
  example: []
  syntax:
    content: public override bool CanConvert(Type objectType)
    parameters:
    - id: objectType
      type: System.Type
      description: The type to check for compatibility.
    return:
      type: System.Boolean
      description: >-
        True if the given type is supported by this converter (including the nullable form for

        value types); false otherwise.
    content.vb: Public Overrides Function CanConvert(objectType As Type) As Boolean
  overridden: Newtonsoft.Json.JsonConverter.CanConvert(System.Type)
  overload: NodaTime.Serialization.JsonNet.NodaConverterBase`1.CanConvert*
  nameWithType.vb: NodaConverterBase(Of T).CanConvert(Type)
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
  fullName.vb: NodaTime.Serialization.JsonNet.NodaConverterBase(Of T).CanConvert(System.Type)
- uid: NodaTime.Serialization.JsonNet.NodaConverterBase`1.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)
  commentId: M:NodaTime.Serialization.JsonNet.NodaConverterBase`1.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)
  id: ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)
  parent: NodaTime.Serialization.JsonNet.NodaConverterBase`1
  langs:
  - csharp
  - vb
  name: ReadJson(JsonReader, Type, Object, JsonSerializer)
  nameWithType: NodaConverterBase<T>.ReadJson(JsonReader, Type, Object, JsonSerializer)
  fullName: NodaTime.Serialization.JsonNet.NodaConverterBase<T>.ReadJson(Newtonsoft.Json.JsonReader, System.Type, System.Object, Newtonsoft.Json.JsonSerializer)
  type: Method
  source:
    remote:
      path: 1.2.x/src/NodaTime.Serialization.JsonNet/NodaConverterBase.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: ReadJson
    path: src/NodaTime.Serialization.JsonNet/NodaConverterBase.cs
    startLine: 40
  assemblies:
  - NodaTime.Serialization.JsonNet
  namespace: NodaTime.Serialization.JsonNet
  summary: "\nConverts the JSON stored in a reader into the relevant Noda Time type.\n"
  example: []
  syntax:
    content: public override object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer)
    parameters:
    - id: reader
      type: Newtonsoft.Json.JsonReader
      description: The Json.NET reader to read data from.
    - id: objectType
      type: System.Type
      description: The type to convert the JSON to.
    - id: existingValue
      type: System.Object
      description: An existing value; ignored by this converter.
    - id: serializer
      type: Newtonsoft.Json.JsonSerializer
      description: A serializer to use for any embedded deserialization.
    return:
      type: System.Object
      description: The deserialized value.
    content.vb: Public Overrides Function ReadJson(reader As JsonReader, objectType As Type, existingValue As Object, serializer As JsonSerializer) As Object
  overridden: Newtonsoft.Json.JsonConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)
  overload: NodaTime.Serialization.JsonNet.NodaConverterBase`1.ReadJson*
  exceptions:
  - type: NodaTime.Utility.InvalidNodaDataException
    commentId: T:NodaTime.Utility.InvalidNodaDataException
    description: The JSON was invalid for this converter.
  nameWithType.vb: NodaConverterBase(Of T).ReadJson(JsonReader, Type, Object, JsonSerializer)
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
  fullName.vb: NodaTime.Serialization.JsonNet.NodaConverterBase(Of T).ReadJson(Newtonsoft.Json.JsonReader, System.Type, System.Object, Newtonsoft.Json.JsonSerializer)
- uid: NodaTime.Serialization.JsonNet.NodaConverterBase`1.ReadJsonImpl(Newtonsoft.Json.JsonReader,Newtonsoft.Json.JsonSerializer)
  commentId: M:NodaTime.Serialization.JsonNet.NodaConverterBase`1.ReadJsonImpl(Newtonsoft.Json.JsonReader,Newtonsoft.Json.JsonSerializer)
  id: ReadJsonImpl(Newtonsoft.Json.JsonReader,Newtonsoft.Json.JsonSerializer)
  parent: NodaTime.Serialization.JsonNet.NodaConverterBase`1
  langs:
  - csharp
  - vb
  name: ReadJsonImpl(JsonReader, JsonSerializer)
  nameWithType: NodaConverterBase<T>.ReadJsonImpl(JsonReader, JsonSerializer)
  fullName: NodaTime.Serialization.JsonNet.NodaConverterBase<T>.ReadJsonImpl(Newtonsoft.Json.JsonReader, Newtonsoft.Json.JsonSerializer)
  type: Method
  source:
    remote:
      path: 1.2.x/src/NodaTime.Serialization.JsonNet/NodaConverterBase.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: ReadJsonImpl
    path: src/NodaTime.Serialization.JsonNet/NodaConverterBase.cs
    startLine: 80
  assemblies:
  - NodaTime.Serialization.JsonNet
  namespace: NodaTime.Serialization.JsonNet
  summary: "\nImplemented by concrete subclasses, this performs the final conversion from a non-null JSON value to\na value of type T.\n"
  example: []
  syntax:
    content: protected abstract T ReadJsonImpl(JsonReader reader, JsonSerializer serializer)
    parameters:
    - id: reader
      type: Newtonsoft.Json.JsonReader
      description: The JSON reader to pull data from
    - id: serializer
      type: Newtonsoft.Json.JsonSerializer
      description: The serializer to use for nested serialization
    return:
      type: '{T}'
      description: The deserialized value of type T.
    content.vb: Protected MustOverride Function ReadJsonImpl(reader As JsonReader, serializer As JsonSerializer) As T
  overload: NodaTime.Serialization.JsonNet.NodaConverterBase`1.ReadJsonImpl*
  nameWithType.vb: NodaConverterBase(Of T).ReadJsonImpl(JsonReader, JsonSerializer)
  modifiers.csharp:
  - protected
  - abstract
  modifiers.vb:
  - Protected
  - MustOverride
  fullName.vb: NodaTime.Serialization.JsonNet.NodaConverterBase(Of T).ReadJsonImpl(Newtonsoft.Json.JsonReader, Newtonsoft.Json.JsonSerializer)
- uid: NodaTime.Serialization.JsonNet.NodaConverterBase`1.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)
  commentId: M:NodaTime.Serialization.JsonNet.NodaConverterBase`1.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)
  id: WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)
  parent: NodaTime.Serialization.JsonNet.NodaConverterBase`1
  langs:
  - csharp
  - vb
  name: WriteJson(JsonWriter, Object, JsonSerializer)
  nameWithType: NodaConverterBase<T>.WriteJson(JsonWriter, Object, JsonSerializer)
  fullName: NodaTime.Serialization.JsonNet.NodaConverterBase<T>.WriteJson(Newtonsoft.Json.JsonWriter, System.Object, Newtonsoft.Json.JsonSerializer)
  type: Method
  source:
    remote:
      path: 1.2.x/src/NodaTime.Serialization.JsonNet/NodaConverterBase.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: WriteJson
    path: src/NodaTime.Serialization.JsonNet/NodaConverterBase.cs
    startLine: 88
  assemblies:
  - NodaTime.Serialization.JsonNet
  namespace: NodaTime.Serialization.JsonNet
  summary: "\nWrites the given value to a Json.NET writer.\n"
  example: []
  syntax:
    content: public override void WriteJson(JsonWriter writer, object value, JsonSerializer serializer)
    parameters:
    - id: writer
      type: Newtonsoft.Json.JsonWriter
      description: The writer to write the JSON to.
    - id: value
      type: System.Object
      description: The value to write.
    - id: serializer
      type: Newtonsoft.Json.JsonSerializer
      description: The serializer to use for any embedded serialization.
    content.vb: Public Overrides Sub WriteJson(writer As JsonWriter, value As Object, serializer As JsonSerializer)
  overridden: Newtonsoft.Json.JsonConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)
  overload: NodaTime.Serialization.JsonNet.NodaConverterBase`1.WriteJson*
  nameWithType.vb: NodaConverterBase(Of T).WriteJson(JsonWriter, Object, JsonSerializer)
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
  fullName.vb: NodaTime.Serialization.JsonNet.NodaConverterBase(Of T).WriteJson(Newtonsoft.Json.JsonWriter, System.Object, Newtonsoft.Json.JsonSerializer)
- uid: NodaTime.Serialization.JsonNet.NodaConverterBase`1.WriteJsonImpl(Newtonsoft.Json.JsonWriter,`0,Newtonsoft.Json.JsonSerializer)
  commentId: M:NodaTime.Serialization.JsonNet.NodaConverterBase`1.WriteJsonImpl(Newtonsoft.Json.JsonWriter,`0,Newtonsoft.Json.JsonSerializer)
  id: WriteJsonImpl(Newtonsoft.Json.JsonWriter,`0,Newtonsoft.Json.JsonSerializer)
  parent: NodaTime.Serialization.JsonNet.NodaConverterBase`1
  langs:
  - csharp
  - vb
  name: WriteJsonImpl(JsonWriter, T, JsonSerializer)
  nameWithType: NodaConverterBase<T>.WriteJsonImpl(JsonWriter, T, JsonSerializer)
  fullName: NodaTime.Serialization.JsonNet.NodaConverterBase<T>.WriteJsonImpl(Newtonsoft.Json.JsonWriter, T, Newtonsoft.Json.JsonSerializer)
  type: Method
  source:
    remote:
      path: 1.2.x/src/NodaTime.Serialization.JsonNet/NodaConverterBase.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: WriteJsonImpl
    path: src/NodaTime.Serialization.JsonNet/NodaConverterBase.cs
    startLine: 112
  assemblies:
  - NodaTime.Serialization.JsonNet
  namespace: NodaTime.Serialization.JsonNet
  summary: "\nImplemented by concrete subclasses, this performs the final write operation for a non-null value of type T\nto JSON.\n"
  example: []
  syntax:
    content: protected abstract void WriteJsonImpl(JsonWriter writer, T value, JsonSerializer serializer)
    parameters:
    - id: writer
      type: Newtonsoft.Json.JsonWriter
      description: The writer to write JSON data to
    - id: value
      type: '{T}'
      description: The value to serializer
    - id: serializer
      type: Newtonsoft.Json.JsonSerializer
      description: The serializer to use for nested serialization
    content.vb: Protected MustOverride Sub WriteJsonImpl(writer As JsonWriter, value As T, serializer As JsonSerializer)
  overload: NodaTime.Serialization.JsonNet.NodaConverterBase`1.WriteJsonImpl*
  nameWithType.vb: NodaConverterBase(Of T).WriteJsonImpl(JsonWriter, T, JsonSerializer)
  modifiers.csharp:
  - protected
  - abstract
  modifiers.vb:
  - Protected
  - MustOverride
  fullName.vb: NodaTime.Serialization.JsonNet.NodaConverterBase(Of T).WriteJsonImpl(Newtonsoft.Json.JsonWriter, T, Newtonsoft.Json.JsonSerializer)
references:
- uid: NodaTime.Serialization.JsonNet
  commentId: N:NodaTime.Serialization.JsonNet
  name: NodaTime.Serialization.JsonNet
  nameWithType: NodaTime.Serialization.JsonNet
  fullName: NodaTime.Serialization.JsonNet
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Newtonsoft.Json.JsonConverter
  commentId: T:Newtonsoft.Json.JsonConverter
  parent: Newtonsoft.Json
  isExternal: true
  name: JsonConverter
  nameWithType: JsonConverter
  fullName: Newtonsoft.Json.JsonConverter
- uid: Newtonsoft.Json.JsonConverter.GetSchema
  commentId: M:Newtonsoft.Json.JsonConverter.GetSchema
  parent: Newtonsoft.Json.JsonConverter
  isExternal: true
  name: GetSchema()
  nameWithType: JsonConverter.GetSchema()
  fullName: Newtonsoft.Json.JsonConverter.GetSchema()
  spec.csharp:
  - uid: Newtonsoft.Json.JsonConverter.GetSchema
    name: GetSchema
    nameWithType: JsonConverter.GetSchema
    fullName: Newtonsoft.Json.JsonConverter.GetSchema
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Newtonsoft.Json.JsonConverter.GetSchema
    name: GetSchema
    nameWithType: JsonConverter.GetSchema
    fullName: Newtonsoft.Json.JsonConverter.GetSchema
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Newtonsoft.Json.JsonConverter.CanRead
  commentId: P:Newtonsoft.Json.JsonConverter.CanRead
  parent: Newtonsoft.Json.JsonConverter
  isExternal: true
  name: CanRead
  nameWithType: JsonConverter.CanRead
  fullName: Newtonsoft.Json.JsonConverter.CanRead
- uid: Newtonsoft.Json.JsonConverter.CanWrite
  commentId: P:Newtonsoft.Json.JsonConverter.CanWrite
  parent: Newtonsoft.Json.JsonConverter
  isExternal: true
  name: CanWrite
  nameWithType: JsonConverter.CanWrite
  fullName: Newtonsoft.Json.JsonConverter.CanWrite
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Newtonsoft.Json
  commentId: N:Newtonsoft.Json
  isExternal: true
  name: Newtonsoft.Json
  nameWithType: Newtonsoft.Json
  fullName: Newtonsoft.Json
- uid: Newtonsoft.Json.JsonConverter.CanConvert(System.Type)
  commentId: M:Newtonsoft.Json.JsonConverter.CanConvert(System.Type)
  parent: Newtonsoft.Json.JsonConverter
  isExternal: true
  name: CanConvert(Type)
  nameWithType: JsonConverter.CanConvert(Type)
  fullName: Newtonsoft.Json.JsonConverter.CanConvert(System.Type)
  spec.csharp:
  - uid: Newtonsoft.Json.JsonConverter.CanConvert(System.Type)
    name: CanConvert
    nameWithType: JsonConverter.CanConvert
    fullName: Newtonsoft.Json.JsonConverter.CanConvert
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Newtonsoft.Json.JsonConverter.CanConvert(System.Type)
    name: CanConvert
    nameWithType: JsonConverter.CanConvert
    fullName: Newtonsoft.Json.JsonConverter.CanConvert
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: NodaTime.Serialization.JsonNet.NodaConverterBase`1.CanConvert*
  commentId: Overload:NodaTime.Serialization.JsonNet.NodaConverterBase`1.CanConvert
  name: CanConvert
  nameWithType: NodaConverterBase<T>.CanConvert
  fullName: NodaTime.Serialization.JsonNet.NodaConverterBase<T>.CanConvert
  nameWithType.vb: NodaConverterBase(Of T).CanConvert
  fullName.vb: NodaTime.Serialization.JsonNet.NodaConverterBase(Of T).CanConvert
- uid: System.Type
  commentId: T:System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: NodaTime.Utility.InvalidNodaDataException
  commentId: T:NodaTime.Utility.InvalidNodaDataException
  name: InvalidNodaDataException
  nameWithType: InvalidNodaDataException
  fullName: NodaTime.Utility.InvalidNodaDataException
- uid: Newtonsoft.Json.JsonConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)
  commentId: M:Newtonsoft.Json.JsonConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)
  parent: Newtonsoft.Json.JsonConverter
  isExternal: true
  name: ReadJson(JsonReader, Type, Object, JsonSerializer)
  nameWithType: JsonConverter.ReadJson(JsonReader, Type, Object, JsonSerializer)
  fullName: Newtonsoft.Json.JsonConverter.ReadJson(Newtonsoft.Json.JsonReader, System.Type, System.Object, Newtonsoft.Json.JsonSerializer)
  spec.csharp:
  - uid: Newtonsoft.Json.JsonConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)
    name: ReadJson
    nameWithType: JsonConverter.ReadJson
    fullName: Newtonsoft.Json.JsonConverter.ReadJson
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Newtonsoft.Json.JsonReader
    name: JsonReader
    nameWithType: JsonReader
    fullName: Newtonsoft.Json.JsonReader
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Newtonsoft.Json.JsonSerializer
    name: JsonSerializer
    nameWithType: JsonSerializer
    fullName: Newtonsoft.Json.JsonSerializer
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Newtonsoft.Json.JsonConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)
    name: ReadJson
    nameWithType: JsonConverter.ReadJson
    fullName: Newtonsoft.Json.JsonConverter.ReadJson
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Newtonsoft.Json.JsonReader
    name: JsonReader
    nameWithType: JsonReader
    fullName: Newtonsoft.Json.JsonReader
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Newtonsoft.Json.JsonSerializer
    name: JsonSerializer
    nameWithType: JsonSerializer
    fullName: Newtonsoft.Json.JsonSerializer
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: NodaTime.Serialization.JsonNet.NodaConverterBase`1.ReadJson*
  commentId: Overload:NodaTime.Serialization.JsonNet.NodaConverterBase`1.ReadJson
  name: ReadJson
  nameWithType: NodaConverterBase<T>.ReadJson
  fullName: NodaTime.Serialization.JsonNet.NodaConverterBase<T>.ReadJson
  nameWithType.vb: NodaConverterBase(Of T).ReadJson
  fullName.vb: NodaTime.Serialization.JsonNet.NodaConverterBase(Of T).ReadJson
- uid: Newtonsoft.Json.JsonReader
  commentId: T:Newtonsoft.Json.JsonReader
  parent: Newtonsoft.Json
  isExternal: true
  name: JsonReader
  nameWithType: JsonReader
  fullName: Newtonsoft.Json.JsonReader
- uid: Newtonsoft.Json.JsonSerializer
  commentId: T:Newtonsoft.Json.JsonSerializer
  parent: Newtonsoft.Json
  isExternal: true
  name: JsonSerializer
  nameWithType: JsonSerializer
  fullName: Newtonsoft.Json.JsonSerializer
- uid: NodaTime.Serialization.JsonNet.NodaConverterBase`1.ReadJsonImpl*
  commentId: Overload:NodaTime.Serialization.JsonNet.NodaConverterBase`1.ReadJsonImpl
  name: ReadJsonImpl
  nameWithType: NodaConverterBase<T>.ReadJsonImpl
  fullName: NodaTime.Serialization.JsonNet.NodaConverterBase<T>.ReadJsonImpl
  nameWithType.vb: NodaConverterBase(Of T).ReadJsonImpl
  fullName.vb: NodaTime.Serialization.JsonNet.NodaConverterBase(Of T).ReadJsonImpl
- uid: '{T}'
  commentId: '!:T'
  definition: T
  name: T
  nameWithType: T
  fullName: T
- uid: T
  name: T
  nameWithType: T
  fullName: T
- uid: Newtonsoft.Json.JsonConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)
  commentId: M:Newtonsoft.Json.JsonConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)
  parent: Newtonsoft.Json.JsonConverter
  isExternal: true
  name: WriteJson(JsonWriter, Object, JsonSerializer)
  nameWithType: JsonConverter.WriteJson(JsonWriter, Object, JsonSerializer)
  fullName: Newtonsoft.Json.JsonConverter.WriteJson(Newtonsoft.Json.JsonWriter, System.Object, Newtonsoft.Json.JsonSerializer)
  spec.csharp:
  - uid: Newtonsoft.Json.JsonConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)
    name: WriteJson
    nameWithType: JsonConverter.WriteJson
    fullName: Newtonsoft.Json.JsonConverter.WriteJson
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Newtonsoft.Json.JsonWriter
    name: JsonWriter
    nameWithType: JsonWriter
    fullName: Newtonsoft.Json.JsonWriter
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Newtonsoft.Json.JsonSerializer
    name: JsonSerializer
    nameWithType: JsonSerializer
    fullName: Newtonsoft.Json.JsonSerializer
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Newtonsoft.Json.JsonConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)
    name: WriteJson
    nameWithType: JsonConverter.WriteJson
    fullName: Newtonsoft.Json.JsonConverter.WriteJson
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Newtonsoft.Json.JsonWriter
    name: JsonWriter
    nameWithType: JsonWriter
    fullName: Newtonsoft.Json.JsonWriter
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Newtonsoft.Json.JsonSerializer
    name: JsonSerializer
    nameWithType: JsonSerializer
    fullName: Newtonsoft.Json.JsonSerializer
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: NodaTime.Serialization.JsonNet.NodaConverterBase`1.WriteJson*
  commentId: Overload:NodaTime.Serialization.JsonNet.NodaConverterBase`1.WriteJson
  name: WriteJson
  nameWithType: NodaConverterBase<T>.WriteJson
  fullName: NodaTime.Serialization.JsonNet.NodaConverterBase<T>.WriteJson
  nameWithType.vb: NodaConverterBase(Of T).WriteJson
  fullName.vb: NodaTime.Serialization.JsonNet.NodaConverterBase(Of T).WriteJson
- uid: Newtonsoft.Json.JsonWriter
  commentId: T:Newtonsoft.Json.JsonWriter
  parent: Newtonsoft.Json
  isExternal: true
  name: JsonWriter
  nameWithType: JsonWriter
  fullName: Newtonsoft.Json.JsonWriter
- uid: NodaTime.Serialization.JsonNet.NodaConverterBase`1.WriteJsonImpl*
  commentId: Overload:NodaTime.Serialization.JsonNet.NodaConverterBase`1.WriteJsonImpl
  name: WriteJsonImpl
  nameWithType: NodaConverterBase<T>.WriteJsonImpl
  fullName: NodaTime.Serialization.JsonNet.NodaConverterBase<T>.WriteJsonImpl
  nameWithType.vb: NodaConverterBase(Of T).WriteJsonImpl
  fullName.vb: NodaTime.Serialization.JsonNet.NodaConverterBase(Of T).WriteJsonImpl
shouldSkipMarkup: true
