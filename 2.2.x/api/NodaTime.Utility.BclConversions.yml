### YamlMime:ManagedReference
items:
- uid: NodaTime.Utility.BclConversions
  commentId: T:NodaTime.Utility.BclConversions
  id: BclConversions
  parent: NodaTime.Utility
  children:
  - NodaTime.Utility.BclConversions.ToDayOfWeek(NodaTime.IsoDayOfWeek)
  - NodaTime.Utility.BclConversions.ToIsoDayOfWeek(System.DayOfWeek)
  langs:
  - csharp
  - vb
  name: BclConversions
  nameWithType: BclConversions
  fullName: NodaTime.Utility.BclConversions
  type: Class
  source:
    remote:
      path: 2.2.x/src/NodaTime/Utility/BclConversions.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: BclConversions
    path: src/NodaTime/Utility/BclConversions.cs
    startLine: 18
  assemblies:
  - NodaTime
  namespace: NodaTime.Utility
  summary: "\nConversion methods which don&apos;t naturally fit into any other types - for example, for\nenums which can&apos;t specify any other code. In most cases, conversions to and from BCL types\nare provided within the type itself - such as <xref href=\"NodaTime.LocalDateTime.ToDateTimeUnspecified\" data-throw-if-not-resolved=\"false\"></xref>\nand <xref href=\"NodaTime.LocalDateTime.FromDateTime(System.DateTime)\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  remarks: "\nThese methods are also available in the form of extension methods in the <code>NodaTime.Extensions</code> namespace.\n"
  example: []
  syntax:
    content: public static class BclConversions
    content.vb: Public Module BclConversions
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
- uid: NodaTime.Utility.BclConversions.ToDayOfWeek(NodaTime.IsoDayOfWeek)
  commentId: M:NodaTime.Utility.BclConversions.ToDayOfWeek(NodaTime.IsoDayOfWeek)
  id: ToDayOfWeek(NodaTime.IsoDayOfWeek)
  parent: NodaTime.Utility.BclConversions
  langs:
  - csharp
  - vb
  name: ToDayOfWeek(IsoDayOfWeek)
  nameWithType: BclConversions.ToDayOfWeek(IsoDayOfWeek)
  fullName: NodaTime.Utility.BclConversions.ToDayOfWeek(NodaTime.IsoDayOfWeek)
  type: Method
  source:
    remote:
      path: 2.2.x/src/NodaTime/Utility/BclConversions.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: ToDayOfWeek
    path: src/NodaTime/Utility/BclConversions.cs
    startLine: 29
  assemblies:
  - NodaTime
  namespace: NodaTime.Utility
  summary: "\nConverts from the Noda Time <xref href=\"NodaTime.IsoDayOfWeek\" data-throw-if-not-resolved=\"false\"></xref> enum to the equivalent BCL\n<xref href=\"System.DayOfWeek\" data-throw-if-not-resolved=\"false\"></xref> value. Other than Sunday, the BCL and ISO values are the same -\nbut ISO 8601 defines Sunday as day 7, and the BCL defines it as day 0.\n"
  example: []
  syntax:
    content: public static DayOfWeek ToDayOfWeek(IsoDayOfWeek isoDayOfWeek)
    parameters:
    - id: isoDayOfWeek
      type: NodaTime.IsoDayOfWeek
      description: ISO day of week value to convert.
    return:
      type: System.DayOfWeek
      description: The ISO day of week value equivalent to the one passed in.
    content.vb: Public Shared Function ToDayOfWeek(isoDayOfWeek As IsoDayOfWeek) As DayOfWeek
  overload: NodaTime.Utility.BclConversions.ToDayOfWeek*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: >-
      The <code data-dev-comment-type="paramref" class="paramref">isoDayOfWeek</code> parameter

      is not a valid day of the week.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: NodaTime.Utility.BclConversions.ToIsoDayOfWeek(System.DayOfWeek)
  commentId: M:NodaTime.Utility.BclConversions.ToIsoDayOfWeek(System.DayOfWeek)
  id: ToIsoDayOfWeek(System.DayOfWeek)
  parent: NodaTime.Utility.BclConversions
  langs:
  - csharp
  - vb
  name: ToIsoDayOfWeek(DayOfWeek)
  nameWithType: BclConversions.ToIsoDayOfWeek(DayOfWeek)
  fullName: NodaTime.Utility.BclConversions.ToIsoDayOfWeek(System.DayOfWeek)
  type: Method
  source:
    remote:
      path: 2.2.x/src/NodaTime/Utility/BclConversions.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: ToIsoDayOfWeek
    path: src/NodaTime/Utility/BclConversions.cs
    startLine: 47
  assemblies:
  - NodaTime
  namespace: NodaTime.Utility
  summary: "\nConverts from the BCL <xref href=\"System.DayOfWeek\" data-throw-if-not-resolved=\"false\"></xref> enum to the equivalent Noda Time <xref href=\"NodaTime.IsoDayOfWeek\" data-throw-if-not-resolved=\"false\"></xref> value.\nOther than Sunday, the BCL and ISO values are the same - but ISO 8601 defines\nSunday as day 7, and the BCL defines it as day 0.\n"
  example: []
  syntax:
    content: public static IsoDayOfWeek ToIsoDayOfWeek(DayOfWeek dayOfWeek)
    parameters:
    - id: dayOfWeek
      type: System.DayOfWeek
      description: ISO day of week value to convert.
    return:
      type: NodaTime.IsoDayOfWeek
      description: The BCL day of week value equivalent to the one passed in.
    content.vb: Public Shared Function ToIsoDayOfWeek(dayOfWeek As DayOfWeek) As IsoDayOfWeek
  overload: NodaTime.Utility.BclConversions.ToIsoDayOfWeek*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: >-
      The <code data-dev-comment-type="paramref" class="paramref">dayOfWeek</code> parameter

      is not a valid day of the week.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
references:
- uid: NodaTime.LocalDateTime.ToDateTimeUnspecified
  commentId: M:NodaTime.LocalDateTime.ToDateTimeUnspecified
  isExternal: true
- uid: NodaTime.LocalDateTime.FromDateTime(System.DateTime)
  commentId: M:NodaTime.LocalDateTime.FromDateTime(System.DateTime)
  isExternal: true
- uid: NodaTime.Utility
  commentId: N:NodaTime.Utility
  name: NodaTime.Utility
  nameWithType: NodaTime.Utility
  fullName: NodaTime.Utility
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: NodaTime.IsoDayOfWeek
  commentId: T:NodaTime.IsoDayOfWeek
  parent: NodaTime
  name: IsoDayOfWeek
  nameWithType: IsoDayOfWeek
  fullName: NodaTime.IsoDayOfWeek
- uid: System.DayOfWeek
  commentId: T:System.DayOfWeek
  parent: System
  isExternal: true
  name: DayOfWeek
  nameWithType: DayOfWeek
  fullName: System.DayOfWeek
- uid: System.ArgumentOutOfRangeException
  commentId: T:System.ArgumentOutOfRangeException
  parent: System
  isExternal: true
  name: ArgumentOutOfRangeException
  nameWithType: ArgumentOutOfRangeException
  fullName: System.ArgumentOutOfRangeException
- uid: NodaTime.Utility.BclConversions.ToDayOfWeek*
  commentId: Overload:NodaTime.Utility.BclConversions.ToDayOfWeek
  name: ToDayOfWeek
  nameWithType: BclConversions.ToDayOfWeek
  fullName: NodaTime.Utility.BclConversions.ToDayOfWeek
- uid: NodaTime
  commentId: N:NodaTime
  name: NodaTime
  nameWithType: NodaTime
  fullName: NodaTime
- uid: NodaTime.Utility.BclConversions.ToIsoDayOfWeek*
  commentId: Overload:NodaTime.Utility.BclConversions.ToIsoDayOfWeek
  name: ToIsoDayOfWeek
  nameWithType: BclConversions.ToIsoDayOfWeek
  fullName: NodaTime.Utility.BclConversions.ToIsoDayOfWeek
shouldSkipMarkup: true
