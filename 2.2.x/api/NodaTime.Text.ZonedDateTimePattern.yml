### YamlMime:ManagedReference
items:
- uid: NodaTime.Text.ZonedDateTimePattern
  commentId: T:NodaTime.Text.ZonedDateTimePattern
  id: ZonedDateTimePattern
  parent: NodaTime.Text
  children:
  - NodaTime.Text.ZonedDateTimePattern.AppendFormat(NodaTime.ZonedDateTime,System.Text.StringBuilder)
  - NodaTime.Text.ZonedDateTimePattern.Create(System.String,System.Globalization.CultureInfo,NodaTime.TimeZones.ZoneLocalMappingResolver,NodaTime.IDateTimeZoneProvider,NodaTime.ZonedDateTime)
  - NodaTime.Text.ZonedDateTimePattern.CreateWithCurrentCulture(System.String,NodaTime.IDateTimeZoneProvider)
  - NodaTime.Text.ZonedDateTimePattern.CreateWithInvariantCulture(System.String,NodaTime.IDateTimeZoneProvider)
  - NodaTime.Text.ZonedDateTimePattern.ExtendedFormatOnlyIso
  - NodaTime.Text.ZonedDateTimePattern.Format(NodaTime.ZonedDateTime)
  - NodaTime.Text.ZonedDateTimePattern.GeneralFormatOnlyIso
  - NodaTime.Text.ZonedDateTimePattern.Parse(System.String)
  - NodaTime.Text.ZonedDateTimePattern.PatternText
  - NodaTime.Text.ZonedDateTimePattern.Resolver
  - NodaTime.Text.ZonedDateTimePattern.TemplateValue
  - NodaTime.Text.ZonedDateTimePattern.WithCalendar(NodaTime.CalendarSystem)
  - NodaTime.Text.ZonedDateTimePattern.WithCulture(System.Globalization.CultureInfo)
  - NodaTime.Text.ZonedDateTimePattern.WithPatternText(System.String)
  - NodaTime.Text.ZonedDateTimePattern.WithResolver(NodaTime.TimeZones.ZoneLocalMappingResolver)
  - NodaTime.Text.ZonedDateTimePattern.WithTemplateValue(NodaTime.ZonedDateTime)
  - NodaTime.Text.ZonedDateTimePattern.WithZoneProvider(NodaTime.IDateTimeZoneProvider)
  - NodaTime.Text.ZonedDateTimePattern.ZoneProvider
  langs:
  - csharp
  - vb
  name: ZonedDateTimePattern
  nameWithType: ZonedDateTimePattern
  fullName: NodaTime.Text.ZonedDateTimePattern
  type: Class
  source:
    remote:
      path: 2.2.x/src/NodaTime/Text/ZonedDateTimePattern.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: ZonedDateTimePattern
    path: src/NodaTime/Text/ZonedDateTimePattern.cs
    startLine: 23
  assemblies:
  - NodaTime
  namespace: NodaTime.Text
  summary: "\nRepresents a pattern for parsing and formatting <xref href=\"NodaTime.ZonedDateTime\" data-throw-if-not-resolved=\"false\"></xref> values.\n"
  example: []
  syntax:
    content: 'public sealed class ZonedDateTimePattern : IPattern<ZonedDateTime>'
    content.vb: >-
      Public NotInheritable Class ZonedDateTimePattern
          Implements IPattern(Of ZonedDateTime)
  inheritance:
  - System.Object
  implements:
  - NodaTime.Text.IPattern{NodaTime.ZonedDateTime}
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - sealed
  - class
  modifiers.vb:
  - Public
  - NotInheritable
  - Class
- uid: NodaTime.Text.ZonedDateTimePattern.GeneralFormatOnlyIso
  commentId: P:NodaTime.Text.ZonedDateTimePattern.GeneralFormatOnlyIso
  id: GeneralFormatOnlyIso
  parent: NodaTime.Text.ZonedDateTimePattern
  langs:
  - csharp
  - vb
  name: GeneralFormatOnlyIso
  nameWithType: ZonedDateTimePattern.GeneralFormatOnlyIso
  fullName: NodaTime.Text.ZonedDateTimePattern.GeneralFormatOnlyIso
  type: Property
  source:
    remote:
      path: 2.2.x/src/NodaTime/Text/ZonedDateTimePattern.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: GeneralFormatOnlyIso
    path: src/NodaTime/Text/ZonedDateTimePattern.cs
    startLine: 39
  assemblies:
  - NodaTime
  namespace: NodaTime.Text
  summary: "\nGets an zoned local date/time pattern based on ISO-8601 (down to the second) including offset from UTC and zone ID.\nIt corresponds to a custom pattern of &quot;uuuu&apos;-&apos;MM&apos;-&apos;dd&apos;T&apos;HH&apos;:&apos;mm&apos;:&apos;ss z &apos;(&apos;o&lt;g>&apos;)&apos;&quot; and is available\nas the &apos;G&apos; standard pattern.\n"
  remarks: "\nThe calendar system is not formatted as part of this pattern, and it cannot be used for parsing as no time zone\nprovider is included. Call <xref href=\"NodaTime.Text.ZonedDateTimePattern.WithZoneProvider(NodaTime.IDateTimeZoneProvider)\" data-throw-if-not-resolved=\"false\"></xref> on the value of this property to obtain a\npattern which can be used for parsing.\n"
  example: []
  syntax:
    content: public static ZonedDateTimePattern GeneralFormatOnlyIso { get; }
    parameters: []
    return:
      type: NodaTime.Text.ZonedDateTimePattern
      description: An zoned local date/time pattern based on ISO-8601 (down to the second) including offset from UTC and zone ID.
    content.vb: Public Shared ReadOnly Property GeneralFormatOnlyIso As ZonedDateTimePattern
  overload: NodaTime.Text.ZonedDateTimePattern.GeneralFormatOnlyIso*
  modifiers.csharp:
  - public
  - static
  - get
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: NodaTime.Text.ZonedDateTimePattern.ExtendedFormatOnlyIso
  commentId: P:NodaTime.Text.ZonedDateTimePattern.ExtendedFormatOnlyIso
  id: ExtendedFormatOnlyIso
  parent: NodaTime.Text.ZonedDateTimePattern
  langs:
  - csharp
  - vb
  name: ExtendedFormatOnlyIso
  nameWithType: ZonedDateTimePattern.ExtendedFormatOnlyIso
  fullName: NodaTime.Text.ZonedDateTimePattern.ExtendedFormatOnlyIso
  type: Property
  source:
    remote:
      path: 2.2.x/src/NodaTime/Text/ZonedDateTimePattern.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: ExtendedFormatOnlyIso
    path: src/NodaTime/Text/ZonedDateTimePattern.cs
    startLine: 53
  assemblies:
  - NodaTime
  namespace: NodaTime.Text
  summary: "\nReturns an invariant zoned date/time pattern based on ISO-8601 (down to the nanosecond) including offset from UTC and zone ID.\nIt corresponds to a custom pattern of &quot;uuuu&apos;-&apos;MM&apos;-&apos;dd&apos;T&apos;HH&apos;:&apos;mm&apos;:&apos;ss;FFFFFFFFF z &apos;(&apos;o&lt;g>&apos;)&apos;&quot; and is available\nas the &apos;F&apos; standard pattern.\n"
  remarks: "\nThe calendar system is not formatted as part of this pattern, and it cannot be used for parsing as no time zone\nprovider is included. Call <xref href=\"NodaTime.Text.ZonedDateTimePattern.WithZoneProvider(NodaTime.IDateTimeZoneProvider)\" data-throw-if-not-resolved=\"false\"></xref> on the value of this property to obtain a\npattern which can be used for parsing.\n"
  example: []
  syntax:
    content: public static ZonedDateTimePattern ExtendedFormatOnlyIso { get; }
    parameters: []
    return:
      type: NodaTime.Text.ZonedDateTimePattern
      description: An invariant zoned date/time pattern based on ISO-8601 (down to the nanosecond) including offset from UTC and zone ID.
    content.vb: Public Shared ReadOnly Property ExtendedFormatOnlyIso As ZonedDateTimePattern
  overload: NodaTime.Text.ZonedDateTimePattern.ExtendedFormatOnlyIso*
  modifiers.csharp:
  - public
  - static
  - get
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: NodaTime.Text.ZonedDateTimePattern.PatternText
  commentId: P:NodaTime.Text.ZonedDateTimePattern.PatternText
  id: PatternText
  parent: NodaTime.Text.ZonedDateTimePattern
  langs:
  - csharp
  - vb
  name: PatternText
  nameWithType: ZonedDateTimePattern.PatternText
  fullName: NodaTime.Text.ZonedDateTimePattern.PatternText
  type: Property
  source:
    remote:
      path: 2.2.x/src/NodaTime/Text/ZonedDateTimePattern.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: PatternText
    path: src/NodaTime/Text/ZonedDateTimePattern.cs
    startLine: 72
  assemblies:
  - NodaTime
  namespace: NodaTime.Text
  summary: "\nGets the pattern text for this pattern, as supplied on creation.\n"
  example: []
  syntax:
    content: public string PatternText { get; }
    parameters: []
    return:
      type: System.String
      description: The pattern text for this pattern, as supplied on creation.
    content.vb: Public ReadOnly Property PatternText As String
  overload: NodaTime.Text.ZonedDateTimePattern.PatternText*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: NodaTime.Text.ZonedDateTimePattern.TemplateValue
  commentId: P:NodaTime.Text.ZonedDateTimePattern.TemplateValue
  id: TemplateValue
  parent: NodaTime.Text.ZonedDateTimePattern
  langs:
  - csharp
  - vb
  name: TemplateValue
  nameWithType: ZonedDateTimePattern.TemplateValue
  fullName: NodaTime.Text.ZonedDateTimePattern.TemplateValue
  type: Property
  source:
    remote:
      path: 2.2.x/src/NodaTime/Text/ZonedDateTimePattern.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: TemplateValue
    path: src/NodaTime/Text/ZonedDateTimePattern.cs
    startLine: 84
  assemblies:
  - NodaTime
  namespace: NodaTime.Text
  summary: "\nGets the value used as a template for parsing: any field values unspecified\nin the pattern are taken from the template.\n"
  example: []
  syntax:
    content: public ZonedDateTime TemplateValue { get; }
    parameters: []
    return:
      type: NodaTime.ZonedDateTime
      description: The value used as a template for parsing.
    content.vb: Public ReadOnly Property TemplateValue As ZonedDateTime
  overload: NodaTime.Text.ZonedDateTimePattern.TemplateValue*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: NodaTime.Text.ZonedDateTimePattern.Resolver
  commentId: P:NodaTime.Text.ZonedDateTimePattern.Resolver
  id: Resolver
  parent: NodaTime.Text.ZonedDateTimePattern
  langs:
  - csharp
  - vb
  name: Resolver
  nameWithType: ZonedDateTimePattern.Resolver
  fullName: NodaTime.Text.ZonedDateTimePattern.Resolver
  type: Property
  source:
    remote:
      path: 2.2.x/src/NodaTime/Text/ZonedDateTimePattern.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: Resolver
    path: src/NodaTime/Text/ZonedDateTimePattern.cs
    startLine: 92
  assemblies:
  - NodaTime
  namespace: NodaTime.Text
  summary: "\nGets the resolver which is used to map local date/times to zoned date/times,\nhandling skipped and ambiguous times appropriately (where the offset isn&apos;t specified in the pattern).\nThis may be null, in which case the pattern can only be used for formatting (not parsing).\n"
  example: []
  syntax:
    content: public ZoneLocalMappingResolver Resolver { get; }
    parameters: []
    return:
      type: NodaTime.TimeZones.ZoneLocalMappingResolver
      description: The resolver which is used to map local date/times to zoned date/times.
    content.vb: Public ReadOnly Property Resolver As ZoneLocalMappingResolver
  overload: NodaTime.Text.ZonedDateTimePattern.Resolver*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: NodaTime.Text.ZonedDateTimePattern.ZoneProvider
  commentId: P:NodaTime.Text.ZonedDateTimePattern.ZoneProvider
  id: ZoneProvider
  parent: NodaTime.Text.ZonedDateTimePattern
  langs:
  - csharp
  - vb
  name: ZoneProvider
  nameWithType: ZonedDateTimePattern.ZoneProvider
  fullName: NodaTime.Text.ZonedDateTimePattern.ZoneProvider
  type: Property
  source:
    remote:
      path: 2.2.x/src/NodaTime/Text/ZonedDateTimePattern.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: ZoneProvider
    path: src/NodaTime/Text/ZonedDateTimePattern.cs
    startLine: 101
  assemblies:
  - NodaTime
  namespace: NodaTime.Text
  summary: "\nGets the provider which is used to look up time zones when parsing a pattern\nwhich contains a time zone identifier. This may be null, in which case the pattern can\nonly be used for formatting (not parsing).\n"
  example: []
  syntax:
    content: public IDateTimeZoneProvider ZoneProvider { get; }
    parameters: []
    return:
      type: NodaTime.IDateTimeZoneProvider
      description: >-
        The provider which is used to look up time zones when parsing a pattern

        which contains a time zone identifier.
    content.vb: Public ReadOnly Property ZoneProvider As IDateTimeZoneProvider
  overload: NodaTime.Text.ZonedDateTimePattern.ZoneProvider*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: NodaTime.Text.ZonedDateTimePattern.Parse(System.String)
  commentId: M:NodaTime.Text.ZonedDateTimePattern.Parse(System.String)
  id: Parse(System.String)
  parent: NodaTime.Text.ZonedDateTimePattern
  langs:
  - csharp
  - vb
  name: Parse(String)
  nameWithType: ZonedDateTimePattern.Parse(String)
  fullName: NodaTime.Text.ZonedDateTimePattern.Parse(System.String)
  type: Method
  source:
    remote:
      path: 2.2.x/src/NodaTime/Text/ZonedDateTimePattern.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: Parse
    path: src/NodaTime/Text/ZonedDateTimePattern.cs
    startLine: 123
  assemblies:
  - NodaTime
  namespace: NodaTime.Text
  summary: "\nParses the given text value according to the rules of this pattern.\n"
  remarks: "\nThis method never throws an exception (barring a bug in Noda Time itself). Even errors such as\nthe argument being null are wrapped in a parse result.\n"
  example: []
  syntax:
    content: public ParseResult<ZonedDateTime> Parse(string text)
    parameters:
    - id: text
      type: System.String
      description: The text value to parse.
    return:
      type: NodaTime.Text.ParseResult{NodaTime.ZonedDateTime}
      description: The result of parsing, which may be successful or unsuccessful.
    content.vb: Public Function Parse(text As String) As ParseResult(Of ZonedDateTime)
  overload: NodaTime.Text.ZonedDateTimePattern.Parse*
  implements:
  - NodaTime.Text.IPattern{NodaTime.ZonedDateTime}.Parse(System.String)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: NodaTime.Text.ZonedDateTimePattern.Format(NodaTime.ZonedDateTime)
  commentId: M:NodaTime.Text.ZonedDateTimePattern.Format(NodaTime.ZonedDateTime)
  id: Format(NodaTime.ZonedDateTime)
  parent: NodaTime.Text.ZonedDateTimePattern
  langs:
  - csharp
  - vb
  name: Format(ZonedDateTime)
  nameWithType: ZonedDateTimePattern.Format(ZonedDateTime)
  fullName: NodaTime.Text.ZonedDateTimePattern.Format(NodaTime.ZonedDateTime)
  type: Method
  source:
    remote:
      path: 2.2.x/src/NodaTime/Text/ZonedDateTimePattern.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: Format
    path: src/NodaTime/Text/ZonedDateTimePattern.cs
    startLine: 130
  assemblies:
  - NodaTime
  namespace: NodaTime.Text
  summary: "\nFormats the given zoned date/time as text according to the rules of this pattern.\n"
  example: []
  syntax:
    content: public string Format(ZonedDateTime value)
    parameters:
    - id: value
      type: NodaTime.ZonedDateTime
      description: The zoned date/time to format.
    return:
      type: System.String
      description: The zoned date/time formatted according to this pattern.
    content.vb: Public Function Format(value As ZonedDateTime) As String
  overload: NodaTime.Text.ZonedDateTimePattern.Format*
  implements:
  - NodaTime.Text.IPattern{NodaTime.ZonedDateTime}.Format(NodaTime.ZonedDateTime)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: NodaTime.Text.ZonedDateTimePattern.AppendFormat(NodaTime.ZonedDateTime,System.Text.StringBuilder)
  commentId: M:NodaTime.Text.ZonedDateTimePattern.AppendFormat(NodaTime.ZonedDateTime,System.Text.StringBuilder)
  id: AppendFormat(NodaTime.ZonedDateTime,System.Text.StringBuilder)
  parent: NodaTime.Text.ZonedDateTimePattern
  langs:
  - csharp
  - vb
  name: AppendFormat(ZonedDateTime, StringBuilder)
  nameWithType: ZonedDateTimePattern.AppendFormat(ZonedDateTime, StringBuilder)
  fullName: NodaTime.Text.ZonedDateTimePattern.AppendFormat(NodaTime.ZonedDateTime, System.Text.StringBuilder)
  type: Method
  source:
    remote:
      path: 2.2.x/src/NodaTime/Text/ZonedDateTimePattern.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: AppendFormat
    path: src/NodaTime/Text/ZonedDateTimePattern.cs
    startLine: 139
  assemblies:
  - NodaTime
  namespace: NodaTime.Text
  summary: "\nFormats the given value as text according to the rules of this pattern,\nappending to the given <xref href=\"System.Text.StringBuilder\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public StringBuilder AppendFormat(ZonedDateTime value, StringBuilder builder)
    parameters:
    - id: value
      type: NodaTime.ZonedDateTime
      description: The value to format.
    - id: builder
      type: System.Text.StringBuilder
      description: The <code>StringBuilder</code> to append to.
    return:
      type: System.Text.StringBuilder
      description: The builder passed in as <code data-dev-comment-type="paramref" class="paramref">builder</code>.
    content.vb: Public Function AppendFormat(value As ZonedDateTime, builder As StringBuilder) As StringBuilder
  overload: NodaTime.Text.ZonedDateTimePattern.AppendFormat*
  implements:
  - NodaTime.Text.IPattern{NodaTime.ZonedDateTime}.AppendFormat(NodaTime.ZonedDateTime,System.Text.StringBuilder)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: NodaTime.Text.ZonedDateTimePattern.Create(System.String,System.Globalization.CultureInfo,NodaTime.TimeZones.ZoneLocalMappingResolver,NodaTime.IDateTimeZoneProvider,NodaTime.ZonedDateTime)
  commentId: M:NodaTime.Text.ZonedDateTimePattern.Create(System.String,System.Globalization.CultureInfo,NodaTime.TimeZones.ZoneLocalMappingResolver,NodaTime.IDateTimeZoneProvider,NodaTime.ZonedDateTime)
  id: Create(System.String,System.Globalization.CultureInfo,NodaTime.TimeZones.ZoneLocalMappingResolver,NodaTime.IDateTimeZoneProvider,NodaTime.ZonedDateTime)
  parent: NodaTime.Text.ZonedDateTimePattern
  langs:
  - csharp
  - vb
  name: Create(String, CultureInfo, ZoneLocalMappingResolver, IDateTimeZoneProvider, ZonedDateTime)
  nameWithType: ZonedDateTimePattern.Create(String, CultureInfo, ZoneLocalMappingResolver, IDateTimeZoneProvider, ZonedDateTime)
  fullName: NodaTime.Text.ZonedDateTimePattern.Create(System.String, System.Globalization.CultureInfo, NodaTime.TimeZones.ZoneLocalMappingResolver, NodaTime.IDateTimeZoneProvider, NodaTime.ZonedDateTime)
  type: Method
  source:
    remote:
      path: 2.2.x/src/NodaTime/Text/ZonedDateTimePattern.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: Create
    path: src/NodaTime/Text/ZonedDateTimePattern.cs
    startLine: 175
  assemblies:
  - NodaTime
  namespace: NodaTime.Text
  summary: "\nCreates a pattern for the given pattern text, culture, resolver, time zone provider, and template value.\n"
  remarks: "\nSee the user guide for the available pattern text options.\nIf <code data-dev-comment-type=\"paramref\" class=\"paramref\">zoneProvider</code> is null, the resulting pattern can be used for formatting\nbut not parsing.\n"
  example: []
  syntax:
    content: public static ZonedDateTimePattern Create(string patternText, CultureInfo cultureInfo, ZoneLocalMappingResolver resolver, IDateTimeZoneProvider zoneProvider, ZonedDateTime templateValue)
    parameters:
    - id: patternText
      type: System.String
      description: Pattern text to create the pattern for
    - id: cultureInfo
      type: System.Globalization.CultureInfo
      description: The culture to use in the pattern
    - id: resolver
      type: NodaTime.TimeZones.ZoneLocalMappingResolver
      description: Resolver to apply when mapping local date/time values into the zone.
    - id: zoneProvider
      type: NodaTime.IDateTimeZoneProvider
      description: Time zone provider, used when parsing text which contains a time zone identifier.
    - id: templateValue
      type: NodaTime.ZonedDateTime
      description: Template value to use for unspecified fields
    return:
      type: NodaTime.Text.ZonedDateTimePattern
      description: A pattern for parsing and formatting zoned date/times.
    content.vb: Public Shared Function Create(patternText As String, cultureInfo As CultureInfo, resolver As ZoneLocalMappingResolver, zoneProvider As IDateTimeZoneProvider, templateValue As ZonedDateTime) As ZonedDateTimePattern
  overload: NodaTime.Text.ZonedDateTimePattern.Create*
  exceptions:
  - type: NodaTime.Text.InvalidPatternException
    commentId: T:NodaTime.Text.InvalidPatternException
    description: The pattern text was invalid.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: NodaTime.Text.ZonedDateTimePattern.CreateWithInvariantCulture(System.String,NodaTime.IDateTimeZoneProvider)
  commentId: M:NodaTime.Text.ZonedDateTimePattern.CreateWithInvariantCulture(System.String,NodaTime.IDateTimeZoneProvider)
  id: CreateWithInvariantCulture(System.String,NodaTime.IDateTimeZoneProvider)
  parent: NodaTime.Text.ZonedDateTimePattern
  langs:
  - csharp
  - vb
  name: CreateWithInvariantCulture(String, IDateTimeZoneProvider)
  nameWithType: ZonedDateTimePattern.CreateWithInvariantCulture(String, IDateTimeZoneProvider)
  fullName: NodaTime.Text.ZonedDateTimePattern.CreateWithInvariantCulture(System.String, NodaTime.IDateTimeZoneProvider)
  type: Method
  source:
    remote:
      path: 2.2.x/src/NodaTime/Text/ZonedDateTimePattern.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: CreateWithInvariantCulture
    path: src/NodaTime/Text/ZonedDateTimePattern.cs
    startLine: 191
  assemblies:
  - NodaTime
  namespace: NodaTime.Text
  summary: "\nCreates a pattern for the given pattern text and time zone provider, using a strict resolver, the invariant\nculture, and a default template value of midnight January 1st 2000 UTC.\n"
  remarks: "\nThe resolver is only used if the pattern text doesn&apos;t include an offset.\nIf <code data-dev-comment-type=\"paramref\" class=\"paramref\">zoneProvider</code> is null, the resulting pattern can be used for formatting\nbut not parsing.\n"
  example: []
  syntax:
    content: public static ZonedDateTimePattern CreateWithInvariantCulture(string patternText, IDateTimeZoneProvider zoneProvider)
    parameters:
    - id: patternText
      type: System.String
      description: Pattern text to create the pattern for
    - id: zoneProvider
      type: NodaTime.IDateTimeZoneProvider
      description: Time zone provider, used when parsing text which contains a time zone identifier.
    return:
      type: NodaTime.Text.ZonedDateTimePattern
      description: A pattern for parsing and formatting zoned date/times.
    content.vb: Public Shared Function CreateWithInvariantCulture(patternText As String, zoneProvider As IDateTimeZoneProvider) As ZonedDateTimePattern
  overload: NodaTime.Text.ZonedDateTimePattern.CreateWithInvariantCulture*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: NodaTime.Text.ZonedDateTimePattern.CreateWithCurrentCulture(System.String,NodaTime.IDateTimeZoneProvider)
  commentId: M:NodaTime.Text.ZonedDateTimePattern.CreateWithCurrentCulture(System.String,NodaTime.IDateTimeZoneProvider)
  id: CreateWithCurrentCulture(System.String,NodaTime.IDateTimeZoneProvider)
  parent: NodaTime.Text.ZonedDateTimePattern
  langs:
  - csharp
  - vb
  name: CreateWithCurrentCulture(String, IDateTimeZoneProvider)
  nameWithType: ZonedDateTimePattern.CreateWithCurrentCulture(String, IDateTimeZoneProvider)
  fullName: NodaTime.Text.ZonedDateTimePattern.CreateWithCurrentCulture(System.String, NodaTime.IDateTimeZoneProvider)
  type: Method
  source:
    remote:
      path: 2.2.x/src/NodaTime/Text/ZonedDateTimePattern.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: CreateWithCurrentCulture
    path: src/NodaTime/Text/ZonedDateTimePattern.cs
    startLine: 207
  assemblies:
  - NodaTime
  namespace: NodaTime.Text
  summary: "\nCreates a pattern for the given pattern text and time zone provider, using a strict resolver, the current\nculture, and a default template value of midnight January 1st 2000 UTC.\n"
  remarks: "\nThe resolver is only used if the pattern text doesn&apos;t include an offset.\nIf <code data-dev-comment-type=\"paramref\" class=\"paramref\">zoneProvider</code> is null, the resulting pattern can be used for formatting\nbut not parsing. Note that the current culture is captured at the time this method is called\n- it is not captured at the point of parsing or formatting values.\n"
  example: []
  syntax:
    content: public static ZonedDateTimePattern CreateWithCurrentCulture(string patternText, IDateTimeZoneProvider zoneProvider)
    parameters:
    - id: patternText
      type: System.String
      description: Pattern text to create the pattern for
    - id: zoneProvider
      type: NodaTime.IDateTimeZoneProvider
      description: Time zone provider, used when parsing text which contains a time zone identifier.
    return:
      type: NodaTime.Text.ZonedDateTimePattern
      description: A pattern for parsing and formatting zoned date/times.
    content.vb: Public Shared Function CreateWithCurrentCulture(patternText As String, zoneProvider As IDateTimeZoneProvider) As ZonedDateTimePattern
  overload: NodaTime.Text.ZonedDateTimePattern.CreateWithCurrentCulture*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: NodaTime.Text.ZonedDateTimePattern.WithPatternText(System.String)
  commentId: M:NodaTime.Text.ZonedDateTimePattern.WithPatternText(System.String)
  id: WithPatternText(System.String)
  parent: NodaTime.Text.ZonedDateTimePattern
  langs:
  - csharp
  - vb
  name: WithPatternText(String)
  nameWithType: ZonedDateTimePattern.WithPatternText(String)
  fullName: NodaTime.Text.ZonedDateTimePattern.WithPatternText(System.String)
  type: Method
  source:
    remote:
      path: 2.2.x/src/NodaTime/Text/ZonedDateTimePattern.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: WithPatternText
    path: src/NodaTime/Text/ZonedDateTimePattern.cs
    startLine: 216
  assemblies:
  - NodaTime
  namespace: NodaTime.Text
  summary: "\nCreates a pattern for the same original localization information as this pattern, but with the specified\npattern text.\n"
  example: []
  syntax:
    content: public ZonedDateTimePattern WithPatternText(string patternText)
    parameters:
    - id: patternText
      type: System.String
      description: The pattern text to use in the new pattern.
    return:
      type: NodaTime.Text.ZonedDateTimePattern
      description: A new pattern with the given pattern text.
    content.vb: Public Function WithPatternText(patternText As String) As ZonedDateTimePattern
  overload: NodaTime.Text.ZonedDateTimePattern.WithPatternText*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: NodaTime.Text.ZonedDateTimePattern.WithCulture(System.Globalization.CultureInfo)
  commentId: M:NodaTime.Text.ZonedDateTimePattern.WithCulture(System.Globalization.CultureInfo)
  id: WithCulture(System.Globalization.CultureInfo)
  parent: NodaTime.Text.ZonedDateTimePattern
  langs:
  - csharp
  - vb
  name: WithCulture(CultureInfo)
  nameWithType: ZonedDateTimePattern.WithCulture(CultureInfo)
  fullName: NodaTime.Text.ZonedDateTimePattern.WithCulture(System.Globalization.CultureInfo)
  type: Method
  source:
    remote:
      path: 2.2.x/src/NodaTime/Text/ZonedDateTimePattern.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: WithCulture
    path: src/NodaTime/Text/ZonedDateTimePattern.cs
    startLine: 234
  assemblies:
  - NodaTime
  namespace: NodaTime.Text
  summary: "\nCreates a pattern for the same original pattern text as this pattern, but with the specified\nculture.\n"
  example: []
  syntax:
    content: public ZonedDateTimePattern WithCulture(CultureInfo cultureInfo)
    parameters:
    - id: cultureInfo
      type: System.Globalization.CultureInfo
      description: The culture to use in the new pattern.
    return:
      type: NodaTime.Text.ZonedDateTimePattern
      description: A new pattern with the given culture.
    content.vb: Public Function WithCulture(cultureInfo As CultureInfo) As ZonedDateTimePattern
  overload: NodaTime.Text.ZonedDateTimePattern.WithCulture*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: NodaTime.Text.ZonedDateTimePattern.WithResolver(NodaTime.TimeZones.ZoneLocalMappingResolver)
  commentId: M:NodaTime.Text.ZonedDateTimePattern.WithResolver(NodaTime.TimeZones.ZoneLocalMappingResolver)
  id: WithResolver(NodaTime.TimeZones.ZoneLocalMappingResolver)
  parent: NodaTime.Text.ZonedDateTimePattern
  langs:
  - csharp
  - vb
  name: WithResolver(ZoneLocalMappingResolver)
  nameWithType: ZonedDateTimePattern.WithResolver(ZoneLocalMappingResolver)
  fullName: NodaTime.Text.ZonedDateTimePattern.WithResolver(NodaTime.TimeZones.ZoneLocalMappingResolver)
  type: Method
  source:
    remote:
      path: 2.2.x/src/NodaTime/Text/ZonedDateTimePattern.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: WithResolver
    path: src/NodaTime/Text/ZonedDateTimePattern.cs
    startLine: 243
  assemblies:
  - NodaTime
  namespace: NodaTime.Text
  summary: "\nCreates a pattern for the same original pattern text as this pattern, but with the specified\nresolver.\n"
  example: []
  syntax:
    content: public ZonedDateTimePattern WithResolver(ZoneLocalMappingResolver resolver)
    parameters:
    - id: resolver
      type: NodaTime.TimeZones.ZoneLocalMappingResolver
      description: The new local mapping resolver to use.
    return:
      type: NodaTime.Text.ZonedDateTimePattern
      description: A new pattern with the given resolver.
    content.vb: Public Function WithResolver(resolver As ZoneLocalMappingResolver) As ZonedDateTimePattern
  overload: NodaTime.Text.ZonedDateTimePattern.WithResolver*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: NodaTime.Text.ZonedDateTimePattern.WithZoneProvider(NodaTime.IDateTimeZoneProvider)
  commentId: M:NodaTime.Text.ZonedDateTimePattern.WithZoneProvider(NodaTime.IDateTimeZoneProvider)
  id: WithZoneProvider(NodaTime.IDateTimeZoneProvider)
  parent: NodaTime.Text.ZonedDateTimePattern
  langs:
  - csharp
  - vb
  name: WithZoneProvider(IDateTimeZoneProvider)
  nameWithType: ZonedDateTimePattern.WithZoneProvider(IDateTimeZoneProvider)
  fullName: NodaTime.Text.ZonedDateTimePattern.WithZoneProvider(NodaTime.IDateTimeZoneProvider)
  type: Method
  source:
    remote:
      path: 2.2.x/src/NodaTime/Text/ZonedDateTimePattern.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: WithZoneProvider
    path: src/NodaTime/Text/ZonedDateTimePattern.cs
    startLine: 256
  assemblies:
  - NodaTime
  namespace: NodaTime.Text
  summary: "\nCreates a pattern for the same original pattern text as this pattern, but with the specified\ntime zone provider.\n"
  remarks: "\nIf <code data-dev-comment-type=\"paramref\" class=\"paramref\">newZoneProvider</code> is null, the resulting pattern can be used for formatting\nbut not parsing.\n"
  example: []
  syntax:
    content: public ZonedDateTimePattern WithZoneProvider(IDateTimeZoneProvider newZoneProvider)
    parameters:
    - id: newZoneProvider
      type: NodaTime.IDateTimeZoneProvider
      description: The new time zone provider to use.
    return:
      type: NodaTime.Text.ZonedDateTimePattern
      description: A new pattern with the given time zone provider.
    content.vb: Public Function WithZoneProvider(newZoneProvider As IDateTimeZoneProvider) As ZonedDateTimePattern
  overload: NodaTime.Text.ZonedDateTimePattern.WithZoneProvider*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: NodaTime.Text.ZonedDateTimePattern.WithTemplateValue(NodaTime.ZonedDateTime)
  commentId: M:NodaTime.Text.ZonedDateTimePattern.WithTemplateValue(NodaTime.ZonedDateTime)
  id: WithTemplateValue(NodaTime.ZonedDateTime)
  parent: NodaTime.Text.ZonedDateTimePattern
  langs:
  - csharp
  - vb
  name: WithTemplateValue(ZonedDateTime)
  nameWithType: ZonedDateTimePattern.WithTemplateValue(ZonedDateTime)
  fullName: NodaTime.Text.ZonedDateTimePattern.WithTemplateValue(NodaTime.ZonedDateTime)
  type: Method
  source:
    remote:
      path: 2.2.x/src/NodaTime/Text/ZonedDateTimePattern.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: WithTemplateValue
    path: src/NodaTime/Text/ZonedDateTimePattern.cs
    startLine: 264
  assemblies:
  - NodaTime
  namespace: NodaTime.Text
  summary: "\nCreates a pattern like this one, but with the specified template value.\n"
  example: []
  syntax:
    content: public ZonedDateTimePattern WithTemplateValue(ZonedDateTime newTemplateValue)
    parameters:
    - id: newTemplateValue
      type: NodaTime.ZonedDateTime
      description: The template value for the new pattern, used to fill in unspecified fields.
    return:
      type: NodaTime.Text.ZonedDateTimePattern
      description: A new pattern with the given template value.
    content.vb: Public Function WithTemplateValue(newTemplateValue As ZonedDateTime) As ZonedDateTimePattern
  overload: NodaTime.Text.ZonedDateTimePattern.WithTemplateValue*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: NodaTime.Text.ZonedDateTimePattern.WithCalendar(NodaTime.CalendarSystem)
  commentId: M:NodaTime.Text.ZonedDateTimePattern.WithCalendar(NodaTime.CalendarSystem)
  id: WithCalendar(NodaTime.CalendarSystem)
  parent: NodaTime.Text.ZonedDateTimePattern
  langs:
  - csharp
  - vb
  name: WithCalendar(CalendarSystem)
  nameWithType: ZonedDateTimePattern.WithCalendar(CalendarSystem)
  fullName: NodaTime.Text.ZonedDateTimePattern.WithCalendar(NodaTime.CalendarSystem)
  type: Method
  source:
    remote:
      path: 2.2.x/src/NodaTime/Text/ZonedDateTimePattern.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: WithCalendar
    path: src/NodaTime/Text/ZonedDateTimePattern.cs
    startLine: 282
  assemblies:
  - NodaTime
  namespace: NodaTime.Text
  summary: "\nCreates a pattern like this one, but with the template value modified to use\nthe specified calendar system.\n"
  remarks: "\n<p>\nCare should be taken in two (relatively rare) scenarios. Although the default template value\nis supported by all Noda Time calendar systems, if a pattern is created with a different\ntemplate value and then this method is called with a calendar system which doesn&apos;t support that\ndate, an exception will be thrown. Additionally, if the pattern only specifies some date fields,\nit&apos;s possible that the new template value will not be suitable for all values.\n</p>\n"
  example: []
  syntax:
    content: public ZonedDateTimePattern WithCalendar(CalendarSystem calendar)
    parameters:
    - id: calendar
      type: NodaTime.CalendarSystem
      description: The calendar system to convert the template value into.
    return:
      type: NodaTime.Text.ZonedDateTimePattern
      description: A new pattern with a template value in the specified calendar system.
    content.vb: Public Function WithCalendar(calendar As CalendarSystem) As ZonedDateTimePattern
  overload: NodaTime.Text.ZonedDateTimePattern.WithCalendar*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: NodaTime.ZonedDateTime
  commentId: T:NodaTime.ZonedDateTime
  parent: NodaTime
  name: ZonedDateTime
  nameWithType: ZonedDateTime
  fullName: NodaTime.ZonedDateTime
- uid: System.Globalization.CultureInfo
  commentId: T:System.Globalization.CultureInfo
  parent: System.Globalization
  isExternal: true
  name: CultureInfo
  nameWithType: CultureInfo
  fullName: System.Globalization.CultureInfo
- uid: NodaTime.Text
  commentId: N:NodaTime.Text
  name: NodaTime.Text
  nameWithType: NodaTime.Text
  fullName: NodaTime.Text
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: NodaTime.Text.IPattern{NodaTime.ZonedDateTime}
  commentId: T:NodaTime.Text.IPattern{NodaTime.ZonedDateTime}
  parent: NodaTime.Text
  definition: NodaTime.Text.IPattern`1
  name: IPattern<ZonedDateTime>
  nameWithType: IPattern<ZonedDateTime>
  fullName: NodaTime.Text.IPattern<NodaTime.ZonedDateTime>
  nameWithType.vb: IPattern(Of ZonedDateTime)
  fullName.vb: NodaTime.Text.IPattern(Of NodaTime.ZonedDateTime)
  name.vb: IPattern(Of ZonedDateTime)
  spec.csharp:
  - uid: NodaTime.Text.IPattern`1
    name: IPattern
    nameWithType: IPattern
    fullName: NodaTime.Text.IPattern
  - name: <
    nameWithType: <
    fullName: <
  - uid: NodaTime.ZonedDateTime
    name: ZonedDateTime
    nameWithType: ZonedDateTime
    fullName: NodaTime.ZonedDateTime
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: NodaTime.Text.IPattern`1
    name: IPattern
    nameWithType: IPattern
    fullName: NodaTime.Text.IPattern
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: NodaTime.ZonedDateTime
    name: ZonedDateTime
    nameWithType: ZonedDateTime
    fullName: NodaTime.ZonedDateTime
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: NodaTime
  commentId: N:NodaTime
  name: NodaTime
  nameWithType: NodaTime
  fullName: NodaTime
- uid: System.Globalization
  commentId: N:System.Globalization
  isExternal: true
  name: System.Globalization
  nameWithType: System.Globalization
  fullName: System.Globalization
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: NodaTime.Text.IPattern`1
  commentId: T:NodaTime.Text.IPattern`1
  name: IPattern<T>
  nameWithType: IPattern<T>
  fullName: NodaTime.Text.IPattern<T>
  nameWithType.vb: IPattern(Of T)
  fullName.vb: NodaTime.Text.IPattern(Of T)
  name.vb: IPattern(Of T)
  spec.csharp:
  - uid: NodaTime.Text.IPattern`1
    name: IPattern
    nameWithType: IPattern
    fullName: NodaTime.Text.IPattern
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: NodaTime.Text.IPattern`1
    name: IPattern
    nameWithType: IPattern
    fullName: NodaTime.Text.IPattern
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: NodaTime.Text.ZonedDateTimePattern.WithZoneProvider(NodaTime.IDateTimeZoneProvider)
  commentId: M:NodaTime.Text.ZonedDateTimePattern.WithZoneProvider(NodaTime.IDateTimeZoneProvider)
  isExternal: true
- uid: NodaTime.Text.ZonedDateTimePattern.GeneralFormatOnlyIso*
  commentId: Overload:NodaTime.Text.ZonedDateTimePattern.GeneralFormatOnlyIso
  name: GeneralFormatOnlyIso
  nameWithType: ZonedDateTimePattern.GeneralFormatOnlyIso
  fullName: NodaTime.Text.ZonedDateTimePattern.GeneralFormatOnlyIso
- uid: NodaTime.Text.ZonedDateTimePattern
  commentId: T:NodaTime.Text.ZonedDateTimePattern
  parent: NodaTime.Text
  name: ZonedDateTimePattern
  nameWithType: ZonedDateTimePattern
  fullName: NodaTime.Text.ZonedDateTimePattern
- uid: NodaTime.Text.ZonedDateTimePattern.ExtendedFormatOnlyIso*
  commentId: Overload:NodaTime.Text.ZonedDateTimePattern.ExtendedFormatOnlyIso
  name: ExtendedFormatOnlyIso
  nameWithType: ZonedDateTimePattern.ExtendedFormatOnlyIso
  fullName: NodaTime.Text.ZonedDateTimePattern.ExtendedFormatOnlyIso
- uid: NodaTime.Text.ZonedDateTimePattern.PatternText*
  commentId: Overload:NodaTime.Text.ZonedDateTimePattern.PatternText
  name: PatternText
  nameWithType: ZonedDateTimePattern.PatternText
  fullName: NodaTime.Text.ZonedDateTimePattern.PatternText
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: NodaTime.Text.ZonedDateTimePattern.TemplateValue*
  commentId: Overload:NodaTime.Text.ZonedDateTimePattern.TemplateValue
  name: TemplateValue
  nameWithType: ZonedDateTimePattern.TemplateValue
  fullName: NodaTime.Text.ZonedDateTimePattern.TemplateValue
- uid: NodaTime.Text.ZonedDateTimePattern.Resolver*
  commentId: Overload:NodaTime.Text.ZonedDateTimePattern.Resolver
  name: Resolver
  nameWithType: ZonedDateTimePattern.Resolver
  fullName: NodaTime.Text.ZonedDateTimePattern.Resolver
- uid: NodaTime.TimeZones.ZoneLocalMappingResolver
  commentId: T:NodaTime.TimeZones.ZoneLocalMappingResolver
  parent: NodaTime.TimeZones
  name: ZoneLocalMappingResolver
  nameWithType: ZoneLocalMappingResolver
  fullName: NodaTime.TimeZones.ZoneLocalMappingResolver
- uid: NodaTime.TimeZones
  commentId: N:NodaTime.TimeZones
  name: NodaTime.TimeZones
  nameWithType: NodaTime.TimeZones
  fullName: NodaTime.TimeZones
- uid: NodaTime.Text.ZonedDateTimePattern.ZoneProvider*
  commentId: Overload:NodaTime.Text.ZonedDateTimePattern.ZoneProvider
  name: ZoneProvider
  nameWithType: ZonedDateTimePattern.ZoneProvider
  fullName: NodaTime.Text.ZonedDateTimePattern.ZoneProvider
- uid: NodaTime.IDateTimeZoneProvider
  commentId: T:NodaTime.IDateTimeZoneProvider
  parent: NodaTime
  name: IDateTimeZoneProvider
  nameWithType: IDateTimeZoneProvider
  fullName: NodaTime.IDateTimeZoneProvider
- uid: NodaTime.Text.ZonedDateTimePattern.Parse*
  commentId: Overload:NodaTime.Text.ZonedDateTimePattern.Parse
  name: Parse
  nameWithType: ZonedDateTimePattern.Parse
  fullName: NodaTime.Text.ZonedDateTimePattern.Parse
- uid: NodaTime.Text.IPattern{NodaTime.ZonedDateTime}.Parse(System.String)
  commentId: M:NodaTime.Text.IPattern{NodaTime.ZonedDateTime}.Parse(System.String)
  parent: NodaTime.Text.IPattern{NodaTime.ZonedDateTime}
  definition: NodaTime.Text.IPattern`1.Parse(System.String)
  name: Parse(String)
  nameWithType: IPattern<ZonedDateTime>.Parse(String)
  fullName: NodaTime.Text.IPattern<NodaTime.ZonedDateTime>.Parse(System.String)
  nameWithType.vb: IPattern(Of ZonedDateTime).Parse(String)
  fullName.vb: NodaTime.Text.IPattern(Of NodaTime.ZonedDateTime).Parse(System.String)
  spec.csharp:
  - uid: NodaTime.Text.IPattern`1.Parse(System.String)
    name: Parse
    nameWithType: IPattern<ZonedDateTime>.Parse
    fullName: NodaTime.Text.IPattern<NodaTime.ZonedDateTime>.Parse
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NodaTime.Text.IPattern`1.Parse(System.String)
    name: Parse
    nameWithType: IPattern(Of ZonedDateTime).Parse
    fullName: NodaTime.Text.IPattern(Of NodaTime.ZonedDateTime).Parse
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: NodaTime.Text.ParseResult{NodaTime.ZonedDateTime}
  commentId: T:NodaTime.Text.ParseResult{NodaTime.ZonedDateTime}
  parent: NodaTime.Text
  definition: NodaTime.Text.ParseResult`1
  name: ParseResult<ZonedDateTime>
  nameWithType: ParseResult<ZonedDateTime>
  fullName: NodaTime.Text.ParseResult<NodaTime.ZonedDateTime>
  nameWithType.vb: ParseResult(Of ZonedDateTime)
  fullName.vb: NodaTime.Text.ParseResult(Of NodaTime.ZonedDateTime)
  name.vb: ParseResult(Of ZonedDateTime)
  spec.csharp:
  - uid: NodaTime.Text.ParseResult`1
    name: ParseResult
    nameWithType: ParseResult
    fullName: NodaTime.Text.ParseResult
  - name: <
    nameWithType: <
    fullName: <
  - uid: NodaTime.ZonedDateTime
    name: ZonedDateTime
    nameWithType: ZonedDateTime
    fullName: NodaTime.ZonedDateTime
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: NodaTime.Text.ParseResult`1
    name: ParseResult
    nameWithType: ParseResult
    fullName: NodaTime.Text.ParseResult
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: NodaTime.ZonedDateTime
    name: ZonedDateTime
    nameWithType: ZonedDateTime
    fullName: NodaTime.ZonedDateTime
  - name: )
    nameWithType: )
    fullName: )
- uid: NodaTime.Text.IPattern`1.Parse(System.String)
  commentId: M:NodaTime.Text.IPattern`1.Parse(System.String)
  isExternal: true
  name: Parse(String)
  nameWithType: IPattern<T>.Parse(String)
  fullName: NodaTime.Text.IPattern<T>.Parse(System.String)
  nameWithType.vb: IPattern(Of T).Parse(String)
  fullName.vb: NodaTime.Text.IPattern(Of T).Parse(System.String)
  spec.csharp:
  - uid: NodaTime.Text.IPattern`1.Parse(System.String)
    name: Parse
    nameWithType: IPattern<T>.Parse
    fullName: NodaTime.Text.IPattern<T>.Parse
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NodaTime.Text.IPattern`1.Parse(System.String)
    name: Parse
    nameWithType: IPattern(Of T).Parse
    fullName: NodaTime.Text.IPattern(Of T).Parse
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: NodaTime.Text.ParseResult`1
  commentId: T:NodaTime.Text.ParseResult`1
  parent: NodaTime.Text
  name: ParseResult<T>
  nameWithType: ParseResult<T>
  fullName: NodaTime.Text.ParseResult<T>
  nameWithType.vb: ParseResult(Of T)
  fullName.vb: NodaTime.Text.ParseResult(Of T)
  name.vb: ParseResult(Of T)
  spec.csharp:
  - uid: NodaTime.Text.ParseResult`1
    name: ParseResult
    nameWithType: ParseResult
    fullName: NodaTime.Text.ParseResult
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: NodaTime.Text.ParseResult`1
    name: ParseResult
    nameWithType: ParseResult
    fullName: NodaTime.Text.ParseResult
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: NodaTime.Text.ZonedDateTimePattern.Format*
  commentId: Overload:NodaTime.Text.ZonedDateTimePattern.Format
  name: Format
  nameWithType: ZonedDateTimePattern.Format
  fullName: NodaTime.Text.ZonedDateTimePattern.Format
- uid: NodaTime.Text.IPattern{NodaTime.ZonedDateTime}.Format(NodaTime.ZonedDateTime)
  commentId: M:NodaTime.Text.IPattern{NodaTime.ZonedDateTime}.Format(NodaTime.ZonedDateTime)
  parent: NodaTime.Text.IPattern{NodaTime.ZonedDateTime}
  definition: NodaTime.Text.IPattern`1.Format(`0)
  name: Format(ZonedDateTime)
  nameWithType: IPattern<ZonedDateTime>.Format(ZonedDateTime)
  fullName: NodaTime.Text.IPattern<NodaTime.ZonedDateTime>.Format(NodaTime.ZonedDateTime)
  nameWithType.vb: IPattern(Of ZonedDateTime).Format(ZonedDateTime)
  fullName.vb: NodaTime.Text.IPattern(Of NodaTime.ZonedDateTime).Format(NodaTime.ZonedDateTime)
  spec.csharp:
  - uid: NodaTime.Text.IPattern`1.Format(`0)
    name: Format
    nameWithType: IPattern<ZonedDateTime>.Format
    fullName: NodaTime.Text.IPattern<NodaTime.ZonedDateTime>.Format
  - name: (
    nameWithType: (
    fullName: (
  - uid: NodaTime.ZonedDateTime
    name: ZonedDateTime
    nameWithType: ZonedDateTime
    fullName: NodaTime.ZonedDateTime
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NodaTime.Text.IPattern`1.Format(`0)
    name: Format
    nameWithType: IPattern(Of ZonedDateTime).Format
    fullName: NodaTime.Text.IPattern(Of NodaTime.ZonedDateTime).Format
  - name: (
    nameWithType: (
    fullName: (
  - uid: NodaTime.ZonedDateTime
    name: ZonedDateTime
    nameWithType: ZonedDateTime
    fullName: NodaTime.ZonedDateTime
  - name: )
    nameWithType: )
    fullName: )
- uid: NodaTime.Text.IPattern`1.Format(`0)
  commentId: M:NodaTime.Text.IPattern`1.Format(`0)
  name: Format(T)
  nameWithType: IPattern<T>.Format(T)
  fullName: NodaTime.Text.IPattern<T>.Format(T)
  nameWithType.vb: IPattern(Of T).Format(T)
  fullName.vb: NodaTime.Text.IPattern(Of T).Format(T)
  spec.csharp:
  - uid: NodaTime.Text.IPattern`1.Format(`0)
    name: Format
    nameWithType: IPattern<T>.Format
    fullName: NodaTime.Text.IPattern<T>.Format
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NodaTime.Text.IPattern`1.Format(`0)
    name: Format
    nameWithType: IPattern(Of T).Format
    fullName: NodaTime.Text.IPattern(Of T).Format
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Text.StringBuilder
  commentId: T:System.Text.StringBuilder
  parent: System.Text
  isExternal: true
  name: StringBuilder
  nameWithType: StringBuilder
  fullName: System.Text.StringBuilder
- uid: NodaTime.Text.ZonedDateTimePattern.AppendFormat*
  commentId: Overload:NodaTime.Text.ZonedDateTimePattern.AppendFormat
  name: AppendFormat
  nameWithType: ZonedDateTimePattern.AppendFormat
  fullName: NodaTime.Text.ZonedDateTimePattern.AppendFormat
- uid: NodaTime.Text.IPattern{NodaTime.ZonedDateTime}.AppendFormat(NodaTime.ZonedDateTime,System.Text.StringBuilder)
  commentId: M:NodaTime.Text.IPattern{NodaTime.ZonedDateTime}.AppendFormat(NodaTime.ZonedDateTime,System.Text.StringBuilder)
  parent: NodaTime.Text.IPattern{NodaTime.ZonedDateTime}
  definition: NodaTime.Text.IPattern`1.AppendFormat(`0,System.Text.StringBuilder)
  name: AppendFormat(ZonedDateTime, StringBuilder)
  nameWithType: IPattern<ZonedDateTime>.AppendFormat(ZonedDateTime, StringBuilder)
  fullName: NodaTime.Text.IPattern<NodaTime.ZonedDateTime>.AppendFormat(NodaTime.ZonedDateTime, System.Text.StringBuilder)
  nameWithType.vb: IPattern(Of ZonedDateTime).AppendFormat(ZonedDateTime, StringBuilder)
  fullName.vb: NodaTime.Text.IPattern(Of NodaTime.ZonedDateTime).AppendFormat(NodaTime.ZonedDateTime, System.Text.StringBuilder)
  spec.csharp:
  - uid: NodaTime.Text.IPattern`1.AppendFormat(`0,System.Text.StringBuilder)
    name: AppendFormat
    nameWithType: IPattern<ZonedDateTime>.AppendFormat
    fullName: NodaTime.Text.IPattern<NodaTime.ZonedDateTime>.AppendFormat
  - name: (
    nameWithType: (
    fullName: (
  - uid: NodaTime.ZonedDateTime
    name: ZonedDateTime
    nameWithType: ZonedDateTime
    fullName: NodaTime.ZonedDateTime
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Text.StringBuilder
    name: StringBuilder
    nameWithType: StringBuilder
    fullName: System.Text.StringBuilder
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NodaTime.Text.IPattern`1.AppendFormat(`0,System.Text.StringBuilder)
    name: AppendFormat
    nameWithType: IPattern(Of ZonedDateTime).AppendFormat
    fullName: NodaTime.Text.IPattern(Of NodaTime.ZonedDateTime).AppendFormat
  - name: (
    nameWithType: (
    fullName: (
  - uid: NodaTime.ZonedDateTime
    name: ZonedDateTime
    nameWithType: ZonedDateTime
    fullName: NodaTime.ZonedDateTime
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Text.StringBuilder
    name: StringBuilder
    nameWithType: StringBuilder
    fullName: System.Text.StringBuilder
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Text
  commentId: N:System.Text
  isExternal: true
  name: System.Text
  nameWithType: System.Text
  fullName: System.Text
- uid: NodaTime.Text.IPattern`1.AppendFormat(`0,System.Text.StringBuilder)
  commentId: M:NodaTime.Text.IPattern`1.AppendFormat(`0,System.Text.StringBuilder)
  isExternal: true
  name: AppendFormat(T, StringBuilder)
  nameWithType: IPattern<T>.AppendFormat(T, StringBuilder)
  fullName: NodaTime.Text.IPattern<T>.AppendFormat(T, System.Text.StringBuilder)
  nameWithType.vb: IPattern(Of T).AppendFormat(T, StringBuilder)
  fullName.vb: NodaTime.Text.IPattern(Of T).AppendFormat(T, System.Text.StringBuilder)
  spec.csharp:
  - uid: NodaTime.Text.IPattern`1.AppendFormat(`0,System.Text.StringBuilder)
    name: AppendFormat
    nameWithType: IPattern<T>.AppendFormat
    fullName: NodaTime.Text.IPattern<T>.AppendFormat
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Text.StringBuilder
    name: StringBuilder
    nameWithType: StringBuilder
    fullName: System.Text.StringBuilder
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NodaTime.Text.IPattern`1.AppendFormat(`0,System.Text.StringBuilder)
    name: AppendFormat
    nameWithType: IPattern(Of T).AppendFormat
    fullName: NodaTime.Text.IPattern(Of T).AppendFormat
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Text.StringBuilder
    name: StringBuilder
    nameWithType: StringBuilder
    fullName: System.Text.StringBuilder
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: NodaTime.Text.InvalidPatternException
  commentId: T:NodaTime.Text.InvalidPatternException
  name: InvalidPatternException
  nameWithType: InvalidPatternException
  fullName: NodaTime.Text.InvalidPatternException
- uid: NodaTime.Text.ZonedDateTimePattern.Create*
  commentId: Overload:NodaTime.Text.ZonedDateTimePattern.Create
  name: Create
  nameWithType: ZonedDateTimePattern.Create
  fullName: NodaTime.Text.ZonedDateTimePattern.Create
- uid: NodaTime.Text.ZonedDateTimePattern.CreateWithInvariantCulture*
  commentId: Overload:NodaTime.Text.ZonedDateTimePattern.CreateWithInvariantCulture
  name: CreateWithInvariantCulture
  nameWithType: ZonedDateTimePattern.CreateWithInvariantCulture
  fullName: NodaTime.Text.ZonedDateTimePattern.CreateWithInvariantCulture
- uid: NodaTime.Text.ZonedDateTimePattern.CreateWithCurrentCulture*
  commentId: Overload:NodaTime.Text.ZonedDateTimePattern.CreateWithCurrentCulture
  name: CreateWithCurrentCulture
  nameWithType: ZonedDateTimePattern.CreateWithCurrentCulture
  fullName: NodaTime.Text.ZonedDateTimePattern.CreateWithCurrentCulture
- uid: NodaTime.Text.ZonedDateTimePattern.WithPatternText*
  commentId: Overload:NodaTime.Text.ZonedDateTimePattern.WithPatternText
  name: WithPatternText
  nameWithType: ZonedDateTimePattern.WithPatternText
  fullName: NodaTime.Text.ZonedDateTimePattern.WithPatternText
- uid: NodaTime.Text.ZonedDateTimePattern.WithCulture*
  commentId: Overload:NodaTime.Text.ZonedDateTimePattern.WithCulture
  name: WithCulture
  nameWithType: ZonedDateTimePattern.WithCulture
  fullName: NodaTime.Text.ZonedDateTimePattern.WithCulture
- uid: NodaTime.Text.ZonedDateTimePattern.WithResolver*
  commentId: Overload:NodaTime.Text.ZonedDateTimePattern.WithResolver
  name: WithResolver
  nameWithType: ZonedDateTimePattern.WithResolver
  fullName: NodaTime.Text.ZonedDateTimePattern.WithResolver
- uid: NodaTime.Text.ZonedDateTimePattern.WithZoneProvider*
  commentId: Overload:NodaTime.Text.ZonedDateTimePattern.WithZoneProvider
  name: WithZoneProvider
  nameWithType: ZonedDateTimePattern.WithZoneProvider
  fullName: NodaTime.Text.ZonedDateTimePattern.WithZoneProvider
- uid: NodaTime.Text.ZonedDateTimePattern.WithTemplateValue*
  commentId: Overload:NodaTime.Text.ZonedDateTimePattern.WithTemplateValue
  name: WithTemplateValue
  nameWithType: ZonedDateTimePattern.WithTemplateValue
  fullName: NodaTime.Text.ZonedDateTimePattern.WithTemplateValue
- uid: NodaTime.Text.ZonedDateTimePattern.WithCalendar*
  commentId: Overload:NodaTime.Text.ZonedDateTimePattern.WithCalendar
  name: WithCalendar
  nameWithType: ZonedDateTimePattern.WithCalendar
  fullName: NodaTime.Text.ZonedDateTimePattern.WithCalendar
- uid: NodaTime.CalendarSystem
  commentId: T:NodaTime.CalendarSystem
  parent: NodaTime
  name: CalendarSystem
  nameWithType: CalendarSystem
  fullName: NodaTime.CalendarSystem
shouldSkipMarkup: true
