### YamlMime:ManagedReference
items:
- uid: NodaTime.Duration
  commentId: T:NodaTime.Duration
  id: Duration
  parent: NodaTime
  children:
  - NodaTime.Duration.Add(NodaTime.Duration,NodaTime.Duration)
  - NodaTime.Duration.BclCompatibleTicks
  - NodaTime.Duration.CompareTo(NodaTime.Duration)
  - NodaTime.Duration.Days
  - NodaTime.Duration.Divide(NodaTime.Duration,NodaTime.Duration)
  - NodaTime.Duration.Divide(NodaTime.Duration,System.Double)
  - NodaTime.Duration.Divide(NodaTime.Duration,System.Int64)
  - NodaTime.Duration.Epsilon
  - NodaTime.Duration.Equals(NodaTime.Duration)
  - NodaTime.Duration.Equals(System.Object)
  - NodaTime.Duration.FromDays(System.Double)
  - NodaTime.Duration.FromDays(System.Int32)
  - NodaTime.Duration.FromHours(System.Double)
  - NodaTime.Duration.FromHours(System.Int32)
  - NodaTime.Duration.FromMilliseconds(System.Double)
  - NodaTime.Duration.FromMilliseconds(System.Int64)
  - NodaTime.Duration.FromMinutes(System.Double)
  - NodaTime.Duration.FromMinutes(System.Int64)
  - NodaTime.Duration.FromNanoseconds(System.Double)
  - NodaTime.Duration.FromNanoseconds(System.Int64)
  - NodaTime.Duration.FromNanoseconds(System.Numerics.BigInteger)
  - NodaTime.Duration.FromSeconds(System.Double)
  - NodaTime.Duration.FromSeconds(System.Int64)
  - NodaTime.Duration.FromTicks(System.Double)
  - NodaTime.Duration.FromTicks(System.Int64)
  - NodaTime.Duration.FromTimeSpan(System.TimeSpan)
  - NodaTime.Duration.GetHashCode
  - NodaTime.Duration.Hours
  - NodaTime.Duration.MaxValue
  - NodaTime.Duration.Milliseconds
  - NodaTime.Duration.Minus(NodaTime.Duration)
  - NodaTime.Duration.Minutes
  - NodaTime.Duration.MinValue
  - NodaTime.Duration.Multiply(NodaTime.Duration,System.Double)
  - NodaTime.Duration.Multiply(NodaTime.Duration,System.Int64)
  - NodaTime.Duration.Multiply(System.Int64,NodaTime.Duration)
  - NodaTime.Duration.NanosecondOfDay
  - NodaTime.Duration.Negate(NodaTime.Duration)
  - NodaTime.Duration.op_Addition(NodaTime.Duration,NodaTime.Duration)
  - NodaTime.Duration.op_Division(NodaTime.Duration,NodaTime.Duration)
  - NodaTime.Duration.op_Division(NodaTime.Duration,System.Double)
  - NodaTime.Duration.op_Division(NodaTime.Duration,System.Int64)
  - NodaTime.Duration.op_Equality(NodaTime.Duration,NodaTime.Duration)
  - NodaTime.Duration.op_GreaterThan(NodaTime.Duration,NodaTime.Duration)
  - NodaTime.Duration.op_GreaterThanOrEqual(NodaTime.Duration,NodaTime.Duration)
  - NodaTime.Duration.op_Inequality(NodaTime.Duration,NodaTime.Duration)
  - NodaTime.Duration.op_LessThan(NodaTime.Duration,NodaTime.Duration)
  - NodaTime.Duration.op_LessThanOrEqual(NodaTime.Duration,NodaTime.Duration)
  - NodaTime.Duration.op_Multiply(NodaTime.Duration,System.Double)
  - NodaTime.Duration.op_Multiply(NodaTime.Duration,System.Int64)
  - NodaTime.Duration.op_Multiply(System.Int64,NodaTime.Duration)
  - NodaTime.Duration.op_Subtraction(NodaTime.Duration,NodaTime.Duration)
  - NodaTime.Duration.op_UnaryNegation(NodaTime.Duration)
  - NodaTime.Duration.Plus(NodaTime.Duration)
  - NodaTime.Duration.Seconds
  - NodaTime.Duration.SubsecondNanoseconds
  - NodaTime.Duration.SubsecondTicks
  - NodaTime.Duration.Subtract(NodaTime.Duration,NodaTime.Duration)
  - NodaTime.Duration.System#IComparable#CompareTo(System.Object)
  - NodaTime.Duration.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  - NodaTime.Duration.System#Xml#Serialization#IXmlSerializable#GetSchema
  - NodaTime.Duration.System#Xml#Serialization#IXmlSerializable#ReadXml(System.Xml.XmlReader)
  - NodaTime.Duration.System#Xml#Serialization#IXmlSerializable#WriteXml(System.Xml.XmlWriter)
  - NodaTime.Duration.ToBigIntegerNanoseconds
  - NodaTime.Duration.ToInt64Nanoseconds
  - NodaTime.Duration.ToString
  - NodaTime.Duration.ToString(System.String,System.IFormatProvider)
  - NodaTime.Duration.TotalDays
  - NodaTime.Duration.TotalHours
  - NodaTime.Duration.TotalMilliseconds
  - NodaTime.Duration.TotalMinutes
  - NodaTime.Duration.TotalNanoseconds
  - NodaTime.Duration.TotalSeconds
  - NodaTime.Duration.TotalTicks
  - NodaTime.Duration.ToTimeSpan
  - NodaTime.Duration.Zero
  langs:
  - csharp
  - vb
  name: Duration
  nameWithType: Duration
  fullName: NodaTime.Duration
  type: Struct
  source:
    remote:
      path: 2.0.x/src/NodaTime/Duration.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: Duration
    path: src/NodaTime/Duration.cs
    startLine: 62
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nRepresents a fixed (and calendar-independent) length of time.\n"
  remarks: "\n<p>\nA duration is a length of time defined by an integral number of nanoseconds.\nAlthough durations are usually used with a positive number of nanoseconds, negative durations are valid, and may occur\nnaturally when e.g. subtracting a later <xref href=\"NodaTime.Instant\" data-throw-if-not-resolved=\"false\"></xref> from an earlier one.\n</p>\n<p>\nA duration represents a fixed length of elapsed time along the time line that occupies the same amount of\ntime regardless of when it is applied. In contrast, <xref href=\"NodaTime.Period\" data-throw-if-not-resolved=\"false\"></xref> represents a period of time in\ncalendrical terms (years, months, days, and so on) that may vary in elapsed time when applied.\n</p>\n<p>\nIn general, use <xref href=\"NodaTime.Duration\" data-throw-if-not-resolved=\"false\"></xref> to represent durations applied to global types like <xref href=\"NodaTime.Instant\" data-throw-if-not-resolved=\"false\"></xref>\nand <xref href=\"NodaTime.ZonedDateTime\" data-throw-if-not-resolved=\"false\"></xref>; use <code>Period</code> to represent a period applied to local types like\n<xref href=\"NodaTime.LocalDateTime\" data-throw-if-not-resolved=\"false\"></xref>.\n</p>\n<p>\nThe range of valid values of a <code>Duration</code> is greater than the span of time supported by Noda Time - so for\nexample, subtracting one <xref href=\"NodaTime.Instant\" data-throw-if-not-resolved=\"false\"></xref> from another will always give a valid <code>Duration</code>. The range\nis also greater than that of <xref href=\"System.TimeSpan\" data-throw-if-not-resolved=\"false\"></xref> (<xref href=\"System.Int64.MinValue\" data-throw-if-not-resolved=\"false\"></xref> ticks to <xref href=\"System.Int64.MaxValue\" data-throw-if-not-resolved=\"false\"></xref> ticks).\nSee the user guide for more details of the exact range, but it is not expected that this will ever be exceeded in normal code.\n</p>\n<p>\nVarious operations accept or return a <xref href=\"System.Double\" data-throw-if-not-resolved=\"false\"></xref>, in-keeping with durations often being natural lengths\nof time which are imprecisely measured anyway. The implementation of these operations should never result in a not-a-number\nor infinite value, nor do any operations accept not-a-number or infinite values. Additionally, operations involving\n<code>Double</code> have initially been implemented fairly na√Øvely; it&apos;s possible that future releases will improve the accuracy\nor performance (or both) of various operations.\n</p>\n"
  example: []
  syntax:
    content: >-
      [Serializable]

      public struct Duration : IEquatable<Duration>, IComparable<Duration>, IComparable, IXmlSerializable, IFormattable, ISerializable
    content.vb: >-
      <Serializable>

      Public Structure Duration
          Implements IEquatable(Of Duration), IComparable(Of Duration), IComparable, IXmlSerializable, IFormattable, ISerializable
  implements:
  - System.IEquatable{NodaTime.Duration}
  - System.IComparable{NodaTime.Duration}
  - System.IComparable
  - System.Xml.Serialization.IXmlSerializable
  - System.IFormattable
  - System.Runtime.Serialization.ISerializable
  inheritedMembers:
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetType
  attributes:
  - type: System.SerializableAttribute
    ctor: System.SerializableAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - struct
  modifiers.vb:
  - Public
  - Structure
- uid: NodaTime.Duration.Zero
  commentId: P:NodaTime.Duration.Zero
  id: Zero
  parent: NodaTime.Duration
  langs:
  - csharp
  - vb
  name: Zero
  nameWithType: Duration.Zero
  fullName: NodaTime.Duration.Zero
  type: Property
  source:
    remote:
      path: 2.0.x/src/NodaTime/Duration.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: Zero
    path: src/NodaTime/Duration.cs
    startLine: 93
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nGets a zero <xref href=\"NodaTime.Duration\" data-throw-if-not-resolved=\"false\"></xref> of 0 nanoseconds.\n"
  example: []
  syntax:
    content: public static Duration Zero { get; }
    parameters: []
    return:
      type: NodaTime.Duration
      description: The zero <xref href="NodaTime.Duration" data-throw-if-not-resolved="false"></xref> value.
    content.vb: Public Shared ReadOnly Property Zero As Duration
  overload: NodaTime.Duration.Zero*
  modifiers.csharp:
  - public
  - static
  - get
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: NodaTime.Duration.Epsilon
  commentId: P:NodaTime.Duration.Epsilon
  id: Epsilon
  parent: NodaTime.Duration
  langs:
  - csharp
  - vb
  name: Epsilon
  nameWithType: Duration.Epsilon
  fullName: NodaTime.Duration.Epsilon
  type: Property
  source:
    remote:
      path: 2.0.x/src/NodaTime/Duration.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: Epsilon
    path: src/NodaTime/Duration.cs
    startLine: 99
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nGets a <xref href=\"NodaTime.Duration\" data-throw-if-not-resolved=\"false\"></xref> value equal to 1 nanosecond; the smallest amount by which an instant can vary.\n"
  example: []
  syntax:
    content: public static Duration Epsilon { get; }
    parameters: []
    return:
      type: NodaTime.Duration
      description: A duration representing 1 nanosecond.
    content.vb: Public Shared ReadOnly Property Epsilon As Duration
  overload: NodaTime.Duration.Epsilon*
  modifiers.csharp:
  - public
  - static
  - get
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: NodaTime.Duration.MaxValue
  commentId: P:NodaTime.Duration.MaxValue
  id: MaxValue
  parent: NodaTime.Duration
  langs:
  - csharp
  - vb
  name: MaxValue
  nameWithType: Duration.MaxValue
  fullName: NodaTime.Duration.MaxValue
  type: Property
  source:
    remote:
      path: 2.0.x/src/NodaTime/Duration.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: MaxValue
    path: src/NodaTime/Duration.cs
    startLine: 104
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nGets the maximum value supported by <xref href=\"NodaTime.Duration\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public static Duration MaxValue { get; }
    parameters: []
    return:
      type: NodaTime.Duration
    content.vb: Public Shared ReadOnly Property MaxValue As Duration
  overload: NodaTime.Duration.MaxValue*
  modifiers.csharp:
  - public
  - static
  - get
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: NodaTime.Duration.MinValue
  commentId: P:NodaTime.Duration.MinValue
  id: MinValue
  parent: NodaTime.Duration
  langs:
  - csharp
  - vb
  name: MinValue
  nameWithType: Duration.MinValue
  fullName: NodaTime.Duration.MinValue
  type: Property
  source:
    remote:
      path: 2.0.x/src/NodaTime/Duration.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: MinValue
    path: src/NodaTime/Duration.cs
    startLine: 109
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nGets the minimum (largest negative) value supported by <xref href=\"NodaTime.Duration\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public static Duration MinValue { get; }
    parameters: []
    return:
      type: NodaTime.Duration
    content.vb: Public Shared ReadOnly Property MinValue As Duration
  overload: NodaTime.Duration.MinValue*
  modifiers.csharp:
  - public
  - static
  - get
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: NodaTime.Duration.Days
  commentId: P:NodaTime.Duration.Days
  id: Days
  parent: NodaTime.Duration
  langs:
  - csharp
  - vb
  name: Days
  nameWithType: Duration.Days
  fullName: NodaTime.Duration.Days
  type: Property
  source:
    remote:
      path: 2.0.x/src/NodaTime/Duration.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: Days
    path: src/NodaTime/Duration.cs
    startLine: 206
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nGets the whole number of standard (24 hour) days within this duration. This is truncated towards zero;\nfor example, &quot;-1.75 days&quot; and &quot;1.75 days&quot; would have results of -1 and 1 respectively.\n"
  example: []
  syntax:
    content: public int Days { get; }
    parameters: []
    return:
      type: System.Int32
      description: The whole number of days in the duration
    content.vb: Public ReadOnly Property Days As Integer
  overload: NodaTime.Duration.Days*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: NodaTime.Duration.NanosecondOfDay
  commentId: P:NodaTime.Duration.NanosecondOfDay
  id: NanosecondOfDay
  parent: NodaTime.Duration
  langs:
  - csharp
  - vb
  name: NanosecondOfDay
  nameWithType: Duration.NanosecondOfDay
  fullName: NodaTime.Duration.NanosecondOfDay
  type: Property
  source:
    remote:
      path: 2.0.x/src/NodaTime/Duration.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: NanosecondOfDay
    path: src/NodaTime/Duration.cs
    startLine: 213
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nGets the number of nanoseconds within the day of this duration. For negative durations, this\nwill be negative (or zero).\n"
  example: []
  syntax:
    content: public long NanosecondOfDay { get; }
    parameters: []
    return:
      type: System.Int64
      description: The number of nanoseconds within the day of this duration.
    content.vb: Public ReadOnly Property NanosecondOfDay As Long
  overload: NodaTime.Duration.NanosecondOfDay*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: NodaTime.Duration.Hours
  commentId: P:NodaTime.Duration.Hours
  id: Hours
  parent: NodaTime.Duration
  langs:
  - csharp
  - vb
  name: Hours
  nameWithType: Duration.Hours
  fullName: NodaTime.Duration.Hours
  type: Property
  source:
    remote:
      path: 2.0.x/src/NodaTime/Duration.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: Hours
    path: src/NodaTime/Duration.cs
    startLine: 221
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nThe hour component of this duration, in the range [-23, 23], truncated towards zero.\n"
  example: []
  syntax:
    content: public int Hours { get; }
    parameters: []
    return:
      type: System.Int32
      description: The hour component of the duration, within the day.
    content.vb: Public ReadOnly Property Hours As Integer
  overload: NodaTime.Duration.Hours*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: NodaTime.Duration.Minutes
  commentId: P:NodaTime.Duration.Minutes
  id: Minutes
  parent: NodaTime.Duration
  langs:
  - csharp
  - vb
  name: Minutes
  nameWithType: Duration.Minutes
  fullName: NodaTime.Duration.Minutes
  type: Property
  source:
    remote:
      path: 2.0.x/src/NodaTime/Duration.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: Minutes
    path: src/NodaTime/Duration.cs
    startLine: 227
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nThe minute component of this duration, in the range [-59, 59], truncated towards zero.\n"
  example: []
  syntax:
    content: public int Minutes { get; }
    parameters: []
    return:
      type: System.Int32
      description: The minute component of the duration, within the hour.
    content.vb: Public ReadOnly Property Minutes As Integer
  overload: NodaTime.Duration.Minutes*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: NodaTime.Duration.Seconds
  commentId: P:NodaTime.Duration.Seconds
  id: Seconds
  parent: NodaTime.Duration
  langs:
  - csharp
  - vb
  name: Seconds
  nameWithType: Duration.Seconds
  fullName: NodaTime.Duration.Seconds
  type: Property
  source:
    remote:
      path: 2.0.x/src/NodaTime/Duration.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: Seconds
    path: src/NodaTime/Duration.cs
    startLine: 233
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nGets the second component of this duration, in the range [-59, 59], truncated towards zero.\n"
  example: []
  syntax:
    content: public int Seconds { get; }
    parameters: []
    return:
      type: System.Int32
      description: The second component of the duration, within the minute.
    content.vb: Public ReadOnly Property Seconds As Integer
  overload: NodaTime.Duration.Seconds*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: NodaTime.Duration.Milliseconds
  commentId: P:NodaTime.Duration.Milliseconds
  id: Milliseconds
  parent: NodaTime.Duration
  langs:
  - csharp
  - vb
  name: Milliseconds
  nameWithType: Duration.Milliseconds
  fullName: NodaTime.Duration.Milliseconds
  type: Property
  source:
    remote:
      path: 2.0.x/src/NodaTime/Duration.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: Milliseconds
    path: src/NodaTime/Duration.cs
    startLine: 239
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nGets the subsecond component of this duration, expressed in milliseconds, in the range [-999, 999] and truncated towards zero.\n"
  example: []
  syntax:
    content: public int Milliseconds { get; }
    parameters: []
    return:
      type: System.Int32
      description: The subsecond component of the duration, in milliseconds.
    content.vb: Public ReadOnly Property Milliseconds As Integer
  overload: NodaTime.Duration.Milliseconds*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: NodaTime.Duration.SubsecondTicks
  commentId: P:NodaTime.Duration.SubsecondTicks
  id: SubsecondTicks
  parent: NodaTime.Duration
  langs:
  - csharp
  - vb
  name: SubsecondTicks
  nameWithType: Duration.SubsecondTicks
  fullName: NodaTime.Duration.SubsecondTicks
  type: Property
  source:
    remote:
      path: 2.0.x/src/NodaTime/Duration.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: SubsecondTicks
    path: src/NodaTime/Duration.cs
    startLine: 245
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nGets the subsecond component of this duration, expressed in ticks, in the range [-9999999, 9999999] and truncated towards zero.\n"
  example: []
  syntax:
    content: public int SubsecondTicks { get; }
    parameters: []
    return:
      type: System.Int32
      description: The subsecond component of the duration, in ticks.
    content.vb: Public ReadOnly Property SubsecondTicks As Integer
  overload: NodaTime.Duration.SubsecondTicks*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: NodaTime.Duration.SubsecondNanoseconds
  commentId: P:NodaTime.Duration.SubsecondNanoseconds
  id: SubsecondNanoseconds
  parent: NodaTime.Duration
  langs:
  - csharp
  - vb
  name: SubsecondNanoseconds
  nameWithType: Duration.SubsecondNanoseconds
  fullName: NodaTime.Duration.SubsecondNanoseconds
  type: Property
  source:
    remote:
      path: 2.0.x/src/NodaTime/Duration.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: SubsecondNanoseconds
    path: src/NodaTime/Duration.cs
    startLine: 251
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nGets the subsecond component of this duration, expressed in nanoseconds, in the range [-999999999, 999999999].\n"
  example: []
  syntax:
    content: public int SubsecondNanoseconds { get; }
    parameters: []
    return:
      type: System.Int32
      description: The subsecond component of the duration, in nanoseconds.
    content.vb: Public ReadOnly Property SubsecondNanoseconds As Integer
  overload: NodaTime.Duration.SubsecondNanoseconds*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: NodaTime.Duration.BclCompatibleTicks
  commentId: P:NodaTime.Duration.BclCompatibleTicks
  id: BclCompatibleTicks
  parent: NodaTime.Duration
  langs:
  - csharp
  - vb
  name: BclCompatibleTicks
  nameWithType: Duration.BclCompatibleTicks
  fullName: NodaTime.Duration.BclCompatibleTicks
  type: Property
  source:
    remote:
      path: 2.0.x/src/NodaTime/Duration.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: BclCompatibleTicks
    path: src/NodaTime/Duration.cs
    startLine: 271
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nGets the total number of ticks in the duration as a 64-bit integer, truncating towards zero where necessary.\n"
  remarks: "\n<p>\nWithin the constraints specified below, this property is intended to be equivalent to\n<xref href=\"System.TimeSpan.Ticks\" data-throw-if-not-resolved=\"false\"></xref>.\n</p>\n<p>\nIf the number of nanoseconds in a duration is not a whole number of ticks, it is truncated towards zero.\nFor example, durations in the range [-99ns, 99ns] would all count as 0 ticks.\n</p>\n<p>Although this method can overflow, it will only do so in very exceptional cases, with durations\nwith a magnitude of more than 29000 Gregorian years or so.</p>\n"
  example: []
  syntax:
    content: public long BclCompatibleTicks { get; }
    parameters: []
    return:
      type: System.Int64
      description: The total number of ticks in the duration.
    content.vb: Public ReadOnly Property BclCompatibleTicks As Long
  overload: NodaTime.Duration.BclCompatibleTicks*
  exceptions:
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: The number of ticks cannot be represented a signed 64-bit integer.
  seealso:
  - linkId: NodaTime.Duration.TotalTicks
    commentId: P:NodaTime.Duration.TotalTicks
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: NodaTime.Duration.TotalDays
  commentId: P:NodaTime.Duration.TotalDays
  id: TotalDays
  parent: NodaTime.Duration
  langs:
  - csharp
  - vb
  name: TotalDays
  nameWithType: Duration.TotalDays
  fullName: NodaTime.Duration.TotalDays
  type: Property
  source:
    remote:
      path: 2.0.x/src/NodaTime/Duration.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: TotalDays
    path: src/NodaTime/Duration.cs
    startLine: 294
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nGets the total number of days in this duration, as a <xref href=\"System.Double\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  remarks: >
    This property is the <code>Duration</code> equivalent of <xref href="System.TimeSpan.TotalDays" data-throw-if-not-resolved="false"></xref>.

    It represents the complete duration in days, rather than only the whole number of

    days. For example, for a duration of 36 hours, this property would return 1.5.
  example: []
  syntax:
    content: public double TotalDays { get; }
    parameters: []
    return:
      type: System.Double
      description: The total number of days in this duration.
    content.vb: Public ReadOnly Property TotalDays As Double
  overload: NodaTime.Duration.TotalDays*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: NodaTime.Duration.TotalHours
  commentId: P:NodaTime.Duration.TotalHours
  id: TotalHours
  parent: NodaTime.Duration
  langs:
  - csharp
  - vb
  name: TotalHours
  nameWithType: Duration.TotalHours
  fullName: NodaTime.Duration.TotalHours
  type: Property
  source:
    remote:
      path: 2.0.x/src/NodaTime/Duration.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: TotalHours
    path: src/NodaTime/Duration.cs
    startLine: 307
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nGets the total number of hours in this duration, as a <xref href=\"System.Double\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  remarks: "\nThis property is the <code>Duration</code> equivalent of <xref href=\"System.TimeSpan.TotalHours\" data-throw-if-not-resolved=\"false\"></xref>.\nUnlike <xref href=\"NodaTime.Duration.Hours\" data-throw-if-not-resolved=\"false\"></xref>, it represents the complete duration in hours rather than the\nwhole number of hours as part of the day. So for a duration\nof 1 day, 2 hours and 30 minutes, the <code>Hours</code> property will return 2, but <code>TotalHours</code>\nwill return 26.5.\n"
  example: []
  syntax:
    content: public double TotalHours { get; }
    parameters: []
    return:
      type: System.Double
      description: The total number of hours in this duration.
    content.vb: Public ReadOnly Property TotalHours As Double
  overload: NodaTime.Duration.TotalHours*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: NodaTime.Duration.TotalMinutes
  commentId: P:NodaTime.Duration.TotalMinutes
  id: TotalMinutes
  parent: NodaTime.Duration
  langs:
  - csharp
  - vb
  name: TotalMinutes
  nameWithType: Duration.TotalMinutes
  fullName: NodaTime.Duration.TotalMinutes
  type: Property
  source:
    remote:
      path: 2.0.x/src/NodaTime/Duration.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: TotalMinutes
    path: src/NodaTime/Duration.cs
    startLine: 319
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nGets the total number of minutes in this duration, as a <xref href=\"System.Double\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  remarks: >
    This property is the <code>Duration</code> equivalent of <xref href="System.TimeSpan.TotalMinutes" data-throw-if-not-resolved="false"></xref>.

    Unlike <xref href="NodaTime.Duration.Minutes" data-throw-if-not-resolved="false"></xref>, it represents the complete duration in minutes rather than

    the whole number of minutes within the hour. So for a duration

    of 2 hours, 30 minutes and 45 seconds, the <code>Minutes</code> property will return 30, but <code>TotalMinutes</code>

    will return 150.75.
  example: []
  syntax:
    content: public double TotalMinutes { get; }
    parameters: []
    return:
      type: System.Double
      description: The total number of minutes in this duration.
    content.vb: Public ReadOnly Property TotalMinutes As Double
  overload: NodaTime.Duration.TotalMinutes*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: NodaTime.Duration.TotalSeconds
  commentId: P:NodaTime.Duration.TotalSeconds
  id: TotalSeconds
  parent: NodaTime.Duration
  langs:
  - csharp
  - vb
  name: TotalSeconds
  nameWithType: Duration.TotalSeconds
  fullName: NodaTime.Duration.TotalSeconds
  type: Property
  source:
    remote:
      path: 2.0.x/src/NodaTime/Duration.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: TotalSeconds
    path: src/NodaTime/Duration.cs
    startLine: 332
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nGets the total number of seconds in this duration, as a <xref href=\"System.Double\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  remarks: "\nThis property is the <code>Duration</code> equivalent of <xref href=\"System.TimeSpan.TotalSeconds\" data-throw-if-not-resolved=\"false\"></xref>.\nUnlike <xref href=\"NodaTime.Duration.Seconds\" data-throw-if-not-resolved=\"false\"></xref>, it represents the complete duration in seconds rather than\nthe whole number of seconds within the minute. So for a duration\nof 10 minutes, 20 seconds and 250 milliseconds, the <code>Seconds</code> property will return 20, but <code>TotalSeconds</code>\nwill return 620.25.\n"
  example: []
  syntax:
    content: public double TotalSeconds { get; }
    parameters: []
    return:
      type: System.Double
      description: The total number of seconds in this duration.
    content.vb: Public ReadOnly Property TotalSeconds As Double
  overload: NodaTime.Duration.TotalSeconds*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: NodaTime.Duration.TotalMilliseconds
  commentId: P:NodaTime.Duration.TotalMilliseconds
  id: TotalMilliseconds
  parent: NodaTime.Duration
  langs:
  - csharp
  - vb
  name: TotalMilliseconds
  nameWithType: Duration.TotalMilliseconds
  fullName: NodaTime.Duration.TotalMilliseconds
  type: Property
  source:
    remote:
      path: 2.0.x/src/NodaTime/Duration.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: TotalMilliseconds
    path: src/NodaTime/Duration.cs
    startLine: 344
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nGets the total number of milliseconds in this duration, as a <xref href=\"System.Double\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  remarks: >
    This property is the <code>Duration</code> equivalent of <xref href="System.TimeSpan.TotalMilliseconds" data-throw-if-not-resolved="false"></xref>.

    Unlike <xref href="NodaTime.Duration.Milliseconds" data-throw-if-not-resolved="false"></xref>, it represents the complete duration in seconds rather than

    the whole number of seconds within the minute. So for a duration

    of 10 minutes, 20 seconds and 250 milliseconds, the <code>Seconds</code> property will return 20, but <code>TotalSeconds</code>

    will return 620.25.
  example: []
  syntax:
    content: public double TotalMilliseconds { get; }
    parameters: []
    return:
      type: System.Double
      description: The total number of milliseconds in this duration.
    content.vb: Public ReadOnly Property TotalMilliseconds As Double
  overload: NodaTime.Duration.TotalMilliseconds*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: NodaTime.Duration.TotalTicks
  commentId: P:NodaTime.Duration.TotalTicks
  id: TotalTicks
  parent: NodaTime.Duration
  langs:
  - csharp
  - vb
  name: TotalTicks
  nameWithType: Duration.TotalTicks
  fullName: NodaTime.Duration.TotalTicks
  type: Property
  source:
    remote:
      path: 2.0.x/src/NodaTime/Duration.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: TotalTicks
    path: src/NodaTime/Duration.cs
    startLine: 358
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nGets the total number of ticks in this duration, as a <xref href=\"System.Double\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  remarks: >
    This property is the <code>Duration</code> equivalent of <xref href="System.TimeSpan.Ticks" data-throw-if-not-resolved="false"></xref>,

    except represented as double-precision floating point number instead of a 64-bit integer. This

    is because <xref href="NodaTime.Duration" data-throw-if-not-resolved="false"></xref> has a precision of nanoseconds, and also because the range

    of 64-bit integers doesn&apos;t cover the number of possible ticks in a <xref href="NodaTime.Duration" data-throw-if-not-resolved="false"></xref>. (The

    latter is only an issue in durations outside the range of <xref href="System.TimeSpan" data-throw-if-not-resolved="false"></xref> - in other words,

    with magnitudes of over 29,000 years.)
  example: []
  syntax:
    content: public double TotalTicks { get; }
    parameters: []
    return:
      type: System.Double
      description: The total number of ticks in this duration.
    content.vb: Public ReadOnly Property TotalTicks As Double
  overload: NodaTime.Duration.TotalTicks*
  seealso:
  - linkId: NodaTime.Duration.BclCompatibleTicks
    commentId: P:NodaTime.Duration.BclCompatibleTicks
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: NodaTime.Duration.TotalNanoseconds
  commentId: P:NodaTime.Duration.TotalNanoseconds
  id: TotalNanoseconds
  parent: NodaTime.Duration
  langs:
  - csharp
  - vb
  name: TotalNanoseconds
  nameWithType: Duration.TotalNanoseconds
  fullName: NodaTime.Duration.TotalNanoseconds
  type: Property
  source:
    remote:
      path: 2.0.x/src/NodaTime/Duration.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: TotalNanoseconds
    path: src/NodaTime/Duration.cs
    startLine: 369
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nGets the total number of nanoseconds in this duration, as a <xref href=\"System.Double\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  remarks: >
    The result is always an integer, but may not be precise due to the limitations

    of the <code>Double</code> type. In other works, <code>Duration.FromNanoseconds(duration.TotalNanoseconds)</code>

    is not guaranteed to round-trip. To guarantee precision and round-tripping,

    use <xref href="NodaTime.Duration.ToBigIntegerNanoseconds" data-throw-if-not-resolved="false"></xref> and <xref href="NodaTime.Duration.FromNanoseconds(System.Numerics.BigInteger)" data-throw-if-not-resolved="false"></xref>.
  example: []
  syntax:
    content: public double TotalNanoseconds { get; }
    parameters: []
    return:
      type: System.Double
      description: This duration as a number of nanoseconds, represented as a <code>Double</code>.
    content.vb: Public ReadOnly Property TotalNanoseconds As Double
  overload: NodaTime.Duration.TotalNanoseconds*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: NodaTime.Duration.Equals(System.Object)
  commentId: M:NodaTime.Duration.Equals(System.Object)
  id: Equals(System.Object)
  parent: NodaTime.Duration
  langs:
  - csharp
  - vb
  name: Equals(Object)
  nameWithType: Duration.Equals(Object)
  fullName: NodaTime.Duration.Equals(System.Object)
  type: Method
  source:
    remote:
      path: 2.0.x/src/NodaTime/Duration.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: Equals
    path: src/NodaTime/Duration.cs
    startLine: 432
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nDetermines whether the specified <xref href=\"System.Object\" data-throw-if-not-resolved=\"false\"></xref> is equal to this instance.\n"
  example: []
  syntax:
    content: public override bool Equals(object obj)
    parameters:
    - id: obj
      type: System.Object
      description: The <xref href="System.Object" data-throw-if-not-resolved="false"></xref> to compare with this instance.
    return:
      type: System.Boolean
      description: "\n<code>true</code> if the specified <xref href=\"System.Object\" data-throw-if-not-resolved=\"false\"></xref> is equal to this instance;\notherwise, <code>false</code>.\n"
    content.vb: Public Overrides Function Equals(obj As Object) As Boolean
  overridden: System.ValueType.Equals(System.Object)
  overload: NodaTime.Duration.Equals*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: NodaTime.Duration.GetHashCode
  commentId: M:NodaTime.Duration.GetHashCode
  id: GetHashCode
  parent: NodaTime.Duration
  langs:
  - csharp
  - vb
  name: GetHashCode()
  nameWithType: Duration.GetHashCode()
  fullName: NodaTime.Duration.GetHashCode()
  type: Method
  source:
    remote:
      path: 2.0.x/src/NodaTime/Duration.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: GetHashCode
    path: src/NodaTime/Duration.cs
    startLine: 441
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nReturns a hash code for this instance.\n"
  example: []
  syntax:
    content: public override int GetHashCode()
    return:
      type: System.Int32
      description: "\nA hash code for this instance, suitable for use in hashing algorithms and data\nstructures like a hash table. \n"
    content.vb: Public Overrides Function GetHashCode As Integer
  overridden: System.ValueType.GetHashCode
  overload: NodaTime.Duration.GetHashCode*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: NodaTime.Duration.ToString
  commentId: M:NodaTime.Duration.ToString
  id: ToString
  parent: NodaTime.Duration
  langs:
  - csharp
  - vb
  name: ToString()
  nameWithType: Duration.ToString()
  fullName: NodaTime.Duration.ToString()
  type: Method
  source:
    remote:
      path: 2.0.x/src/NodaTime/Duration.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: ToString
    path: src/NodaTime/Duration.cs
    startLine: 452
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nReturns a <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref> that represents this instance.\n"
  example: []
  syntax:
    content: public override string ToString()
    return:
      type: System.String
      description: "\nThe value of the current instance in the default format pattern (&quot;o&quot;), using the current thread&apos;s\nculture to obtain a format provider.\n"
    content.vb: Public Overrides Function ToString As String
  overridden: System.ValueType.ToString
  overload: NodaTime.Duration.ToString*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: NodaTime.Duration.ToString(System.String,System.IFormatProvider)
  commentId: M:NodaTime.Duration.ToString(System.String,System.IFormatProvider)
  id: ToString(System.String,System.IFormatProvider)
  parent: NodaTime.Duration
  langs:
  - csharp
  - vb
  name: ToString(String, IFormatProvider)
  nameWithType: Duration.ToString(String, IFormatProvider)
  fullName: NodaTime.Duration.ToString(System.String, System.IFormatProvider)
  type: Method
  source:
    remote:
      path: 2.0.x/src/NodaTime/Duration.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: ToString
    path: src/NodaTime/Duration.cs
    startLine: 467
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nFormats the value of the current instance using the specified pattern.\n"
  example: []
  syntax:
    content: public string ToString(string patternText, IFormatProvider formatProvider)
    parameters:
    - id: patternText
      type: System.String
      description: >
        The <xref href="System.String" data-throw-if-not-resolved="false"></xref> specifying the pattern to use,

        or null to use the default format pattern (&quot;o&quot;).
    - id: formatProvider
      type: System.IFormatProvider
      description: >
        The <xref href="System.IFormatProvider" data-throw-if-not-resolved="false"></xref> to use when formatting the value,

        or null to use the current thread&apos;s culture to obtain a format provider.
    return:
      type: System.String
      description: "\nA <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref> containing the value of the current instance in the specified format.\n"
    content.vb: Public Function ToString(patternText As String, formatProvider As IFormatProvider) As String
  overload: NodaTime.Duration.ToString*
  implements:
  - System.IFormattable.ToString(System.String,System.IFormatProvider)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: NodaTime.Duration.op_Addition(NodaTime.Duration,NodaTime.Duration)
  commentId: M:NodaTime.Duration.op_Addition(NodaTime.Duration,NodaTime.Duration)
  id: op_Addition(NodaTime.Duration,NodaTime.Duration)
  parent: NodaTime.Duration
  langs:
  - csharp
  - vb
  name: Addition(Duration, Duration)
  nameWithType: Duration.Addition(Duration, Duration)
  fullName: NodaTime.Duration.Addition(NodaTime.Duration, NodaTime.Duration)
  type: Operator
  source:
    remote:
      path: 2.0.x/src/NodaTime/Duration.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: op_Addition
    path: src/NodaTime/Duration.cs
    startLine: 478
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nImplements the operator + (addition).\n"
  example: []
  syntax:
    content: public static Duration operator +(Duration left, Duration right)
    parameters:
    - id: left
      type: NodaTime.Duration
      description: The left hand side of the operator.
    - id: right
      type: NodaTime.Duration
      description: The right hand side of the operator.
    return:
      type: NodaTime.Duration
      description: A new <xref href="NodaTime.Duration" data-throw-if-not-resolved="false"></xref> representing the sum of the given values.
    content.vb: Public Shared Operator +(left As Duration, right As Duration) As Duration
  overload: NodaTime.Duration.op_Addition*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: NodaTime.Duration.Add(NodaTime.Duration,NodaTime.Duration)
  commentId: M:NodaTime.Duration.Add(NodaTime.Duration,NodaTime.Duration)
  id: Add(NodaTime.Duration,NodaTime.Duration)
  parent: NodaTime.Duration
  langs:
  - csharp
  - vb
  name: Add(Duration, Duration)
  nameWithType: Duration.Add(Duration, Duration)
  fullName: NodaTime.Duration.Add(NodaTime.Duration, NodaTime.Duration)
  type: Method
  source:
    remote:
      path: 2.0.x/src/NodaTime/Duration.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: Add
    path: src/NodaTime/Duration.cs
    startLine: 504
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nAdds one duration to another. Friendly alternative to <code>operator+()</code>.\n"
  example: []
  syntax:
    content: public static Duration Add(Duration left, Duration right)
    parameters:
    - id: left
      type: NodaTime.Duration
      description: The left hand side of the operator.
    - id: right
      type: NodaTime.Duration
      description: The right hand side of the operator.
    return:
      type: NodaTime.Duration
      description: A new <xref href="NodaTime.Duration" data-throw-if-not-resolved="false"></xref> representing the sum of the given values.
    content.vb: Public Shared Function Add(left As Duration, right As Duration) As Duration
  overload: NodaTime.Duration.Add*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: NodaTime.Duration.Plus(NodaTime.Duration)
  commentId: M:NodaTime.Duration.Plus(NodaTime.Duration)
  id: Plus(NodaTime.Duration)
  parent: NodaTime.Duration
  langs:
  - csharp
  - vb
  name: Plus(Duration)
  nameWithType: Duration.Plus(Duration)
  fullName: NodaTime.Duration.Plus(NodaTime.Duration)
  type: Method
  source:
    remote:
      path: 2.0.x/src/NodaTime/Duration.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: Plus
    path: src/NodaTime/Duration.cs
    startLine: 511
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nReturns the result of adding another duration to this one, for a fluent alternative to <code>operator+()</code>.\n"
  example: []
  syntax:
    content: public Duration Plus(Duration other)
    parameters:
    - id: other
      type: NodaTime.Duration
      description: The duration to add
    return:
      type: NodaTime.Duration
      description: A new <xref href="NodaTime.Duration" data-throw-if-not-resolved="false"></xref> representing the result of the addition.
    content.vb: Public Function Plus(other As Duration) As Duration
  overload: NodaTime.Duration.Plus*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: NodaTime.Duration.op_Subtraction(NodaTime.Duration,NodaTime.Duration)
  commentId: M:NodaTime.Duration.op_Subtraction(NodaTime.Duration,NodaTime.Duration)
  id: op_Subtraction(NodaTime.Duration,NodaTime.Duration)
  parent: NodaTime.Duration
  langs:
  - csharp
  - vb
  name: Subtraction(Duration, Duration)
  nameWithType: Duration.Subtraction(Duration, Duration)
  fullName: NodaTime.Duration.Subtraction(NodaTime.Duration, NodaTime.Duration)
  type: Operator
  source:
    remote:
      path: 2.0.x/src/NodaTime/Duration.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: op_Subtraction
    path: src/NodaTime/Duration.cs
    startLine: 520
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nImplements the operator - (subtraction).\n"
  example: []
  syntax:
    content: public static Duration operator -(Duration left, Duration right)
    parameters:
    - id: left
      type: NodaTime.Duration
      description: The left hand side of the operator.
    - id: right
      type: NodaTime.Duration
      description: The right hand side of the operator.
    return:
      type: NodaTime.Duration
      description: A new <xref href="NodaTime.Duration" data-throw-if-not-resolved="false"></xref> representing the difference of the given values.
    content.vb: Public Shared Operator -(left As Duration, right As Duration) As Duration
  overload: NodaTime.Duration.op_Subtraction*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: NodaTime.Duration.Subtract(NodaTime.Duration,NodaTime.Duration)
  commentId: M:NodaTime.Duration.Subtract(NodaTime.Duration,NodaTime.Duration)
  id: Subtract(NodaTime.Duration,NodaTime.Duration)
  parent: NodaTime.Duration
  langs:
  - csharp
  - vb
  name: Subtract(Duration, Duration)
  nameWithType: Duration.Subtract(Duration, Duration)
  fullName: NodaTime.Duration.Subtract(NodaTime.Duration, NodaTime.Duration)
  type: Method
  source:
    remote:
      path: 2.0.x/src/NodaTime/Duration.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: Subtract
    path: src/NodaTime/Duration.cs
    startLine: 541
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nSubtracts one duration from another. Friendly alternative to <code>operator-()</code>.\n"
  example: []
  syntax:
    content: public static Duration Subtract(Duration left, Duration right)
    parameters:
    - id: left
      type: NodaTime.Duration
      description: The left hand side of the operator.
    - id: right
      type: NodaTime.Duration
      description: The right hand side of the operator.
    return:
      type: NodaTime.Duration
      description: A new <xref href="NodaTime.Duration" data-throw-if-not-resolved="false"></xref> representing the difference of the given values.
    content.vb: Public Shared Function Subtract(left As Duration, right As Duration) As Duration
  overload: NodaTime.Duration.Subtract*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: NodaTime.Duration.Minus(NodaTime.Duration)
  commentId: M:NodaTime.Duration.Minus(NodaTime.Duration)
  id: Minus(NodaTime.Duration)
  parent: NodaTime.Duration
  langs:
  - csharp
  - vb
  name: Minus(Duration)
  nameWithType: Duration.Minus(Duration)
  fullName: NodaTime.Duration.Minus(NodaTime.Duration)
  type: Method
  source:
    remote:
      path: 2.0.x/src/NodaTime/Duration.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: Minus
    path: src/NodaTime/Duration.cs
    startLine: 548
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nReturns the result of subtracting another duration from this one, for a fluent alternative to <code>operator-()</code>.\n"
  example: []
  syntax:
    content: public Duration Minus(Duration other)
    parameters:
    - id: other
      type: NodaTime.Duration
      description: The duration to subtract
    return:
      type: NodaTime.Duration
      description: A new <xref href="NodaTime.Duration" data-throw-if-not-resolved="false"></xref> representing the result of the subtraction.
    content.vb: Public Function Minus(other As Duration) As Duration
  overload: NodaTime.Duration.Minus*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: NodaTime.Duration.op_Division(NodaTime.Duration,System.Int64)
  commentId: M:NodaTime.Duration.op_Division(NodaTime.Duration,System.Int64)
  id: op_Division(NodaTime.Duration,System.Int64)
  parent: NodaTime.Duration
  langs:
  - csharp
  - vb
  name: Division(Duration, Int64)
  nameWithType: Duration.Division(Duration, Int64)
  fullName: NodaTime.Duration.Division(NodaTime.Duration, System.Int64)
  type: Operator
  source:
    remote:
      path: 2.0.x/src/NodaTime/Duration.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: op_Division
    path: src/NodaTime/Duration.cs
    startLine: 558
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nImplements the operator / (division) to divide a duration by an <xref href=\"System.Int64\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public static Duration operator /(Duration left, long right)
    parameters:
    - id: left
      type: NodaTime.Duration
      description: The left hand side of the operator.
    - id: right
      type: System.Int64
      description: The right hand side of the operator.
    return:
      type: NodaTime.Duration
      description: >-
        A new <xref href="NodaTime.Duration" data-throw-if-not-resolved="false"></xref> representing the result of dividing <code data-dev-comment-type="paramref" class="paramref">left</code> by

        <code data-dev-comment-type="paramref" class="paramref">right</code>.
    content.vb: Public Shared Operator /(left As Duration, right As Long) As Duration
  overload: NodaTime.Duration.op_Division*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: NodaTime.Duration.op_Division(NodaTime.Duration,System.Double)
  commentId: M:NodaTime.Duration.op_Division(NodaTime.Duration,System.Double)
  id: op_Division(NodaTime.Duration,System.Double)
  parent: NodaTime.Duration
  langs:
  - csharp
  - vb
  name: Division(Duration, Double)
  nameWithType: Duration.Division(Duration, Double)
  fullName: NodaTime.Duration.Division(NodaTime.Duration, System.Double)
  type: Operator
  source:
    remote:
      path: 2.0.x/src/NodaTime/Duration.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: op_Division
    path: src/NodaTime/Duration.cs
    startLine: 584
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nImplements the operator / (division) to divide a duration by a <xref href=\"System.Double\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public static Duration operator /(Duration left, double right)
    parameters:
    - id: left
      type: NodaTime.Duration
      description: The left hand side of the operator.
    - id: right
      type: System.Double
      description: The right hand side of the operator.
    return:
      type: NodaTime.Duration
      description: >-
        A new <xref href="NodaTime.Duration" data-throw-if-not-resolved="false"></xref> representing the result of dividing <code data-dev-comment-type="paramref" class="paramref">left</code> by

        <code data-dev-comment-type="paramref" class="paramref">right</code>.
    content.vb: Public Shared Operator /(left As Duration, right As Double) As Duration
  overload: NodaTime.Duration.op_Division*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: NodaTime.Duration.op_Division(NodaTime.Duration,NodaTime.Duration)
  commentId: M:NodaTime.Duration.op_Division(NodaTime.Duration,NodaTime.Duration)
  id: op_Division(NodaTime.Duration,NodaTime.Duration)
  parent: NodaTime.Duration
  langs:
  - csharp
  - vb
  name: Division(Duration, Duration)
  nameWithType: Duration.Division(Duration, Duration)
  fullName: NodaTime.Duration.Division(NodaTime.Duration, NodaTime.Duration)
  type: Operator
  source:
    remote:
      path: 2.0.x/src/NodaTime/Duration.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: op_Division
    path: src/NodaTime/Duration.cs
    startLine: 602
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nImplements the operator / (division) to divide one duration by another.\n"
  example: []
  syntax:
    content: public static double operator /(Duration left, Duration right)
    parameters:
    - id: left
      type: NodaTime.Duration
      description: The left hand side of the operator.
    - id: right
      type: NodaTime.Duration
      description: The right hand side of the operator.
    return:
      type: System.Double
      description: >-
        The <xref href="System.Double" data-throw-if-not-resolved="false"></xref> representing the result of dividing <code data-dev-comment-type="paramref" class="paramref">left</code> by

        <code data-dev-comment-type="paramref" class="paramref">right</code>.
    content.vb: Public Shared Operator /(left As Duration, right As Duration) As Double
  overload: NodaTime.Duration.op_Division*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: NodaTime.Duration.Divide(NodaTime.Duration,System.Int64)
  commentId: M:NodaTime.Duration.Divide(NodaTime.Duration,System.Int64)
  id: Divide(NodaTime.Duration,System.Int64)
  parent: NodaTime.Duration
  langs:
  - csharp
  - vb
  name: Divide(Duration, Int64)
  nameWithType: Duration.Divide(Duration, Int64)
  fullName: NodaTime.Duration.Divide(NodaTime.Duration, System.Int64)
  type: Method
  source:
    remote:
      path: 2.0.x/src/NodaTime/Duration.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: Divide
    path: src/NodaTime/Duration.cs
    startLine: 619
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nDivides a duration by an <xref href=\"System.Int64\" data-throw-if-not-resolved=\"false\"></xref>. Friendly alternative to <code>operator/()</code>.\n"
  example: []
  syntax:
    content: public static Duration Divide(Duration left, long right)
    parameters:
    - id: left
      type: NodaTime.Duration
      description: The left hand side of the operator.
    - id: right
      type: System.Int64
      description: The right hand side of the operator.
    return:
      type: NodaTime.Duration
      description: >-
        A new <xref href="NodaTime.Duration" data-throw-if-not-resolved="false"></xref> representing the result of dividing <code data-dev-comment-type="paramref" class="paramref">left</code> by

        <code data-dev-comment-type="paramref" class="paramref">right</code>.
    content.vb: Public Shared Function Divide(left As Duration, right As Long) As Duration
  overload: NodaTime.Duration.Divide*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: NodaTime.Duration.Divide(NodaTime.Duration,System.Double)
  commentId: M:NodaTime.Duration.Divide(NodaTime.Duration,System.Double)
  id: Divide(NodaTime.Duration,System.Double)
  parent: NodaTime.Duration
  langs:
  - csharp
  - vb
  name: Divide(Duration, Double)
  nameWithType: Duration.Divide(Duration, Double)
  fullName: NodaTime.Duration.Divide(NodaTime.Duration, System.Double)
  type: Method
  source:
    remote:
      path: 2.0.x/src/NodaTime/Duration.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: Divide
    path: src/NodaTime/Duration.cs
    startLine: 628
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nDivides a duration by a <xref href=\"System.Double\" data-throw-if-not-resolved=\"false\"></xref>. Friendly alternative to <code>operator/()</code>.\n"
  example: []
  syntax:
    content: public static Duration Divide(Duration left, double right)
    parameters:
    - id: left
      type: NodaTime.Duration
      description: The left hand side of the operator.
    - id: right
      type: System.Double
      description: The right hand side of the operator.
    return:
      type: NodaTime.Duration
      description: >-
        A new <xref href="NodaTime.Duration" data-throw-if-not-resolved="false"></xref> representing the result of dividing <code data-dev-comment-type="paramref" class="paramref">left</code> by

        <code data-dev-comment-type="paramref" class="paramref">right</code>.
    content.vb: Public Shared Function Divide(left As Duration, right As Double) As Duration
  overload: NodaTime.Duration.Divide*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: NodaTime.Duration.Divide(NodaTime.Duration,NodaTime.Duration)
  commentId: M:NodaTime.Duration.Divide(NodaTime.Duration,NodaTime.Duration)
  id: Divide(NodaTime.Duration,NodaTime.Duration)
  parent: NodaTime.Duration
  langs:
  - csharp
  - vb
  name: Divide(Duration, Duration)
  nameWithType: Duration.Divide(Duration, Duration)
  fullName: NodaTime.Duration.Divide(NodaTime.Duration, NodaTime.Duration)
  type: Method
  source:
    remote:
      path: 2.0.x/src/NodaTime/Duration.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: Divide
    path: src/NodaTime/Duration.cs
    startLine: 637
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nDivides one duration by another. Friendly alternative to <code>operator/()</code>.\n"
  example: []
  syntax:
    content: public static double Divide(Duration left, Duration right)
    parameters:
    - id: left
      type: NodaTime.Duration
      description: The left hand side of the operator.
    - id: right
      type: NodaTime.Duration
      description: The right hand side of the operator.
    return:
      type: System.Double
      description: >-
        The <xref href="System.Double" data-throw-if-not-resolved="false"></xref> representing the result of dividing <code data-dev-comment-type="paramref" class="paramref">left</code> by

        <code data-dev-comment-type="paramref" class="paramref">right</code>.
    content.vb: Public Shared Function Divide(left As Duration, right As Duration) As Double
  overload: NodaTime.Duration.Divide*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: NodaTime.Duration.op_Multiply(NodaTime.Duration,System.Double)
  commentId: M:NodaTime.Duration.op_Multiply(NodaTime.Duration,System.Double)
  id: op_Multiply(NodaTime.Duration,System.Double)
  parent: NodaTime.Duration
  langs:
  - csharp
  - vb
  name: Multiply(Duration, Double)
  nameWithType: Duration.Multiply(Duration, Double)
  fullName: NodaTime.Duration.Multiply(NodaTime.Duration, System.Double)
  type: Operator
  source:
    remote:
      path: 2.0.x/src/NodaTime/Duration.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: op_Multiply
    path: src/NodaTime/Duration.cs
    startLine: 646
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nImplements the operator * (multiplication).\n"
  example: []
  syntax:
    content: public static Duration operator *(Duration left, double right)
    parameters:
    - id: left
      type: NodaTime.Duration
      description: The left hand side of the operator.
    - id: right
      type: System.Double
      description: The right hand side of the operator.
    return:
      type: NodaTime.Duration
      description: >-
        A new <xref href="NodaTime.Duration" data-throw-if-not-resolved="false"></xref> representing the result of multiplying <code data-dev-comment-type="paramref" class="paramref">left</code> by

        <code data-dev-comment-type="paramref" class="paramref">right</code>.
    content.vb: Public Shared Operator *(left As Duration, right As Double) As Duration
  overload: NodaTime.Duration.op_Multiply*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: NodaTime.Duration.op_Multiply(NodaTime.Duration,System.Int64)
  commentId: M:NodaTime.Duration.op_Multiply(NodaTime.Duration,System.Int64)
  id: op_Multiply(NodaTime.Duration,System.Int64)
  parent: NodaTime.Duration
  langs:
  - csharp
  - vb
  name: Multiply(Duration, Int64)
  nameWithType: Duration.Multiply(Duration, Int64)
  fullName: NodaTime.Duration.Multiply(NodaTime.Duration, System.Int64)
  type: Operator
  source:
    remote:
      path: 2.0.x/src/NodaTime/Duration.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: op_Multiply
    path: src/NodaTime/Duration.cs
    startLine: 660
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nImplements the operator * (multiplication).\n"
  example: []
  syntax:
    content: public static Duration operator *(Duration left, long right)
    parameters:
    - id: left
      type: NodaTime.Duration
      description: The left hand side of the operator.
    - id: right
      type: System.Int64
      description: The right hand side of the operator.
    return:
      type: NodaTime.Duration
      description: >-
        A new <xref href="NodaTime.Duration" data-throw-if-not-resolved="false"></xref> representing the result of multiplying <code data-dev-comment-type="paramref" class="paramref">left</code> by

        <code data-dev-comment-type="paramref" class="paramref">right</code>.
    content.vb: Public Shared Operator *(left As Duration, right As Long) As Duration
  overload: NodaTime.Duration.op_Multiply*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: NodaTime.Duration.op_Multiply(System.Int64,NodaTime.Duration)
  commentId: M:NodaTime.Duration.op_Multiply(System.Int64,NodaTime.Duration)
  id: op_Multiply(System.Int64,NodaTime.Duration)
  parent: NodaTime.Duration
  langs:
  - csharp
  - vb
  name: Multiply(Int64, Duration)
  nameWithType: Duration.Multiply(Int64, Duration)
  fullName: NodaTime.Duration.Multiply(System.Int64, NodaTime.Duration)
  type: Operator
  source:
    remote:
      path: 2.0.x/src/NodaTime/Duration.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: op_Multiply
    path: src/NodaTime/Duration.cs
    startLine: 702
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nImplements the operator * (multiplication).\n"
  example: []
  syntax:
    content: public static Duration operator *(long left, Duration right)
    parameters:
    - id: left
      type: System.Int64
      description: The left hand side of the operator.
    - id: right
      type: NodaTime.Duration
      description: The right hand side of the operator.
    return:
      type: NodaTime.Duration
      description: >-
        A new <xref href="NodaTime.Duration" data-throw-if-not-resolved="false"></xref> representing the result of multiplying <code data-dev-comment-type="paramref" class="paramref">left</code> by

        <code data-dev-comment-type="paramref" class="paramref">right</code>.
    content.vb: Public Shared Operator *(left As Long, right As Duration) As Duration
  overload: NodaTime.Duration.op_Multiply*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: NodaTime.Duration.Multiply(NodaTime.Duration,System.Int64)
  commentId: M:NodaTime.Duration.Multiply(NodaTime.Duration,System.Int64)
  id: Multiply(NodaTime.Duration,System.Int64)
  parent: NodaTime.Duration
  langs:
  - csharp
  - vb
  name: Multiply(Duration, Int64)
  nameWithType: Duration.Multiply(Duration, Int64)
  fullName: NodaTime.Duration.Multiply(NodaTime.Duration, System.Int64)
  type: Method
  source:
    remote:
      path: 2.0.x/src/NodaTime/Duration.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: Multiply
    path: src/NodaTime/Duration.cs
    startLine: 710
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nMultiplies a duration by a number. Friendly alternative to <code>operator*()</code>.\n"
  example: []
  syntax:
    content: public static Duration Multiply(Duration left, long right)
    parameters:
    - id: left
      type: NodaTime.Duration
      description: The left hand side of the operator.
    - id: right
      type: System.Int64
      description: The right hand side of the operator.
    return:
      type: NodaTime.Duration
      description: A new <xref href="NodaTime.Duration" data-throw-if-not-resolved="false"></xref> representing the product of the given values.
    content.vb: Public Shared Function Multiply(left As Duration, right As Long) As Duration
  overload: NodaTime.Duration.Multiply*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: NodaTime.Duration.Multiply(NodaTime.Duration,System.Double)
  commentId: M:NodaTime.Duration.Multiply(NodaTime.Duration,System.Double)
  id: Multiply(NodaTime.Duration,System.Double)
  parent: NodaTime.Duration
  langs:
  - csharp
  - vb
  name: Multiply(Duration, Double)
  nameWithType: Duration.Multiply(Duration, Double)
  fullName: NodaTime.Duration.Multiply(NodaTime.Duration, System.Double)
  type: Method
  source:
    remote:
      path: 2.0.x/src/NodaTime/Duration.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: Multiply
    path: src/NodaTime/Duration.cs
    startLine: 718
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nMultiplies a duration by a number. Friendly alternative to <code>operator*()</code>.\n"
  example: []
  syntax:
    content: public static Duration Multiply(Duration left, double right)
    parameters:
    - id: left
      type: NodaTime.Duration
      description: The left hand side of the operator.
    - id: right
      type: System.Double
      description: The right hand side of the operator.
    return:
      type: NodaTime.Duration
      description: A new <xref href="NodaTime.Duration" data-throw-if-not-resolved="false"></xref> representing the product of the given values.
    content.vb: Public Shared Function Multiply(left As Duration, right As Double) As Duration
  overload: NodaTime.Duration.Multiply*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: NodaTime.Duration.Multiply(System.Int64,NodaTime.Duration)
  commentId: M:NodaTime.Duration.Multiply(System.Int64,NodaTime.Duration)
  id: Multiply(System.Int64,NodaTime.Duration)
  parent: NodaTime.Duration
  langs:
  - csharp
  - vb
  name: Multiply(Int64, Duration)
  nameWithType: Duration.Multiply(Int64, Duration)
  fullName: NodaTime.Duration.Multiply(System.Int64, NodaTime.Duration)
  type: Method
  source:
    remote:
      path: 2.0.x/src/NodaTime/Duration.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: Multiply
    path: src/NodaTime/Duration.cs
    startLine: 726
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nMultiplies a duration by a number. Friendly alternative to <code>operator*()</code>.\n"
  example: []
  syntax:
    content: public static Duration Multiply(long left, Duration right)
    parameters:
    - id: left
      type: System.Int64
      description: The left hand side of the operator.
    - id: right
      type: NodaTime.Duration
      description: The right hand side of the operator.
    return:
      type: NodaTime.Duration
      description: A new <xref href="NodaTime.Duration" data-throw-if-not-resolved="false"></xref> representing the product of the given values.
    content.vb: Public Shared Function Multiply(left As Long, right As Duration) As Duration
  overload: NodaTime.Duration.Multiply*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: NodaTime.Duration.op_Equality(NodaTime.Duration,NodaTime.Duration)
  commentId: M:NodaTime.Duration.op_Equality(NodaTime.Duration,NodaTime.Duration)
  id: op_Equality(NodaTime.Duration,NodaTime.Duration)
  parent: NodaTime.Duration
  langs:
  - csharp
  - vb
  name: Equality(Duration, Duration)
  nameWithType: Duration.Equality(Duration, Duration)
  fullName: NodaTime.Duration.Equality(NodaTime.Duration, NodaTime.Duration)
  type: Operator
  source:
    remote:
      path: 2.0.x/src/NodaTime/Duration.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: op_Equality
    path: src/NodaTime/Duration.cs
    startLine: 734
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nImplements the operator == (equality).\n"
  example: []
  syntax:
    content: public static bool operator ==(Duration left, Duration right)
    parameters:
    - id: left
      type: NodaTime.Duration
      description: The left hand side of the operator.
    - id: right
      type: NodaTime.Duration
      description: The right hand side of the operator.
    return:
      type: System.Boolean
      description: <code>true</code> if values are equal to each other, otherwise <code>false</code>.
    content.vb: Public Shared Operator =(left As Duration, right As Duration) As Boolean
  overload: NodaTime.Duration.op_Equality*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: NodaTime.Duration.op_Inequality(NodaTime.Duration,NodaTime.Duration)
  commentId: M:NodaTime.Duration.op_Inequality(NodaTime.Duration,NodaTime.Duration)
  id: op_Inequality(NodaTime.Duration,NodaTime.Duration)
  parent: NodaTime.Duration
  langs:
  - csharp
  - vb
  name: Inequality(Duration, Duration)
  nameWithType: Duration.Inequality(Duration, Duration)
  fullName: NodaTime.Duration.Inequality(NodaTime.Duration, NodaTime.Duration)
  type: Operator
  source:
    remote:
      path: 2.0.x/src/NodaTime/Duration.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: op_Inequality
    path: src/NodaTime/Duration.cs
    startLine: 743
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nImplements the operator != (inequality).\n"
  example: []
  syntax:
    content: public static bool operator !=(Duration left, Duration right)
    parameters:
    - id: left
      type: NodaTime.Duration
      description: The left hand side of the operator.
    - id: right
      type: NodaTime.Duration
      description: The right hand side of the operator.
    return:
      type: System.Boolean
      description: <code>true</code> if values are not equal to each other, otherwise <code>false</code>.
    content.vb: Public Shared Operator <>(left As Duration, right As Duration) As Boolean
  overload: NodaTime.Duration.op_Inequality*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: NodaTime.Duration.op_LessThan(NodaTime.Duration,NodaTime.Duration)
  commentId: M:NodaTime.Duration.op_LessThan(NodaTime.Duration,NodaTime.Duration)
  id: op_LessThan(NodaTime.Duration,NodaTime.Duration)
  parent: NodaTime.Duration
  langs:
  - csharp
  - vb
  name: LessThan(Duration, Duration)
  nameWithType: Duration.LessThan(Duration, Duration)
  fullName: NodaTime.Duration.LessThan(NodaTime.Duration, NodaTime.Duration)
  type: Operator
  source:
    remote:
      path: 2.0.x/src/NodaTime/Duration.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: op_LessThan
    path: src/NodaTime/Duration.cs
    startLine: 751
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nImplements the operator &lt; (less than).\n"
  example: []
  syntax:
    content: public static bool operator <(Duration left, Duration right)
    parameters:
    - id: left
      type: NodaTime.Duration
      description: The left hand side of the operator.
    - id: right
      type: NodaTime.Duration
      description: The right hand side of the operator.
    return:
      type: System.Boolean
      description: <code>true</code> if the left value is less than the right value, otherwise <code>false</code>.
    content.vb: Public Shared Operator <(left As Duration, right As Duration) As Boolean
  overload: NodaTime.Duration.op_LessThan*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: NodaTime.Duration.op_LessThanOrEqual(NodaTime.Duration,NodaTime.Duration)
  commentId: M:NodaTime.Duration.op_LessThanOrEqual(NodaTime.Duration,NodaTime.Duration)
  id: op_LessThanOrEqual(NodaTime.Duration,NodaTime.Duration)
  parent: NodaTime.Duration
  langs:
  - csharp
  - vb
  name: LessThanOrEqual(Duration, Duration)
  nameWithType: Duration.LessThanOrEqual(Duration, Duration)
  fullName: NodaTime.Duration.LessThanOrEqual(NodaTime.Duration, NodaTime.Duration)
  type: Operator
  source:
    remote:
      path: 2.0.x/src/NodaTime/Duration.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: op_LessThanOrEqual
    path: src/NodaTime/Duration.cs
    startLine: 760
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nImplements the operator &lt;= (less than or equal).\n"
  example: []
  syntax:
    content: public static bool operator <=(Duration left, Duration right)
    parameters:
    - id: left
      type: NodaTime.Duration
      description: The left hand side of the operator.
    - id: right
      type: NodaTime.Duration
      description: The right hand side of the operator.
    return:
      type: System.Boolean
      description: <code>true</code> if the left value is less than or equal to the right value, otherwise <code>false</code>.
    content.vb: Public Shared Operator <=(left As Duration, right As Duration) As Boolean
  overload: NodaTime.Duration.op_LessThanOrEqual*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: NodaTime.Duration.op_GreaterThan(NodaTime.Duration,NodaTime.Duration)
  commentId: M:NodaTime.Duration.op_GreaterThan(NodaTime.Duration,NodaTime.Duration)
  id: op_GreaterThan(NodaTime.Duration,NodaTime.Duration)
  parent: NodaTime.Duration
  langs:
  - csharp
  - vb
  name: GreaterThan(Duration, Duration)
  nameWithType: Duration.GreaterThan(Duration, Duration)
  fullName: NodaTime.Duration.GreaterThan(NodaTime.Duration, NodaTime.Duration)
  type: Operator
  source:
    remote:
      path: 2.0.x/src/NodaTime/Duration.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: op_GreaterThan
    path: src/NodaTime/Duration.cs
    startLine: 769
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nImplements the operator > (greater than).\n"
  example: []
  syntax:
    content: public static bool operator>(Duration left, Duration right)
    parameters:
    - id: left
      type: NodaTime.Duration
      description: The left hand side of the operator.
    - id: right
      type: NodaTime.Duration
      description: The right hand side of the operator.
    return:
      type: System.Boolean
      description: <code>true</code> if the left value is greater than the right value, otherwise <code>false</code>.
    content.vb: Public Shared Operator>(left As Duration, right As Duration) As Boolean
  overload: NodaTime.Duration.op_GreaterThan*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: NodaTime.Duration.op_GreaterThanOrEqual(NodaTime.Duration,NodaTime.Duration)
  commentId: M:NodaTime.Duration.op_GreaterThanOrEqual(NodaTime.Duration,NodaTime.Duration)
  id: op_GreaterThanOrEqual(NodaTime.Duration,NodaTime.Duration)
  parent: NodaTime.Duration
  langs:
  - csharp
  - vb
  name: GreaterThanOrEqual(Duration, Duration)
  nameWithType: Duration.GreaterThanOrEqual(Duration, Duration)
  fullName: NodaTime.Duration.GreaterThanOrEqual(NodaTime.Duration, NodaTime.Duration)
  type: Operator
  source:
    remote:
      path: 2.0.x/src/NodaTime/Duration.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: op_GreaterThanOrEqual
    path: src/NodaTime/Duration.cs
    startLine: 778
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nImplements the operator >= (greater than or equal).\n"
  example: []
  syntax:
    content: public static bool operator >=(Duration left, Duration right)
    parameters:
    - id: left
      type: NodaTime.Duration
      description: The left hand side of the operator.
    - id: right
      type: NodaTime.Duration
      description: The right hand side of the operator.
    return:
      type: System.Boolean
      description: <code>true</code> if the left value is greater than or equal to the right value, otherwise <code>false</code>.
    content.vb: Public Shared Operator >=(left As Duration, right As Duration) As Boolean
  overload: NodaTime.Duration.op_GreaterThanOrEqual*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: NodaTime.Duration.op_UnaryNegation(NodaTime.Duration)
  commentId: M:NodaTime.Duration.op_UnaryNegation(NodaTime.Duration)
  id: op_UnaryNegation(NodaTime.Duration)
  parent: NodaTime.Duration
  langs:
  - csharp
  - vb
  name: UnaryNegation(Duration)
  nameWithType: Duration.UnaryNegation(Duration)
  fullName: NodaTime.Duration.UnaryNegation(NodaTime.Duration)
  type: Operator
  source:
    remote:
      path: 2.0.x/src/NodaTime/Duration.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: op_UnaryNegation
    path: src/NodaTime/Duration.cs
    startLine: 786
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nImplements the unary negation operator.\n"
  example: []
  syntax:
    content: public static Duration operator -(Duration duration)
    parameters:
    - id: duration
      type: NodaTime.Duration
      description: Duration to negate
    return:
      type: NodaTime.Duration
      description: The negative value of this duration
    content.vb: Public Shared Operator -(duration As Duration) As Duration
  overload: NodaTime.Duration.op_UnaryNegation*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: NodaTime.Duration.Negate(NodaTime.Duration)
  commentId: M:NodaTime.Duration.Negate(NodaTime.Duration)
  id: Negate(NodaTime.Duration)
  parent: NodaTime.Duration
  langs:
  - csharp
  - vb
  name: Negate(Duration)
  nameWithType: Duration.Negate(Duration)
  fullName: NodaTime.Duration.Negate(NodaTime.Duration)
  type: Method
  source:
    remote:
      path: 2.0.x/src/NodaTime/Duration.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: Negate
    path: src/NodaTime/Duration.cs
    startLine: 803
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nImplements a friendly alternative to the unary negation operator.\n"
  example: []
  syntax:
    content: public static Duration Negate(Duration duration)
    parameters:
    - id: duration
      type: NodaTime.Duration
      description: Duration to negate
    return:
      type: NodaTime.Duration
      description: The negative value of this duration
    content.vb: Public Shared Function Negate(duration As Duration) As Duration
  overload: NodaTime.Duration.Negate*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: NodaTime.Duration.CompareTo(NodaTime.Duration)
  commentId: M:NodaTime.Duration.CompareTo(NodaTime.Duration)
  id: CompareTo(NodaTime.Duration)
  parent: NodaTime.Duration
  langs:
  - csharp
  - vb
  name: CompareTo(Duration)
  nameWithType: Duration.CompareTo(Duration)
  fullName: NodaTime.Duration.CompareTo(NodaTime.Duration)
  type: Method
  source:
    remote:
      path: 2.0.x/src/NodaTime/Duration.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: CompareTo
    path: src/NodaTime/Duration.cs
    startLine: 833
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nCompares the current object with another object of the same type.\n"
  example: []
  syntax:
    content: public int CompareTo(Duration other)
    parameters:
    - id: other
      type: NodaTime.Duration
      description: An object to compare with this object.
    return:
      type: System.Int32
      description: "\nA 32-bit signed integer that indicates the relative order of the objects being compared.\nThe return value has the following meanings:\n<table><thead><tr><th>Value</th><th>Meaning</th></tr></thead><tbody><tr><td>&lt; 0</td><td>This object is less than the <code data-dev-comment-type=\"paramref\" class=\"paramref\">other</code> parameter.</td></tr><tr><td>0</td><td>This object is equal to <code data-dev-comment-type=\"paramref\" class=\"paramref\">other</code>.</td></tr><tr><td>> 0</td><td>This object is greater than <code data-dev-comment-type=\"paramref\" class=\"paramref\">other</code>.</td></tr></tbody></table>\n"
    content.vb: Public Function CompareTo(other As Duration) As Integer
  overload: NodaTime.Duration.CompareTo*
  implements:
  - System.IComparable{NodaTime.Duration}.CompareTo(NodaTime.Duration)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: NodaTime.Duration.System#IComparable#CompareTo(System.Object)
  commentId: M:NodaTime.Duration.System#IComparable#CompareTo(System.Object)
  id: System#IComparable#CompareTo(System.Object)
  isEii: true
  parent: NodaTime.Duration
  langs:
  - csharp
  - vb
  name: IComparable.CompareTo(Object)
  nameWithType: Duration.IComparable.CompareTo(Object)
  fullName: NodaTime.Duration.System.IComparable.CompareTo(System.Object)
  type: Method
  source:
    remote:
      path: 2.0.x/src/NodaTime/Duration.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: System.IComparable.CompareTo
    path: src/NodaTime/Duration.cs
    startLine: 850
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nImplementation of <xref href=\"System.IComparable.CompareTo(System.Object)\" data-throw-if-not-resolved=\"false\"></xref> to compare two offsets.\n"
  remarks: "\nThis uses explicit interface implementation to avoid it being called accidentally. The generic implementation should usually be preferred.\n"
  example: []
  syntax:
    content: int IComparable.CompareTo(object obj)
    parameters:
    - id: obj
      type: System.Object
      description: The object to compare this value with.
    return:
      type: System.Int32
      description: >
        The result of comparing this instant with another one; see <xref href="NodaTime.Duration.CompareTo(NodaTime.Duration)" data-throw-if-not-resolved="false"></xref> for general details.

        If <code data-dev-comment-type="paramref" class="paramref">obj</code> is null, this method returns a value greater than 0.
    content.vb: Function System.IComparable.CompareTo(obj As Object) As Integer Implements IComparable.CompareTo
  overload: NodaTime.Duration.System#IComparable#CompareTo*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: <code data-dev-comment-type="paramref" class="paramref">obj</code> is non-null but does not refer to an instance of <xref href="NodaTime.Duration" data-throw-if-not-resolved="false"></xref>.
  implements:
  - System.IComparable.CompareTo(System.Object)
  nameWithType.vb: Duration.System.IComparable.CompareTo(Object)
  name.vb: System.IComparable.CompareTo(Object)
- uid: NodaTime.Duration.Equals(NodaTime.Duration)
  commentId: M:NodaTime.Duration.Equals(NodaTime.Duration)
  id: Equals(NodaTime.Duration)
  parent: NodaTime.Duration
  langs:
  - csharp
  - vb
  name: Equals(Duration)
  nameWithType: Duration.Equals(Duration)
  fullName: NodaTime.Duration.Equals(NodaTime.Duration)
  type: Method
  source:
    remote:
      path: 2.0.x/src/NodaTime/Duration.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: Equals
    path: src/NodaTime/Duration.cs
    startLine: 870
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nIndicates whether the current object is equal to another object of the same type.\n"
  example: []
  syntax:
    content: public bool Equals(Duration other)
    parameters:
    - id: other
      type: NodaTime.Duration
      description: An object to compare with this object.
    return:
      type: System.Boolean
      description: "\ntrue if the current object is equal to the <code data-dev-comment-type=\"paramref\" class=\"paramref\">other</code> parameter;\notherwise, false.\n"
    content.vb: Public Function Equals(other As Duration) As Boolean
  overload: NodaTime.Duration.Equals*
  implements:
  - System.IEquatable{NodaTime.Duration}.Equals(NodaTime.Duration)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: NodaTime.Duration.FromDays(System.Int32)
  commentId: M:NodaTime.Duration.FromDays(System.Int32)
  id: FromDays(System.Int32)
  parent: NodaTime.Duration
  langs:
  - csharp
  - vb
  name: FromDays(Int32)
  nameWithType: Duration.FromDays(Int32)
  fullName: NodaTime.Duration.FromDays(System.Int32)
  type: Method
  source:
    remote:
      path: 2.0.x/src/NodaTime/Duration.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: FromDays
    path: src/NodaTime/Duration.cs
    startLine: 879
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nReturns a <xref href=\"NodaTime.Duration\" data-throw-if-not-resolved=\"false\"></xref> that represents the given number of days, assuming a &apos;standard&apos; 24-hour\nday.\n"
  example: []
  syntax:
    content: public static Duration FromDays(int days)
    parameters:
    - id: days
      type: System.Int32
      description: The number of days.
    return:
      type: NodaTime.Duration
      description: A <xref href="NodaTime.Duration" data-throw-if-not-resolved="false"></xref> representing the given number of days.
    content.vb: Public Shared Function FromDays(days As Integer) As Duration
  overload: NodaTime.Duration.FromDays*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: NodaTime.Duration.FromDays(System.Double)
  commentId: M:NodaTime.Duration.FromDays(System.Double)
  id: FromDays(System.Double)
  parent: NodaTime.Duration
  langs:
  - csharp
  - vb
  name: FromDays(Double)
  nameWithType: Duration.FromDays(Double)
  fullName: NodaTime.Duration.FromDays(System.Double)
  type: Method
  source:
    remote:
      path: 2.0.x/src/NodaTime/Duration.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: FromDays
    path: src/NodaTime/Duration.cs
    startLine: 887
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nReturns a <xref href=\"NodaTime.Duration\" data-throw-if-not-resolved=\"false\"></xref> that represents the given number of days, assuming a &apos;standard&apos; 24-hour\nday.\n"
  example: []
  syntax:
    content: public static Duration FromDays(double days)
    parameters:
    - id: days
      type: System.Double
      description: The number of days.
    return:
      type: NodaTime.Duration
      description: A <xref href="NodaTime.Duration" data-throw-if-not-resolved="false"></xref> representing the given number of days.
    content.vb: Public Shared Function FromDays(days As Double) As Duration
  overload: NodaTime.Duration.FromDays*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: NodaTime.Duration.FromHours(System.Int32)
  commentId: M:NodaTime.Duration.FromHours(System.Int32)
  id: FromHours(System.Int32)
  parent: NodaTime.Duration
  langs:
  - csharp
  - vb
  name: FromHours(Int32)
  nameWithType: Duration.FromHours(Int32)
  fullName: NodaTime.Duration.FromHours(System.Int32)
  type: Method
  source:
    remote:
      path: 2.0.x/src/NodaTime/Duration.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: FromHours
    path: src/NodaTime/Duration.cs
    startLine: 902
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nReturns a <xref href=\"NodaTime.Duration\" data-throw-if-not-resolved=\"false\"></xref> that represents the given number of hours.\n"
  example: []
  syntax:
    content: public static Duration FromHours(int hours)
    parameters:
    - id: hours
      type: System.Int32
      description: The number of hours.
    return:
      type: NodaTime.Duration
      description: A <xref href="NodaTime.Duration" data-throw-if-not-resolved="false"></xref> representing the given number of hours.
    content.vb: Public Shared Function FromHours(hours As Integer) As Duration
  overload: NodaTime.Duration.FromHours*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: NodaTime.Duration.FromHours(System.Double)
  commentId: M:NodaTime.Duration.FromHours(System.Double)
  id: FromHours(System.Double)
  parent: NodaTime.Duration
  langs:
  - csharp
  - vb
  name: FromHours(Double)
  nameWithType: Duration.FromHours(Double)
  fullName: NodaTime.Duration.FromHours(System.Double)
  type: Method
  source:
    remote:
      path: 2.0.x/src/NodaTime/Duration.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: FromHours
    path: src/NodaTime/Duration.cs
    startLine: 910
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nReturns a <xref href=\"NodaTime.Duration\" data-throw-if-not-resolved=\"false\"></xref> that represents the given number of hours.\n"
  example: []
  syntax:
    content: public static Duration FromHours(double hours)
    parameters:
    - id: hours
      type: System.Double
      description: The number of hours.
    return:
      type: NodaTime.Duration
      description: A <xref href="NodaTime.Duration" data-throw-if-not-resolved="false"></xref> representing the given number of hours.
    content.vb: Public Shared Function FromHours(hours As Double) As Duration
  overload: NodaTime.Duration.FromHours*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: NodaTime.Duration.FromMinutes(System.Int64)
  commentId: M:NodaTime.Duration.FromMinutes(System.Int64)
  id: FromMinutes(System.Int64)
  parent: NodaTime.Duration
  langs:
  - csharp
  - vb
  name: FromMinutes(Int64)
  nameWithType: Duration.FromMinutes(Int64)
  fullName: NodaTime.Duration.FromMinutes(System.Int64)
  type: Method
  source:
    remote:
      path: 2.0.x/src/NodaTime/Duration.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: FromMinutes
    path: src/NodaTime/Duration.cs
    startLine: 925
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nReturns a <xref href=\"NodaTime.Duration\" data-throw-if-not-resolved=\"false\"></xref> that represents the given number of minutes.\n"
  example: []
  syntax:
    content: public static Duration FromMinutes(long minutes)
    parameters:
    - id: minutes
      type: System.Int64
      description: The number of minutes.
    return:
      type: NodaTime.Duration
      description: A <xref href="NodaTime.Duration" data-throw-if-not-resolved="false"></xref> representing the given number of minutes.
    content.vb: Public Shared Function FromMinutes(minutes As Long) As Duration
  overload: NodaTime.Duration.FromMinutes*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: NodaTime.Duration.FromMinutes(System.Double)
  commentId: M:NodaTime.Duration.FromMinutes(System.Double)
  id: FromMinutes(System.Double)
  parent: NodaTime.Duration
  langs:
  - csharp
  - vb
  name: FromMinutes(Double)
  nameWithType: Duration.FromMinutes(Double)
  fullName: NodaTime.Duration.FromMinutes(System.Double)
  type: Method
  source:
    remote:
      path: 2.0.x/src/NodaTime/Duration.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: FromMinutes
    path: src/NodaTime/Duration.cs
    startLine: 933
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nReturns a <xref href=\"NodaTime.Duration\" data-throw-if-not-resolved=\"false\"></xref> that represents the given number of minutes.\n"
  example: []
  syntax:
    content: public static Duration FromMinutes(double minutes)
    parameters:
    - id: minutes
      type: System.Double
      description: The number of minutes.
    return:
      type: NodaTime.Duration
      description: A <xref href="NodaTime.Duration" data-throw-if-not-resolved="false"></xref> representing the given number of minutes.
    content.vb: Public Shared Function FromMinutes(minutes As Double) As Duration
  overload: NodaTime.Duration.FromMinutes*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: NodaTime.Duration.FromSeconds(System.Int64)
  commentId: M:NodaTime.Duration.FromSeconds(System.Int64)
  id: FromSeconds(System.Int64)
  parent: NodaTime.Duration
  langs:
  - csharp
  - vb
  name: FromSeconds(Int64)
  nameWithType: Duration.FromSeconds(Int64)
  fullName: NodaTime.Duration.FromSeconds(System.Int64)
  type: Method
  source:
    remote:
      path: 2.0.x/src/NodaTime/Duration.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: FromSeconds
    path: src/NodaTime/Duration.cs
    startLine: 948
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nReturns a <xref href=\"NodaTime.Duration\" data-throw-if-not-resolved=\"false\"></xref> that represents the given number of seconds.\n"
  example: []
  syntax:
    content: public static Duration FromSeconds(long seconds)
    parameters:
    - id: seconds
      type: System.Int64
      description: The number of seconds.
    return:
      type: NodaTime.Duration
      description: A <xref href="NodaTime.Duration" data-throw-if-not-resolved="false"></xref> representing the given number of seconds.
    content.vb: Public Shared Function FromSeconds(seconds As Long) As Duration
  overload: NodaTime.Duration.FromSeconds*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: NodaTime.Duration.FromSeconds(System.Double)
  commentId: M:NodaTime.Duration.FromSeconds(System.Double)
  id: FromSeconds(System.Double)
  parent: NodaTime.Duration
  langs:
  - csharp
  - vb
  name: FromSeconds(Double)
  nameWithType: Duration.FromSeconds(Double)
  fullName: NodaTime.Duration.FromSeconds(System.Double)
  type: Method
  source:
    remote:
      path: 2.0.x/src/NodaTime/Duration.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: FromSeconds
    path: src/NodaTime/Duration.cs
    startLine: 956
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nReturns a <xref href=\"NodaTime.Duration\" data-throw-if-not-resolved=\"false\"></xref> that represents the given number of seconds.\n"
  example: []
  syntax:
    content: public static Duration FromSeconds(double seconds)
    parameters:
    - id: seconds
      type: System.Double
      description: The number of seconds.
    return:
      type: NodaTime.Duration
      description: A <xref href="NodaTime.Duration" data-throw-if-not-resolved="false"></xref> representing the given number of seconds.
    content.vb: Public Shared Function FromSeconds(seconds As Double) As Duration
  overload: NodaTime.Duration.FromSeconds*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: NodaTime.Duration.FromMilliseconds(System.Int64)
  commentId: M:NodaTime.Duration.FromMilliseconds(System.Int64)
  id: FromMilliseconds(System.Int64)
  parent: NodaTime.Duration
  langs:
  - csharp
  - vb
  name: FromMilliseconds(Int64)
  nameWithType: Duration.FromMilliseconds(Int64)
  fullName: NodaTime.Duration.FromMilliseconds(System.Int64)
  type: Method
  source:
    remote:
      path: 2.0.x/src/NodaTime/Duration.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: FromMilliseconds
    path: src/NodaTime/Duration.cs
    startLine: 971
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nReturns a <xref href=\"NodaTime.Duration\" data-throw-if-not-resolved=\"false\"></xref> that represents the given number of milliseconds.\n"
  example: []
  syntax:
    content: public static Duration FromMilliseconds(long milliseconds)
    parameters:
    - id: milliseconds
      type: System.Int64
      description: The number of milliseconds.
    return:
      type: NodaTime.Duration
      description: A <xref href="NodaTime.Duration" data-throw-if-not-resolved="false"></xref> representing the given number of milliseconds.
    content.vb: Public Shared Function FromMilliseconds(milliseconds As Long) As Duration
  overload: NodaTime.Duration.FromMilliseconds*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: NodaTime.Duration.FromMilliseconds(System.Double)
  commentId: M:NodaTime.Duration.FromMilliseconds(System.Double)
  id: FromMilliseconds(System.Double)
  parent: NodaTime.Duration
  langs:
  - csharp
  - vb
  name: FromMilliseconds(Double)
  nameWithType: Duration.FromMilliseconds(Double)
  fullName: NodaTime.Duration.FromMilliseconds(System.Double)
  type: Method
  source:
    remote:
      path: 2.0.x/src/NodaTime/Duration.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: FromMilliseconds
    path: src/NodaTime/Duration.cs
    startLine: 979
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nReturns a <xref href=\"NodaTime.Duration\" data-throw-if-not-resolved=\"false\"></xref> that represents the given number of milliseconds.\n"
  example: []
  syntax:
    content: public static Duration FromMilliseconds(double milliseconds)
    parameters:
    - id: milliseconds
      type: System.Double
      description: The number of milliseconds.
    return:
      type: NodaTime.Duration
      description: A <xref href="NodaTime.Duration" data-throw-if-not-resolved="false"></xref> representing the given number of milliseconds.
    content.vb: Public Shared Function FromMilliseconds(milliseconds As Double) As Duration
  overload: NodaTime.Duration.FromMilliseconds*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: NodaTime.Duration.FromTicks(System.Int64)
  commentId: M:NodaTime.Duration.FromTicks(System.Int64)
  id: FromTicks(System.Int64)
  parent: NodaTime.Duration
  langs:
  - csharp
  - vb
  name: FromTicks(Int64)
  nameWithType: Duration.FromTicks(Int64)
  fullName: NodaTime.Duration.FromTicks(System.Int64)
  type: Method
  source:
    remote:
      path: 2.0.x/src/NodaTime/Duration.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: FromTicks
    path: src/NodaTime/Duration.cs
    startLine: 994
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nReturns a <xref href=\"NodaTime.Duration\" data-throw-if-not-resolved=\"false\"></xref> that represents the given number of ticks.\n"
  example: []
  syntax:
    content: public static Duration FromTicks(long ticks)
    parameters:
    - id: ticks
      type: System.Int64
      description: The number of ticks.
    return:
      type: NodaTime.Duration
      description: A <xref href="NodaTime.Duration" data-throw-if-not-resolved="false"></xref> representing the given number of ticks.
    content.vb: Public Shared Function FromTicks(ticks As Long) As Duration
  overload: NodaTime.Duration.FromTicks*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: NodaTime.Duration.FromTicks(System.Double)
  commentId: M:NodaTime.Duration.FromTicks(System.Double)
  id: FromTicks(System.Double)
  parent: NodaTime.Duration
  langs:
  - csharp
  - vb
  name: FromTicks(Double)
  nameWithType: Duration.FromTicks(Double)
  fullName: NodaTime.Duration.FromTicks(System.Double)
  type: Method
  source:
    remote:
      path: 2.0.x/src/NodaTime/Duration.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: FromTicks
    path: src/NodaTime/Duration.cs
    startLine: 1007
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nReturns a <xref href=\"NodaTime.Duration\" data-throw-if-not-resolved=\"false\"></xref> that represents the given number of ticks.\n"
  example: []
  syntax:
    content: public static Duration FromTicks(double ticks)
    parameters:
    - id: ticks
      type: System.Double
      description: The number of ticks.
    return:
      type: NodaTime.Duration
      description: A <xref href="NodaTime.Duration" data-throw-if-not-resolved="false"></xref> representing the given number of ticks.
    content.vb: Public Shared Function FromTicks(ticks As Double) As Duration
  overload: NodaTime.Duration.FromTicks*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: NodaTime.Duration.FromNanoseconds(System.Int64)
  commentId: M:NodaTime.Duration.FromNanoseconds(System.Int64)
  id: FromNanoseconds(System.Int64)
  parent: NodaTime.Duration
  langs:
  - csharp
  - vb
  name: FromNanoseconds(Int64)
  nameWithType: Duration.FromNanoseconds(Int64)
  fullName: NodaTime.Duration.FromNanoseconds(System.Int64)
  type: Method
  source:
    remote:
      path: 2.0.x/src/NodaTime/Duration.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: FromNanoseconds
    path: src/NodaTime/Duration.cs
    startLine: 1022
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nReturns a <xref href=\"NodaTime.Duration\" data-throw-if-not-resolved=\"false\"></xref> that represents the given number of nanoseconds.\n"
  example: []
  syntax:
    content: public static Duration FromNanoseconds(long nanoseconds)
    parameters:
    - id: nanoseconds
      type: System.Int64
      description: The number of nanoseconds.
    return:
      type: NodaTime.Duration
      description: A <xref href="NodaTime.Duration" data-throw-if-not-resolved="false"></xref> representing the given number of nanoseconds.
    content.vb: Public Shared Function FromNanoseconds(nanoseconds As Long) As Duration
  overload: NodaTime.Duration.FromNanoseconds*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: NodaTime.Duration.FromNanoseconds(System.Double)
  commentId: M:NodaTime.Duration.FromNanoseconds(System.Double)
  id: FromNanoseconds(System.Double)
  parent: NodaTime.Duration
  langs:
  - csharp
  - vb
  name: FromNanoseconds(Double)
  nameWithType: Duration.FromNanoseconds(Double)
  fullName: NodaTime.Duration.FromNanoseconds(System.Double)
  type: Method
  source:
    remote:
      path: 2.0.x/src/NodaTime/Duration.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: FromNanoseconds
    path: src/NodaTime/Duration.cs
    startLine: 1041
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nConverts a number of nanoseconds expressed as a <xref href=\"System.Double\" data-throw-if-not-resolved=\"false\"></xref> into a duration. Any fractional\nparts of the value are truncated towards zero.\n"
  example: []
  syntax:
    content: public static Duration FromNanoseconds(double nanoseconds)
    parameters:
    - id: nanoseconds
      type: System.Double
      description: The number of nanoseconds to represent.
    return:
      type: NodaTime.Duration
      description: A duration with the given number of nanoseconds.
    content.vb: Public Shared Function FromNanoseconds(nanoseconds As Double) As Duration
  overload: NodaTime.Duration.FromNanoseconds*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: NodaTime.Duration.FromNanoseconds(System.Numerics.BigInteger)
  commentId: M:NodaTime.Duration.FromNanoseconds(System.Numerics.BigInteger)
  id: FromNanoseconds(System.Numerics.BigInteger)
  parent: NodaTime.Duration
  langs:
  - csharp
  - vb
  name: FromNanoseconds(BigInteger)
  nameWithType: Duration.FromNanoseconds(BigInteger)
  fullName: NodaTime.Duration.FromNanoseconds(System.Numerics.BigInteger)
  type: Method
  source:
    remote:
      path: 2.0.x/src/NodaTime/Duration.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: FromNanoseconds
    path: src/NodaTime/Duration.cs
    startLine: 1054
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nConverts a number of nanoseconds expressed as a <xref href=\"System.Numerics.BigInteger\" data-throw-if-not-resolved=\"false\"></xref> into a duration.\n"
  example: []
  syntax:
    content: public static Duration FromNanoseconds(BigInteger nanoseconds)
    parameters:
    - id: nanoseconds
      type: System.Numerics.BigInteger
      description: The number of nanoseconds to represent.
    return:
      type: NodaTime.Duration
      description: A duration with the given number of nanoseconds.
    content.vb: Public Shared Function FromNanoseconds(nanoseconds As BigInteger) As Duration
  overload: NodaTime.Duration.FromNanoseconds*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: NodaTime.Duration.FromTimeSpan(System.TimeSpan)
  commentId: M:NodaTime.Duration.FromTimeSpan(System.TimeSpan)
  id: FromTimeSpan(System.TimeSpan)
  parent: NodaTime.Duration
  langs:
  - csharp
  - vb
  name: FromTimeSpan(TimeSpan)
  nameWithType: Duration.FromTimeSpan(TimeSpan)
  fullName: NodaTime.Duration.FromTimeSpan(System.TimeSpan)
  type: Method
  source:
    remote:
      path: 2.0.x/src/NodaTime/Duration.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: FromTimeSpan
    path: src/NodaTime/Duration.cs
    startLine: 1091
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nReturns a <xref href=\"NodaTime.Duration\" data-throw-if-not-resolved=\"false\"></xref> that represents the same number of ticks as the\ngiven <xref href=\"System.TimeSpan\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public static Duration FromTimeSpan(TimeSpan timeSpan)
    parameters:
    - id: timeSpan
      type: System.TimeSpan
      description: The TimeSpan value to convert
    return:
      type: NodaTime.Duration
      description: A new Duration with the same number of ticks as the given TimeSpan.
    content.vb: Public Shared Function FromTimeSpan(timeSpan As TimeSpan) As Duration
  overload: NodaTime.Duration.FromTimeSpan*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: NodaTime.Duration.ToTimeSpan
  commentId: M:NodaTime.Duration.ToTimeSpan
  id: ToTimeSpan
  parent: NodaTime.Duration
  langs:
  - csharp
  - vb
  name: ToTimeSpan()
  nameWithType: Duration.ToTimeSpan()
  fullName: NodaTime.Duration.ToTimeSpan()
  type: Method
  source:
    remote:
      path: 2.0.x/src/NodaTime/Duration.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: ToTimeSpan
    path: src/NodaTime/Duration.cs
    startLine: 1125
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nReturns a <xref href=\"System.TimeSpan\" data-throw-if-not-resolved=\"false\"></xref> that represents the same number of ticks as this\n<xref href=\"NodaTime.Duration\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  remarks: "\nIf the number of nanoseconds in a duration is not a whole number of ticks, it is truncated towards zero.\nFor example, durations in the range [-99ns, 99ns] would all count as 0 ticks.\n"
  example: []
  syntax:
    content: public TimeSpan ToTimeSpan()
    return:
      type: System.TimeSpan
      description: A new TimeSpan with the same number of ticks as this Duration.
    content.vb: Public Function ToTimeSpan As TimeSpan
  overload: NodaTime.Duration.ToTimeSpan*
  exceptions:
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: The number of ticks cannot be represented a signed 64-bit integer.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: NodaTime.Duration.System#Xml#Serialization#IXmlSerializable#GetSchema
  commentId: M:NodaTime.Duration.System#Xml#Serialization#IXmlSerializable#GetSchema
  id: System#Xml#Serialization#IXmlSerializable#GetSchema
  isEii: true
  parent: NodaTime.Duration
  langs:
  - csharp
  - vb
  name: IXmlSerializable.GetSchema()
  nameWithType: Duration.IXmlSerializable.GetSchema()
  fullName: NodaTime.Duration.System.Xml.Serialization.IXmlSerializable.GetSchema()
  type: Method
  source:
    remote:
      path: 2.0.x/src/NodaTime/Duration.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: System.Xml.Serialization.IXmlSerializable.GetSchema
    path: src/NodaTime/Duration.cs
    startLine: 1130
  assemblies:
  - NodaTime
  namespace: NodaTime
  example: []
  syntax:
    content: XmlSchema IXmlSerializable.GetSchema()
    return:
      type: System.Xml.Schema.XmlSchema
    content.vb: Function System.Xml.Serialization.IXmlSerializable.GetSchema As XmlSchema Implements IXmlSerializable.GetSchema
  overload: NodaTime.Duration.System#Xml#Serialization#IXmlSerializable#GetSchema*
  implements:
  - System.Xml.Serialization.IXmlSerializable.GetSchema
  nameWithType.vb: Duration.System.Xml.Serialization.IXmlSerializable.GetSchema()
  name.vb: System.Xml.Serialization.IXmlSerializable.GetSchema()
- uid: NodaTime.Duration.System#Xml#Serialization#IXmlSerializable#ReadXml(System.Xml.XmlReader)
  commentId: M:NodaTime.Duration.System#Xml#Serialization#IXmlSerializable#ReadXml(System.Xml.XmlReader)
  id: System#Xml#Serialization#IXmlSerializable#ReadXml(System.Xml.XmlReader)
  isEii: true
  parent: NodaTime.Duration
  langs:
  - csharp
  - vb
  name: IXmlSerializable.ReadXml(XmlReader)
  nameWithType: Duration.IXmlSerializable.ReadXml(XmlReader)
  fullName: NodaTime.Duration.System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)
  type: Method
  source:
    remote:
      path: 2.0.x/src/NodaTime/Duration.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: System.Xml.Serialization.IXmlSerializable.ReadXml
    path: src/NodaTime/Duration.cs
    startLine: 1133
  assemblies:
  - NodaTime
  namespace: NodaTime
  example: []
  syntax:
    content: void IXmlSerializable.ReadXml(XmlReader reader)
    parameters:
    - id: reader
      type: System.Xml.XmlReader
    content.vb: Sub System.Xml.Serialization.IXmlSerializable.ReadXml(reader As XmlReader) Implements IXmlSerializable.ReadXml
  overload: NodaTime.Duration.System#Xml#Serialization#IXmlSerializable#ReadXml*
  implements:
  - System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)
  nameWithType.vb: Duration.System.Xml.Serialization.IXmlSerializable.ReadXml(XmlReader)
  name.vb: System.Xml.Serialization.IXmlSerializable.ReadXml(XmlReader)
- uid: NodaTime.Duration.System#Xml#Serialization#IXmlSerializable#WriteXml(System.Xml.XmlWriter)
  commentId: M:NodaTime.Duration.System#Xml#Serialization#IXmlSerializable#WriteXml(System.Xml.XmlWriter)
  id: System#Xml#Serialization#IXmlSerializable#WriteXml(System.Xml.XmlWriter)
  isEii: true
  parent: NodaTime.Duration
  langs:
  - csharp
  - vb
  name: IXmlSerializable.WriteXml(XmlWriter)
  nameWithType: Duration.IXmlSerializable.WriteXml(XmlWriter)
  fullName: NodaTime.Duration.System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)
  type: Method
  source:
    remote:
      path: 2.0.x/src/NodaTime/Duration.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: System.Xml.Serialization.IXmlSerializable.WriteXml
    path: src/NodaTime/Duration.cs
    startLine: 1142
  assemblies:
  - NodaTime
  namespace: NodaTime
  example: []
  syntax:
    content: void IXmlSerializable.WriteXml(XmlWriter writer)
    parameters:
    - id: writer
      type: System.Xml.XmlWriter
    content.vb: Sub System.Xml.Serialization.IXmlSerializable.WriteXml(writer As XmlWriter) Implements IXmlSerializable.WriteXml
  overload: NodaTime.Duration.System#Xml#Serialization#IXmlSerializable#WriteXml*
  implements:
  - System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)
  nameWithType.vb: Duration.System.Xml.Serialization.IXmlSerializable.WriteXml(XmlWriter)
  name.vb: System.Xml.Serialization.IXmlSerializable.WriteXml(XmlWriter)
- uid: NodaTime.Duration.ToInt64Nanoseconds
  commentId: M:NodaTime.Duration.ToInt64Nanoseconds
  id: ToInt64Nanoseconds
  parent: NodaTime.Duration
  langs:
  - csharp
  - vb
  name: ToInt64Nanoseconds()
  nameWithType: Duration.ToInt64Nanoseconds()
  fullName: NodaTime.Duration.ToInt64Nanoseconds()
  type: Method
  source:
    remote:
      path: 2.0.x/src/NodaTime/Duration.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: ToInt64Nanoseconds
    path: src/NodaTime/Duration.cs
    startLine: 1155
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nConversion to an <xref href=\"System.Int64\" data-throw-if-not-resolved=\"false\"></xref> number of nanoseconds. This will fail if the number of nanoseconds is\nout of the range of <code>Int64</code>, which is approximately 292 years (positive or negative).\n"
  example: []
  syntax:
    content: public long ToInt64Nanoseconds()
    return:
      type: System.Int64
      description: This duration as a number of nanoseconds, represented as an <code>Int64</code>.
    content.vb: Public Function ToInt64Nanoseconds As Long
  overload: NodaTime.Duration.ToInt64Nanoseconds*
  exceptions:
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: The number of nanoseconds is outside the representable range.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: NodaTime.Duration.ToBigIntegerNanoseconds
  commentId: M:NodaTime.Duration.ToBigIntegerNanoseconds
  id: ToBigIntegerNanoseconds
  parent: NodaTime.Duration
  langs:
  - csharp
  - vb
  name: ToBigIntegerNanoseconds()
  nameWithType: Duration.ToBigIntegerNanoseconds()
  fullName: NodaTime.Duration.ToBigIntegerNanoseconds()
  type: Method
  source:
    remote:
      path: 2.0.x/src/NodaTime/Duration.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: ToBigIntegerNanoseconds
    path: src/NodaTime/Duration.cs
    startLine: 1186
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nConversion to a <xref href=\"System.Numerics.BigInteger\" data-throw-if-not-resolved=\"false\"></xref> number of nanoseconds, as a convenient built-in numeric\ntype which can always represent values in the range we need.\n"
  example: []
  syntax:
    content: public BigInteger ToBigIntegerNanoseconds()
    return:
      type: System.Numerics.BigInteger
      description: This duration as a number of nanoseconds, represented as a <code>BigInteger</code>.
    content.vb: Public Function ToBigIntegerNanoseconds As BigInteger
  overload: NodaTime.Duration.ToBigIntegerNanoseconds*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: NodaTime.Duration.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  commentId: M:NodaTime.Duration.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  id: System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  isEii: true
  parent: NodaTime.Duration
  langs:
  - csharp
  - vb
  name: ISerializable.GetObjectData(SerializationInfo, StreamingContext)
  nameWithType: Duration.ISerializable.GetObjectData(SerializationInfo, StreamingContext)
  fullName: NodaTime.Duration.System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext)
  type: Method
  source:
    remote:
      path: 2.0.x/src/NodaTime/Duration.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: System.Runtime.Serialization.ISerializable.GetObjectData
    path: src/NodaTime/Duration.cs
    startLine: 1242
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nImplementation of <xref href=\"System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo%2cSystem.Runtime.Serialization.StreamingContext)\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: >-
      [SecurityCritical]

      void ISerializable.GetObjectData(SerializationInfo info, StreamingContext context)
    parameters:
    - id: info
      type: System.Runtime.Serialization.SerializationInfo
      description: The <xref href="System.Runtime.Serialization.SerializationInfo" data-throw-if-not-resolved="false"></xref> to populate with data.
    - id: context
      type: System.Runtime.Serialization.StreamingContext
      description: The destination for this serialization.
    content.vb: >-
      <SecurityCritical>

      Sub System.Runtime.Serialization.ISerializable.GetObjectData(info As SerializationInfo, context As StreamingContext) Implements ISerializable.GetObjectData
  overload: NodaTime.Duration.System#Runtime#Serialization#ISerializable#GetObjectData*
  implements:
  - System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  attributes:
  - type: System.Security.SecurityCriticalAttribute
    ctor: System.Security.SecurityCriticalAttribute.#ctor
    arguments: []
  nameWithType.vb: Duration.System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo, StreamingContext)
  name.vb: System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo, StreamingContext)
references:
- uid: NodaTime.Instant
  commentId: T:NodaTime.Instant
  parent: NodaTime
  name: Instant
  nameWithType: Instant
  fullName: NodaTime.Instant
- uid: NodaTime.Period
  commentId: T:NodaTime.Period
  parent: NodaTime
  name: Period
  nameWithType: Period
  fullName: NodaTime.Period
- uid: NodaTime.Duration
  commentId: T:NodaTime.Duration
  parent: NodaTime
  name: Duration
  nameWithType: Duration
  fullName: NodaTime.Duration
- uid: NodaTime.ZonedDateTime
  commentId: T:NodaTime.ZonedDateTime
  parent: NodaTime
  name: ZonedDateTime
  nameWithType: ZonedDateTime
  fullName: NodaTime.ZonedDateTime
- uid: NodaTime.LocalDateTime
  commentId: T:NodaTime.LocalDateTime
  parent: NodaTime
  name: LocalDateTime
  nameWithType: LocalDateTime
  fullName: NodaTime.LocalDateTime
- uid: System.TimeSpan
  commentId: T:System.TimeSpan
  parent: System
  isExternal: true
  name: TimeSpan
  nameWithType: TimeSpan
  fullName: System.TimeSpan
- uid: System.Int64.MinValue
  commentId: F:System.Int64.MinValue
  isExternal: true
- uid: System.Int64.MaxValue
  commentId: F:System.Int64.MaxValue
  isExternal: true
- uid: System.Double
  commentId: T:System.Double
  parent: System
  isExternal: true
  name: Double
  nameWithType: Double
  fullName: System.Double
- uid: NodaTime
  commentId: N:NodaTime
  name: NodaTime
  nameWithType: NodaTime
  fullName: NodaTime
- uid: System.IEquatable{NodaTime.Duration}
  commentId: T:System.IEquatable{NodaTime.Duration}
  parent: System
  definition: System.IEquatable`1
  name: IEquatable<Duration>
  nameWithType: IEquatable<Duration>
  fullName: System.IEquatable<NodaTime.Duration>
  nameWithType.vb: IEquatable(Of Duration)
  fullName.vb: System.IEquatable(Of NodaTime.Duration)
  name.vb: IEquatable(Of Duration)
  spec.csharp:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: NodaTime.Duration
    name: Duration
    nameWithType: Duration
    fullName: NodaTime.Duration
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: NodaTime.Duration
    name: Duration
    nameWithType: Duration
    fullName: NodaTime.Duration
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IComparable{NodaTime.Duration}
  commentId: T:System.IComparable{NodaTime.Duration}
  parent: System
  definition: System.IComparable`1
  name: IComparable<Duration>
  nameWithType: IComparable<Duration>
  fullName: System.IComparable<NodaTime.Duration>
  nameWithType.vb: IComparable(Of Duration)
  fullName.vb: System.IComparable(Of NodaTime.Duration)
  name.vb: IComparable(Of Duration)
  spec.csharp:
  - uid: System.IComparable`1
    name: IComparable
    nameWithType: IComparable
    fullName: System.IComparable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: NodaTime.Duration
    name: Duration
    nameWithType: Duration
    fullName: NodaTime.Duration
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.IComparable`1
    name: IComparable
    nameWithType: IComparable
    fullName: System.IComparable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: NodaTime.Duration
    name: Duration
    nameWithType: Duration
    fullName: NodaTime.Duration
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IComparable
  commentId: T:System.IComparable
  parent: System
  isExternal: true
  name: IComparable
  nameWithType: IComparable
  fullName: System.IComparable
- uid: System.Xml.Serialization.IXmlSerializable
  commentId: T:System.Xml.Serialization.IXmlSerializable
  parent: System.Xml.Serialization
  isExternal: true
  name: IXmlSerializable
  nameWithType: IXmlSerializable
  fullName: System.Xml.Serialization.IXmlSerializable
- uid: System.IFormattable
  commentId: T:System.IFormattable
  parent: System
  isExternal: true
  name: IFormattable
  nameWithType: IFormattable
  fullName: System.IFormattable
- uid: System.Runtime.Serialization.ISerializable
  commentId: T:System.Runtime.Serialization.ISerializable
  parent: System.Runtime.Serialization
  isExternal: true
  name: ISerializable
  nameWithType: ISerializable
  fullName: System.Runtime.Serialization.ISerializable
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: System.IEquatable`1
  commentId: T:System.IEquatable`1
  isExternal: true
  name: IEquatable<T>
  nameWithType: IEquatable<T>
  fullName: System.IEquatable<T>
  nameWithType.vb: IEquatable(Of T)
  fullName.vb: System.IEquatable(Of T)
  name.vb: IEquatable(Of T)
  spec.csharp:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IComparable`1
  commentId: T:System.IComparable`1
  isExternal: true
  name: IComparable<T>
  nameWithType: IComparable<T>
  fullName: System.IComparable<T>
  nameWithType.vb: IComparable(Of T)
  fullName.vb: System.IComparable(Of T)
  name.vb: IComparable(Of T)
  spec.csharp:
  - uid: System.IComparable`1
    name: IComparable
    nameWithType: IComparable
    fullName: System.IComparable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.IComparable`1
    name: IComparable
    nameWithType: IComparable
    fullName: System.IComparable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Xml.Serialization
  commentId: N:System.Xml.Serialization
  isExternal: true
  name: System.Xml.Serialization
  nameWithType: System.Xml.Serialization
  fullName: System.Xml.Serialization
- uid: System.Runtime.Serialization
  commentId: N:System.Runtime.Serialization
  isExternal: true
  name: System.Runtime.Serialization
  nameWithType: System.Runtime.Serialization
  fullName: System.Runtime.Serialization
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: NodaTime.Duration.Zero*
  commentId: Overload:NodaTime.Duration.Zero
  name: Zero
  nameWithType: Duration.Zero
  fullName: NodaTime.Duration.Zero
- uid: NodaTime.Duration.Epsilon*
  commentId: Overload:NodaTime.Duration.Epsilon
  name: Epsilon
  nameWithType: Duration.Epsilon
  fullName: NodaTime.Duration.Epsilon
- uid: NodaTime.Duration.MaxValue*
  commentId: Overload:NodaTime.Duration.MaxValue
  name: MaxValue
  nameWithType: Duration.MaxValue
  fullName: NodaTime.Duration.MaxValue
- uid: NodaTime.Duration.MinValue*
  commentId: Overload:NodaTime.Duration.MinValue
  name: MinValue
  nameWithType: Duration.MinValue
  fullName: NodaTime.Duration.MinValue
- uid: NodaTime.Duration.Days*
  commentId: Overload:NodaTime.Duration.Days
  name: Days
  nameWithType: Duration.Days
  fullName: NodaTime.Duration.Days
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: NodaTime.Duration.NanosecondOfDay*
  commentId: Overload:NodaTime.Duration.NanosecondOfDay
  name: NanosecondOfDay
  nameWithType: Duration.NanosecondOfDay
  fullName: NodaTime.Duration.NanosecondOfDay
- uid: System.Int64
  commentId: T:System.Int64
  parent: System
  isExternal: true
  name: Int64
  nameWithType: Int64
  fullName: System.Int64
- uid: NodaTime.Duration.Hours*
  commentId: Overload:NodaTime.Duration.Hours
  name: Hours
  nameWithType: Duration.Hours
  fullName: NodaTime.Duration.Hours
- uid: NodaTime.Duration.Minutes*
  commentId: Overload:NodaTime.Duration.Minutes
  name: Minutes
  nameWithType: Duration.Minutes
  fullName: NodaTime.Duration.Minutes
- uid: NodaTime.Duration.Seconds*
  commentId: Overload:NodaTime.Duration.Seconds
  name: Seconds
  nameWithType: Duration.Seconds
  fullName: NodaTime.Duration.Seconds
- uid: NodaTime.Duration.Milliseconds*
  commentId: Overload:NodaTime.Duration.Milliseconds
  name: Milliseconds
  nameWithType: Duration.Milliseconds
  fullName: NodaTime.Duration.Milliseconds
- uid: NodaTime.Duration.SubsecondTicks*
  commentId: Overload:NodaTime.Duration.SubsecondTicks
  name: SubsecondTicks
  nameWithType: Duration.SubsecondTicks
  fullName: NodaTime.Duration.SubsecondTicks
- uid: NodaTime.Duration.SubsecondNanoseconds*
  commentId: Overload:NodaTime.Duration.SubsecondNanoseconds
  name: SubsecondNanoseconds
  nameWithType: Duration.SubsecondNanoseconds
  fullName: NodaTime.Duration.SubsecondNanoseconds
- uid: System.TimeSpan.Ticks
  commentId: P:System.TimeSpan.Ticks
  isExternal: true
- uid: NodaTime.Duration.TotalTicks
  commentId: P:NodaTime.Duration.TotalTicks
  isExternal: true
- uid: System.OverflowException
  commentId: T:System.OverflowException
  isExternal: true
- uid: NodaTime.Duration.BclCompatibleTicks*
  commentId: Overload:NodaTime.Duration.BclCompatibleTicks
  name: BclCompatibleTicks
  nameWithType: Duration.BclCompatibleTicks
  fullName: NodaTime.Duration.BclCompatibleTicks
- uid: System.TimeSpan.TotalDays
  commentId: P:System.TimeSpan.TotalDays
  isExternal: true
- uid: NodaTime.Duration.TotalDays*
  commentId: Overload:NodaTime.Duration.TotalDays
  name: TotalDays
  nameWithType: Duration.TotalDays
  fullName: NodaTime.Duration.TotalDays
- uid: System.TimeSpan.TotalHours
  commentId: P:System.TimeSpan.TotalHours
  isExternal: true
- uid: NodaTime.Duration.Hours
  commentId: P:NodaTime.Duration.Hours
  isExternal: true
- uid: NodaTime.Duration.TotalHours*
  commentId: Overload:NodaTime.Duration.TotalHours
  name: TotalHours
  nameWithType: Duration.TotalHours
  fullName: NodaTime.Duration.TotalHours
- uid: System.TimeSpan.TotalMinutes
  commentId: P:System.TimeSpan.TotalMinutes
  isExternal: true
- uid: NodaTime.Duration.Minutes
  commentId: P:NodaTime.Duration.Minutes
  isExternal: true
- uid: NodaTime.Duration.TotalMinutes*
  commentId: Overload:NodaTime.Duration.TotalMinutes
  name: TotalMinutes
  nameWithType: Duration.TotalMinutes
  fullName: NodaTime.Duration.TotalMinutes
- uid: System.TimeSpan.TotalSeconds
  commentId: P:System.TimeSpan.TotalSeconds
  isExternal: true
- uid: NodaTime.Duration.Seconds
  commentId: P:NodaTime.Duration.Seconds
  isExternal: true
- uid: NodaTime.Duration.TotalSeconds*
  commentId: Overload:NodaTime.Duration.TotalSeconds
  name: TotalSeconds
  nameWithType: Duration.TotalSeconds
  fullName: NodaTime.Duration.TotalSeconds
- uid: System.TimeSpan.TotalMilliseconds
  commentId: P:System.TimeSpan.TotalMilliseconds
  isExternal: true
- uid: NodaTime.Duration.Milliseconds
  commentId: P:NodaTime.Duration.Milliseconds
  isExternal: true
- uid: NodaTime.Duration.TotalMilliseconds*
  commentId: Overload:NodaTime.Duration.TotalMilliseconds
  name: TotalMilliseconds
  nameWithType: Duration.TotalMilliseconds
  fullName: NodaTime.Duration.TotalMilliseconds
- uid: NodaTime.Duration.BclCompatibleTicks
  commentId: P:NodaTime.Duration.BclCompatibleTicks
  isExternal: true
- uid: NodaTime.Duration.TotalTicks*
  commentId: Overload:NodaTime.Duration.TotalTicks
  name: TotalTicks
  nameWithType: Duration.TotalTicks
  fullName: NodaTime.Duration.TotalTicks
- uid: NodaTime.Duration.ToBigIntegerNanoseconds
  commentId: M:NodaTime.Duration.ToBigIntegerNanoseconds
  isExternal: true
- uid: NodaTime.Duration.FromNanoseconds(System.Numerics.BigInteger)
  commentId: M:NodaTime.Duration.FromNanoseconds(System.Numerics.BigInteger)
  isExternal: true
- uid: NodaTime.Duration.TotalNanoseconds*
  commentId: Overload:NodaTime.Duration.TotalNanoseconds
  name: TotalNanoseconds
  nameWithType: Duration.TotalNanoseconds
  fullName: NodaTime.Duration.TotalNanoseconds
- uid: System.ValueType.Equals(System.Object)
  commentId: M:System.ValueType.Equals(System.Object)
  parent: System.ValueType
  isExternal: true
  name: Equals(Object)
  nameWithType: ValueType.Equals(Object)
  fullName: System.ValueType.Equals(System.Object)
  spec.csharp:
  - uid: System.ValueType.Equals(System.Object)
    name: Equals
    nameWithType: ValueType.Equals
    fullName: System.ValueType.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.ValueType.Equals(System.Object)
    name: Equals
    nameWithType: ValueType.Equals
    fullName: System.ValueType.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: NodaTime.Duration.Equals*
  commentId: Overload:NodaTime.Duration.Equals
  name: Equals
  nameWithType: Duration.Equals
  fullName: NodaTime.Duration.Equals
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.ValueType
  commentId: T:System.ValueType
  parent: System
  isExternal: true
  name: ValueType
  nameWithType: ValueType
  fullName: System.ValueType
- uid: System.ValueType.GetHashCode
  commentId: M:System.ValueType.GetHashCode
  parent: System.ValueType
  isExternal: true
  name: GetHashCode()
  nameWithType: ValueType.GetHashCode()
  fullName: System.ValueType.GetHashCode()
  spec.csharp:
  - uid: System.ValueType.GetHashCode
    name: GetHashCode
    nameWithType: ValueType.GetHashCode
    fullName: System.ValueType.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.ValueType.GetHashCode
    name: GetHashCode
    nameWithType: ValueType.GetHashCode
    fullName: System.ValueType.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: NodaTime.Duration.GetHashCode*
  commentId: Overload:NodaTime.Duration.GetHashCode
  name: GetHashCode
  nameWithType: Duration.GetHashCode
  fullName: NodaTime.Duration.GetHashCode
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.ValueType.ToString
  commentId: M:System.ValueType.ToString
  parent: System.ValueType
  isExternal: true
  name: ToString()
  nameWithType: ValueType.ToString()
  fullName: System.ValueType.ToString()
  spec.csharp:
  - uid: System.ValueType.ToString
    name: ToString
    nameWithType: ValueType.ToString
    fullName: System.ValueType.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.ValueType.ToString
    name: ToString
    nameWithType: ValueType.ToString
    fullName: System.ValueType.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: NodaTime.Duration.ToString*
  commentId: Overload:NodaTime.Duration.ToString
  name: ToString
  nameWithType: Duration.ToString
  fullName: NodaTime.Duration.ToString
- uid: System.IFormatProvider
  commentId: T:System.IFormatProvider
  parent: System
  isExternal: true
  name: IFormatProvider
  nameWithType: IFormatProvider
  fullName: System.IFormatProvider
- uid: System.IFormattable.ToString(System.String,System.IFormatProvider)
  commentId: M:System.IFormattable.ToString(System.String,System.IFormatProvider)
  parent: System.IFormattable
  isExternal: true
  name: ToString(String, IFormatProvider)
  nameWithType: IFormattable.ToString(String, IFormatProvider)
  fullName: System.IFormattable.ToString(System.String, System.IFormatProvider)
  spec.csharp:
  - uid: System.IFormattable.ToString(System.String,System.IFormatProvider)
    name: ToString
    nameWithType: IFormattable.ToString
    fullName: System.IFormattable.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.IFormatProvider
    name: IFormatProvider
    nameWithType: IFormatProvider
    fullName: System.IFormatProvider
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IFormattable.ToString(System.String,System.IFormatProvider)
    name: ToString
    nameWithType: IFormattable.ToString
    fullName: System.IFormattable.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.IFormatProvider
    name: IFormatProvider
    nameWithType: IFormatProvider
    fullName: System.IFormatProvider
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: NodaTime.Duration.op_Addition*
  commentId: Overload:NodaTime.Duration.op_Addition
  name: Addition
  nameWithType: Duration.Addition
  fullName: NodaTime.Duration.Addition
- uid: NodaTime.Duration.Add*
  commentId: Overload:NodaTime.Duration.Add
  name: Add
  nameWithType: Duration.Add
  fullName: NodaTime.Duration.Add
- uid: NodaTime.Duration.Plus*
  commentId: Overload:NodaTime.Duration.Plus
  name: Plus
  nameWithType: Duration.Plus
  fullName: NodaTime.Duration.Plus
- uid: NodaTime.Duration.op_Subtraction*
  commentId: Overload:NodaTime.Duration.op_Subtraction
  name: Subtraction
  nameWithType: Duration.Subtraction
  fullName: NodaTime.Duration.Subtraction
- uid: NodaTime.Duration.Subtract*
  commentId: Overload:NodaTime.Duration.Subtract
  name: Subtract
  nameWithType: Duration.Subtract
  fullName: NodaTime.Duration.Subtract
- uid: NodaTime.Duration.Minus*
  commentId: Overload:NodaTime.Duration.Minus
  name: Minus
  nameWithType: Duration.Minus
  fullName: NodaTime.Duration.Minus
- uid: NodaTime.Duration.op_Division*
  commentId: Overload:NodaTime.Duration.op_Division
  name: Division
  nameWithType: Duration.Division
  fullName: NodaTime.Duration.Division
- uid: NodaTime.Duration.Divide*
  commentId: Overload:NodaTime.Duration.Divide
  name: Divide
  nameWithType: Duration.Divide
  fullName: NodaTime.Duration.Divide
- uid: NodaTime.Duration.op_Multiply*
  commentId: Overload:NodaTime.Duration.op_Multiply
  name: Multiply
  nameWithType: Duration.Multiply
  fullName: NodaTime.Duration.Multiply
- uid: NodaTime.Duration.Multiply*
  commentId: Overload:NodaTime.Duration.Multiply
  name: Multiply
  nameWithType: Duration.Multiply
  fullName: NodaTime.Duration.Multiply
- uid: NodaTime.Duration.op_Equality*
  commentId: Overload:NodaTime.Duration.op_Equality
  name: Equality
  nameWithType: Duration.Equality
  fullName: NodaTime.Duration.Equality
- uid: NodaTime.Duration.op_Inequality*
  commentId: Overload:NodaTime.Duration.op_Inequality
  name: Inequality
  nameWithType: Duration.Inequality
  fullName: NodaTime.Duration.Inequality
- uid: NodaTime.Duration.op_LessThan*
  commentId: Overload:NodaTime.Duration.op_LessThan
  name: LessThan
  nameWithType: Duration.LessThan
  fullName: NodaTime.Duration.LessThan
- uid: NodaTime.Duration.op_LessThanOrEqual*
  commentId: Overload:NodaTime.Duration.op_LessThanOrEqual
  name: LessThanOrEqual
  nameWithType: Duration.LessThanOrEqual
  fullName: NodaTime.Duration.LessThanOrEqual
- uid: NodaTime.Duration.op_GreaterThan*
  commentId: Overload:NodaTime.Duration.op_GreaterThan
  name: GreaterThan
  nameWithType: Duration.GreaterThan
  fullName: NodaTime.Duration.GreaterThan
- uid: NodaTime.Duration.op_GreaterThanOrEqual*
  commentId: Overload:NodaTime.Duration.op_GreaterThanOrEqual
  name: GreaterThanOrEqual
  nameWithType: Duration.GreaterThanOrEqual
  fullName: NodaTime.Duration.GreaterThanOrEqual
- uid: NodaTime.Duration.op_UnaryNegation*
  commentId: Overload:NodaTime.Duration.op_UnaryNegation
  name: UnaryNegation
  nameWithType: Duration.UnaryNegation
  fullName: NodaTime.Duration.UnaryNegation
- uid: NodaTime.Duration.Negate*
  commentId: Overload:NodaTime.Duration.Negate
  name: Negate
  nameWithType: Duration.Negate
  fullName: NodaTime.Duration.Negate
- uid: NodaTime.Duration.CompareTo*
  commentId: Overload:NodaTime.Duration.CompareTo
  name: CompareTo
  nameWithType: Duration.CompareTo
  fullName: NodaTime.Duration.CompareTo
- uid: System.IComparable{NodaTime.Duration}.CompareTo(NodaTime.Duration)
  commentId: M:System.IComparable{NodaTime.Duration}.CompareTo(NodaTime.Duration)
  parent: System.IComparable{NodaTime.Duration}
  definition: System.IComparable`1.CompareTo(`0)
  name: CompareTo(Duration)
  nameWithType: IComparable<Duration>.CompareTo(Duration)
  fullName: System.IComparable<NodaTime.Duration>.CompareTo(NodaTime.Duration)
  nameWithType.vb: IComparable(Of Duration).CompareTo(Duration)
  fullName.vb: System.IComparable(Of NodaTime.Duration).CompareTo(NodaTime.Duration)
  spec.csharp:
  - uid: System.IComparable`1.CompareTo(`0)
    name: CompareTo
    nameWithType: IComparable<Duration>.CompareTo
    fullName: System.IComparable<NodaTime.Duration>.CompareTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: NodaTime.Duration
    name: Duration
    nameWithType: Duration
    fullName: NodaTime.Duration
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IComparable`1.CompareTo(`0)
    name: CompareTo
    nameWithType: IComparable(Of Duration).CompareTo
    fullName: System.IComparable(Of NodaTime.Duration).CompareTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: NodaTime.Duration
    name: Duration
    nameWithType: Duration
    fullName: NodaTime.Duration
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IComparable`1.CompareTo(`0)
  commentId: M:System.IComparable`1.CompareTo(`0)
  isExternal: true
  name: CompareTo(T)
  nameWithType: IComparable<T>.CompareTo(T)
  fullName: System.IComparable<T>.CompareTo(T)
  nameWithType.vb: IComparable(Of T).CompareTo(T)
  fullName.vb: System.IComparable(Of T).CompareTo(T)
  spec.csharp:
  - uid: System.IComparable`1.CompareTo(`0)
    name: CompareTo
    nameWithType: IComparable<T>.CompareTo
    fullName: System.IComparable<T>.CompareTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IComparable`1.CompareTo(`0)
    name: CompareTo
    nameWithType: IComparable(Of T).CompareTo
    fullName: System.IComparable(Of T).CompareTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IComparable.CompareTo(System.Object)
  commentId: M:System.IComparable.CompareTo(System.Object)
  parent: System.IComparable
  isExternal: true
  name: CompareTo(Object)
  nameWithType: IComparable.CompareTo(Object)
  fullName: System.IComparable.CompareTo(System.Object)
  spec.csharp:
  - uid: System.IComparable.CompareTo(System.Object)
    name: CompareTo
    nameWithType: IComparable.CompareTo
    fullName: System.IComparable.CompareTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IComparable.CompareTo(System.Object)
    name: CompareTo
    nameWithType: IComparable.CompareTo
    fullName: System.IComparable.CompareTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: NodaTime.Duration.CompareTo(NodaTime.Duration)
  commentId: M:NodaTime.Duration.CompareTo(NodaTime.Duration)
  isExternal: true
- uid: System.ArgumentException
  commentId: T:System.ArgumentException
  parent: System
  isExternal: true
  name: ArgumentException
  nameWithType: ArgumentException
  fullName: System.ArgumentException
- uid: NodaTime.Duration.System#IComparable#CompareTo*
  commentId: Overload:NodaTime.Duration.System#IComparable#CompareTo
  name: IComparable.CompareTo
  nameWithType: Duration.IComparable.CompareTo
  fullName: NodaTime.Duration.System.IComparable.CompareTo
  nameWithType.vb: Duration.System.IComparable.CompareTo
  name.vb: System.IComparable.CompareTo
- uid: System.IEquatable{NodaTime.Duration}.Equals(NodaTime.Duration)
  commentId: M:System.IEquatable{NodaTime.Duration}.Equals(NodaTime.Duration)
  parent: System.IEquatable{NodaTime.Duration}
  definition: System.IEquatable`1.Equals(`0)
  name: Equals(Duration)
  nameWithType: IEquatable<Duration>.Equals(Duration)
  fullName: System.IEquatable<NodaTime.Duration>.Equals(NodaTime.Duration)
  nameWithType.vb: IEquatable(Of Duration).Equals(Duration)
  fullName.vb: System.IEquatable(Of NodaTime.Duration).Equals(NodaTime.Duration)
  spec.csharp:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    nameWithType: IEquatable<Duration>.Equals
    fullName: System.IEquatable<NodaTime.Duration>.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: NodaTime.Duration
    name: Duration
    nameWithType: Duration
    fullName: NodaTime.Duration
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    nameWithType: IEquatable(Of Duration).Equals
    fullName: System.IEquatable(Of NodaTime.Duration).Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: NodaTime.Duration
    name: Duration
    nameWithType: Duration
    fullName: NodaTime.Duration
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IEquatable`1.Equals(`0)
  commentId: M:System.IEquatable`1.Equals(`0)
  isExternal: true
  name: Equals(T)
  nameWithType: IEquatable<T>.Equals(T)
  fullName: System.IEquatable<T>.Equals(T)
  nameWithType.vb: IEquatable(Of T).Equals(T)
  fullName.vb: System.IEquatable(Of T).Equals(T)
  spec.csharp:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    nameWithType: IEquatable<T>.Equals
    fullName: System.IEquatable<T>.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    nameWithType: IEquatable(Of T).Equals
    fullName: System.IEquatable(Of T).Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: NodaTime.Duration.FromDays*
  commentId: Overload:NodaTime.Duration.FromDays
  name: FromDays
  nameWithType: Duration.FromDays
  fullName: NodaTime.Duration.FromDays
- uid: NodaTime.Duration.FromHours*
  commentId: Overload:NodaTime.Duration.FromHours
  name: FromHours
  nameWithType: Duration.FromHours
  fullName: NodaTime.Duration.FromHours
- uid: NodaTime.Duration.FromMinutes*
  commentId: Overload:NodaTime.Duration.FromMinutes
  name: FromMinutes
  nameWithType: Duration.FromMinutes
  fullName: NodaTime.Duration.FromMinutes
- uid: NodaTime.Duration.FromSeconds*
  commentId: Overload:NodaTime.Duration.FromSeconds
  name: FromSeconds
  nameWithType: Duration.FromSeconds
  fullName: NodaTime.Duration.FromSeconds
- uid: NodaTime.Duration.FromMilliseconds*
  commentId: Overload:NodaTime.Duration.FromMilliseconds
  name: FromMilliseconds
  nameWithType: Duration.FromMilliseconds
  fullName: NodaTime.Duration.FromMilliseconds
- uid: NodaTime.Duration.FromTicks*
  commentId: Overload:NodaTime.Duration.FromTicks
  name: FromTicks
  nameWithType: Duration.FromTicks
  fullName: NodaTime.Duration.FromTicks
- uid: NodaTime.Duration.FromNanoseconds*
  commentId: Overload:NodaTime.Duration.FromNanoseconds
  name: FromNanoseconds
  nameWithType: Duration.FromNanoseconds
  fullName: NodaTime.Duration.FromNanoseconds
- uid: System.Numerics.BigInteger
  commentId: T:System.Numerics.BigInteger
  parent: System.Numerics
  isExternal: true
  name: BigInteger
  nameWithType: BigInteger
  fullName: System.Numerics.BigInteger
- uid: System.Numerics
  commentId: N:System.Numerics
  isExternal: true
  name: System.Numerics
  nameWithType: System.Numerics
  fullName: System.Numerics
- uid: NodaTime.Duration.FromTimeSpan*
  commentId: Overload:NodaTime.Duration.FromTimeSpan
  name: FromTimeSpan
  nameWithType: Duration.FromTimeSpan
  fullName: NodaTime.Duration.FromTimeSpan
- uid: NodaTime.Duration.ToTimeSpan*
  commentId: Overload:NodaTime.Duration.ToTimeSpan
  name: ToTimeSpan
  nameWithType: Duration.ToTimeSpan
  fullName: NodaTime.Duration.ToTimeSpan
- uid: NodaTime.Duration.System#Xml#Serialization#IXmlSerializable#GetSchema*
  commentId: Overload:NodaTime.Duration.System#Xml#Serialization#IXmlSerializable#GetSchema
  name: IXmlSerializable.GetSchema
  nameWithType: Duration.IXmlSerializable.GetSchema
  fullName: NodaTime.Duration.System.Xml.Serialization.IXmlSerializable.GetSchema
  nameWithType.vb: Duration.System.Xml.Serialization.IXmlSerializable.GetSchema
  name.vb: System.Xml.Serialization.IXmlSerializable.GetSchema
- uid: System.Xml.Serialization.IXmlSerializable.GetSchema
  commentId: M:System.Xml.Serialization.IXmlSerializable.GetSchema
  parent: System.Xml.Serialization.IXmlSerializable
  isExternal: true
  name: GetSchema()
  nameWithType: IXmlSerializable.GetSchema()
  fullName: System.Xml.Serialization.IXmlSerializable.GetSchema()
  spec.csharp:
  - uid: System.Xml.Serialization.IXmlSerializable.GetSchema
    name: GetSchema
    nameWithType: IXmlSerializable.GetSchema
    fullName: System.Xml.Serialization.IXmlSerializable.GetSchema
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Xml.Serialization.IXmlSerializable.GetSchema
    name: GetSchema
    nameWithType: IXmlSerializable.GetSchema
    fullName: System.Xml.Serialization.IXmlSerializable.GetSchema
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Xml.Schema.XmlSchema
  commentId: T:System.Xml.Schema.XmlSchema
  parent: System.Xml.Schema
  isExternal: true
  name: XmlSchema
  nameWithType: XmlSchema
  fullName: System.Xml.Schema.XmlSchema
- uid: System.Xml.Schema
  commentId: N:System.Xml.Schema
  isExternal: true
  name: System.Xml.Schema
  nameWithType: System.Xml.Schema
  fullName: System.Xml.Schema
- uid: NodaTime.Duration.System#Xml#Serialization#IXmlSerializable#ReadXml*
  commentId: Overload:NodaTime.Duration.System#Xml#Serialization#IXmlSerializable#ReadXml
  name: IXmlSerializable.ReadXml
  nameWithType: Duration.IXmlSerializable.ReadXml
  fullName: NodaTime.Duration.System.Xml.Serialization.IXmlSerializable.ReadXml
  nameWithType.vb: Duration.System.Xml.Serialization.IXmlSerializable.ReadXml
  name.vb: System.Xml.Serialization.IXmlSerializable.ReadXml
- uid: System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)
  commentId: M:System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)
  parent: System.Xml.Serialization.IXmlSerializable
  isExternal: true
  name: ReadXml(XmlReader)
  nameWithType: IXmlSerializable.ReadXml(XmlReader)
  fullName: System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)
  spec.csharp:
  - uid: System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)
    name: ReadXml
    nameWithType: IXmlSerializable.ReadXml
    fullName: System.Xml.Serialization.IXmlSerializable.ReadXml
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Xml.XmlReader
    name: XmlReader
    nameWithType: XmlReader
    fullName: System.Xml.XmlReader
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)
    name: ReadXml
    nameWithType: IXmlSerializable.ReadXml
    fullName: System.Xml.Serialization.IXmlSerializable.ReadXml
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Xml.XmlReader
    name: XmlReader
    nameWithType: XmlReader
    fullName: System.Xml.XmlReader
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Xml.XmlReader
  commentId: T:System.Xml.XmlReader
  parent: System.Xml
  isExternal: true
  name: XmlReader
  nameWithType: XmlReader
  fullName: System.Xml.XmlReader
- uid: System.Xml
  commentId: N:System.Xml
  isExternal: true
  name: System.Xml
  nameWithType: System.Xml
  fullName: System.Xml
- uid: NodaTime.Duration.System#Xml#Serialization#IXmlSerializable#WriteXml*
  commentId: Overload:NodaTime.Duration.System#Xml#Serialization#IXmlSerializable#WriteXml
  name: IXmlSerializable.WriteXml
  nameWithType: Duration.IXmlSerializable.WriteXml
  fullName: NodaTime.Duration.System.Xml.Serialization.IXmlSerializable.WriteXml
  nameWithType.vb: Duration.System.Xml.Serialization.IXmlSerializable.WriteXml
  name.vb: System.Xml.Serialization.IXmlSerializable.WriteXml
- uid: System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)
  commentId: M:System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)
  parent: System.Xml.Serialization.IXmlSerializable
  isExternal: true
  name: WriteXml(XmlWriter)
  nameWithType: IXmlSerializable.WriteXml(XmlWriter)
  fullName: System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)
  spec.csharp:
  - uid: System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)
    name: WriteXml
    nameWithType: IXmlSerializable.WriteXml
    fullName: System.Xml.Serialization.IXmlSerializable.WriteXml
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Xml.XmlWriter
    name: XmlWriter
    nameWithType: XmlWriter
    fullName: System.Xml.XmlWriter
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)
    name: WriteXml
    nameWithType: IXmlSerializable.WriteXml
    fullName: System.Xml.Serialization.IXmlSerializable.WriteXml
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Xml.XmlWriter
    name: XmlWriter
    nameWithType: XmlWriter
    fullName: System.Xml.XmlWriter
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Xml.XmlWriter
  commentId: T:System.Xml.XmlWriter
  parent: System.Xml
  isExternal: true
  name: XmlWriter
  nameWithType: XmlWriter
  fullName: System.Xml.XmlWriter
- uid: NodaTime.Duration.ToInt64Nanoseconds*
  commentId: Overload:NodaTime.Duration.ToInt64Nanoseconds
  name: ToInt64Nanoseconds
  nameWithType: Duration.ToInt64Nanoseconds
  fullName: NodaTime.Duration.ToInt64Nanoseconds
- uid: NodaTime.Duration.ToBigIntegerNanoseconds*
  commentId: Overload:NodaTime.Duration.ToBigIntegerNanoseconds
  name: ToBigIntegerNanoseconds
  nameWithType: Duration.ToBigIntegerNanoseconds
  fullName: NodaTime.Duration.ToBigIntegerNanoseconds
- uid: System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  commentId: M:System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  parent: System.Runtime.Serialization.ISerializable
  isExternal: true
  name: GetObjectData(SerializationInfo, StreamingContext)
  nameWithType: ISerializable.GetObjectData(SerializationInfo, StreamingContext)
  fullName: System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext)
  spec.csharp:
  - uid: System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
    name: GetObjectData
    nameWithType: ISerializable.GetObjectData
    fullName: System.Runtime.Serialization.ISerializable.GetObjectData
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Runtime.Serialization.SerializationInfo
    name: SerializationInfo
    nameWithType: SerializationInfo
    fullName: System.Runtime.Serialization.SerializationInfo
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Runtime.Serialization.StreamingContext
    name: StreamingContext
    nameWithType: StreamingContext
    fullName: System.Runtime.Serialization.StreamingContext
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
    name: GetObjectData
    nameWithType: ISerializable.GetObjectData
    fullName: System.Runtime.Serialization.ISerializable.GetObjectData
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Runtime.Serialization.SerializationInfo
    name: SerializationInfo
    nameWithType: SerializationInfo
    fullName: System.Runtime.Serialization.SerializationInfo
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Runtime.Serialization.StreamingContext
    name: StreamingContext
    nameWithType: StreamingContext
    fullName: System.Runtime.Serialization.StreamingContext
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Runtime.Serialization.SerializationInfo
  commentId: T:System.Runtime.Serialization.SerializationInfo
  parent: System.Runtime.Serialization
  isExternal: true
  name: SerializationInfo
  nameWithType: SerializationInfo
  fullName: System.Runtime.Serialization.SerializationInfo
- uid: NodaTime.Duration.System#Runtime#Serialization#ISerializable#GetObjectData*
  commentId: Overload:NodaTime.Duration.System#Runtime#Serialization#ISerializable#GetObjectData
  name: ISerializable.GetObjectData
  nameWithType: Duration.ISerializable.GetObjectData
  fullName: NodaTime.Duration.System.Runtime.Serialization.ISerializable.GetObjectData
  nameWithType.vb: Duration.System.Runtime.Serialization.ISerializable.GetObjectData
  name.vb: System.Runtime.Serialization.ISerializable.GetObjectData
- uid: System.Runtime.Serialization.StreamingContext
  commentId: T:System.Runtime.Serialization.StreamingContext
  parent: System.Runtime.Serialization
  isExternal: true
  name: StreamingContext
  nameWithType: StreamingContext
  fullName: System.Runtime.Serialization.StreamingContext
shouldSkipMarkup: true
