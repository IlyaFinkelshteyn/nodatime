### YamlMime:ManagedReference
items:
- uid: NodaTime.Text.CompositePatternBuilder`1
  commentId: T:NodaTime.Text.CompositePatternBuilder`1
  id: CompositePatternBuilder`1
  parent: NodaTime.Text
  children:
  - NodaTime.Text.CompositePatternBuilder`1.Add(NodaTime.Text.IPattern{`0},System.Func{`0,System.Boolean})
  - NodaTime.Text.CompositePatternBuilder`1.Build
  - NodaTime.Text.CompositePatternBuilder`1.System#Collections#Generic#IEnumerable{NodaTime#Text#IPattern{T}}#GetEnumerator
  - NodaTime.Text.CompositePatternBuilder`1.System#Collections#IEnumerable#GetEnumerator
  langs:
  - csharp
  - vb
  name: CompositePatternBuilder<T>
  nameWithType: CompositePatternBuilder<T>
  fullName: NodaTime.Text.CompositePatternBuilder<T>
  type: Class
  source:
    remote:
      path: 2.0.x/src/NodaTime/Text/CompositePatternBuilder.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: CompositePatternBuilder
    path: src/NodaTime/Text/CompositePatternBuilder.cs
    startLine: 33
  assemblies:
  - NodaTime
  namespace: NodaTime.Text
  summary: "\nA builder for composite patterns.\n"
  remarks: "\nA composite pattern is a combination of multiple patterns. When parsing, these are checked\nin the order in which they are added to the builder with the <xref href=\"NodaTime.Text.CompositePatternBuilder%601.Add(NodaTime.Text.IPattern%7b%600%7d%2cSystem.Func%7b%600%2cSystem.Boolean%7d)\" data-throw-if-not-resolved=\"false\"></xref>\nmethod, by trying to parse and seeing if the result is a successful one. When formatting,\nthe patterns are checked in the reverse order, using the predicate provided along with the pattern\nwhen calling <code>Add</code>. The intention is that patterns are added in &quot;most precise first&quot; order,\nand the predicate should indicate whether it can fully represent the given value - so the &quot;less precise&quot;\n(and therefore usually shorter) pattern can be used first.\n"
  example: []
  syntax:
    content: 'public sealed class CompositePatternBuilder<T> : IEnumerable<IPattern<T>>, IEnumerable'
    typeParameters:
    - id: T
      description: The type of value to be parsed or formatted by the resulting pattern.
    content.vb: >-
      Public NotInheritable Class CompositePatternBuilder(Of T)
          Implements IEnumerable(Of IPattern(Of T)), IEnumerable
  inheritance:
  - System.Object
  implements:
  - System.Collections.Generic.IEnumerable{NodaTime.Text.IPattern{{T}}}
  - System.Collections.IEnumerable
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  nameWithType.vb: CompositePatternBuilder(Of T)
  modifiers.csharp:
  - public
  - sealed
  - class
  modifiers.vb:
  - Public
  - NotInheritable
  - Class
  fullName.vb: NodaTime.Text.CompositePatternBuilder(Of T)
  name.vb: CompositePatternBuilder(Of T)
- uid: NodaTime.Text.CompositePatternBuilder`1.Add(NodaTime.Text.IPattern{`0},System.Func{`0,System.Boolean})
  commentId: M:NodaTime.Text.CompositePatternBuilder`1.Add(NodaTime.Text.IPattern{`0},System.Func{`0,System.Boolean})
  id: Add(NodaTime.Text.IPattern{`0},System.Func{`0,System.Boolean})
  parent: NodaTime.Text.CompositePatternBuilder`1
  langs:
  - csharp
  - vb
  name: Add(IPattern<T>, Func<T, Boolean>)
  nameWithType: CompositePatternBuilder<T>.Add(IPattern<T>, Func<T, Boolean>)
  fullName: NodaTime.Text.CompositePatternBuilder<T>.Add(NodaTime.Text.IPattern<T>, System.Func<T, System.Boolean>)
  type: Method
  source:
    remote:
      path: 2.0.x/src/NodaTime/Text/CompositePatternBuilder.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: Add
    path: src/NodaTime/Text/CompositePatternBuilder.cs
    startLine: 45
  assemblies:
  - NodaTime
  namespace: NodaTime.Text
  summary: "\nAdds a component pattern to this builder.\n"
  example: []
  syntax:
    content: public void Add(IPattern<T> pattern, Func<T, bool> formatPredicate)
    parameters:
    - id: pattern
      type: NodaTime.Text.IPattern{{T}}
      description: The component pattern to use as part of the eventual composite pattern.
    - id: formatPredicate
      type: System.Func{{T},System.Boolean}
      description: >-
        A predicate to determine whether or not this pattern is suitable for

        formatting the given value.
    content.vb: Public Sub Add(pattern As IPattern(Of T), formatPredicate As Func(Of T, Boolean))
  overload: NodaTime.Text.CompositePatternBuilder`1.Add*
  nameWithType.vb: CompositePatternBuilder(Of T).Add(IPattern(Of T), Func(Of T, Boolean))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: NodaTime.Text.CompositePatternBuilder(Of T).Add(NodaTime.Text.IPattern(Of T), System.Func(Of T, System.Boolean))
  name.vb: Add(IPattern(Of T), Func(Of T, Boolean))
- uid: NodaTime.Text.CompositePatternBuilder`1.Build
  commentId: M:NodaTime.Text.CompositePatternBuilder`1.Build
  id: Build
  parent: NodaTime.Text.CompositePatternBuilder`1
  langs:
  - csharp
  - vb
  name: Build()
  nameWithType: CompositePatternBuilder<T>.Build()
  fullName: NodaTime.Text.CompositePatternBuilder<T>.Build()
  type: Method
  source:
    remote:
      path: 2.0.x/src/NodaTime/Text/CompositePatternBuilder.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: Build
    path: src/NodaTime/Text/CompositePatternBuilder.cs
    startLine: 57
  assemblies:
  - NodaTime
  namespace: NodaTime.Text
  summary: "\nBuilds a composite pattern from this builder. Further changes to this builder\nwill have no impact on the returned pattern.\n"
  example: []
  syntax:
    content: public IPattern<T> Build()
    return:
      type: NodaTime.Text.IPattern{{T}}
      description: A pattern using the patterns added to this builder.
    content.vb: Public Function Build As IPattern(Of T)
  overload: NodaTime.Text.CompositePatternBuilder`1.Build*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: No component patterns have been added.
  nameWithType.vb: CompositePatternBuilder(Of T).Build()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: NodaTime.Text.CompositePatternBuilder(Of T).Build()
- uid: NodaTime.Text.CompositePatternBuilder`1.System#Collections#Generic#IEnumerable{NodaTime#Text#IPattern{T}}#GetEnumerator
  commentId: M:NodaTime.Text.CompositePatternBuilder`1.System#Collections#Generic#IEnumerable{NodaTime#Text#IPattern{T}}#GetEnumerator
  id: System#Collections#Generic#IEnumerable{NodaTime#Text#IPattern{T}}#GetEnumerator
  isEii: true
  parent: NodaTime.Text.CompositePatternBuilder`1
  langs:
  - csharp
  - vb
  name: IEnumerable<IPattern<T>>.GetEnumerator()
  nameWithType: CompositePatternBuilder<T>.IEnumerable<IPattern<T>>.GetEnumerator()
  fullName: NodaTime.Text.CompositePatternBuilder<T>.System.Collections.Generic.IEnumerable<NodaTime.Text.IPattern<T>>.GetEnumerator()
  type: Method
  source:
    remote:
      path: 2.0.x/src/NodaTime/Text/CompositePatternBuilder.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: System.Collections.Generic.IEnumerable<NodaTime.Text.IPattern<T>>.GetEnumerator
    path: src/NodaTime/Text/CompositePatternBuilder.cs
    startLine: 70
  assemblies:
  - NodaTime
  namespace: NodaTime.Text
  example: []
  syntax:
    content: IEnumerator<IPattern<T>> IEnumerable<IPattern<T>>.GetEnumerator()
    return:
      type: System.Collections.Generic.IEnumerator{NodaTime.Text.IPattern{{T}}}
    content.vb: Function System.Collections.Generic.IEnumerable<NodaTime.Text.IPattern<T>>.GetEnumerator As IEnumerator(Of IPattern(Of T)) Implements IEnumerable(Of IPattern(Of T)).GetEnumerator
  overload: NodaTime.Text.CompositePatternBuilder`1.System#Collections#Generic#IEnumerable{NodaTime#Text#IPattern{T}}#GetEnumerator*
  implements:
  - System.Collections.Generic.IEnumerable{NodaTime.Text.IPattern{{T}}}.GetEnumerator
  nameWithType.vb: CompositePatternBuilder(Of T).System.Collections.Generic.IEnumerable<NodaTime.Text.IPattern<T>>.GetEnumerator()
  fullName.vb: NodaTime.Text.CompositePatternBuilder(Of T).System.Collections.Generic.IEnumerable<NodaTime.Text.IPattern<T>>.GetEnumerator()
  name.vb: System.Collections.Generic.IEnumerable<NodaTime.Text.IPattern<T>>.GetEnumerator()
- uid: NodaTime.Text.CompositePatternBuilder`1.System#Collections#IEnumerable#GetEnumerator
  commentId: M:NodaTime.Text.CompositePatternBuilder`1.System#Collections#IEnumerable#GetEnumerator
  id: System#Collections#IEnumerable#GetEnumerator
  isEii: true
  parent: NodaTime.Text.CompositePatternBuilder`1
  langs:
  - csharp
  - vb
  name: IEnumerable.GetEnumerator()
  nameWithType: CompositePatternBuilder<T>.IEnumerable.GetEnumerator()
  fullName: NodaTime.Text.CompositePatternBuilder<T>.System.Collections.IEnumerable.GetEnumerator()
  type: Method
  source:
    remote:
      path: 2.0.x/src/NodaTime/Text/CompositePatternBuilder.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: System.Collections.IEnumerable.GetEnumerator
    path: src/NodaTime/Text/CompositePatternBuilder.cs
    startLine: 72
  assemblies:
  - NodaTime
  namespace: NodaTime.Text
  example: []
  syntax:
    content: IEnumerator IEnumerable.GetEnumerator()
    return:
      type: System.Collections.IEnumerator
    content.vb: Function System.Collections.IEnumerable.GetEnumerator As IEnumerator Implements IEnumerable.GetEnumerator
  overload: NodaTime.Text.CompositePatternBuilder`1.System#Collections#IEnumerable#GetEnumerator*
  implements:
  - System.Collections.IEnumerable.GetEnumerator
  nameWithType.vb: CompositePatternBuilder(Of T).System.Collections.IEnumerable.GetEnumerator()
  fullName.vb: NodaTime.Text.CompositePatternBuilder(Of T).System.Collections.IEnumerable.GetEnumerator()
  name.vb: System.Collections.IEnumerable.GetEnumerator()
references:
- uid: NodaTime.Text.CompositePatternBuilder`1.Add(NodaTime.Text.IPattern{`0},System.Func{`0,System.Boolean})
  commentId: M:NodaTime.Text.CompositePatternBuilder`1.Add(NodaTime.Text.IPattern{`0},System.Func{`0,System.Boolean})
  isExternal: true
- uid: NodaTime.Text.CompositePatternBuilder`1.Build
  commentId: M:NodaTime.Text.CompositePatternBuilder`1.Build
  isExternal: true
- uid: NodaTime.Text
  commentId: N:NodaTime.Text
  name: NodaTime.Text
  nameWithType: NodaTime.Text
  fullName: NodaTime.Text
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Collections.Generic.IEnumerable{NodaTime.Text.IPattern{{T}}}
  commentId: T:System.Collections.Generic.IEnumerable{NodaTime.Text.IPattern{`0}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<IPattern<T>>
  nameWithType: IEnumerable<IPattern<T>>
  fullName: System.Collections.Generic.IEnumerable<NodaTime.Text.IPattern<T>>
  nameWithType.vb: IEnumerable(Of IPattern(Of T))
  fullName.vb: System.Collections.Generic.IEnumerable(Of NodaTime.Text.IPattern(Of T))
  name.vb: IEnumerable(Of IPattern(Of T))
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: NodaTime.Text.IPattern`1
    name: IPattern
    nameWithType: IPattern
    fullName: NodaTime.Text.IPattern
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: NodaTime.Text.IPattern`1
    name: IPattern
    nameWithType: IPattern
    fullName: NodaTime.Text.IPattern
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.IEnumerable
  commentId: T:System.Collections.IEnumerable
  parent: System.Collections
  isExternal: true
  name: IEnumerable
  nameWithType: IEnumerable
  fullName: System.Collections.IEnumerable
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: System.Collections
  commentId: N:System.Collections
  isExternal: true
  name: System.Collections
  nameWithType: System.Collections
  fullName: System.Collections
- uid: NodaTime.Text.CompositePatternBuilder`1.Add*
  commentId: Overload:NodaTime.Text.CompositePatternBuilder`1.Add
  name: Add
  nameWithType: CompositePatternBuilder<T>.Add
  fullName: NodaTime.Text.CompositePatternBuilder<T>.Add
  nameWithType.vb: CompositePatternBuilder(Of T).Add
  fullName.vb: NodaTime.Text.CompositePatternBuilder(Of T).Add
- uid: NodaTime.Text.IPattern{{T}}
  commentId: T:NodaTime.Text.IPattern{`0}
  parent: NodaTime.Text
  definition: NodaTime.Text.IPattern`1
  name: IPattern<T>
  nameWithType: IPattern<T>
  fullName: NodaTime.Text.IPattern<T>
  nameWithType.vb: IPattern(Of T)
  fullName.vb: NodaTime.Text.IPattern(Of T)
  name.vb: IPattern(Of T)
  spec.csharp:
  - uid: NodaTime.Text.IPattern`1
    name: IPattern
    nameWithType: IPattern
    fullName: NodaTime.Text.IPattern
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: NodaTime.Text.IPattern`1
    name: IPattern
    nameWithType: IPattern
    fullName: NodaTime.Text.IPattern
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func{{T},System.Boolean}
  commentId: T:System.Func{`0,System.Boolean}
  parent: System
  definition: System.Func`2
  name: Func<T, Boolean>
  nameWithType: Func<T, Boolean>
  fullName: System.Func<T, System.Boolean>
  nameWithType.vb: Func(Of T, Boolean)
  fullName.vb: System.Func(Of T, System.Boolean)
  name.vb: Func(Of T, Boolean)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: NodaTime.Text.IPattern`1
  commentId: T:NodaTime.Text.IPattern`1
  name: IPattern<T>
  nameWithType: IPattern<T>
  fullName: NodaTime.Text.IPattern<T>
  nameWithType.vb: IPattern(Of T)
  fullName.vb: NodaTime.Text.IPattern(Of T)
  name.vb: IPattern(Of T)
  spec.csharp:
  - uid: NodaTime.Text.IPattern`1
    name: IPattern
    nameWithType: IPattern
    fullName: NodaTime.Text.IPattern
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: NodaTime.Text.IPattern`1
    name: IPattern
    nameWithType: IPattern
    fullName: NodaTime.Text.IPattern
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func`2
  commentId: T:System.Func`2
  isExternal: true
  name: Func<T, TResult>
  nameWithType: Func<T, TResult>
  fullName: System.Func<T, TResult>
  nameWithType.vb: Func(Of T, TResult)
  fullName.vb: System.Func(Of T, TResult)
  name.vb: Func(Of T, TResult)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.InvalidOperationException
  commentId: T:System.InvalidOperationException
  isExternal: true
- uid: NodaTime.Text.CompositePatternBuilder`1.Build*
  commentId: Overload:NodaTime.Text.CompositePatternBuilder`1.Build
  name: Build
  nameWithType: CompositePatternBuilder<T>.Build
  fullName: NodaTime.Text.CompositePatternBuilder<T>.Build
  nameWithType.vb: CompositePatternBuilder(Of T).Build
  fullName.vb: NodaTime.Text.CompositePatternBuilder(Of T).Build
- uid: NodaTime.Text.CompositePatternBuilder`1.System#Collections#Generic#IEnumerable{NodaTime#Text#IPattern{T}}#GetEnumerator*
  commentId: Overload:NodaTime.Text.CompositePatternBuilder`1.System#Collections#Generic#IEnumerable{NodaTime#Text#IPattern{T}}#GetEnumerator
  name: IEnumerable<IPattern<T>>.GetEnumerator
  nameWithType: CompositePatternBuilder<T>.IEnumerable<IPattern<T>>.GetEnumerator
  fullName: NodaTime.Text.CompositePatternBuilder<T>.System.Collections.Generic.IEnumerable<NodaTime.Text.IPattern<T>>.GetEnumerator
  nameWithType.vb: CompositePatternBuilder(Of T).System.Collections.Generic.IEnumerable<NodaTime.Text.IPattern<T>>.GetEnumerator
  fullName.vb: NodaTime.Text.CompositePatternBuilder(Of T).System.Collections.Generic.IEnumerable<NodaTime.Text.IPattern<T>>.GetEnumerator
  name.vb: System.Collections.Generic.IEnumerable<NodaTime.Text.IPattern<T>>.GetEnumerator
- uid: System.Collections.Generic.IEnumerable{NodaTime.Text.IPattern{{T}}}.GetEnumerator
  commentId: M:System.Collections.Generic.IEnumerable{NodaTime.Text.IPattern{`0}}.GetEnumerator
  parent: System.Collections.Generic.IEnumerable{NodaTime.Text.IPattern{{T}}}
  definition: System.Collections.Generic.IEnumerable`1.GetEnumerator
  name: GetEnumerator()
  nameWithType: IEnumerable<IPattern<T>>.GetEnumerator()
  fullName: System.Collections.Generic.IEnumerable<NodaTime.Text.IPattern<T>>.GetEnumerator()
  nameWithType.vb: IEnumerable(Of IPattern(Of T)).GetEnumerator()
  fullName.vb: System.Collections.Generic.IEnumerable(Of NodaTime.Text.IPattern(Of T)).GetEnumerator()
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable<IPattern<T>>.GetEnumerator
    fullName: System.Collections.Generic.IEnumerable<NodaTime.Text.IPattern<T>>.GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable(Of IPattern(Of T)).GetEnumerator
    fullName: System.Collections.Generic.IEnumerable(Of NodaTime.Text.IPattern(Of T)).GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerator{NodaTime.Text.IPattern{{T}}}
  commentId: T:System.Collections.Generic.IEnumerator{NodaTime.Text.IPattern{`0}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerator`1
  name: IEnumerator<IPattern<T>>
  nameWithType: IEnumerator<IPattern<T>>
  fullName: System.Collections.Generic.IEnumerator<NodaTime.Text.IPattern<T>>
  nameWithType.vb: IEnumerator(Of IPattern(Of T))
  fullName.vb: System.Collections.Generic.IEnumerator(Of NodaTime.Text.IPattern(Of T))
  name.vb: IEnumerator(Of IPattern(Of T))
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    nameWithType: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: NodaTime.Text.IPattern`1
    name: IPattern
    nameWithType: IPattern
    fullName: NodaTime.Text.IPattern
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    nameWithType: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: NodaTime.Text.IPattern`1
    name: IPattern
    nameWithType: IPattern
    fullName: NodaTime.Text.IPattern
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
  commentId: M:System.Collections.Generic.IEnumerable`1.GetEnumerator
  isExternal: true
  name: GetEnumerator()
  nameWithType: IEnumerable<T>.GetEnumerator()
  fullName: System.Collections.Generic.IEnumerable<T>.GetEnumerator()
  nameWithType.vb: IEnumerable(Of T).GetEnumerator()
  fullName.vb: System.Collections.Generic.IEnumerable(Of T).GetEnumerator()
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable<T>.GetEnumerator
    fullName: System.Collections.Generic.IEnumerable<T>.GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable(Of T).GetEnumerator
    fullName: System.Collections.Generic.IEnumerable(Of T).GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerator`1
  commentId: T:System.Collections.Generic.IEnumerator`1
  isExternal: true
  name: IEnumerator<T>
  nameWithType: IEnumerator<T>
  fullName: System.Collections.Generic.IEnumerator<T>
  nameWithType.vb: IEnumerator(Of T)
  fullName.vb: System.Collections.Generic.IEnumerator(Of T)
  name.vb: IEnumerator(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    nameWithType: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    nameWithType: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: NodaTime.Text.CompositePatternBuilder`1.System#Collections#IEnumerable#GetEnumerator*
  commentId: Overload:NodaTime.Text.CompositePatternBuilder`1.System#Collections#IEnumerable#GetEnumerator
  name: IEnumerable.GetEnumerator
  nameWithType: CompositePatternBuilder<T>.IEnumerable.GetEnumerator
  fullName: NodaTime.Text.CompositePatternBuilder<T>.System.Collections.IEnumerable.GetEnumerator
  nameWithType.vb: CompositePatternBuilder(Of T).System.Collections.IEnumerable.GetEnumerator
  fullName.vb: NodaTime.Text.CompositePatternBuilder(Of T).System.Collections.IEnumerable.GetEnumerator
  name.vb: System.Collections.IEnumerable.GetEnumerator
- uid: System.Collections.IEnumerable.GetEnumerator
  commentId: M:System.Collections.IEnumerable.GetEnumerator
  parent: System.Collections.IEnumerable
  isExternal: true
  name: GetEnumerator()
  nameWithType: IEnumerable.GetEnumerator()
  fullName: System.Collections.IEnumerable.GetEnumerator()
  spec.csharp:
  - uid: System.Collections.IEnumerable.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable.GetEnumerator
    fullName: System.Collections.IEnumerable.GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.IEnumerable.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable.GetEnumerator
    fullName: System.Collections.IEnumerable.GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.IEnumerator
  commentId: T:System.Collections.IEnumerator
  parent: System.Collections
  isExternal: true
  name: IEnumerator
  nameWithType: IEnumerator
  fullName: System.Collections.IEnumerator
shouldSkipMarkup: true
