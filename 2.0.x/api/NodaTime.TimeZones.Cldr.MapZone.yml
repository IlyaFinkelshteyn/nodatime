### YamlMime:ManagedReference
items:
- uid: NodaTime.TimeZones.Cldr.MapZone
  commentId: T:NodaTime.TimeZones.Cldr.MapZone
  id: MapZone
  parent: NodaTime.TimeZones.Cldr
  children:
  - NodaTime.TimeZones.Cldr.MapZone.#ctor(System.String,System.String,System.Collections.Generic.IList{System.String})
  - NodaTime.TimeZones.Cldr.MapZone.Equals(NodaTime.TimeZones.Cldr.MapZone)
  - NodaTime.TimeZones.Cldr.MapZone.Equals(System.Object)
  - NodaTime.TimeZones.Cldr.MapZone.FixedOffsetTerritory
  - NodaTime.TimeZones.Cldr.MapZone.GetHashCode
  - NodaTime.TimeZones.Cldr.MapZone.PrimaryTerritory
  - NodaTime.TimeZones.Cldr.MapZone.Territory
  - NodaTime.TimeZones.Cldr.MapZone.ToString
  - NodaTime.TimeZones.Cldr.MapZone.TzdbIds
  - NodaTime.TimeZones.Cldr.MapZone.WindowsId
  langs:
  - csharp
  - vb
  name: MapZone
  nameWithType: MapZone
  fullName: NodaTime.TimeZones.Cldr.MapZone
  type: Class
  source:
    remote:
      path: 2.0.x/src/NodaTime/TimeZones/Cldr/MapZone.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: MapZone
    path: src/NodaTime/TimeZones/Cldr/MapZone.cs
    startLine: 19
  assemblies:
  - NodaTime
  namespace: NodaTime.TimeZones.Cldr
  summary: "\nRepresents a single <code>&lt;mapZone></code> element in the CLDR Windows zone mapping file. \n"
  example: []
  syntax:
    content: 'public sealed class MapZone : IEquatable<MapZone>'
    content.vb: >-
      Public NotInheritable Class MapZone
          Implements IEquatable(Of MapZone)
  inheritance:
  - System.Object
  implements:
  - System.IEquatable{NodaTime.TimeZones.Cldr.MapZone}
  inheritedMembers:
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - sealed
  - class
  modifiers.vb:
  - Public
  - NotInheritable
  - Class
- uid: NodaTime.TimeZones.Cldr.MapZone.PrimaryTerritory
  commentId: F:NodaTime.TimeZones.Cldr.MapZone.PrimaryTerritory
  id: PrimaryTerritory
  parent: NodaTime.TimeZones.Cldr.MapZone
  langs:
  - csharp
  - vb
  name: PrimaryTerritory
  nameWithType: MapZone.PrimaryTerritory
  fullName: NodaTime.TimeZones.Cldr.MapZone.PrimaryTerritory
  type: Field
  source:
    remote:
      path: 2.0.x/src/NodaTime/TimeZones/Cldr/MapZone.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: PrimaryTerritory
    path: src/NodaTime/TimeZones/Cldr/MapZone.cs
    startLine: 26
  assemblies:
  - NodaTime
  namespace: NodaTime.TimeZones.Cldr
  summary: "\nIdentifier used for the primary territory of each Windows time zone. A zone mapping with\nthis territory will always have a single entry. The value of this constant is &quot;001&quot;.\n"
  example: []
  syntax:
    content: public const string PrimaryTerritory = "001"
    return:
      type: System.String
    content.vb: Public Const PrimaryTerritory As String = "001"
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: NodaTime.TimeZones.Cldr.MapZone.FixedOffsetTerritory
  commentId: F:NodaTime.TimeZones.Cldr.MapZone.FixedOffsetTerritory
  id: FixedOffsetTerritory
  parent: NodaTime.TimeZones.Cldr.MapZone
  langs:
  - csharp
  - vb
  name: FixedOffsetTerritory
  nameWithType: MapZone.FixedOffsetTerritory
  fullName: NodaTime.TimeZones.Cldr.MapZone.FixedOffsetTerritory
  type: Field
  source:
    remote:
      path: 2.0.x/src/NodaTime/TimeZones/Cldr/MapZone.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: FixedOffsetTerritory
    path: src/NodaTime/TimeZones/Cldr/MapZone.cs
    startLine: 31
  assemblies:
  - NodaTime
  namespace: NodaTime.TimeZones.Cldr
  summary: "\nIdentifier used for the &quot;fixed offset&quot; territory. A zone mapping with\nthis territory will always have a single entry. The value of this constant is &quot;ZZ&quot;.\n"
  example: []
  syntax:
    content: public const string FixedOffsetTerritory = "ZZ"
    return:
      type: System.String
    content.vb: Public Const FixedOffsetTerritory As String = "ZZ"
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: NodaTime.TimeZones.Cldr.MapZone.WindowsId
  commentId: P:NodaTime.TimeZones.Cldr.MapZone.WindowsId
  id: WindowsId
  parent: NodaTime.TimeZones.Cldr.MapZone
  langs:
  - csharp
  - vb
  name: WindowsId
  nameWithType: MapZone.WindowsId
  fullName: NodaTime.TimeZones.Cldr.MapZone.WindowsId
  type: Property
  source:
    remote:
      path: 2.0.x/src/NodaTime/TimeZones/Cldr/MapZone.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: WindowsId
    path: src/NodaTime/TimeZones/Cldr/MapZone.cs
    startLine: 44
  assemblies:
  - NodaTime
  namespace: NodaTime.TimeZones.Cldr
  summary: "\nGets the Windows system time zone identifier for this mapping, such as &quot;Central Standard Time&quot;.\n"
  remarks: "\n<p>\nMost Windows system time zone identifiers use the name for the &quot;standard&quot; part of the zone as\nthe overall identifier. Don&apos;t be fooled: just because a time zone includes &quot;standard&quot; in its identifier\ndoesn&apos;t mean that it doesn&apos;t observe daylight saving time.\n</p>\n"
  example: []
  syntax:
    content: public string WindowsId { get; }
    parameters: []
    return:
      type: System.String
      description: The Windows system time zone identifier for this mapping, such as &quot;Central Standard Time&quot;.
    content.vb: Public ReadOnly Property WindowsId As String
  overload: NodaTime.TimeZones.Cldr.MapZone.WindowsId*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: NodaTime.TimeZones.Cldr.MapZone.Territory
  commentId: P:NodaTime.TimeZones.Cldr.MapZone.Territory
  id: Territory
  parent: NodaTime.TimeZones.Cldr.MapZone
  langs:
  - csharp
  - vb
  name: Territory
  nameWithType: MapZone.Territory
  fullName: NodaTime.TimeZones.Cldr.MapZone.Territory
  type: Property
  source:
    remote:
      path: 2.0.x/src/NodaTime/TimeZones/Cldr/MapZone.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: Territory
    path: src/NodaTime/TimeZones/Cldr/MapZone.cs
    startLine: 55
  assemblies:
  - NodaTime
  namespace: NodaTime.TimeZones.Cldr
  summary: "\nGets the territory code for this mapping.\n"
  remarks: "\nThis is typically either &quot;001&quot; to indicate that it&apos;s the primary territory for this ID, or\n&quot;ZZ&quot; to indicate a fixed-offset ID, or a different two-character capitalized code\nwhich indicates the geographical territory.\n"
  example: []
  syntax:
    content: public string Territory { get; }
    parameters: []
    return:
      type: System.String
      description: The territory code for this mapping.
    content.vb: Public ReadOnly Property Territory As String
  overload: NodaTime.TimeZones.Cldr.MapZone.Territory*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: NodaTime.TimeZones.Cldr.MapZone.TzdbIds
  commentId: P:NodaTime.TimeZones.Cldr.MapZone.TzdbIds
  id: TzdbIds
  parent: NodaTime.TimeZones.Cldr.MapZone
  langs:
  - csharp
  - vb
  name: TzdbIds
  nameWithType: MapZone.TzdbIds
  fullName: NodaTime.TimeZones.Cldr.MapZone.TzdbIds
  type: Property
  source:
    remote:
      path: 2.0.x/src/NodaTime/TimeZones/Cldr/MapZone.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: TzdbIds
    path: src/NodaTime/TimeZones/Cldr/MapZone.cs
    startLine: 67
  assemblies:
  - NodaTime
  namespace: NodaTime.TimeZones.Cldr
  summary: "\nGets a read-only non-empty collection of TZDB zone identifiers for this mapping, such as\n&quot;America/Chicago&quot; and &quot;America/Matamoros&quot; (both of which are TZDB zones associated with the &quot;Central Standard Time&quot;\nWindows system time zone).\n"
  remarks: "\nFor the primary and fixed-offset territory IDs (&quot;001&quot; and &quot;ZZ&quot;) this always\ncontains exactly one time zone ID.\n"
  example: []
  syntax:
    content: public IList<string> TzdbIds { get; }
    parameters: []
    return:
      type: System.Collections.Generic.IList{System.String}
      description: A read-only non-empty collection of TZDB zone identifiers for this mapping.
    content.vb: Public ReadOnly Property TzdbIds As IList(Of String)
  overload: NodaTime.TimeZones.Cldr.MapZone.TzdbIds*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: NodaTime.TimeZones.Cldr.MapZone.#ctor(System.String,System.String,System.Collections.Generic.IList{System.String})
  commentId: M:NodaTime.TimeZones.Cldr.MapZone.#ctor(System.String,System.String,System.Collections.Generic.IList{System.String})
  id: '#ctor(System.String,System.String,System.Collections.Generic.IList{System.String})'
  parent: NodaTime.TimeZones.Cldr.MapZone
  langs:
  - csharp
  - vb
  name: MapZone(String, String, IList<String>)
  nameWithType: MapZone.MapZone(String, String, IList<String>)
  fullName: NodaTime.TimeZones.Cldr.MapZone.MapZone(System.String, System.String, System.Collections.Generic.IList<System.String>)
  type: Constructor
  source:
    remote:
      path: 2.0.x/src/NodaTime/TimeZones/Cldr/MapZone.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: .ctor
    path: src/NodaTime/TimeZones/Cldr/MapZone.cs
    startLine: 79
  assemblies:
  - NodaTime
  namespace: NodaTime.TimeZones.Cldr
  summary: "\nCreates a new mapping entry.\n"
  remarks: "\nThis constructor is only public for the sake of testability.\n"
  example: []
  syntax:
    content: public MapZone(string windowsId, string territory, IList<string> tzdbIds)
    parameters:
    - id: windowsId
      type: System.String
      description: Windows system time zone identifier. Must not be null.
    - id: territory
      type: System.String
      description: Territory code. Must not be null.
    - id: tzdbIds
      type: System.Collections.Generic.IList{System.String}
      description: >-
        List of territory codes. Must not be null, and must not

        contains null values.
    content.vb: Public Sub New(windowsId As String, territory As String, tzdbIds As IList(Of String))
  overload: NodaTime.TimeZones.Cldr.MapZone.#ctor*
  nameWithType.vb: MapZone.MapZone(String, String, IList(Of String))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: NodaTime.TimeZones.Cldr.MapZone.MapZone(System.String, System.String, System.Collections.Generic.IList(Of System.String))
  name.vb: MapZone(String, String, IList(Of String))
- uid: NodaTime.TimeZones.Cldr.MapZone.Equals(NodaTime.TimeZones.Cldr.MapZone)
  commentId: M:NodaTime.TimeZones.Cldr.MapZone.Equals(NodaTime.TimeZones.Cldr.MapZone)
  id: Equals(NodaTime.TimeZones.Cldr.MapZone)
  parent: NodaTime.TimeZones.Cldr.MapZone
  langs:
  - csharp
  - vb
  name: Equals(MapZone)
  nameWithType: MapZone.Equals(MapZone)
  fullName: NodaTime.TimeZones.Cldr.MapZone.Equals(NodaTime.TimeZones.Cldr.MapZone)
  type: Method
  source:
    remote:
      path: 2.0.x/src/NodaTime/TimeZones/Cldr/MapZone.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: Equals
    path: src/NodaTime/TimeZones/Cldr/MapZone.cs
    startLine: 128
  assemblies:
  - NodaTime
  namespace: NodaTime.TimeZones.Cldr
  example: []
  syntax:
    content: public bool Equals(MapZone other)
    parameters:
    - id: other
      type: NodaTime.TimeZones.Cldr.MapZone
    return:
      type: System.Boolean
    content.vb: Public Function Equals(other As MapZone) As Boolean
  overload: NodaTime.TimeZones.Cldr.MapZone.Equals*
  implements:
  - System.IEquatable{NodaTime.TimeZones.Cldr.MapZone}.Equals(NodaTime.TimeZones.Cldr.MapZone)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: NodaTime.TimeZones.Cldr.MapZone.GetHashCode
  commentId: M:NodaTime.TimeZones.Cldr.MapZone.GetHashCode
  id: GetHashCode
  parent: NodaTime.TimeZones.Cldr.MapZone
  langs:
  - csharp
  - vb
  name: GetHashCode()
  nameWithType: MapZone.GetHashCode()
  fullName: NodaTime.TimeZones.Cldr.MapZone.GetHashCode()
  type: Method
  source:
    remote:
      path: 2.0.x/src/NodaTime/TimeZones/Cldr/MapZone.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: GetHashCode
    path: src/NodaTime/TimeZones/Cldr/MapZone.cs
    startLine: 135
  assemblies:
  - NodaTime
  namespace: NodaTime.TimeZones.Cldr
  example: []
  syntax:
    content: public override int GetHashCode()
    return:
      type: System.Int32
    content.vb: Public Overrides Function GetHashCode As Integer
  overridden: System.Object.GetHashCode
  overload: NodaTime.TimeZones.Cldr.MapZone.GetHashCode*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: NodaTime.TimeZones.Cldr.MapZone.Equals(System.Object)
  commentId: M:NodaTime.TimeZones.Cldr.MapZone.Equals(System.Object)
  id: Equals(System.Object)
  parent: NodaTime.TimeZones.Cldr.MapZone
  langs:
  - csharp
  - vb
  name: Equals(Object)
  nameWithType: MapZone.Equals(Object)
  fullName: NodaTime.TimeZones.Cldr.MapZone.Equals(System.Object)
  type: Method
  source:
    remote:
      path: 2.0.x/src/NodaTime/TimeZones/Cldr/MapZone.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: Equals
    path: src/NodaTime/TimeZones/Cldr/MapZone.cs
    startLine: 146
  assemblies:
  - NodaTime
  namespace: NodaTime.TimeZones.Cldr
  example: []
  syntax:
    content: public override bool Equals(object obj)
    parameters:
    - id: obj
      type: System.Object
    return:
      type: System.Boolean
    content.vb: Public Overrides Function Equals(obj As Object) As Boolean
  overridden: System.Object.Equals(System.Object)
  overload: NodaTime.TimeZones.Cldr.MapZone.Equals*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: NodaTime.TimeZones.Cldr.MapZone.ToString
  commentId: M:NodaTime.TimeZones.Cldr.MapZone.ToString
  id: ToString
  parent: NodaTime.TimeZones.Cldr.MapZone
  langs:
  - csharp
  - vb
  name: ToString()
  nameWithType: MapZone.ToString()
  fullName: NodaTime.TimeZones.Cldr.MapZone.ToString()
  type: Method
  source:
    remote:
      path: 2.0.x/src/NodaTime/TimeZones/Cldr/MapZone.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: ToString
    path: src/NodaTime/TimeZones/Cldr/MapZone.cs
    startLine: 149
  assemblies:
  - NodaTime
  namespace: NodaTime.TimeZones.Cldr
  example: []
  syntax:
    content: public override string ToString()
    return:
      type: System.String
    content.vb: Public Overrides Function ToString As String
  overridden: System.Object.ToString
  overload: NodaTime.TimeZones.Cldr.MapZone.ToString*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
references:
- uid: NodaTime.TimeZones.Cldr
  commentId: N:NodaTime.TimeZones.Cldr
  name: NodaTime.TimeZones.Cldr
  nameWithType: NodaTime.TimeZones.Cldr
  fullName: NodaTime.TimeZones.Cldr
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.IEquatable{NodaTime.TimeZones.Cldr.MapZone}
  commentId: T:System.IEquatable{NodaTime.TimeZones.Cldr.MapZone}
  parent: System
  definition: System.IEquatable`1
  name: IEquatable<MapZone>
  nameWithType: IEquatable<MapZone>
  fullName: System.IEquatable<NodaTime.TimeZones.Cldr.MapZone>
  nameWithType.vb: IEquatable(Of MapZone)
  fullName.vb: System.IEquatable(Of NodaTime.TimeZones.Cldr.MapZone)
  name.vb: IEquatable(Of MapZone)
  spec.csharp:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: NodaTime.TimeZones.Cldr.MapZone
    name: MapZone
    nameWithType: MapZone
    fullName: NodaTime.TimeZones.Cldr.MapZone
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: NodaTime.TimeZones.Cldr.MapZone
    name: MapZone
    nameWithType: MapZone
    fullName: NodaTime.TimeZones.Cldr.MapZone
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: System.IEquatable`1
  commentId: T:System.IEquatable`1
  isExternal: true
  name: IEquatable<T>
  nameWithType: IEquatable<T>
  fullName: System.IEquatable<T>
  nameWithType.vb: IEquatable(Of T)
  fullName.vb: System.IEquatable(Of T)
  name.vb: IEquatable(Of T)
  spec.csharp:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: NodaTime.TimeZones.Cldr.MapZone.WindowsId*
  commentId: Overload:NodaTime.TimeZones.Cldr.MapZone.WindowsId
  name: WindowsId
  nameWithType: MapZone.WindowsId
  fullName: NodaTime.TimeZones.Cldr.MapZone.WindowsId
- uid: NodaTime.TimeZones.Cldr.MapZone.Territory*
  commentId: Overload:NodaTime.TimeZones.Cldr.MapZone.Territory
  name: Territory
  nameWithType: MapZone.Territory
  fullName: NodaTime.TimeZones.Cldr.MapZone.Territory
- uid: NodaTime.TimeZones.Cldr.MapZone.TzdbIds*
  commentId: Overload:NodaTime.TimeZones.Cldr.MapZone.TzdbIds
  name: TzdbIds
  nameWithType: MapZone.TzdbIds
  fullName: NodaTime.TimeZones.Cldr.MapZone.TzdbIds
- uid: System.Collections.Generic.IList{System.String}
  commentId: T:System.Collections.Generic.IList{System.String}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IList`1
  name: IList<String>
  nameWithType: IList<String>
  fullName: System.Collections.Generic.IList<System.String>
  nameWithType.vb: IList(Of String)
  fullName.vb: System.Collections.Generic.IList(Of System.String)
  name.vb: IList(Of String)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IList`1
  commentId: T:System.Collections.Generic.IList`1
  isExternal: true
  name: IList<T>
  nameWithType: IList<T>
  fullName: System.Collections.Generic.IList<T>
  nameWithType.vb: IList(Of T)
  fullName.vb: System.Collections.Generic.IList(Of T)
  name.vb: IList(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: NodaTime.TimeZones.Cldr.MapZone.#ctor*
  commentId: Overload:NodaTime.TimeZones.Cldr.MapZone.#ctor
  name: MapZone
  nameWithType: MapZone.MapZone
  fullName: NodaTime.TimeZones.Cldr.MapZone.MapZone
- uid: NodaTime.TimeZones.Cldr.MapZone.Equals*
  commentId: Overload:NodaTime.TimeZones.Cldr.MapZone.Equals
  name: Equals
  nameWithType: MapZone.Equals
  fullName: NodaTime.TimeZones.Cldr.MapZone.Equals
- uid: System.IEquatable{NodaTime.TimeZones.Cldr.MapZone}.Equals(NodaTime.TimeZones.Cldr.MapZone)
  commentId: M:System.IEquatable{NodaTime.TimeZones.Cldr.MapZone}.Equals(NodaTime.TimeZones.Cldr.MapZone)
  parent: System.IEquatable{NodaTime.TimeZones.Cldr.MapZone}
  definition: System.IEquatable`1.Equals(`0)
  name: Equals(MapZone)
  nameWithType: IEquatable<MapZone>.Equals(MapZone)
  fullName: System.IEquatable<NodaTime.TimeZones.Cldr.MapZone>.Equals(NodaTime.TimeZones.Cldr.MapZone)
  nameWithType.vb: IEquatable(Of MapZone).Equals(MapZone)
  fullName.vb: System.IEquatable(Of NodaTime.TimeZones.Cldr.MapZone).Equals(NodaTime.TimeZones.Cldr.MapZone)
  spec.csharp:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    nameWithType: IEquatable<MapZone>.Equals
    fullName: System.IEquatable<NodaTime.TimeZones.Cldr.MapZone>.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: NodaTime.TimeZones.Cldr.MapZone
    name: MapZone
    nameWithType: MapZone
    fullName: NodaTime.TimeZones.Cldr.MapZone
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    nameWithType: IEquatable(Of MapZone).Equals
    fullName: System.IEquatable(Of NodaTime.TimeZones.Cldr.MapZone).Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: NodaTime.TimeZones.Cldr.MapZone
    name: MapZone
    nameWithType: MapZone
    fullName: NodaTime.TimeZones.Cldr.MapZone
  - name: )
    nameWithType: )
    fullName: )
- uid: NodaTime.TimeZones.Cldr.MapZone
  commentId: T:NodaTime.TimeZones.Cldr.MapZone
  parent: NodaTime.TimeZones.Cldr
  name: MapZone
  nameWithType: MapZone
  fullName: NodaTime.TimeZones.Cldr.MapZone
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.IEquatable`1.Equals(`0)
  commentId: M:System.IEquatable`1.Equals(`0)
  isExternal: true
  name: Equals(T)
  nameWithType: IEquatable<T>.Equals(T)
  fullName: System.IEquatable<T>.Equals(T)
  nameWithType.vb: IEquatable(Of T).Equals(T)
  fullName.vb: System.IEquatable(Of T).Equals(T)
  spec.csharp:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    nameWithType: IEquatable<T>.Equals
    fullName: System.IEquatable<T>.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    nameWithType: IEquatable(Of T).Equals
    fullName: System.IEquatable(Of T).Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: NodaTime.TimeZones.Cldr.MapZone.GetHashCode*
  commentId: Overload:NodaTime.TimeZones.Cldr.MapZone.GetHashCode
  name: GetHashCode
  nameWithType: MapZone.GetHashCode
  fullName: NodaTime.TimeZones.Cldr.MapZone.GetHashCode
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: NodaTime.TimeZones.Cldr.MapZone.ToString*
  commentId: Overload:NodaTime.TimeZones.Cldr.MapZone.ToString
  name: ToString
  nameWithType: MapZone.ToString
  fullName: NodaTime.TimeZones.Cldr.MapZone.ToString
shouldSkipMarkup: true
