### YamlMime:ManagedReference
items:
- uid: NodaTime.Testing.Extensions.LocalDateConstruction
  commentId: T:NodaTime.Testing.Extensions.LocalDateConstruction
  id: LocalDateConstruction
  parent: NodaTime.Testing.Extensions
  children:
  - NodaTime.Testing.Extensions.LocalDateConstruction.April(System.Int32,System.Int32)
  - NodaTime.Testing.Extensions.LocalDateConstruction.August(System.Int32,System.Int32)
  - NodaTime.Testing.Extensions.LocalDateConstruction.December(System.Int32,System.Int32)
  - NodaTime.Testing.Extensions.LocalDateConstruction.February(System.Int32,System.Int32)
  - NodaTime.Testing.Extensions.LocalDateConstruction.January(System.Int32,System.Int32)
  - NodaTime.Testing.Extensions.LocalDateConstruction.July(System.Int32,System.Int32)
  - NodaTime.Testing.Extensions.LocalDateConstruction.June(System.Int32,System.Int32)
  - NodaTime.Testing.Extensions.LocalDateConstruction.March(System.Int32,System.Int32)
  - NodaTime.Testing.Extensions.LocalDateConstruction.May(System.Int32,System.Int32)
  - NodaTime.Testing.Extensions.LocalDateConstruction.November(System.Int32,System.Int32)
  - NodaTime.Testing.Extensions.LocalDateConstruction.October(System.Int32,System.Int32)
  - NodaTime.Testing.Extensions.LocalDateConstruction.September(System.Int32,System.Int32)
  langs:
  - csharp
  - vb
  name: LocalDateConstruction
  nameWithType: LocalDateConstruction
  fullName: NodaTime.Testing.Extensions.LocalDateConstruction
  type: Class
  source:
    remote:
      path: 2.0.x/src/NodaTime.Testing/Extensions/LocalDateConstruction.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: LocalDateConstruction
    path: src/NodaTime.Testing/Extensions/LocalDateConstruction.cs
    startLine: 9
  assemblies:
  - NodaTime.Testing
  namespace: NodaTime.Testing.Extensions
  summary: "\nExtension methods for constructing <xref href=\"NodaTime.LocalDate\" data-throw-if-not-resolved=\"false\"></xref> values in the ISO calendar.\n"
  example: []
  syntax:
    content: public static class LocalDateConstruction
    content.vb: Public Module LocalDateConstruction
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
- uid: NodaTime.Testing.Extensions.LocalDateConstruction.January(System.Int32,System.Int32)
  commentId: M:NodaTime.Testing.Extensions.LocalDateConstruction.January(System.Int32,System.Int32)
  id: January(System.Int32,System.Int32)
  isExtensionMethod: true
  parent: NodaTime.Testing.Extensions.LocalDateConstruction
  langs:
  - csharp
  - vb
  name: January(Int32, Int32)
  nameWithType: LocalDateConstruction.January(Int32, Int32)
  fullName: NodaTime.Testing.Extensions.LocalDateConstruction.January(System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: 2.0.x/src/NodaTime.Testing/Extensions/LocalDateConstruction.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: January
    path: src/NodaTime.Testing/Extensions/LocalDateConstruction.cs
    startLine: 22
  assemblies:
  - NodaTime.Testing
  namespace: NodaTime.Testing.Extensions
  summary: "\nConstructs a <xref href=\"NodaTime.LocalDate\" data-throw-if-not-resolved=\"false\"></xref> in January on the given day and year.\n"
  example:
  - "\n<pre><code>var date = 1.January(2017);</code></pre>\n"
  syntax:
    content: public static LocalDate January(this int day, int year)
    parameters:
    - id: day
      type: System.Int32
      description: The day of January for the new date
    - id: year
      type: System.Int32
      description: The year for the new date
    return:
      type: NodaTime.LocalDate
      description: The specified date in January.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function January(day As Integer, year As Integer) As LocalDate
  overload: NodaTime.Testing.Extensions.LocalDateConstruction.January*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: NodaTime.Testing.Extensions.LocalDateConstruction.February(System.Int32,System.Int32)
  commentId: M:NodaTime.Testing.Extensions.LocalDateConstruction.February(System.Int32,System.Int32)
  id: February(System.Int32,System.Int32)
  isExtensionMethod: true
  parent: NodaTime.Testing.Extensions.LocalDateConstruction
  langs:
  - csharp
  - vb
  name: February(Int32, Int32)
  nameWithType: LocalDateConstruction.February(Int32, Int32)
  fullName: NodaTime.Testing.Extensions.LocalDateConstruction.February(System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: 2.0.x/src/NodaTime.Testing/Extensions/LocalDateConstruction.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: February
    path: src/NodaTime.Testing/Extensions/LocalDateConstruction.cs
    startLine: 35
  assemblies:
  - NodaTime.Testing
  namespace: NodaTime.Testing.Extensions
  summary: "\nConstructs a <xref href=\"NodaTime.LocalDate\" data-throw-if-not-resolved=\"false\"></xref> in February on the given day and year.\n"
  example:
  - "\n<pre><code>var date = 1.February(2017);</code></pre>\n"
  syntax:
    content: public static LocalDate February(this int day, int year)
    parameters:
    - id: day
      type: System.Int32
      description: The day of February for the new date
    - id: year
      type: System.Int32
      description: The year for the new date
    return:
      type: NodaTime.LocalDate
      description: The specified date in February.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function February(day As Integer, year As Integer) As LocalDate
  overload: NodaTime.Testing.Extensions.LocalDateConstruction.February*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: NodaTime.Testing.Extensions.LocalDateConstruction.March(System.Int32,System.Int32)
  commentId: M:NodaTime.Testing.Extensions.LocalDateConstruction.March(System.Int32,System.Int32)
  id: March(System.Int32,System.Int32)
  isExtensionMethod: true
  parent: NodaTime.Testing.Extensions.LocalDateConstruction
  langs:
  - csharp
  - vb
  name: March(Int32, Int32)
  nameWithType: LocalDateConstruction.March(Int32, Int32)
  fullName: NodaTime.Testing.Extensions.LocalDateConstruction.March(System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: 2.0.x/src/NodaTime.Testing/Extensions/LocalDateConstruction.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: March
    path: src/NodaTime.Testing/Extensions/LocalDateConstruction.cs
    startLine: 48
  assemblies:
  - NodaTime.Testing
  namespace: NodaTime.Testing.Extensions
  summary: "\nConstructs a <xref href=\"NodaTime.LocalDate\" data-throw-if-not-resolved=\"false\"></xref> in March on the given day and year.\n"
  example:
  - "\n<pre><code>var date = 1.March(2017);</code></pre>\n"
  syntax:
    content: public static LocalDate March(this int day, int year)
    parameters:
    - id: day
      type: System.Int32
      description: The day of March for the new date
    - id: year
      type: System.Int32
      description: The year for the new date
    return:
      type: NodaTime.LocalDate
      description: The specified date in March.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function March(day As Integer, year As Integer) As LocalDate
  overload: NodaTime.Testing.Extensions.LocalDateConstruction.March*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: NodaTime.Testing.Extensions.LocalDateConstruction.April(System.Int32,System.Int32)
  commentId: M:NodaTime.Testing.Extensions.LocalDateConstruction.April(System.Int32,System.Int32)
  id: April(System.Int32,System.Int32)
  isExtensionMethod: true
  parent: NodaTime.Testing.Extensions.LocalDateConstruction
  langs:
  - csharp
  - vb
  name: April(Int32, Int32)
  nameWithType: LocalDateConstruction.April(Int32, Int32)
  fullName: NodaTime.Testing.Extensions.LocalDateConstruction.April(System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: 2.0.x/src/NodaTime.Testing/Extensions/LocalDateConstruction.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: April
    path: src/NodaTime.Testing/Extensions/LocalDateConstruction.cs
    startLine: 61
  assemblies:
  - NodaTime.Testing
  namespace: NodaTime.Testing.Extensions
  summary: "\nConstructs a <xref href=\"NodaTime.LocalDate\" data-throw-if-not-resolved=\"false\"></xref> in April on the given day and year.\n"
  example:
  - "\n<pre><code>var date = 1.April(2017);</code></pre>\n"
  syntax:
    content: public static LocalDate April(this int day, int year)
    parameters:
    - id: day
      type: System.Int32
      description: The day of April for the new date
    - id: year
      type: System.Int32
      description: The year for the new date
    return:
      type: NodaTime.LocalDate
      description: The specified date in April.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function April(day As Integer, year As Integer) As LocalDate
  overload: NodaTime.Testing.Extensions.LocalDateConstruction.April*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: NodaTime.Testing.Extensions.LocalDateConstruction.May(System.Int32,System.Int32)
  commentId: M:NodaTime.Testing.Extensions.LocalDateConstruction.May(System.Int32,System.Int32)
  id: May(System.Int32,System.Int32)
  isExtensionMethod: true
  parent: NodaTime.Testing.Extensions.LocalDateConstruction
  langs:
  - csharp
  - vb
  name: May(Int32, Int32)
  nameWithType: LocalDateConstruction.May(Int32, Int32)
  fullName: NodaTime.Testing.Extensions.LocalDateConstruction.May(System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: 2.0.x/src/NodaTime.Testing/Extensions/LocalDateConstruction.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: May
    path: src/NodaTime.Testing/Extensions/LocalDateConstruction.cs
    startLine: 74
  assemblies:
  - NodaTime.Testing
  namespace: NodaTime.Testing.Extensions
  summary: "\nConstructs a <xref href=\"NodaTime.LocalDate\" data-throw-if-not-resolved=\"false\"></xref> in May on the given day and year.\n"
  example:
  - "\n<pre><code>var date = 1.May(2017);</code></pre>\n"
  syntax:
    content: public static LocalDate May(this int day, int year)
    parameters:
    - id: day
      type: System.Int32
      description: The day of May for the new date
    - id: year
      type: System.Int32
      description: The year for the new date
    return:
      type: NodaTime.LocalDate
      description: The specified date in May.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function May(day As Integer, year As Integer) As LocalDate
  overload: NodaTime.Testing.Extensions.LocalDateConstruction.May*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: NodaTime.Testing.Extensions.LocalDateConstruction.June(System.Int32,System.Int32)
  commentId: M:NodaTime.Testing.Extensions.LocalDateConstruction.June(System.Int32,System.Int32)
  id: June(System.Int32,System.Int32)
  isExtensionMethod: true
  parent: NodaTime.Testing.Extensions.LocalDateConstruction
  langs:
  - csharp
  - vb
  name: June(Int32, Int32)
  nameWithType: LocalDateConstruction.June(Int32, Int32)
  fullName: NodaTime.Testing.Extensions.LocalDateConstruction.June(System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: 2.0.x/src/NodaTime.Testing/Extensions/LocalDateConstruction.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: June
    path: src/NodaTime.Testing/Extensions/LocalDateConstruction.cs
    startLine: 87
  assemblies:
  - NodaTime.Testing
  namespace: NodaTime.Testing.Extensions
  summary: "\nConstructs a <xref href=\"NodaTime.LocalDate\" data-throw-if-not-resolved=\"false\"></xref> in June on the given day and year.\n"
  example:
  - "\n<pre><code>var date = 1.June(2017);</code></pre>\n"
  syntax:
    content: public static LocalDate June(this int day, int year)
    parameters:
    - id: day
      type: System.Int32
      description: The day of June for the new date
    - id: year
      type: System.Int32
      description: The year for the new date
    return:
      type: NodaTime.LocalDate
      description: The specified date in June.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function June(day As Integer, year As Integer) As LocalDate
  overload: NodaTime.Testing.Extensions.LocalDateConstruction.June*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: NodaTime.Testing.Extensions.LocalDateConstruction.July(System.Int32,System.Int32)
  commentId: M:NodaTime.Testing.Extensions.LocalDateConstruction.July(System.Int32,System.Int32)
  id: July(System.Int32,System.Int32)
  isExtensionMethod: true
  parent: NodaTime.Testing.Extensions.LocalDateConstruction
  langs:
  - csharp
  - vb
  name: July(Int32, Int32)
  nameWithType: LocalDateConstruction.July(Int32, Int32)
  fullName: NodaTime.Testing.Extensions.LocalDateConstruction.July(System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: 2.0.x/src/NodaTime.Testing/Extensions/LocalDateConstruction.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: July
    path: src/NodaTime.Testing/Extensions/LocalDateConstruction.cs
    startLine: 100
  assemblies:
  - NodaTime.Testing
  namespace: NodaTime.Testing.Extensions
  summary: "\nConstructs a <xref href=\"NodaTime.LocalDate\" data-throw-if-not-resolved=\"false\"></xref> in July on the given day and year.\n"
  example:
  - "\n<pre><code>var date = 1.July(2017);</code></pre>\n"
  syntax:
    content: public static LocalDate July(this int day, int year)
    parameters:
    - id: day
      type: System.Int32
      description: The day of July for the new date
    - id: year
      type: System.Int32
      description: The year for the new date
    return:
      type: NodaTime.LocalDate
      description: The specified date in July.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function July(day As Integer, year As Integer) As LocalDate
  overload: NodaTime.Testing.Extensions.LocalDateConstruction.July*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: NodaTime.Testing.Extensions.LocalDateConstruction.August(System.Int32,System.Int32)
  commentId: M:NodaTime.Testing.Extensions.LocalDateConstruction.August(System.Int32,System.Int32)
  id: August(System.Int32,System.Int32)
  isExtensionMethod: true
  parent: NodaTime.Testing.Extensions.LocalDateConstruction
  langs:
  - csharp
  - vb
  name: August(Int32, Int32)
  nameWithType: LocalDateConstruction.August(Int32, Int32)
  fullName: NodaTime.Testing.Extensions.LocalDateConstruction.August(System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: 2.0.x/src/NodaTime.Testing/Extensions/LocalDateConstruction.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: August
    path: src/NodaTime.Testing/Extensions/LocalDateConstruction.cs
    startLine: 113
  assemblies:
  - NodaTime.Testing
  namespace: NodaTime.Testing.Extensions
  summary: "\nConstructs a <xref href=\"NodaTime.LocalDate\" data-throw-if-not-resolved=\"false\"></xref> in August on the given day and year.\n"
  example:
  - "\n<pre><code>var date = 1.August(2017);</code></pre>\n"
  syntax:
    content: public static LocalDate August(this int day, int year)
    parameters:
    - id: day
      type: System.Int32
      description: The day of August for the new date
    - id: year
      type: System.Int32
      description: The year for the new date
    return:
      type: NodaTime.LocalDate
      description: The specified date in August.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function August(day As Integer, year As Integer) As LocalDate
  overload: NodaTime.Testing.Extensions.LocalDateConstruction.August*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: NodaTime.Testing.Extensions.LocalDateConstruction.September(System.Int32,System.Int32)
  commentId: M:NodaTime.Testing.Extensions.LocalDateConstruction.September(System.Int32,System.Int32)
  id: September(System.Int32,System.Int32)
  isExtensionMethod: true
  parent: NodaTime.Testing.Extensions.LocalDateConstruction
  langs:
  - csharp
  - vb
  name: September(Int32, Int32)
  nameWithType: LocalDateConstruction.September(Int32, Int32)
  fullName: NodaTime.Testing.Extensions.LocalDateConstruction.September(System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: 2.0.x/src/NodaTime.Testing/Extensions/LocalDateConstruction.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: September
    path: src/NodaTime.Testing/Extensions/LocalDateConstruction.cs
    startLine: 126
  assemblies:
  - NodaTime.Testing
  namespace: NodaTime.Testing.Extensions
  summary: "\nConstructs a <xref href=\"NodaTime.LocalDate\" data-throw-if-not-resolved=\"false\"></xref> in September on the given day and year.\n"
  example:
  - "\n<pre><code>var date = 1.September(2017);</code></pre>\n"
  syntax:
    content: public static LocalDate September(this int day, int year)
    parameters:
    - id: day
      type: System.Int32
      description: The day of September for the new date
    - id: year
      type: System.Int32
      description: The year for the new date
    return:
      type: NodaTime.LocalDate
      description: The specified date in September.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function September(day As Integer, year As Integer) As LocalDate
  overload: NodaTime.Testing.Extensions.LocalDateConstruction.September*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: NodaTime.Testing.Extensions.LocalDateConstruction.October(System.Int32,System.Int32)
  commentId: M:NodaTime.Testing.Extensions.LocalDateConstruction.October(System.Int32,System.Int32)
  id: October(System.Int32,System.Int32)
  isExtensionMethod: true
  parent: NodaTime.Testing.Extensions.LocalDateConstruction
  langs:
  - csharp
  - vb
  name: October(Int32, Int32)
  nameWithType: LocalDateConstruction.October(Int32, Int32)
  fullName: NodaTime.Testing.Extensions.LocalDateConstruction.October(System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: 2.0.x/src/NodaTime.Testing/Extensions/LocalDateConstruction.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: October
    path: src/NodaTime.Testing/Extensions/LocalDateConstruction.cs
    startLine: 139
  assemblies:
  - NodaTime.Testing
  namespace: NodaTime.Testing.Extensions
  summary: "\nConstructs a <xref href=\"NodaTime.LocalDate\" data-throw-if-not-resolved=\"false\"></xref> in October on the given day and year.\n"
  example:
  - "\n<pre><code>var date = 1.October(2017);</code></pre>\n"
  syntax:
    content: public static LocalDate October(this int day, int year)
    parameters:
    - id: day
      type: System.Int32
      description: The day of October for the new date
    - id: year
      type: System.Int32
      description: The year for the new date
    return:
      type: NodaTime.LocalDate
      description: The specified date in October.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function October(day As Integer, year As Integer) As LocalDate
  overload: NodaTime.Testing.Extensions.LocalDateConstruction.October*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: NodaTime.Testing.Extensions.LocalDateConstruction.November(System.Int32,System.Int32)
  commentId: M:NodaTime.Testing.Extensions.LocalDateConstruction.November(System.Int32,System.Int32)
  id: November(System.Int32,System.Int32)
  isExtensionMethod: true
  parent: NodaTime.Testing.Extensions.LocalDateConstruction
  langs:
  - csharp
  - vb
  name: November(Int32, Int32)
  nameWithType: LocalDateConstruction.November(Int32, Int32)
  fullName: NodaTime.Testing.Extensions.LocalDateConstruction.November(System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: 2.0.x/src/NodaTime.Testing/Extensions/LocalDateConstruction.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: November
    path: src/NodaTime.Testing/Extensions/LocalDateConstruction.cs
    startLine: 152
  assemblies:
  - NodaTime.Testing
  namespace: NodaTime.Testing.Extensions
  summary: "\nConstructs a <xref href=\"NodaTime.LocalDate\" data-throw-if-not-resolved=\"false\"></xref> in November on the given day and year.\n"
  example:
  - "\n<pre><code>var date = 1.November(2017);</code></pre>\n"
  syntax:
    content: public static LocalDate November(this int day, int year)
    parameters:
    - id: day
      type: System.Int32
      description: The day of November for the new date
    - id: year
      type: System.Int32
      description: The year for the new date
    return:
      type: NodaTime.LocalDate
      description: The specified date in November.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function November(day As Integer, year As Integer) As LocalDate
  overload: NodaTime.Testing.Extensions.LocalDateConstruction.November*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: NodaTime.Testing.Extensions.LocalDateConstruction.December(System.Int32,System.Int32)
  commentId: M:NodaTime.Testing.Extensions.LocalDateConstruction.December(System.Int32,System.Int32)
  id: December(System.Int32,System.Int32)
  isExtensionMethod: true
  parent: NodaTime.Testing.Extensions.LocalDateConstruction
  langs:
  - csharp
  - vb
  name: December(Int32, Int32)
  nameWithType: LocalDateConstruction.December(Int32, Int32)
  fullName: NodaTime.Testing.Extensions.LocalDateConstruction.December(System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: 2.0.x/src/NodaTime.Testing/Extensions/LocalDateConstruction.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: December
    path: src/NodaTime.Testing/Extensions/LocalDateConstruction.cs
    startLine: 165
  assemblies:
  - NodaTime.Testing
  namespace: NodaTime.Testing.Extensions
  summary: "\nConstructs a <xref href=\"NodaTime.LocalDate\" data-throw-if-not-resolved=\"false\"></xref> in December on the given day and year.\n"
  example:
  - "\n<pre><code>var date = 1.December(2017);</code></pre>\n"
  syntax:
    content: public static LocalDate December(this int day, int year)
    parameters:
    - id: day
      type: System.Int32
      description: The day of December for the new date
    - id: year
      type: System.Int32
      description: The year for the new date
    return:
      type: NodaTime.LocalDate
      description: The specified date in December.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function December(day As Integer, year As Integer) As LocalDate
  overload: NodaTime.Testing.Extensions.LocalDateConstruction.December*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
references:
- uid: NodaTime.LocalDate
  commentId: T:NodaTime.LocalDate
  parent: NodaTime
  name: LocalDate
  nameWithType: LocalDate
  fullName: NodaTime.LocalDate
- uid: NodaTime.Testing.Extensions
  commentId: N:NodaTime.Testing.Extensions
  name: NodaTime.Testing.Extensions
  nameWithType: NodaTime.Testing.Extensions
  fullName: NodaTime.Testing.Extensions
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: NodaTime
  commentId: N:NodaTime
  name: NodaTime
  nameWithType: NodaTime
  fullName: NodaTime
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: NodaTime.Testing.Extensions.LocalDateConstruction.January*
  commentId: Overload:NodaTime.Testing.Extensions.LocalDateConstruction.January
  name: January
  nameWithType: LocalDateConstruction.January
  fullName: NodaTime.Testing.Extensions.LocalDateConstruction.January
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: NodaTime.Testing.Extensions.LocalDateConstruction.February*
  commentId: Overload:NodaTime.Testing.Extensions.LocalDateConstruction.February
  name: February
  nameWithType: LocalDateConstruction.February
  fullName: NodaTime.Testing.Extensions.LocalDateConstruction.February
- uid: NodaTime.Testing.Extensions.LocalDateConstruction.March*
  commentId: Overload:NodaTime.Testing.Extensions.LocalDateConstruction.March
  name: March
  nameWithType: LocalDateConstruction.March
  fullName: NodaTime.Testing.Extensions.LocalDateConstruction.March
- uid: NodaTime.Testing.Extensions.LocalDateConstruction.April*
  commentId: Overload:NodaTime.Testing.Extensions.LocalDateConstruction.April
  name: April
  nameWithType: LocalDateConstruction.April
  fullName: NodaTime.Testing.Extensions.LocalDateConstruction.April
- uid: NodaTime.Testing.Extensions.LocalDateConstruction.May*
  commentId: Overload:NodaTime.Testing.Extensions.LocalDateConstruction.May
  name: May
  nameWithType: LocalDateConstruction.May
  fullName: NodaTime.Testing.Extensions.LocalDateConstruction.May
- uid: NodaTime.Testing.Extensions.LocalDateConstruction.June*
  commentId: Overload:NodaTime.Testing.Extensions.LocalDateConstruction.June
  name: June
  nameWithType: LocalDateConstruction.June
  fullName: NodaTime.Testing.Extensions.LocalDateConstruction.June
- uid: NodaTime.Testing.Extensions.LocalDateConstruction.July*
  commentId: Overload:NodaTime.Testing.Extensions.LocalDateConstruction.July
  name: July
  nameWithType: LocalDateConstruction.July
  fullName: NodaTime.Testing.Extensions.LocalDateConstruction.July
- uid: NodaTime.Testing.Extensions.LocalDateConstruction.August*
  commentId: Overload:NodaTime.Testing.Extensions.LocalDateConstruction.August
  name: August
  nameWithType: LocalDateConstruction.August
  fullName: NodaTime.Testing.Extensions.LocalDateConstruction.August
- uid: NodaTime.Testing.Extensions.LocalDateConstruction.September*
  commentId: Overload:NodaTime.Testing.Extensions.LocalDateConstruction.September
  name: September
  nameWithType: LocalDateConstruction.September
  fullName: NodaTime.Testing.Extensions.LocalDateConstruction.September
- uid: NodaTime.Testing.Extensions.LocalDateConstruction.October*
  commentId: Overload:NodaTime.Testing.Extensions.LocalDateConstruction.October
  name: October
  nameWithType: LocalDateConstruction.October
  fullName: NodaTime.Testing.Extensions.LocalDateConstruction.October
- uid: NodaTime.Testing.Extensions.LocalDateConstruction.November*
  commentId: Overload:NodaTime.Testing.Extensions.LocalDateConstruction.November
  name: November
  nameWithType: LocalDateConstruction.November
  fullName: NodaTime.Testing.Extensions.LocalDateConstruction.November
- uid: NodaTime.Testing.Extensions.LocalDateConstruction.December*
  commentId: Overload:NodaTime.Testing.Extensions.LocalDateConstruction.December
  name: December
  nameWithType: LocalDateConstruction.December
  fullName: NodaTime.Testing.Extensions.LocalDateConstruction.December
shouldSkipMarkup: true
