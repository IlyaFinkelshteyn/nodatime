### YamlMime:ManagedReference
items:
- uid: NodaTime.TimeZones.Resolvers
  commentId: T:NodaTime.TimeZones.Resolvers
  id: Resolvers
  parent: NodaTime.TimeZones
  children:
  - NodaTime.TimeZones.Resolvers.CreateMappingResolver(NodaTime.TimeZones.AmbiguousTimeResolver,NodaTime.TimeZones.SkippedTimeResolver)
  - NodaTime.TimeZones.Resolvers.LenientResolver
  - NodaTime.TimeZones.Resolvers.ReturnEarlier
  - NodaTime.TimeZones.Resolvers.ReturnEndOfIntervalBefore
  - NodaTime.TimeZones.Resolvers.ReturnForwardShifted
  - NodaTime.TimeZones.Resolvers.ReturnLater
  - NodaTime.TimeZones.Resolvers.ReturnStartOfIntervalAfter
  - NodaTime.TimeZones.Resolvers.StrictResolver
  - NodaTime.TimeZones.Resolvers.ThrowWhenAmbiguous
  - NodaTime.TimeZones.Resolvers.ThrowWhenSkipped
  langs:
  - csharp
  - vb
  name: Resolvers
  nameWithType: Resolvers
  fullName: NodaTime.TimeZones.Resolvers
  type: Class
  source:
    remote:
      path: 2.0.x/src/NodaTime/TimeZones/Resolvers.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: Resolvers
    path: src/NodaTime/TimeZones/Resolvers.cs
    startLine: 23
  assemblies:
  - NodaTime
  namespace: NodaTime.TimeZones
  summary: "\nCommonly-used implementations of the delegates used in resolving a <xref href=\"NodaTime.LocalDateTime\" data-throw-if-not-resolved=\"false\"></xref> to a\n<xref href=\"NodaTime.ZonedDateTime\" data-throw-if-not-resolved=\"false\"></xref>, and a method to combine two &quot;partial&quot; resolvers into a full one.\n"
  remarks: "\n<p>\nThis class contains predefined implementations of <xref href=\"NodaTime.TimeZones.ZoneLocalMappingResolver\" data-throw-if-not-resolved=\"false\"></xref>,\n<xref href=\"NodaTime.TimeZones.AmbiguousTimeResolver\" data-throw-if-not-resolved=\"false\"></xref>, and <xref href=\"NodaTime.TimeZones.SkippedTimeResolver\" data-throw-if-not-resolved=\"false\"></xref>, along with\n<xref href=\"NodaTime.TimeZones.Resolvers.CreateMappingResolver(NodaTime.TimeZones.AmbiguousTimeResolver%2cNodaTime.TimeZones.SkippedTimeResolver)\" data-throw-if-not-resolved=\"false\"></xref>, which produces a <code>ZoneLocalMappingResolver</code> from instances of the\nother two.\n</p>\n"
  example: []
  syntax:
    content: public static class Resolvers
    content.vb: Public Module Resolvers
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
- uid: NodaTime.TimeZones.Resolvers.ReturnEarlier
  commentId: P:NodaTime.TimeZones.Resolvers.ReturnEarlier
  id: ReturnEarlier
  parent: NodaTime.TimeZones.Resolvers
  langs:
  - csharp
  - vb
  name: ReturnEarlier
  nameWithType: Resolvers.ReturnEarlier
  fullName: NodaTime.TimeZones.Resolvers.ReturnEarlier
  type: Property
  source:
    remote:
      path: 2.0.x/src/NodaTime/TimeZones/Resolvers.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: ReturnEarlier
    path: src/NodaTime/TimeZones/Resolvers.cs
    startLine: 28
  assemblies:
  - NodaTime
  namespace: NodaTime.TimeZones
  summary: "\nAn <xref href=\"NodaTime.TimeZones.AmbiguousTimeResolver\" data-throw-if-not-resolved=\"false\"></xref> which returns the earlier of the two matching times.\n"
  example: []
  syntax:
    content: public static AmbiguousTimeResolver ReturnEarlier { get; }
    parameters: []
    return:
      type: NodaTime.TimeZones.AmbiguousTimeResolver
    content.vb: Public Shared ReadOnly Property ReturnEarlier As AmbiguousTimeResolver
  overload: NodaTime.TimeZones.Resolvers.ReturnEarlier*
  modifiers.csharp:
  - public
  - static
  - get
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: NodaTime.TimeZones.Resolvers.ReturnLater
  commentId: P:NodaTime.TimeZones.Resolvers.ReturnLater
  id: ReturnLater
  parent: NodaTime.TimeZones.Resolvers
  langs:
  - csharp
  - vb
  name: ReturnLater
  nameWithType: Resolvers.ReturnLater
  fullName: NodaTime.TimeZones.Resolvers.ReturnLater
  type: Property
  source:
    remote:
      path: 2.0.x/src/NodaTime/TimeZones/Resolvers.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: ReturnLater
    path: src/NodaTime/TimeZones/Resolvers.cs
    startLine: 33
  assemblies:
  - NodaTime
  namespace: NodaTime.TimeZones
  summary: "\nAn <xref href=\"NodaTime.TimeZones.AmbiguousTimeResolver\" data-throw-if-not-resolved=\"false\"></xref> which returns the later of the two matching times.\n"
  example: []
  syntax:
    content: public static AmbiguousTimeResolver ReturnLater { get; }
    parameters: []
    return:
      type: NodaTime.TimeZones.AmbiguousTimeResolver
    content.vb: Public Shared ReadOnly Property ReturnLater As AmbiguousTimeResolver
  overload: NodaTime.TimeZones.Resolvers.ReturnLater*
  modifiers.csharp:
  - public
  - static
  - get
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: NodaTime.TimeZones.Resolvers.ThrowWhenAmbiguous
  commentId: P:NodaTime.TimeZones.Resolvers.ThrowWhenAmbiguous
  id: ThrowWhenAmbiguous
  parent: NodaTime.TimeZones.Resolvers
  langs:
  - csharp
  - vb
  name: ThrowWhenAmbiguous
  nameWithType: Resolvers.ThrowWhenAmbiguous
  fullName: NodaTime.TimeZones.Resolvers.ThrowWhenAmbiguous
  type: Property
  source:
    remote:
      path: 2.0.x/src/NodaTime/TimeZones/Resolvers.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: ThrowWhenAmbiguous
    path: src/NodaTime/TimeZones/Resolvers.cs
    startLine: 38
  assemblies:
  - NodaTime
  namespace: NodaTime.TimeZones
  summary: "\nAn <xref href=\"NodaTime.TimeZones.AmbiguousTimeResolver\" data-throw-if-not-resolved=\"false\"></xref> which simply throws an <xref href=\"NodaTime.AmbiguousTimeException\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public static AmbiguousTimeResolver ThrowWhenAmbiguous { get; }
    parameters: []
    return:
      type: NodaTime.TimeZones.AmbiguousTimeResolver
    content.vb: Public Shared ReadOnly Property ThrowWhenAmbiguous As AmbiguousTimeResolver
  overload: NodaTime.TimeZones.Resolvers.ThrowWhenAmbiguous*
  modifiers.csharp:
  - public
  - static
  - get
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: NodaTime.TimeZones.Resolvers.ReturnEndOfIntervalBefore
  commentId: P:NodaTime.TimeZones.Resolvers.ReturnEndOfIntervalBefore
  id: ReturnEndOfIntervalBefore
  parent: NodaTime.TimeZones.Resolvers
  langs:
  - csharp
  - vb
  name: ReturnEndOfIntervalBefore
  nameWithType: Resolvers.ReturnEndOfIntervalBefore
  fullName: NodaTime.TimeZones.Resolvers.ReturnEndOfIntervalBefore
  type: Property
  source:
    remote:
      path: 2.0.x/src/NodaTime/TimeZones/Resolvers.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: ReturnEndOfIntervalBefore
    path: src/NodaTime/TimeZones/Resolvers.cs
    startLine: 47
  assemblies:
  - NodaTime
  namespace: NodaTime.TimeZones
  summary: "\nA <xref href=\"NodaTime.TimeZones.SkippedTimeResolver\" data-throw-if-not-resolved=\"false\"></xref> which returns the final tick of the time zone interval\nbefore the &quot;gap&quot;.\n"
  example: []
  syntax:
    content: public static SkippedTimeResolver ReturnEndOfIntervalBefore { get; }
    parameters: []
    return:
      type: NodaTime.TimeZones.SkippedTimeResolver
    content.vb: Public Shared ReadOnly Property ReturnEndOfIntervalBefore As SkippedTimeResolver
  overload: NodaTime.TimeZones.Resolvers.ReturnEndOfIntervalBefore*
  modifiers.csharp:
  - public
  - static
  - get
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: NodaTime.TimeZones.Resolvers.ReturnStartOfIntervalAfter
  commentId: P:NodaTime.TimeZones.Resolvers.ReturnStartOfIntervalAfter
  id: ReturnStartOfIntervalAfter
  parent: NodaTime.TimeZones.Resolvers
  langs:
  - csharp
  - vb
  name: ReturnStartOfIntervalAfter
  nameWithType: Resolvers.ReturnStartOfIntervalAfter
  fullName: NodaTime.TimeZones.Resolvers.ReturnStartOfIntervalAfter
  type: Property
  source:
    remote:
      path: 2.0.x/src/NodaTime/TimeZones/Resolvers.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: ReturnStartOfIntervalAfter
    path: src/NodaTime/TimeZones/Resolvers.cs
    startLine: 60
  assemblies:
  - NodaTime
  namespace: NodaTime.TimeZones
  summary: "\nA <xref href=\"NodaTime.TimeZones.SkippedTimeResolver\" data-throw-if-not-resolved=\"false\"></xref> which returns the first tick of the time zone interval\nafter the &quot;gap&quot;.\n"
  example: []
  syntax:
    content: public static SkippedTimeResolver ReturnStartOfIntervalAfter { get; }
    parameters: []
    return:
      type: NodaTime.TimeZones.SkippedTimeResolver
    content.vb: Public Shared ReadOnly Property ReturnStartOfIntervalAfter As SkippedTimeResolver
  overload: NodaTime.TimeZones.Resolvers.ReturnStartOfIntervalAfter*
  modifiers.csharp:
  - public
  - static
  - get
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: NodaTime.TimeZones.Resolvers.ReturnForwardShifted
  commentId: P:NodaTime.TimeZones.Resolvers.ReturnForwardShifted
  id: ReturnForwardShifted
  parent: NodaTime.TimeZones.Resolvers
  langs:
  - csharp
  - vb
  name: ReturnForwardShifted
  nameWithType: Resolvers.ReturnForwardShifted
  fullName: NodaTime.TimeZones.Resolvers.ReturnForwardShifted
  type: Property
  source:
    remote:
      path: 2.0.x/src/NodaTime/TimeZones/Resolvers.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: ReturnForwardShifted
    path: src/NodaTime/TimeZones/Resolvers.cs
    startLine: 73
  assemblies:
  - NodaTime
  namespace: NodaTime.TimeZones
  summary: "\nA <xref href=\"NodaTime.TimeZones.SkippedTimeResolver\" data-throw-if-not-resolved=\"false\"></xref> which shifts values in the &quot;gap&quot; forward by the duration\nof the gap (which is usually 1 hour).  This corresponds to the instant that would have occured,\nhad there not been a transition.\n"
  example: []
  syntax:
    content: public static SkippedTimeResolver ReturnForwardShifted { get; }
    parameters: []
    return:
      type: NodaTime.TimeZones.SkippedTimeResolver
    content.vb: Public Shared ReadOnly Property ReturnForwardShifted As SkippedTimeResolver
  overload: NodaTime.TimeZones.Resolvers.ReturnForwardShifted*
  modifiers.csharp:
  - public
  - static
  - get
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: NodaTime.TimeZones.Resolvers.ThrowWhenSkipped
  commentId: P:NodaTime.TimeZones.Resolvers.ThrowWhenSkipped
  id: ThrowWhenSkipped
  parent: NodaTime.TimeZones.Resolvers
  langs:
  - csharp
  - vb
  name: ThrowWhenSkipped
  nameWithType: Resolvers.ThrowWhenSkipped
  fullName: NodaTime.TimeZones.Resolvers.ThrowWhenSkipped
  type: Property
  source:
    remote:
      path: 2.0.x/src/NodaTime/TimeZones/Resolvers.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: ThrowWhenSkipped
    path: src/NodaTime/TimeZones/Resolvers.cs
    startLine: 84
  assemblies:
  - NodaTime
  namespace: NodaTime.TimeZones
  summary: "\nA <xref href=\"NodaTime.TimeZones.SkippedTimeResolver\" data-throw-if-not-resolved=\"false\"></xref> which simply throws a <xref href=\"NodaTime.SkippedTimeException\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public static SkippedTimeResolver ThrowWhenSkipped { get; }
    parameters: []
    return:
      type: NodaTime.TimeZones.SkippedTimeResolver
    content.vb: Public Shared ReadOnly Property ThrowWhenSkipped As SkippedTimeResolver
  overload: NodaTime.TimeZones.Resolvers.ThrowWhenSkipped*
  modifiers.csharp:
  - public
  - static
  - get
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: NodaTime.TimeZones.Resolvers.StrictResolver
  commentId: P:NodaTime.TimeZones.Resolvers.StrictResolver
  id: StrictResolver
  parent: NodaTime.TimeZones.Resolvers
  langs:
  - csharp
  - vb
  name: StrictResolver
  nameWithType: Resolvers.StrictResolver
  fullName: NodaTime.TimeZones.Resolvers.StrictResolver
  type: Property
  source:
    remote:
      path: 2.0.x/src/NodaTime/TimeZones/Resolvers.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: StrictResolver
    path: src/NodaTime/TimeZones/Resolvers.cs
    startLine: 102
  assemblies:
  - NodaTime
  namespace: NodaTime.TimeZones
  summary: "\nA <xref href=\"NodaTime.TimeZones.ZoneLocalMappingResolver\" data-throw-if-not-resolved=\"false\"></xref> which only ever succeeds in the (usual) case where the result\nof the mapping is unambiguous.\n"
  remarks: "\nIf the mapping is ambiguous or skipped, this throws <xref href=\"NodaTime.SkippedTimeException\" data-throw-if-not-resolved=\"false\"></xref> or\n<xref href=\"NodaTime.AmbiguousTimeException\" data-throw-if-not-resolved=\"false\"></xref>, as appropriate. This resolver combines\n<xref href=\"NodaTime.TimeZones.Resolvers.ThrowWhenAmbiguous\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"NodaTime.TimeZones.Resolvers.ThrowWhenSkipped\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public static ZoneLocalMappingResolver StrictResolver { get; }
    parameters: []
    return:
      type: NodaTime.TimeZones.ZoneLocalMappingResolver
    content.vb: Public Shared ReadOnly Property StrictResolver As ZoneLocalMappingResolver
  overload: NodaTime.TimeZones.Resolvers.StrictResolver*
  seealso:
  - linkId: NodaTime.DateTimeZone.AtStrictly(NodaTime.LocalDateTime)
    commentId: M:NodaTime.DateTimeZone.AtStrictly(NodaTime.LocalDateTime)
  modifiers.csharp:
  - public
  - static
  - get
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: NodaTime.TimeZones.Resolvers.LenientResolver
  commentId: P:NodaTime.TimeZones.Resolvers.LenientResolver
  id: LenientResolver
  parent: NodaTime.TimeZones.Resolvers
  langs:
  - csharp
  - vb
  name: LenientResolver
  nameWithType: Resolvers.LenientResolver
  fullName: NodaTime.TimeZones.Resolvers.LenientResolver
  type: Property
  source:
    remote:
      path: 2.0.x/src/NodaTime/TimeZones/Resolvers.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: LenientResolver
    path: src/NodaTime/TimeZones/Resolvers.cs
    startLine: 116
  assemblies:
  - NodaTime
  namespace: NodaTime.TimeZones
  summary: "\nA <xref href=\"NodaTime.TimeZones.ZoneLocalMappingResolver\" data-throw-if-not-resolved=\"false\"></xref> which never throws an exception due to ambiguity or skipped time.\n"
  remarks: "\nAmbiguity is handled by returning the earlier occurrence, and skipped times are shifted forward by the duration\nof the gap. This resolver combines <xref href=\"NodaTime.TimeZones.Resolvers.ReturnEarlier\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"NodaTime.TimeZones.Resolvers.ReturnForwardShifted\" data-throw-if-not-resolved=\"false\"></xref>.\n<p>Note: The behavior of this resolver was changed in version 2.0 to fit the most commonly seen real-world\nusage pattern.  Previous versions combined the <xref href=\"NodaTime.TimeZones.Resolvers.ReturnLater\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"NodaTime.TimeZones.Resolvers.ReturnStartOfIntervalAfter\" data-throw-if-not-resolved=\"false\"></xref>\nresolvers, which can still be used separately if desired.</p>\n"
  example: []
  syntax:
    content: public static ZoneLocalMappingResolver LenientResolver { get; }
    parameters: []
    return:
      type: NodaTime.TimeZones.ZoneLocalMappingResolver
    content.vb: Public Shared ReadOnly Property LenientResolver As ZoneLocalMappingResolver
  overload: NodaTime.TimeZones.Resolvers.LenientResolver*
  seealso:
  - linkId: NodaTime.DateTimeZone.AtLeniently(NodaTime.LocalDateTime)
    commentId: M:NodaTime.DateTimeZone.AtLeniently(NodaTime.LocalDateTime)
  modifiers.csharp:
  - public
  - static
  - get
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: NodaTime.TimeZones.Resolvers.CreateMappingResolver(NodaTime.TimeZones.AmbiguousTimeResolver,NodaTime.TimeZones.SkippedTimeResolver)
  commentId: M:NodaTime.TimeZones.Resolvers.CreateMappingResolver(NodaTime.TimeZones.AmbiguousTimeResolver,NodaTime.TimeZones.SkippedTimeResolver)
  id: CreateMappingResolver(NodaTime.TimeZones.AmbiguousTimeResolver,NodaTime.TimeZones.SkippedTimeResolver)
  parent: NodaTime.TimeZones.Resolvers
  langs:
  - csharp
  - vb
  name: CreateMappingResolver(AmbiguousTimeResolver, SkippedTimeResolver)
  nameWithType: Resolvers.CreateMappingResolver(AmbiguousTimeResolver, SkippedTimeResolver)
  fullName: NodaTime.TimeZones.Resolvers.CreateMappingResolver(NodaTime.TimeZones.AmbiguousTimeResolver, NodaTime.TimeZones.SkippedTimeResolver)
  type: Method
  source:
    remote:
      path: 2.0.x/src/NodaTime/TimeZones/Resolvers.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: CreateMappingResolver
    path: src/NodaTime/TimeZones/Resolvers.cs
    startLine: 131
  assemblies:
  - NodaTime
  namespace: NodaTime.TimeZones
  summary: "\nCombines an <xref href=\"NodaTime.TimeZones.AmbiguousTimeResolver\" data-throw-if-not-resolved=\"false\"></xref> and a <xref href=\"NodaTime.TimeZones.SkippedTimeResolver\" data-throw-if-not-resolved=\"false\"></xref> to create a\n<xref href=\"NodaTime.TimeZones.ZoneLocalMappingResolver\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  remarks: "\nThe <code>ZoneLocalMappingResolver</code> created by this method operates in the obvious way: unambiguous mappings\nare returned directly, ambiguous mappings are delegated to the given <code>AmbiguousTimeResolver</code>, and\n&quot;skipped&quot; mappings are delegated to the given <code>SkippedTimeResolver</code>.\n"
  example: []
  syntax:
    content: public static ZoneLocalMappingResolver CreateMappingResolver(AmbiguousTimeResolver ambiguousTimeResolver, SkippedTimeResolver skippedTimeResolver)
    parameters:
    - id: ambiguousTimeResolver
      type: NodaTime.TimeZones.AmbiguousTimeResolver
      description: Resolver to use for ambiguous mappings.
    - id: skippedTimeResolver
      type: NodaTime.TimeZones.SkippedTimeResolver
      description: Resolver to use for &quot;skipped&quot; mappings.
    return:
      type: NodaTime.TimeZones.ZoneLocalMappingResolver
      description: The logical combination of the two resolvers.
    content.vb: Public Shared Function CreateMappingResolver(ambiguousTimeResolver As AmbiguousTimeResolver, skippedTimeResolver As SkippedTimeResolver) As ZoneLocalMappingResolver
  overload: NodaTime.TimeZones.Resolvers.CreateMappingResolver*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
references:
- uid: NodaTime.LocalDateTime
  commentId: T:NodaTime.LocalDateTime
  parent: NodaTime
  name: LocalDateTime
  nameWithType: LocalDateTime
  fullName: NodaTime.LocalDateTime
- uid: NodaTime.ZonedDateTime
  commentId: T:NodaTime.ZonedDateTime
  parent: NodaTime
  name: ZonedDateTime
  nameWithType: ZonedDateTime
  fullName: NodaTime.ZonedDateTime
- uid: NodaTime.TimeZones.ZoneLocalMappingResolver
  commentId: T:NodaTime.TimeZones.ZoneLocalMappingResolver
  parent: NodaTime.TimeZones
  name: ZoneLocalMappingResolver
  nameWithType: ZoneLocalMappingResolver
  fullName: NodaTime.TimeZones.ZoneLocalMappingResolver
- uid: NodaTime.TimeZones.AmbiguousTimeResolver
  commentId: T:NodaTime.TimeZones.AmbiguousTimeResolver
  parent: NodaTime.TimeZones
  name: AmbiguousTimeResolver
  nameWithType: AmbiguousTimeResolver
  fullName: NodaTime.TimeZones.AmbiguousTimeResolver
- uid: NodaTime.TimeZones.SkippedTimeResolver
  commentId: T:NodaTime.TimeZones.SkippedTimeResolver
  parent: NodaTime.TimeZones
  name: SkippedTimeResolver
  nameWithType: SkippedTimeResolver
  fullName: NodaTime.TimeZones.SkippedTimeResolver
- uid: NodaTime.TimeZones.Resolvers.CreateMappingResolver(NodaTime.TimeZones.AmbiguousTimeResolver,NodaTime.TimeZones.SkippedTimeResolver)
  commentId: M:NodaTime.TimeZones.Resolvers.CreateMappingResolver(NodaTime.TimeZones.AmbiguousTimeResolver,NodaTime.TimeZones.SkippedTimeResolver)
  isExternal: true
- uid: NodaTime.TimeZones
  commentId: N:NodaTime.TimeZones
  name: NodaTime.TimeZones
  nameWithType: NodaTime.TimeZones
  fullName: NodaTime.TimeZones
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: NodaTime
  commentId: N:NodaTime
  name: NodaTime
  nameWithType: NodaTime
  fullName: NodaTime
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: NodaTime.TimeZones.Resolvers.ReturnEarlier*
  commentId: Overload:NodaTime.TimeZones.Resolvers.ReturnEarlier
  name: ReturnEarlier
  nameWithType: Resolvers.ReturnEarlier
  fullName: NodaTime.TimeZones.Resolvers.ReturnEarlier
- uid: NodaTime.TimeZones.Resolvers.ReturnLater*
  commentId: Overload:NodaTime.TimeZones.Resolvers.ReturnLater
  name: ReturnLater
  nameWithType: Resolvers.ReturnLater
  fullName: NodaTime.TimeZones.Resolvers.ReturnLater
- uid: NodaTime.AmbiguousTimeException
  commentId: T:NodaTime.AmbiguousTimeException
  name: AmbiguousTimeException
  nameWithType: AmbiguousTimeException
  fullName: NodaTime.AmbiguousTimeException
- uid: NodaTime.TimeZones.Resolvers.ThrowWhenAmbiguous*
  commentId: Overload:NodaTime.TimeZones.Resolvers.ThrowWhenAmbiguous
  name: ThrowWhenAmbiguous
  nameWithType: Resolvers.ThrowWhenAmbiguous
  fullName: NodaTime.TimeZones.Resolvers.ThrowWhenAmbiguous
- uid: NodaTime.TimeZones.Resolvers.ReturnEndOfIntervalBefore*
  commentId: Overload:NodaTime.TimeZones.Resolvers.ReturnEndOfIntervalBefore
  name: ReturnEndOfIntervalBefore
  nameWithType: Resolvers.ReturnEndOfIntervalBefore
  fullName: NodaTime.TimeZones.Resolvers.ReturnEndOfIntervalBefore
- uid: NodaTime.TimeZones.Resolvers.ReturnStartOfIntervalAfter*
  commentId: Overload:NodaTime.TimeZones.Resolvers.ReturnStartOfIntervalAfter
  name: ReturnStartOfIntervalAfter
  nameWithType: Resolvers.ReturnStartOfIntervalAfter
  fullName: NodaTime.TimeZones.Resolvers.ReturnStartOfIntervalAfter
- uid: NodaTime.TimeZones.Resolvers.ReturnForwardShifted*
  commentId: Overload:NodaTime.TimeZones.Resolvers.ReturnForwardShifted
  name: ReturnForwardShifted
  nameWithType: Resolvers.ReturnForwardShifted
  fullName: NodaTime.TimeZones.Resolvers.ReturnForwardShifted
- uid: NodaTime.SkippedTimeException
  commentId: T:NodaTime.SkippedTimeException
  name: SkippedTimeException
  nameWithType: SkippedTimeException
  fullName: NodaTime.SkippedTimeException
- uid: NodaTime.TimeZones.Resolvers.ThrowWhenSkipped*
  commentId: Overload:NodaTime.TimeZones.Resolvers.ThrowWhenSkipped
  name: ThrowWhenSkipped
  nameWithType: Resolvers.ThrowWhenSkipped
  fullName: NodaTime.TimeZones.Resolvers.ThrowWhenSkipped
- uid: NodaTime.TimeZones.Resolvers.ThrowWhenAmbiguous
  commentId: P:NodaTime.TimeZones.Resolvers.ThrowWhenAmbiguous
  isExternal: true
- uid: NodaTime.TimeZones.Resolvers.ThrowWhenSkipped
  commentId: P:NodaTime.TimeZones.Resolvers.ThrowWhenSkipped
  isExternal: true
- uid: NodaTime.DateTimeZone.AtStrictly(NodaTime.LocalDateTime)
  commentId: M:NodaTime.DateTimeZone.AtStrictly(NodaTime.LocalDateTime)
  parent: NodaTime.DateTimeZone
  name: AtStrictly(LocalDateTime)
  nameWithType: DateTimeZone.AtStrictly(LocalDateTime)
  fullName: NodaTime.DateTimeZone.AtStrictly(NodaTime.LocalDateTime)
  spec.csharp:
  - uid: NodaTime.DateTimeZone.AtStrictly(NodaTime.LocalDateTime)
    name: AtStrictly
    nameWithType: DateTimeZone.AtStrictly
    fullName: NodaTime.DateTimeZone.AtStrictly
  - name: (
    nameWithType: (
    fullName: (
  - uid: NodaTime.LocalDateTime
    name: LocalDateTime
    nameWithType: LocalDateTime
    fullName: NodaTime.LocalDateTime
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NodaTime.DateTimeZone.AtStrictly(NodaTime.LocalDateTime)
    name: AtStrictly
    nameWithType: DateTimeZone.AtStrictly
    fullName: NodaTime.DateTimeZone.AtStrictly
  - name: (
    nameWithType: (
    fullName: (
  - uid: NodaTime.LocalDateTime
    name: LocalDateTime
    nameWithType: LocalDateTime
    fullName: NodaTime.LocalDateTime
  - name: )
    nameWithType: )
    fullName: )
- uid: NodaTime.TimeZones.Resolvers.StrictResolver*
  commentId: Overload:NodaTime.TimeZones.Resolvers.StrictResolver
  name: StrictResolver
  nameWithType: Resolvers.StrictResolver
  fullName: NodaTime.TimeZones.Resolvers.StrictResolver
- uid: NodaTime.DateTimeZone
  commentId: T:NodaTime.DateTimeZone
  parent: NodaTime
  name: DateTimeZone
  nameWithType: DateTimeZone
  fullName: NodaTime.DateTimeZone
- uid: NodaTime.TimeZones.Resolvers.ReturnEarlier
  commentId: P:NodaTime.TimeZones.Resolvers.ReturnEarlier
  isExternal: true
- uid: NodaTime.TimeZones.Resolvers.ReturnForwardShifted
  commentId: P:NodaTime.TimeZones.Resolvers.ReturnForwardShifted
  isExternal: true
- uid: NodaTime.TimeZones.Resolvers.ReturnLater
  commentId: P:NodaTime.TimeZones.Resolvers.ReturnLater
  isExternal: true
- uid: NodaTime.TimeZones.Resolvers.ReturnStartOfIntervalAfter
  commentId: P:NodaTime.TimeZones.Resolvers.ReturnStartOfIntervalAfter
  isExternal: true
- uid: NodaTime.DateTimeZone.AtLeniently(NodaTime.LocalDateTime)
  commentId: M:NodaTime.DateTimeZone.AtLeniently(NodaTime.LocalDateTime)
  parent: NodaTime.DateTimeZone
  name: AtLeniently(LocalDateTime)
  nameWithType: DateTimeZone.AtLeniently(LocalDateTime)
  fullName: NodaTime.DateTimeZone.AtLeniently(NodaTime.LocalDateTime)
  spec.csharp:
  - uid: NodaTime.DateTimeZone.AtLeniently(NodaTime.LocalDateTime)
    name: AtLeniently
    nameWithType: DateTimeZone.AtLeniently
    fullName: NodaTime.DateTimeZone.AtLeniently
  - name: (
    nameWithType: (
    fullName: (
  - uid: NodaTime.LocalDateTime
    name: LocalDateTime
    nameWithType: LocalDateTime
    fullName: NodaTime.LocalDateTime
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NodaTime.DateTimeZone.AtLeniently(NodaTime.LocalDateTime)
    name: AtLeniently
    nameWithType: DateTimeZone.AtLeniently
    fullName: NodaTime.DateTimeZone.AtLeniently
  - name: (
    nameWithType: (
    fullName: (
  - uid: NodaTime.LocalDateTime
    name: LocalDateTime
    nameWithType: LocalDateTime
    fullName: NodaTime.LocalDateTime
  - name: )
    nameWithType: )
    fullName: )
- uid: NodaTime.TimeZones.Resolvers.LenientResolver*
  commentId: Overload:NodaTime.TimeZones.Resolvers.LenientResolver
  name: LenientResolver
  nameWithType: Resolvers.LenientResolver
  fullName: NodaTime.TimeZones.Resolvers.LenientResolver
- uid: NodaTime.TimeZones.Resolvers.CreateMappingResolver*
  commentId: Overload:NodaTime.TimeZones.Resolvers.CreateMappingResolver
  name: CreateMappingResolver
  nameWithType: Resolvers.CreateMappingResolver
  fullName: NodaTime.TimeZones.Resolvers.CreateMappingResolver
shouldSkipMarkup: true
