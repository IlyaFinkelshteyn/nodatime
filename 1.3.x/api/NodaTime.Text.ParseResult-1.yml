### YamlMime:ManagedReference
items:
- uid: NodaTime.Text.ParseResult`1
  commentId: T:NodaTime.Text.ParseResult`1
  id: ParseResult`1
  parent: NodaTime.Text
  children:
  - NodaTime.Text.ParseResult`1.Exception
  - NodaTime.Text.ParseResult`1.GetValueOrThrow
  - NodaTime.Text.ParseResult`1.Success
  - NodaTime.Text.ParseResult`1.TryGetValue(`0,`0@)
  - NodaTime.Text.ParseResult`1.Value
  langs:
  - csharp
  - vb
  name: ParseResult<T>
  nameWithType: ParseResult<T>
  fullName: NodaTime.Text.ParseResult<T>
  type: Class
  source:
    remote:
      path: 1.3.x/src/NodaTime/Text/ParseResult.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: ParseResult
    path: src/NodaTime/Text/ParseResult.cs
    startLine: 16
  assemblies:
  - NodaTime
  namespace: NodaTime.Text
  summary: "\nThe result of a parse operation.\n"
  example: []
  syntax:
    content: public sealed class ParseResult<T>
    typeParameters:
    - id: T
      description: The type which was parsed, such as a <xref href="NodaTime.LocalDateTime" data-throw-if-not-resolved="false"></xref>.
    content.vb: Public NotInheritable Class ParseResult(Of T)
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  nameWithType.vb: ParseResult(Of T)
  modifiers.csharp:
  - public
  - sealed
  - class
  modifiers.vb:
  - Public
  - NotInheritable
  - Class
  fullName.vb: NodaTime.Text.ParseResult(Of T)
  name.vb: ParseResult(Of T)
- uid: NodaTime.Text.ParseResult`1.Value
  commentId: P:NodaTime.Text.ParseResult`1.Value
  id: Value
  parent: NodaTime.Text.ParseResult`1
  langs:
  - csharp
  - vb
  name: Value
  nameWithType: ParseResult<T>.Value
  fullName: NodaTime.Text.ParseResult<T>.Value
  type: Property
  source:
    remote:
      path: 1.3.x/src/NodaTime/Text/ParseResult.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: Value
    path: src/NodaTime/Text/ParseResult.cs
    startLine: 43
  assemblies:
  - NodaTime
  namespace: NodaTime.Text
  summary: "\nReturns the value from the parse operation if it was successful, or throws an exception indicating the parse failure\notherwise.\n"
  remarks: "\nThis method is exactly equivalent to calling the <xref href=\"NodaTime.Text.ParseResult%601.GetValueOrThrow\" data-throw-if-not-resolved=\"false\"></xref> method, but is terser if the code is\nalready clear that it will throw if the parse failed.\n"
  example: []
  syntax:
    content: public T Value { get; }
    parameters: []
    return:
      type: '{T}'
      description: The result of the parsing operation if it was successful.
    content.vb: Public ReadOnly Property Value As T
  overload: NodaTime.Text.ParseResult`1.Value*
  nameWithType.vb: ParseResult(Of T).Value
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: NodaTime.Text.ParseResult(Of T).Value
- uid: NodaTime.Text.ParseResult`1.Exception
  commentId: P:NodaTime.Text.ParseResult`1.Exception
  id: Exception
  parent: NodaTime.Text.ParseResult`1
  langs:
  - csharp
  - vb
  name: Exception
  nameWithType: ParseResult<T>.Exception
  fullName: NodaTime.Text.ParseResult<T>.Exception
  type: Property
  source:
    remote:
      path: 1.3.x/src/NodaTime/Text/ParseResult.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: Exception
    path: src/NodaTime/Text/ParseResult.cs
    startLine: 51
  assemblies:
  - NodaTime
  namespace: NodaTime.Text
  summary: "\nReturns an exception indicating the cause of the parse failure.\n"
  remarks: This property is typically used to wrap parse failures in higher level exceptions.
  example: []
  syntax:
    content: public Exception Exception { get; }
    parameters: []
    return:
      type: System.Exception
      description: The exception indicating the cause of the parse failure.
    content.vb: Public ReadOnly Property Exception As Exception
  overload: NodaTime.Text.ParseResult`1.Exception*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: The parse operation succeeded.
  nameWithType.vb: ParseResult(Of T).Exception
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: NodaTime.Text.ParseResult(Of T).Exception
- uid: NodaTime.Text.ParseResult`1.GetValueOrThrow
  commentId: M:NodaTime.Text.ParseResult`1.GetValueOrThrow
  id: GetValueOrThrow
  parent: NodaTime.Text.ParseResult`1
  langs:
  - csharp
  - vb
  name: GetValueOrThrow()
  nameWithType: ParseResult<T>.GetValueOrThrow()
  fullName: NodaTime.Text.ParseResult<T>.GetValueOrThrow()
  type: Method
  source:
    remote:
      path: 1.3.x/src/NodaTime/Text/ParseResult.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: GetValueOrThrow
    path: src/NodaTime/Text/ParseResult.cs
    startLine: 72
  assemblies:
  - NodaTime
  namespace: NodaTime.Text
  summary: "\nReturns the value from the parse operation if it was successful, or throws an exception indicating the parse failure\notherwise.\n"
  remarks: "\nThis method is exactly equivalent to fetching the <xref href=\"NodaTime.Text.ParseResult%601.Value\" data-throw-if-not-resolved=\"false\"></xref> property, but more explicit in terms of throwing\nan exception on failure.\n"
  example: []
  syntax:
    content: public T GetValueOrThrow()
    return:
      type: '{T}'
      description: The result of the parsing operation if it was successful.
    content.vb: Public Function GetValueOrThrow As T
  overload: NodaTime.Text.ParseResult`1.GetValueOrThrow*
  nameWithType.vb: ParseResult(Of T).GetValueOrThrow()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: NodaTime.Text.ParseResult(Of T).GetValueOrThrow()
- uid: NodaTime.Text.ParseResult`1.TryGetValue(`0,`0@)
  commentId: M:NodaTime.Text.ParseResult`1.TryGetValue(`0,`0@)
  id: TryGetValue(`0,`0@)
  parent: NodaTime.Text.ParseResult`1
  langs:
  - csharp
  - vb
  name: TryGetValue(T, out T)
  nameWithType: ParseResult<T>.TryGetValue(T, out T)
  fullName: NodaTime.Text.ParseResult<T>.TryGetValue(T, out T)
  type: Method
  source:
    remote:
      path: 1.3.x/src/NodaTime/Text/ParseResult.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: TryGetValue
    path: src/NodaTime/Text/ParseResult.cs
    startLine: 88
  assemblies:
  - NodaTime
  namespace: NodaTime.Text
  summary: "\nReturns the success value, and sets the out parameter to either\nthe specified failure value of T or the successful parse result value.\n"
  example: []
  syntax:
    content: public bool TryGetValue(T failureValue, out T result)
    parameters:
    - id: failureValue
      type: '{T}'
      description: The &quot;default&quot; value to set in <code data-dev-comment-type="paramref" class="paramref">result</code> if parsing failed.
    - id: result
      type: '{T}'
      description: The parameter to store the parsed value in on success.
    return:
      type: System.Boolean
      description: True if this parse result was successful, or false otherwise.
    content.vb: Public Function TryGetValue(failureValue As T, ByRef result As T) As Boolean
  overload: NodaTime.Text.ParseResult`1.TryGetValue*
  nameWithType.vb: ParseResult(Of T).TryGetValue(T, ByRef T)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: NodaTime.Text.ParseResult(Of T).TryGetValue(T, ByRef T)
  name.vb: TryGetValue(T, ByRef T)
- uid: NodaTime.Text.ParseResult`1.Success
  commentId: P:NodaTime.Text.ParseResult`1.Success
  id: Success
  parent: NodaTime.Text.ParseResult`1
  langs:
  - csharp
  - vb
  name: Success
  nameWithType: ParseResult<T>.Success
  fullName: NodaTime.Text.ParseResult<T>.Success
  type: Property
  source:
    remote:
      path: 1.3.x/src/NodaTime/Text/ParseResult.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: Success
    path: src/NodaTime/Text/ParseResult.cs
    startLine: 101
  assemblies:
  - NodaTime
  namespace: NodaTime.Text
  summary: "\nIndicates whether the parse operation was successful.\n"
  remarks: "\nThis returns True if and only if fetching the value with the <xref href=\"NodaTime.Text.ParseResult%601.Value\" data-throw-if-not-resolved=\"false\"></xref> property will return with no exception.\n"
  example: []
  syntax:
    content: public bool Success { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property Success As Boolean
  overload: NodaTime.Text.ParseResult`1.Success*
  nameWithType.vb: ParseResult(Of T).Success
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: NodaTime.Text.ParseResult(Of T).Success
references:
- uid: NodaTime.LocalDateTime
  commentId: T:NodaTime.LocalDateTime
  parent: NodaTime
  name: LocalDateTime
  nameWithType: LocalDateTime
  fullName: NodaTime.LocalDateTime
- uid: NodaTime.Text
  commentId: N:NodaTime.Text
  name: NodaTime.Text
  nameWithType: NodaTime.Text
  fullName: NodaTime.Text
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: NodaTime
  commentId: N:NodaTime
  name: NodaTime
  nameWithType: NodaTime
  fullName: NodaTime
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: NodaTime.Text.ParseResult`1.GetValueOrThrow
  commentId: M:NodaTime.Text.ParseResult`1.GetValueOrThrow
  isExternal: true
- uid: NodaTime.Text.ParseResult`1.Value*
  commentId: Overload:NodaTime.Text.ParseResult`1.Value
  name: Value
  nameWithType: ParseResult<T>.Value
  fullName: NodaTime.Text.ParseResult<T>.Value
  nameWithType.vb: ParseResult(Of T).Value
  fullName.vb: NodaTime.Text.ParseResult(Of T).Value
- uid: '{T}'
  commentId: '!:T'
  definition: T
  name: T
  nameWithType: T
  fullName: T
- uid: T
  name: T
  nameWithType: T
  fullName: T
- uid: System.InvalidOperationException
  commentId: T:System.InvalidOperationException
  isExternal: true
- uid: NodaTime.Text.ParseResult`1.Exception*
  commentId: Overload:NodaTime.Text.ParseResult`1.Exception
  name: Exception
  nameWithType: ParseResult<T>.Exception
  fullName: NodaTime.Text.ParseResult<T>.Exception
  nameWithType.vb: ParseResult(Of T).Exception
  fullName.vb: NodaTime.Text.ParseResult(Of T).Exception
- uid: System.Exception
  commentId: T:System.Exception
  parent: System
  isExternal: true
  name: Exception
  nameWithType: Exception
  fullName: System.Exception
- uid: NodaTime.Text.ParseResult`1.Value
  commentId: P:NodaTime.Text.ParseResult`1.Value
  isExternal: true
- uid: NodaTime.Text.ParseResult`1.GetValueOrThrow*
  commentId: Overload:NodaTime.Text.ParseResult`1.GetValueOrThrow
  name: GetValueOrThrow
  nameWithType: ParseResult<T>.GetValueOrThrow
  fullName: NodaTime.Text.ParseResult<T>.GetValueOrThrow
  nameWithType.vb: ParseResult(Of T).GetValueOrThrow
  fullName.vb: NodaTime.Text.ParseResult(Of T).GetValueOrThrow
- uid: NodaTime.Text.ParseResult`1.TryGetValue*
  commentId: Overload:NodaTime.Text.ParseResult`1.TryGetValue
  name: TryGetValue
  nameWithType: ParseResult<T>.TryGetValue
  fullName: NodaTime.Text.ParseResult<T>.TryGetValue
  nameWithType.vb: ParseResult(Of T).TryGetValue
  fullName.vb: NodaTime.Text.ParseResult(Of T).TryGetValue
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: NodaTime.Text.ParseResult`1.Success*
  commentId: Overload:NodaTime.Text.ParseResult`1.Success
  name: Success
  nameWithType: ParseResult<T>.Success
  fullName: NodaTime.Text.ParseResult<T>.Success
  nameWithType.vb: ParseResult(Of T).Success
  fullName.vb: NodaTime.Text.ParseResult(Of T).Success
shouldSkipMarkup: true
