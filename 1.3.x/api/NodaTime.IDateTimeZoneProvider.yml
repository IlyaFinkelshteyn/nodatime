### YamlMime:ManagedReference
items:
- uid: NodaTime.IDateTimeZoneProvider
  commentId: T:NodaTime.IDateTimeZoneProvider
  id: IDateTimeZoneProvider
  parent: NodaTime
  children:
  - NodaTime.IDateTimeZoneProvider.GetSystemDefault
  - NodaTime.IDateTimeZoneProvider.GetZoneOrNull(System.String)
  - NodaTime.IDateTimeZoneProvider.Ids
  - NodaTime.IDateTimeZoneProvider.Item(System.String)
  - NodaTime.IDateTimeZoneProvider.VersionId
  langs:
  - csharp
  - vb
  name: IDateTimeZoneProvider
  nameWithType: IDateTimeZoneProvider
  fullName: NodaTime.IDateTimeZoneProvider
  type: Interface
  source:
    remote:
      path: 1.3.x/src/NodaTime/IDateTimeZoneProvider.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: IDateTimeZoneProvider
    path: src/NodaTime/IDateTimeZoneProvider.cs
    startLine: 24
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nProvides stable, performant time zone data.\n"
  remarks: "\n<p>Consumers should be able to treat an <xref href=\"NodaTime.IDateTimeZoneProvider\" data-throw-if-not-resolved=\"false\"></xref> like a cache: \nlookups should be quick (after at most one lookup of a given ID), and the data for a given ID should always be\nthe same (even if the specific instance returned is not).\nConsumers should not feel the need to cache data accessed through this interface.</p>\n<p>Implementations designed to work with any <xref href=\"NodaTime.TimeZones.IDateTimeZoneSource\" data-throw-if-not-resolved=\"false\"></xref> implementation (such as\n<xref href=\"NodaTime.TimeZones.DateTimeZoneCache\" data-throw-if-not-resolved=\"false\"></xref>) should not attempt to handle exceptions thrown by the source. A source-specific\nprovider may do so, as it has more detailed knowledge of what can go wrong and how it can best be handled.</p>\n"
  example: []
  syntax:
    content: public interface IDateTimeZoneProvider
    content.vb: Public Interface IDateTimeZoneProvider
  modifiers.csharp:
  - public
  - interface
  modifiers.vb:
  - Public
  - Interface
- uid: NodaTime.IDateTimeZoneProvider.VersionId
  commentId: P:NodaTime.IDateTimeZoneProvider.VersionId
  id: VersionId
  parent: NodaTime.IDateTimeZoneProvider
  langs:
  - csharp
  - vb
  name: VersionId
  nameWithType: IDateTimeZoneProvider.VersionId
  fullName: NodaTime.IDateTimeZoneProvider.VersionId
  type: Property
  source:
    remote:
      path: 1.3.x/src/NodaTime/IDateTimeZoneProvider.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: VersionId
    path: src/NodaTime/IDateTimeZoneProvider.cs
    startLine: 29
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nThe version ID of this provider.\n"
  example: []
  syntax:
    content: string VersionId { get; }
    parameters: []
    return:
      type: System.String
    content.vb: ReadOnly Property VersionId As String
  overload: NodaTime.IDateTimeZoneProvider.VersionId*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
- uid: NodaTime.IDateTimeZoneProvider.Ids
  commentId: P:NodaTime.IDateTimeZoneProvider.Ids
  id: Ids
  parent: NodaTime.IDateTimeZoneProvider
  langs:
  - csharp
  - vb
  name: Ids
  nameWithType: IDateTimeZoneProvider.Ids
  fullName: NodaTime.IDateTimeZoneProvider.Ids
  type: Property
  source:
    remote:
      path: 1.3.x/src/NodaTime/IDateTimeZoneProvider.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: Ids
    path: src/NodaTime/IDateTimeZoneProvider.cs
    startLine: 46
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nGets the list of valid time zone ids advertised by this provider.\n"
  remarks: "\n<p>\nThis list will be sorted in ordinal lexicographic order. It cannot be modified by callers, and\nmust not be modified by the provider either: client code can safely treat it as thread-safe\nand deeply immutable.\n</p>\n<p>\nIn addition to the list returned here, providers always support the fixed-offset timezones with IDs &quot;UTC&quot;\nand &quot;UTC+/-Offset&quot;. These may or may not be included explicitly in this list.\n</p>\n"
  example: []
  syntax:
    content: ReadOnlyCollection<string> Ids { get; }
    parameters: []
    return:
      type: System.Collections.ObjectModel.ReadOnlyCollection{System.String}
      description: The <xref href="System.Collections.Generic.IEnumerable%601" data-throw-if-not-resolved="false"></xref> of string ids.
    content.vb: ReadOnly Property Ids As ReadOnlyCollection(Of String)
  overload: NodaTime.IDateTimeZoneProvider.Ids*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
- uid: NodaTime.IDateTimeZoneProvider.GetSystemDefault
  commentId: M:NodaTime.IDateTimeZoneProvider.GetSystemDefault
  id: GetSystemDefault
  parent: NodaTime.IDateTimeZoneProvider
  langs:
  - csharp
  - vb
  name: GetSystemDefault()
  nameWithType: IDateTimeZoneProvider.GetSystemDefault()
  fullName: NodaTime.IDateTimeZoneProvider.GetSystemDefault()
  type: Method
  source:
    remote:
      path: 1.3.x/src/NodaTime/IDateTimeZoneProvider.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: GetSystemDefault
    path: src/NodaTime/IDateTimeZoneProvider.cs
    startLine: 94
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nGets the time zone from this provider that matches the system default time zone, if a matching time zone is\navailable.\n"
  remarks: "\n<p>\nCallers should be aware that this method will throw <xref href=\"NodaTime.TimeZones.DateTimeZoneNotFoundException\" data-throw-if-not-resolved=\"false\"></xref> if no matching\ntime zone is found. For the built-in Noda Time providers, this is unlikely to occur in practice (assuming\nthe system is using a standard Windows time zone), but can occur even then, if no mapping is found. The TZDB\nsource contains mappings for almost all Windows system time zones, but a few (such as &quot;Mid-Atlantic Standard Time&quot;)\nare unmappable.\n</p>\n<p>\nIf it is necessary to handle this case, callers can construct a\n<xref href=\"NodaTime.TimeZones.BclDateTimeZone\" data-throw-if-not-resolved=\"false\"></xref> via <xref href=\"NodaTime.TimeZones.BclDateTimeZone.ForSystemDefault\" data-throw-if-not-resolved=\"false\"></xref>, which returns a\n<xref href=\"NodaTime.DateTimeZone\" data-throw-if-not-resolved=\"false\"></xref> that wraps the system local <xref href=\"System.TimeZoneInfo\" data-throw-if-not-resolved=\"false\"></xref>, and which always\nsucceeds. Note that <code>BclDateTimeZone</code> is not available on the PCL build of Noda Time, so\nthis fallback strategy can only be used with the desktop version.\n</p>\n"
  example: []
  syntax:
    content: DateTimeZone GetSystemDefault()
    return:
      type: NodaTime.DateTimeZone
      description: "\nThe provider-specific representation of the system default time zone.\n"
    content.vb: Function GetSystemDefault As DateTimeZone
  overload: NodaTime.IDateTimeZoneProvider.GetSystemDefault*
  exceptions:
  - type: NodaTime.TimeZones.DateTimeZoneNotFoundException
    commentId: T:NodaTime.TimeZones.DateTimeZoneNotFoundException
    description: >-
      The system default time zone is not mapped by

      this provider.
- uid: NodaTime.IDateTimeZoneProvider.GetZoneOrNull(System.String)
  commentId: M:NodaTime.IDateTimeZoneProvider.GetZoneOrNull(System.String)
  id: GetZoneOrNull(System.String)
  parent: NodaTime.IDateTimeZoneProvider
  langs:
  - csharp
  - vb
  name: GetZoneOrNull(String)
  nameWithType: IDateTimeZoneProvider.GetZoneOrNull(String)
  fullName: NodaTime.IDateTimeZoneProvider.GetZoneOrNull(System.String)
  type: Method
  source:
    remote:
      path: 1.3.x/src/NodaTime/IDateTimeZoneProvider.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: GetZoneOrNull
    path: src/NodaTime/IDateTimeZoneProvider.cs
    startLine: 118
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nReturns the time zone for the given ID, if it&apos;s available.\n"
  remarks: "\n<p>\nNote that this may return a <xref href=\"NodaTime.DateTimeZone\" data-throw-if-not-resolved=\"false\"></xref> that has a different ID to that requested, if the ID\nprovided is an alias.\n</p>\n<p>\nNote also that this method is not required to return the same <xref href=\"NodaTime.DateTimeZone\" data-throw-if-not-resolved=\"false\"></xref> instance for\nsuccessive requests for the same ID; however, all instances returned for a given ID must compare\nas equal.\n</p>\n<p>\nThe fixed-offset timezones with IDs &quot;UTC&quot; and &quot;UTC+/-Offset&quot; are always available. These must\nreturn instances that are equal to those returned by <xref href=\"NodaTime.DateTimeZone.ForOffset(NodaTime.Offset)\" data-throw-if-not-resolved=\"false\"></xref>.\n</p>\n"
  example: []
  syntax:
    content: DateTimeZone GetZoneOrNull(string id)
    parameters:
    - id: id
      type: System.String
      description: The time zone ID to find.
    return:
      type: NodaTime.DateTimeZone
      description: >-
        The <xref href="NodaTime.DateTimeZone" data-throw-if-not-resolved="false"></xref> for the given ID or null if the provider does not support

        the given ID.
    content.vb: Function GetZoneOrNull(id As String) As DateTimeZone
  overload: NodaTime.IDateTimeZoneProvider.GetZoneOrNull*
- uid: NodaTime.IDateTimeZoneProvider.Item(System.String)
  commentId: P:NodaTime.IDateTimeZoneProvider.Item(System.String)
  id: Item(System.String)
  parent: NodaTime.IDateTimeZoneProvider
  langs:
  - csharp
  - vb
  name: Item[String]
  nameWithType: IDateTimeZoneProvider.Item[String]
  fullName: NodaTime.IDateTimeZoneProvider.Item[System.String]
  type: Property
  source:
    remote:
      path: 1.3.x/src/NodaTime/IDateTimeZoneProvider.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: this[]
    path: src/NodaTime/IDateTimeZoneProvider.cs
    startLine: 145
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nReturns the time zone for the given ID.\n"
  remarks: "\n<p>\nUnlike <xref href=\"NodaTime.IDateTimeZoneProvider.GetZoneOrNull(System.String)\" data-throw-if-not-resolved=\"false\"></xref>, this indexer will never return a null reference. If the ID is not\nsupported by this provider, it will throw <xref href=\"NodaTime.TimeZones.DateTimeZoneNotFoundException\" data-throw-if-not-resolved=\"false\"></xref>.\n</p>\n<p>\nNote that this may return a <xref href=\"NodaTime.DateTimeZone\" data-throw-if-not-resolved=\"false\"></xref> that has a different ID to that requested, if the ID\nprovided is an alias.\n</p>\n<p>\nNote also that this method is not required to return the same <xref href=\"NodaTime.DateTimeZone\" data-throw-if-not-resolved=\"false\"></xref> instance for\nsuccessive requests for the same ID; however, all instances returned for a given ID must compare\nas equal.\n</p>\n<p>\nThe fixed-offset timezones with IDs &quot;UTC&quot; and &quot;UTC+/-Offset&quot; are always available. These must\nreturn instances that are equal to those returned by <xref href=\"NodaTime.DateTimeZone.ForOffset(NodaTime.Offset)\" data-throw-if-not-resolved=\"false\"></xref>.\n</p>\n"
  example: []
  syntax:
    content: DateTimeZone this[string id] { get; }
    parameters:
    - id: id
      type: System.String
      description: The time zone id to find.
    return:
      type: NodaTime.DateTimeZone
      description: The <xref href="NodaTime.DateTimeZone" data-throw-if-not-resolved="false"></xref> for the given ID.
    content.vb: ReadOnly Property Item(id As String) As DateTimeZone
  overload: NodaTime.IDateTimeZoneProvider.Item*
  exceptions:
  - type: NodaTime.TimeZones.DateTimeZoneNotFoundException
    commentId: T:NodaTime.TimeZones.DateTimeZoneNotFoundException
    description: This provider does not support the given ID.
  nameWithType.vb: IDateTimeZoneProvider.Item(String)
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
  fullName.vb: NodaTime.IDateTimeZoneProvider.Item(System.String)
  name.vb: Item(String)
references:
- uid: NodaTime.IDateTimeZoneProvider
  commentId: T:NodaTime.IDateTimeZoneProvider
  parent: NodaTime
  name: IDateTimeZoneProvider
  nameWithType: IDateTimeZoneProvider
  fullName: NodaTime.IDateTimeZoneProvider
- uid: NodaTime.TimeZones.IDateTimeZoneSource
  commentId: T:NodaTime.TimeZones.IDateTimeZoneSource
  parent: NodaTime.TimeZones
  name: IDateTimeZoneSource
  nameWithType: IDateTimeZoneSource
  fullName: NodaTime.TimeZones.IDateTimeZoneSource
- uid: NodaTime.TimeZones.DateTimeZoneCache
  commentId: T:NodaTime.TimeZones.DateTimeZoneCache
  name: DateTimeZoneCache
  nameWithType: DateTimeZoneCache
  fullName: NodaTime.TimeZones.DateTimeZoneCache
- uid: NodaTime
  commentId: N:NodaTime
  name: NodaTime
  nameWithType: NodaTime
  fullName: NodaTime
- uid: NodaTime.TimeZones
  commentId: N:NodaTime.TimeZones
  name: NodaTime.TimeZones
  nameWithType: NodaTime.TimeZones
  fullName: NodaTime.TimeZones
- uid: NodaTime.IDateTimeZoneProvider.VersionId*
  commentId: Overload:NodaTime.IDateTimeZoneProvider.VersionId
  name: VersionId
  nameWithType: IDateTimeZoneProvider.VersionId
  fullName: NodaTime.IDateTimeZoneProvider.VersionId
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: NodaTime.IDateTimeZoneProvider.Ids*
  commentId: Overload:NodaTime.IDateTimeZoneProvider.Ids
  name: Ids
  nameWithType: IDateTimeZoneProvider.Ids
  fullName: NodaTime.IDateTimeZoneProvider.Ids
- uid: System.Collections.ObjectModel.ReadOnlyCollection{System.String}
  commentId: T:System.Collections.ObjectModel.ReadOnlyCollection{System.String}
  parent: System.Collections.ObjectModel
  definition: System.Collections.ObjectModel.ReadOnlyCollection`1
  name: ReadOnlyCollection<String>
  nameWithType: ReadOnlyCollection<String>
  fullName: System.Collections.ObjectModel.ReadOnlyCollection<System.String>
  nameWithType.vb: ReadOnlyCollection(Of String)
  fullName.vb: System.Collections.ObjectModel.ReadOnlyCollection(Of System.String)
  name.vb: ReadOnlyCollection(Of String)
  spec.csharp:
  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1
    name: ReadOnlyCollection
    nameWithType: ReadOnlyCollection
    fullName: System.Collections.ObjectModel.ReadOnlyCollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1
    name: ReadOnlyCollection
    nameWithType: ReadOnlyCollection
    fullName: System.Collections.ObjectModel.ReadOnlyCollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.ObjectModel.ReadOnlyCollection`1
  commentId: T:System.Collections.ObjectModel.ReadOnlyCollection`1
  isExternal: true
  name: ReadOnlyCollection<T>
  nameWithType: ReadOnlyCollection<T>
  fullName: System.Collections.ObjectModel.ReadOnlyCollection<T>
  nameWithType.vb: ReadOnlyCollection(Of T)
  fullName.vb: System.Collections.ObjectModel.ReadOnlyCollection(Of T)
  name.vb: ReadOnlyCollection(Of T)
  spec.csharp:
  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1
    name: ReadOnlyCollection
    nameWithType: ReadOnlyCollection
    fullName: System.Collections.ObjectModel.ReadOnlyCollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1
    name: ReadOnlyCollection
    nameWithType: ReadOnlyCollection
    fullName: System.Collections.ObjectModel.ReadOnlyCollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.ObjectModel
  commentId: N:System.Collections.ObjectModel
  isExternal: true
  name: System.Collections.ObjectModel
  nameWithType: System.Collections.ObjectModel
  fullName: System.Collections.ObjectModel
- uid: NodaTime.TimeZones.DateTimeZoneNotFoundException
  commentId: T:NodaTime.TimeZones.DateTimeZoneNotFoundException
  name: DateTimeZoneNotFoundException
  nameWithType: DateTimeZoneNotFoundException
  fullName: NodaTime.TimeZones.DateTimeZoneNotFoundException
- uid: NodaTime.TimeZones.BclDateTimeZone
  commentId: T:NodaTime.TimeZones.BclDateTimeZone
  parent: NodaTime.TimeZones
  name: BclDateTimeZone
  nameWithType: BclDateTimeZone
  fullName: NodaTime.TimeZones.BclDateTimeZone
- uid: NodaTime.TimeZones.BclDateTimeZone.ForSystemDefault
  commentId: M:NodaTime.TimeZones.BclDateTimeZone.ForSystemDefault
  isExternal: true
- uid: NodaTime.DateTimeZone
  commentId: T:NodaTime.DateTimeZone
  parent: NodaTime
  name: DateTimeZone
  nameWithType: DateTimeZone
  fullName: NodaTime.DateTimeZone
- uid: System.TimeZoneInfo
  commentId: T:System.TimeZoneInfo
  parent: System
  isExternal: true
  name: TimeZoneInfo
  nameWithType: TimeZoneInfo
  fullName: System.TimeZoneInfo
- uid: NodaTime.IDateTimeZoneProvider.GetSystemDefault*
  commentId: Overload:NodaTime.IDateTimeZoneProvider.GetSystemDefault
  name: GetSystemDefault
  nameWithType: IDateTimeZoneProvider.GetSystemDefault
  fullName: NodaTime.IDateTimeZoneProvider.GetSystemDefault
- uid: NodaTime.DateTimeZone.ForOffset(NodaTime.Offset)
  commentId: M:NodaTime.DateTimeZone.ForOffset(NodaTime.Offset)
  parent: NodaTime.DateTimeZone
  name: ForOffset(Offset)
  nameWithType: DateTimeZone.ForOffset(Offset)
  fullName: NodaTime.DateTimeZone.ForOffset(NodaTime.Offset)
  spec.csharp:
  - uid: NodaTime.DateTimeZone.ForOffset(NodaTime.Offset)
    name: ForOffset
    nameWithType: DateTimeZone.ForOffset
    fullName: NodaTime.DateTimeZone.ForOffset
  - name: (
    nameWithType: (
    fullName: (
  - uid: NodaTime.Offset
    name: Offset
    nameWithType: Offset
    fullName: NodaTime.Offset
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NodaTime.DateTimeZone.ForOffset(NodaTime.Offset)
    name: ForOffset
    nameWithType: DateTimeZone.ForOffset
    fullName: NodaTime.DateTimeZone.ForOffset
  - name: (
    nameWithType: (
    fullName: (
  - uid: NodaTime.Offset
    name: Offset
    nameWithType: Offset
    fullName: NodaTime.Offset
  - name: )
    nameWithType: )
    fullName: )
- uid: NodaTime.IDateTimeZoneProvider.GetZoneOrNull*
  commentId: Overload:NodaTime.IDateTimeZoneProvider.GetZoneOrNull
  name: GetZoneOrNull
  nameWithType: IDateTimeZoneProvider.GetZoneOrNull
  fullName: NodaTime.IDateTimeZoneProvider.GetZoneOrNull
- uid: NodaTime.IDateTimeZoneProvider.GetZoneOrNull(System.String)
  commentId: M:NodaTime.IDateTimeZoneProvider.GetZoneOrNull(System.String)
  parent: NodaTime.IDateTimeZoneProvider
  isExternal: true
  name: GetZoneOrNull(String)
  nameWithType: IDateTimeZoneProvider.GetZoneOrNull(String)
  fullName: NodaTime.IDateTimeZoneProvider.GetZoneOrNull(System.String)
  spec.csharp:
  - uid: NodaTime.IDateTimeZoneProvider.GetZoneOrNull(System.String)
    name: GetZoneOrNull
    nameWithType: IDateTimeZoneProvider.GetZoneOrNull
    fullName: NodaTime.IDateTimeZoneProvider.GetZoneOrNull
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NodaTime.IDateTimeZoneProvider.GetZoneOrNull(System.String)
    name: GetZoneOrNull
    nameWithType: IDateTimeZoneProvider.GetZoneOrNull
    fullName: NodaTime.IDateTimeZoneProvider.GetZoneOrNull
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: NodaTime.IDateTimeZoneProvider.Item*
  commentId: Overload:NodaTime.IDateTimeZoneProvider.Item
  name: Item
  nameWithType: IDateTimeZoneProvider.Item
  fullName: NodaTime.IDateTimeZoneProvider.Item
shouldSkipMarkup: true
