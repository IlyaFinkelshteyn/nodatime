### YamlMime:ManagedReference
items:
- uid: NodaTime.Instant
  commentId: T:NodaTime.Instant
  id: Instant
  parent: NodaTime
  children:
  - NodaTime.Instant.#ctor(System.Int64)
  - NodaTime.Instant.Add(NodaTime.Instant,NodaTime.Duration)
  - NodaTime.Instant.CompareTo(NodaTime.Instant)
  - NodaTime.Instant.Equals(NodaTime.Instant)
  - NodaTime.Instant.Equals(System.Object)
  - NodaTime.Instant.FromDateTimeOffset(System.DateTimeOffset)
  - NodaTime.Instant.FromDateTimeUtc(System.DateTime)
  - NodaTime.Instant.FromMillisecondsSinceUnixEpoch(System.Int64)
  - NodaTime.Instant.FromSecondsSinceUnixEpoch(System.Int64)
  - NodaTime.Instant.FromTicksSinceUnixEpoch(System.Int64)
  - NodaTime.Instant.FromUtc(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)
  - NodaTime.Instant.FromUtc(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)
  - NodaTime.Instant.GetHashCode
  - NodaTime.Instant.InUtc
  - NodaTime.Instant.InZone(NodaTime.DateTimeZone)
  - NodaTime.Instant.InZone(NodaTime.DateTimeZone,NodaTime.CalendarSystem)
  - NodaTime.Instant.Max(NodaTime.Instant,NodaTime.Instant)
  - NodaTime.Instant.MaxValue
  - NodaTime.Instant.Min(NodaTime.Instant,NodaTime.Instant)
  - NodaTime.Instant.Minus(NodaTime.Duration)
  - NodaTime.Instant.Minus(NodaTime.Instant)
  - NodaTime.Instant.MinValue
  - NodaTime.Instant.op_Addition(NodaTime.Instant,NodaTime.Duration)
  - NodaTime.Instant.op_Equality(NodaTime.Instant,NodaTime.Instant)
  - NodaTime.Instant.op_GreaterThan(NodaTime.Instant,NodaTime.Instant)
  - NodaTime.Instant.op_GreaterThanOrEqual(NodaTime.Instant,NodaTime.Instant)
  - NodaTime.Instant.op_Inequality(NodaTime.Instant,NodaTime.Instant)
  - NodaTime.Instant.op_LessThan(NodaTime.Instant,NodaTime.Instant)
  - NodaTime.Instant.op_LessThanOrEqual(NodaTime.Instant,NodaTime.Instant)
  - NodaTime.Instant.op_Subtraction(NodaTime.Instant,NodaTime.Duration)
  - NodaTime.Instant.op_Subtraction(NodaTime.Instant,NodaTime.Instant)
  - NodaTime.Instant.Plus(NodaTime.Duration)
  - NodaTime.Instant.PlusTicks(System.Int64)
  - NodaTime.Instant.Subtract(NodaTime.Instant,NodaTime.Duration)
  - NodaTime.Instant.Subtract(NodaTime.Instant,NodaTime.Instant)
  - NodaTime.Instant.System#IComparable#CompareTo(System.Object)
  - NodaTime.Instant.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  - NodaTime.Instant.System#Xml#Serialization#IXmlSerializable#GetSchema
  - NodaTime.Instant.System#Xml#Serialization#IXmlSerializable#ReadXml(System.Xml.XmlReader)
  - NodaTime.Instant.System#Xml#Serialization#IXmlSerializable#WriteXml(System.Xml.XmlWriter)
  - NodaTime.Instant.Ticks
  - NodaTime.Instant.ToDateTimeOffset
  - NodaTime.Instant.ToDateTimeUtc
  - NodaTime.Instant.ToString
  - NodaTime.Instant.ToString(System.String,System.IFormatProvider)
  - NodaTime.Instant.WithOffset(NodaTime.Offset)
  - NodaTime.Instant.WithOffset(NodaTime.Offset,NodaTime.CalendarSystem)
  langs:
  - csharp
  - vb
  name: Instant
  nameWithType: Instant
  fullName: NodaTime.Instant
  type: Struct
  source:
    remote:
      path: 1.3.x/src/NodaTime/Instant.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: Instant
    path: src/NodaTime/Instant.cs
    startLine: 32
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nRepresents an instant on the global timeline.\n"
  remarks: "\n<p>\nAn instant is defined by an integral number of &apos;ticks&apos; since the Unix epoch (typically described as January 1st\n1970, midnight, UTC, ISO calendar), where a tick is equal to 100 nanoseconds. There are 10,000 ticks in a\nmillisecond.\n</p>\n<p>\nAn <xref href=\"NodaTime.Instant\" data-throw-if-not-resolved=\"false\"></xref> has no concept of a particular time zone or calendar: it simply represents a point in\ntime that can be globally agreed-upon.\n</p>\n"
  example: []
  syntax:
    content: >-
      [Serializable]

      public struct Instant : IEquatable<Instant>, IComparable<Instant>, IFormattable, IComparable, IXmlSerializable, ISerializable
    content.vb: >-
      <Serializable>

      Public Structure Instant
          Implements IEquatable(Of Instant), IComparable(Of Instant), IFormattable, IComparable, IXmlSerializable, ISerializable
  implements:
  - System.IEquatable{NodaTime.Instant}
  - System.IComparable{NodaTime.Instant}
  - System.IFormattable
  - System.IComparable
  - System.Xml.Serialization.IXmlSerializable
  - System.Runtime.Serialization.ISerializable
  inheritedMembers:
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetType
  attributes:
  - type: System.SerializableAttribute
    ctor: System.SerializableAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - struct
  modifiers.vb:
  - Public
  - Structure
- uid: NodaTime.Instant.MinValue
  commentId: F:NodaTime.Instant.MinValue
  id: MinValue
  parent: NodaTime.Instant
  langs:
  - csharp
  - vb
  name: MinValue
  nameWithType: Instant.MinValue
  fullName: NodaTime.Instant.MinValue
  type: Field
  source:
    remote:
      path: 1.3.x/src/NodaTime/Instant.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: MinValue
    path: src/NodaTime/Instant.cs
    startLine: 45
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nRepresents the smallest possible <xref href=\"NodaTime.Instant\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  remarks: "\nWithin Noda Time, this is also used to represent &apos;the beginning of time&apos;.\n"
  example: []
  syntax:
    content: public static readonly Instant MinValue
    return:
      type: NodaTime.Instant
    content.vb: Public Shared ReadOnly MinValue As Instant
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: NodaTime.Instant.MaxValue
  commentId: F:NodaTime.Instant.MaxValue
  id: MaxValue
  parent: NodaTime.Instant
  langs:
  - csharp
  - vb
  name: MaxValue
  nameWithType: Instant.MaxValue
  fullName: NodaTime.Instant.MaxValue
  type: Field
  source:
    remote:
      path: 1.3.x/src/NodaTime/Instant.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: MaxValue
    path: src/NodaTime/Instant.cs
    startLine: 52
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nRepresents the largest possible <xref href=\"NodaTime.Instant\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  remarks: "\nWithin Noda Time, this is also used to represent &apos;the end of time&apos;.\n"
  example: []
  syntax:
    content: public static readonly Instant MaxValue
    return:
      type: NodaTime.Instant
    content.vb: Public Shared ReadOnly MaxValue As Instant
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: NodaTime.Instant.#ctor(System.Int64)
  commentId: M:NodaTime.Instant.#ctor(System.Int64)
  id: '#ctor(System.Int64)'
  parent: NodaTime.Instant
  langs:
  - csharp
  - vb
  name: Instant(Int64)
  nameWithType: Instant.Instant(Int64)
  fullName: NodaTime.Instant.Instant(System.Int64)
  type: Constructor
  source:
    remote:
      path: 1.3.x/src/NodaTime/Instant.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: .ctor
    path: src/NodaTime/Instant.cs
    startLine: 68
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nInitializes a new instance of the <xref href=\"NodaTime.Instant\" data-throw-if-not-resolved=\"false\"></xref> struct.\n"
  remarks: "\nNote that while the Noda Time <xref href=\"NodaTime.Instant\" data-throw-if-not-resolved=\"false\"></xref> type and BCL <xref href=\"System.DateTime\" data-throw-if-not-resolved=\"false\"></xref> and\n<xref href=\"System.DateTimeOffset\" data-throw-if-not-resolved=\"false\"></xref> types are all defined in terms of a number of ticks, they use different\norigins: the Noda Time types count ticks from the Unix epoch (the start of 1970 AD), while the BCL types\ncount from the start of 1 AD. This constructor requires the former; to convert from a number-of-ticks since\nthe BCL epoch, construct a <xref href=\"System.DateTime\" data-throw-if-not-resolved=\"false\"></xref> first, then use <xref href=\"NodaTime.Instant.FromDateTimeUtc(System.DateTime)\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public Instant(long ticks)
    parameters:
    - id: ticks
      type: System.Int64
      description: >-
        The number of ticks since the Unix epoch. Negative values represent instants before the

        Unix epoch.
    content.vb: Public Sub New(ticks As Long)
  overload: NodaTime.Instant.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: NodaTime.Instant.Ticks
  commentId: P:NodaTime.Instant.Ticks
  id: Ticks
  parent: NodaTime.Instant
  langs:
  - csharp
  - vb
  name: Ticks
  nameWithType: Instant.Ticks
  fullName: NodaTime.Instant.Ticks
  type: Property
  source:
    remote:
      path: 1.3.x/src/NodaTime/Instant.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: Ticks
    path: src/NodaTime/Instant.cs
    startLine: 79
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nThe number of ticks since the Unix epoch. Negative values represent instants before the Unix epoch.\n"
  remarks: "\nA tick is equal to 100 nanoseconds. There are 10,000 ticks in a millisecond.\n"
  example: []
  syntax:
    content: public long Ticks { get; }
    parameters: []
    return:
      type: System.Int64
    content.vb: Public ReadOnly Property Ticks As Long
  overload: NodaTime.Instant.Ticks*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: NodaTime.Instant.CompareTo(NodaTime.Instant)
  commentId: M:NodaTime.Instant.CompareTo(NodaTime.Instant)
  id: CompareTo(NodaTime.Instant)
  parent: NodaTime.Instant
  langs:
  - csharp
  - vb
  name: CompareTo(Instant)
  nameWithType: Instant.CompareTo(Instant)
  fullName: NodaTime.Instant.CompareTo(NodaTime.Instant)
  type: Method
  source:
    remote:
      path: 1.3.x/src/NodaTime/Instant.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: CompareTo
    path: src/NodaTime/Instant.cs
    startLine: 108
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nCompares the current object with another object of the same type.\n"
  example: []
  syntax:
    content: public int CompareTo(Instant other)
    parameters:
    - id: other
      type: NodaTime.Instant
      description: An object to compare with this object.
    return:
      type: System.Int32
      description: "\nA 32-bit signed integer that indicates the relative order of the objects being compared.\nThe return value has the following meanings:\n<table><thead><tr><th>Value</th><th>Meaning</th></tr></thead><tbody><tr><td>&lt; 0</td><td>This object is less than the <code data-dev-comment-type=\"paramref\" class=\"paramref\">other</code> parameter.</td></tr><tr><td>0</td><td>This object is equal to <code data-dev-comment-type=\"paramref\" class=\"paramref\">other</code>.</td></tr><tr><td>> 0</td><td>This object is greater than <code data-dev-comment-type=\"paramref\" class=\"paramref\">other</code>.</td></tr></tbody></table>\n"
    content.vb: Public Function CompareTo(other As Instant) As Integer
  overload: NodaTime.Instant.CompareTo*
  implements:
  - System.IComparable{NodaTime.Instant}.CompareTo(NodaTime.Instant)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: NodaTime.Instant.System#IComparable#CompareTo(System.Object)
  commentId: M:NodaTime.Instant.System#IComparable#CompareTo(System.Object)
  id: System#IComparable#CompareTo(System.Object)
  isEii: true
  parent: NodaTime.Instant
  langs:
  - csharp
  - vb
  name: IComparable.CompareTo(Object)
  nameWithType: Instant.IComparable.CompareTo(Object)
  fullName: NodaTime.Instant.System.IComparable.CompareTo(System.Object)
  type: Method
  source:
    remote:
      path: 1.3.x/src/NodaTime/Instant.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: System.IComparable.CompareTo
    path: src/NodaTime/Instant.cs
    startLine: 124
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nImplementation of <xref href=\"System.IComparable.CompareTo(System.Object)\" data-throw-if-not-resolved=\"false\"></xref> to compare two instants.\n"
  remarks: "\nThis uses explicit interface implementation to avoid it being called accidentally. The generic implementation should usually be preferred.\n"
  example: []
  syntax:
    content: int IComparable.CompareTo(object obj)
    parameters:
    - id: obj
      type: System.Object
      description: The object to compare this value with.
    return:
      type: System.Int32
      description: >
        The result of comparing this instant with another one; see <xref href="NodaTime.Instant.CompareTo(NodaTime.Instant)" data-throw-if-not-resolved="false"></xref> for general details.

        If <code data-dev-comment-type="paramref" class="paramref">obj</code> is null, this method returns a value greater than 0.
    content.vb: Function System.IComparable.CompareTo(obj As Object) As Integer Implements IComparable.CompareTo
  overload: NodaTime.Instant.System#IComparable#CompareTo*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: <code data-dev-comment-type="paramref" class="paramref">obj</code> is non-null but does not refer to an instance of <xref href="NodaTime.Instant" data-throw-if-not-resolved="false"></xref>.
  implements:
  - System.IComparable.CompareTo(System.Object)
  nameWithType.vb: Instant.System.IComparable.CompareTo(Object)
  name.vb: System.IComparable.CompareTo(Object)
- uid: NodaTime.Instant.Equals(System.Object)
  commentId: M:NodaTime.Instant.Equals(System.Object)
  id: Equals(System.Object)
  parent: NodaTime.Instant
  langs:
  - csharp
  - vb
  name: Equals(Object)
  nameWithType: Instant.Equals(Object)
  fullName: NodaTime.Instant.Equals(System.Object)
  type: Method
  source:
    remote:
      path: 1.3.x/src/NodaTime/Instant.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: Equals
    path: src/NodaTime/Instant.cs
    startLine: 144
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nDetermines whether the specified <xref href=\"System.Object\" data-throw-if-not-resolved=\"false\"></xref> is equal to this instance.\n"
  example: []
  syntax:
    content: public override bool Equals(object obj)
    parameters:
    - id: obj
      type: System.Object
      description: The <xref href="System.Object" data-throw-if-not-resolved="false"></xref> to compare with this instance.
    return:
      type: System.Boolean
      description: "\n<code>true</code> if the specified <xref href=\"System.Object\" data-throw-if-not-resolved=\"false\"></xref> is equal to this instance;\notherwise, <code>false</code>.\n"
    content.vb: Public Overrides Function Equals(obj As Object) As Boolean
  overridden: System.ValueType.Equals(System.Object)
  overload: NodaTime.Instant.Equals*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: NodaTime.Instant.GetHashCode
  commentId: M:NodaTime.Instant.GetHashCode
  id: GetHashCode
  parent: NodaTime.Instant
  langs:
  - csharp
  - vb
  name: GetHashCode()
  nameWithType: Instant.GetHashCode()
  fullName: NodaTime.Instant.GetHashCode()
  type: Method
  source:
    remote:
      path: 1.3.x/src/NodaTime/Instant.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: GetHashCode
    path: src/NodaTime/Instant.cs
    startLine: 160
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nReturns a hash code for this instance.\n"
  example: []
  syntax:
    content: public override int GetHashCode()
    return:
      type: System.Int32
      description: "\nA hash code for this instance, suitable for use in hashing algorithms and data\nstructures like a hash table. \n"
    content.vb: Public Overrides Function GetHashCode As Integer
  overridden: System.ValueType.GetHashCode
  overload: NodaTime.Instant.GetHashCode*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: NodaTime.Instant.PlusTicks(System.Int64)
  commentId: M:NodaTime.Instant.PlusTicks(System.Int64)
  id: PlusTicks(System.Int64)
  parent: NodaTime.Instant
  langs:
  - csharp
  - vb
  name: PlusTicks(Int64)
  nameWithType: Instant.PlusTicks(Int64)
  fullName: NodaTime.Instant.PlusTicks(System.Int64)
  type: Method
  source:
    remote:
      path: 1.3.x/src/NodaTime/Instant.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: PlusTicks
    path: src/NodaTime/Instant.cs
    startLine: 171
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nReturns a new value of this instant with the given number of ticks added to it.\n"
  example: []
  syntax:
    content: public Instant PlusTicks(long ticksToAdd)
    parameters:
    - id: ticksToAdd
      type: System.Int64
      description: The ticks to add to this instant to create the return value.
    return:
      type: NodaTime.Instant
      description: The result of adding the given number of ticks to this instant.
    content.vb: Public Function PlusTicks(ticksToAdd As Long) As Instant
  overload: NodaTime.Instant.PlusTicks*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: NodaTime.Instant.op_Addition(NodaTime.Instant,NodaTime.Duration)
  commentId: M:NodaTime.Instant.op_Addition(NodaTime.Instant,NodaTime.Duration)
  id: op_Addition(NodaTime.Instant,NodaTime.Duration)
  parent: NodaTime.Instant
  langs:
  - csharp
  - vb
  name: Addition(Instant, Duration)
  nameWithType: Instant.Addition(Instant, Duration)
  fullName: NodaTime.Instant.Addition(NodaTime.Instant, NodaTime.Duration)
  type: Operator
  source:
    remote:
      path: 1.3.x/src/NodaTime/Instant.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: op_Addition
    path: src/NodaTime/Instant.cs
    startLine: 184
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nImplements the operator + (addition) for <xref href=\"NodaTime.Instant\" data-throw-if-not-resolved=\"false\"></xref> + <xref href=\"NodaTime.Duration\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public static Instant operator +(Instant left, Duration right)
    parameters:
    - id: left
      type: NodaTime.Instant
      description: The left hand side of the operator.
    - id: right
      type: NodaTime.Duration
      description: The right hand side of the operator.
    return:
      type: NodaTime.Instant
      description: A new <xref href="NodaTime.Instant" data-throw-if-not-resolved="false"></xref> representing the sum of the given values.
    content.vb: Public Shared Operator +(left As Instant, right As Duration) As Instant
  overload: NodaTime.Instant.op_Addition*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: NodaTime.Instant.Add(NodaTime.Instant,NodaTime.Duration)
  commentId: M:NodaTime.Instant.Add(NodaTime.Instant,NodaTime.Duration)
  id: Add(NodaTime.Instant,NodaTime.Duration)
  parent: NodaTime.Instant
  langs:
  - csharp
  - vb
  name: Add(Instant, Duration)
  nameWithType: Instant.Add(Instant, Duration)
  fullName: NodaTime.Instant.Add(NodaTime.Instant, NodaTime.Duration)
  type: Method
  source:
    remote:
      path: 1.3.x/src/NodaTime/Instant.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: Add
    path: src/NodaTime/Instant.cs
    startLine: 209
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nAdds a duration to an instant. Friendly alternative to <code>operator+()</code>.\n"
  example: []
  syntax:
    content: public static Instant Add(Instant left, Duration right)
    parameters:
    - id: left
      type: NodaTime.Instant
      description: The left hand side of the operator.
    - id: right
      type: NodaTime.Duration
      description: The right hand side of the operator.
    return:
      type: NodaTime.Instant
      description: A new <xref href="NodaTime.Instant" data-throw-if-not-resolved="false"></xref> representing the sum of the given values.
    content.vb: Public Shared Function Add(left As Instant, right As Duration) As Instant
  overload: NodaTime.Instant.Add*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: NodaTime.Instant.Plus(NodaTime.Duration)
  commentId: M:NodaTime.Instant.Plus(NodaTime.Duration)
  id: Plus(NodaTime.Duration)
  parent: NodaTime.Instant
  langs:
  - csharp
  - vb
  name: Plus(Duration)
  nameWithType: Instant.Plus(Duration)
  fullName: NodaTime.Instant.Plus(NodaTime.Duration)
  type: Method
  source:
    remote:
      path: 1.3.x/src/NodaTime/Instant.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: Plus
    path: src/NodaTime/Instant.cs
    startLine: 219
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nReturns the result of adding a duration to this instant, for a fluent alternative to <code>operator+()</code>.\n"
  example: []
  syntax:
    content: public Instant Plus(Duration duration)
    parameters:
    - id: duration
      type: NodaTime.Duration
      description: The duration to add
    return:
      type: NodaTime.Instant
      description: A new <xref href="NodaTime.Instant" data-throw-if-not-resolved="false"></xref> representing the result of the addition.
    content.vb: Public Function Plus(duration As Duration) As Instant
  overload: NodaTime.Instant.Plus*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: NodaTime.Instant.op_Subtraction(NodaTime.Instant,NodaTime.Instant)
  commentId: M:NodaTime.Instant.op_Subtraction(NodaTime.Instant,NodaTime.Instant)
  id: op_Subtraction(NodaTime.Instant,NodaTime.Instant)
  parent: NodaTime.Instant
  langs:
  - csharp
  - vb
  name: Subtraction(Instant, Instant)
  nameWithType: Instant.Subtraction(Instant, Instant)
  fullName: NodaTime.Instant.Subtraction(NodaTime.Instant, NodaTime.Instant)
  type: Operator
  source:
    remote:
      path: 1.3.x/src/NodaTime/Instant.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: op_Subtraction
    path: src/NodaTime/Instant.cs
    startLine: 231
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nImplements the operator - (subtraction) for <xref href=\"NodaTime.Instant\" data-throw-if-not-resolved=\"false\"></xref> - <xref href=\"NodaTime.Instant\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public static Duration operator -(Instant left, Instant right)
    parameters:
    - id: left
      type: NodaTime.Instant
      description: The left hand side of the operator.
    - id: right
      type: NodaTime.Instant
      description: The right hand side of the operator.
    return:
      type: NodaTime.Duration
      description: A new <xref href="NodaTime.Instant" data-throw-if-not-resolved="false"></xref> representing the difference of the given values.
    content.vb: Public Shared Operator -(left As Instant, right As Instant) As Duration
  overload: NodaTime.Instant.op_Subtraction*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: NodaTime.Instant.op_Subtraction(NodaTime.Instant,NodaTime.Duration)
  commentId: M:NodaTime.Instant.op_Subtraction(NodaTime.Instant,NodaTime.Duration)
  id: op_Subtraction(NodaTime.Instant,NodaTime.Duration)
  parent: NodaTime.Instant
  langs:
  - csharp
  - vb
  name: Subtraction(Instant, Duration)
  nameWithType: Instant.Subtraction(Instant, Duration)
  fullName: NodaTime.Instant.Subtraction(NodaTime.Instant, NodaTime.Duration)
  type: Operator
  source:
    remote:
      path: 1.3.x/src/NodaTime/Instant.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: op_Subtraction
    path: src/NodaTime/Instant.cs
    startLine: 242
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nImplements the operator - (subtraction) for <xref href=\"NodaTime.Instant\" data-throw-if-not-resolved=\"false\"></xref> - <xref href=\"NodaTime.Duration\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public static Instant operator -(Instant left, Duration right)
    parameters:
    - id: left
      type: NodaTime.Instant
      description: The left hand side of the operator.
    - id: right
      type: NodaTime.Duration
      description: The right hand side of the operator.
    return:
      type: NodaTime.Instant
      description: A new <xref href="NodaTime.Instant" data-throw-if-not-resolved="false"></xref> representing the difference of the given values.
    content.vb: Public Shared Operator -(left As Instant, right As Duration) As Instant
  overload: NodaTime.Instant.op_Subtraction*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: NodaTime.Instant.Subtract(NodaTime.Instant,NodaTime.Instant)
  commentId: M:NodaTime.Instant.Subtract(NodaTime.Instant,NodaTime.Instant)
  id: Subtract(NodaTime.Instant,NodaTime.Instant)
  parent: NodaTime.Instant
  langs:
  - csharp
  - vb
  name: Subtract(Instant, Instant)
  nameWithType: Instant.Subtract(Instant, Instant)
  fullName: NodaTime.Instant.Subtract(NodaTime.Instant, NodaTime.Instant)
  type: Method
  source:
    remote:
      path: 1.3.x/src/NodaTime/Instant.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: Subtract
    path: src/NodaTime/Instant.cs
    startLine: 253
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nSubtracts one instant from another. Friendly alternative to <code>operator-()</code>.\n"
  example: []
  syntax:
    content: public static Duration Subtract(Instant left, Instant right)
    parameters:
    - id: left
      type: NodaTime.Instant
      description: The left hand side of the operator.
    - id: right
      type: NodaTime.Instant
      description: The right hand side of the operator.
    return:
      type: NodaTime.Duration
      description: A new <xref href="NodaTime.Duration" data-throw-if-not-resolved="false"></xref> representing the difference of the given values.
    content.vb: Public Shared Function Subtract(left As Instant, right As Instant) As Duration
  overload: NodaTime.Instant.Subtract*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: NodaTime.Instant.Minus(NodaTime.Instant)
  commentId: M:NodaTime.Instant.Minus(NodaTime.Instant)
  id: Minus(NodaTime.Instant)
  parent: NodaTime.Instant
  langs:
  - csharp
  - vb
  name: Minus(Instant)
  nameWithType: Instant.Minus(Instant)
  fullName: NodaTime.Instant.Minus(NodaTime.Instant)
  type: Method
  source:
    remote:
      path: 1.3.x/src/NodaTime/Instant.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: Minus
    path: src/NodaTime/Instant.cs
    startLine: 263
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nReturns the result of subtracting another instant from this one, for a fluent alternative to <code>operator-()</code>.\n"
  example: []
  syntax:
    content: public Duration Minus(Instant other)
    parameters:
    - id: other
      type: NodaTime.Instant
      description: The other instant to subtract
    return:
      type: NodaTime.Duration
      description: A new <xref href="NodaTime.Instant" data-throw-if-not-resolved="false"></xref> representing the result of the subtraction.
    content.vb: Public Function Minus(other As Instant) As Duration
  overload: NodaTime.Instant.Minus*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: NodaTime.Instant.Subtract(NodaTime.Instant,NodaTime.Duration)
  commentId: M:NodaTime.Instant.Subtract(NodaTime.Instant,NodaTime.Duration)
  id: Subtract(NodaTime.Instant,NodaTime.Duration)
  parent: NodaTime.Instant
  langs:
  - csharp
  - vb
  name: Subtract(Instant, Duration)
  nameWithType: Instant.Subtract(Instant, Duration)
  fullName: NodaTime.Instant.Subtract(NodaTime.Instant, NodaTime.Duration)
  type: Method
  source:
    remote:
      path: 1.3.x/src/NodaTime/Instant.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: Subtract
    path: src/NodaTime/Instant.cs
    startLine: 275
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nSubtracts a duration from an instant. Friendly alternative to <code>operator-()</code>.\n"
  example: []
  syntax:
    content: public static Instant Subtract(Instant left, Duration right)
    parameters:
    - id: left
      type: NodaTime.Instant
      description: The left hand side of the operator.
    - id: right
      type: NodaTime.Duration
      description: The right hand side of the operator.
    return:
      type: NodaTime.Instant
      description: A new <xref href="NodaTime.Instant" data-throw-if-not-resolved="false"></xref> representing the difference of the given values.
    content.vb: Public Shared Function Subtract(left As Instant, right As Duration) As Instant
  overload: NodaTime.Instant.Subtract*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: NodaTime.Instant.Minus(NodaTime.Duration)
  commentId: M:NodaTime.Instant.Minus(NodaTime.Duration)
  id: Minus(NodaTime.Duration)
  parent: NodaTime.Instant
  langs:
  - csharp
  - vb
  name: Minus(Duration)
  nameWithType: Instant.Minus(Duration)
  fullName: NodaTime.Instant.Minus(NodaTime.Duration)
  type: Method
  source:
    remote:
      path: 1.3.x/src/NodaTime/Instant.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: Minus
    path: src/NodaTime/Instant.cs
    startLine: 286
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nReturns the result of subtracting a duration from this instant, for a fluent alternative to <code>operator-()</code>.\n"
  example: []
  syntax:
    content: public Instant Minus(Duration duration)
    parameters:
    - id: duration
      type: NodaTime.Duration
      description: The duration to subtract
    return:
      type: NodaTime.Instant
      description: A new <xref href="NodaTime.Instant" data-throw-if-not-resolved="false"></xref> representing the result of the subtraction.
    content.vb: Public Function Minus(duration As Duration) As Instant
  overload: NodaTime.Instant.Minus*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: NodaTime.Instant.op_Equality(NodaTime.Instant,NodaTime.Instant)
  commentId: M:NodaTime.Instant.op_Equality(NodaTime.Instant,NodaTime.Instant)
  id: op_Equality(NodaTime.Instant,NodaTime.Instant)
  parent: NodaTime.Instant
  langs:
  - csharp
  - vb
  name: Equality(Instant, Instant)
  nameWithType: Instant.Equality(Instant, Instant)
  fullName: NodaTime.Instant.Equality(NodaTime.Instant, NodaTime.Instant)
  type: Operator
  source:
    remote:
      path: 1.3.x/src/NodaTime/Instant.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: op_Equality
    path: src/NodaTime/Instant.cs
    startLine: 298
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nImplements the operator == (equality).\n"
  example: []
  syntax:
    content: public static bool operator ==(Instant left, Instant right)
    parameters:
    - id: left
      type: NodaTime.Instant
      description: The left hand side of the operator.
    - id: right
      type: NodaTime.Instant
      description: The right hand side of the operator.
    return:
      type: System.Boolean
      description: <code>true</code> if values are equal to each other, otherwise <code>false</code>.
    content.vb: Public Shared Operator =(left As Instant, right As Instant) As Boolean
  overload: NodaTime.Instant.op_Equality*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: NodaTime.Instant.op_Inequality(NodaTime.Instant,NodaTime.Instant)
  commentId: M:NodaTime.Instant.op_Inequality(NodaTime.Instant,NodaTime.Instant)
  id: op_Inequality(NodaTime.Instant,NodaTime.Instant)
  parent: NodaTime.Instant
  langs:
  - csharp
  - vb
  name: Inequality(Instant, Instant)
  nameWithType: Instant.Inequality(Instant, Instant)
  fullName: NodaTime.Instant.Inequality(NodaTime.Instant, NodaTime.Instant)
  type: Operator
  source:
    remote:
      path: 1.3.x/src/NodaTime/Instant.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: op_Inequality
    path: src/NodaTime/Instant.cs
    startLine: 309
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nImplements the operator != (inequality).\n"
  example: []
  syntax:
    content: public static bool operator !=(Instant left, Instant right)
    parameters:
    - id: left
      type: NodaTime.Instant
      description: The left hand side of the operator.
    - id: right
      type: NodaTime.Instant
      description: The right hand side of the operator.
    return:
      type: System.Boolean
      description: <code>true</code> if values are not equal to each other, otherwise <code>false</code>.
    content.vb: Public Shared Operator <>(left As Instant, right As Instant) As Boolean
  overload: NodaTime.Instant.op_Inequality*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: NodaTime.Instant.op_LessThan(NodaTime.Instant,NodaTime.Instant)
  commentId: M:NodaTime.Instant.op_LessThan(NodaTime.Instant,NodaTime.Instant)
  id: op_LessThan(NodaTime.Instant,NodaTime.Instant)
  parent: NodaTime.Instant
  langs:
  - csharp
  - vb
  name: LessThan(Instant, Instant)
  nameWithType: Instant.LessThan(Instant, Instant)
  fullName: NodaTime.Instant.LessThan(NodaTime.Instant, NodaTime.Instant)
  type: Operator
  source:
    remote:
      path: 1.3.x/src/NodaTime/Instant.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: op_LessThan
    path: src/NodaTime/Instant.cs
    startLine: 320
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nImplements the operator &lt; (less than).\n"
  example: []
  syntax:
    content: public static bool operator <(Instant left, Instant right)
    parameters:
    - id: left
      type: NodaTime.Instant
      description: The left hand side of the operator.
    - id: right
      type: NodaTime.Instant
      description: The right hand side of the operator.
    return:
      type: System.Boolean
      description: <code>true</code> if the left value is less than the right value, otherwise <code>false</code>.
    content.vb: Public Shared Operator <(left As Instant, right As Instant) As Boolean
  overload: NodaTime.Instant.op_LessThan*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: NodaTime.Instant.op_LessThanOrEqual(NodaTime.Instant,NodaTime.Instant)
  commentId: M:NodaTime.Instant.op_LessThanOrEqual(NodaTime.Instant,NodaTime.Instant)
  id: op_LessThanOrEqual(NodaTime.Instant,NodaTime.Instant)
  parent: NodaTime.Instant
  langs:
  - csharp
  - vb
  name: LessThanOrEqual(Instant, Instant)
  nameWithType: Instant.LessThanOrEqual(Instant, Instant)
  fullName: NodaTime.Instant.LessThanOrEqual(NodaTime.Instant, NodaTime.Instant)
  type: Operator
  source:
    remote:
      path: 1.3.x/src/NodaTime/Instant.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: op_LessThanOrEqual
    path: src/NodaTime/Instant.cs
    startLine: 331
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nImplements the operator &lt;= (less than or equal).\n"
  example: []
  syntax:
    content: public static bool operator <=(Instant left, Instant right)
    parameters:
    - id: left
      type: NodaTime.Instant
      description: The left hand side of the operator.
    - id: right
      type: NodaTime.Instant
      description: The right hand side of the operator.
    return:
      type: System.Boolean
      description: <code>true</code> if the left value is less than or equal to the right value, otherwise <code>false</code>.
    content.vb: Public Shared Operator <=(left As Instant, right As Instant) As Boolean
  overload: NodaTime.Instant.op_LessThanOrEqual*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: NodaTime.Instant.op_GreaterThan(NodaTime.Instant,NodaTime.Instant)
  commentId: M:NodaTime.Instant.op_GreaterThan(NodaTime.Instant,NodaTime.Instant)
  id: op_GreaterThan(NodaTime.Instant,NodaTime.Instant)
  parent: NodaTime.Instant
  langs:
  - csharp
  - vb
  name: GreaterThan(Instant, Instant)
  nameWithType: Instant.GreaterThan(Instant, Instant)
  fullName: NodaTime.Instant.GreaterThan(NodaTime.Instant, NodaTime.Instant)
  type: Operator
  source:
    remote:
      path: 1.3.x/src/NodaTime/Instant.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: op_GreaterThan
    path: src/NodaTime/Instant.cs
    startLine: 342
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nImplements the operator > (greater than).\n"
  example: []
  syntax:
    content: public static bool operator>(Instant left, Instant right)
    parameters:
    - id: left
      type: NodaTime.Instant
      description: The left hand side of the operator.
    - id: right
      type: NodaTime.Instant
      description: The right hand side of the operator.
    return:
      type: System.Boolean
      description: <code>true</code> if the left value is greater than the right value, otherwise <code>false</code>.
    content.vb: Public Shared Operator>(left As Instant, right As Instant) As Boolean
  overload: NodaTime.Instant.op_GreaterThan*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: NodaTime.Instant.op_GreaterThanOrEqual(NodaTime.Instant,NodaTime.Instant)
  commentId: M:NodaTime.Instant.op_GreaterThanOrEqual(NodaTime.Instant,NodaTime.Instant)
  id: op_GreaterThanOrEqual(NodaTime.Instant,NodaTime.Instant)
  parent: NodaTime.Instant
  langs:
  - csharp
  - vb
  name: GreaterThanOrEqual(Instant, Instant)
  nameWithType: Instant.GreaterThanOrEqual(Instant, Instant)
  fullName: NodaTime.Instant.GreaterThanOrEqual(NodaTime.Instant, NodaTime.Instant)
  type: Operator
  source:
    remote:
      path: 1.3.x/src/NodaTime/Instant.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: op_GreaterThanOrEqual
    path: src/NodaTime/Instant.cs
    startLine: 353
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nImplements the operator >= (greater than or equal).\n"
  example: []
  syntax:
    content: public static bool operator >=(Instant left, Instant right)
    parameters:
    - id: left
      type: NodaTime.Instant
      description: The left hand side of the operator.
    - id: right
      type: NodaTime.Instant
      description: The right hand side of the operator.
    return:
      type: System.Boolean
      description: <code>true</code> if the left value is greater than or equal to the right value, otherwise <code>false</code>.
    content.vb: Public Shared Operator >=(left As Instant, right As Instant) As Boolean
  overload: NodaTime.Instant.op_GreaterThanOrEqual*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: NodaTime.Instant.FromUtc(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)
  commentId: M:NodaTime.Instant.FromUtc(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)
  id: FromUtc(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)
  parent: NodaTime.Instant
  langs:
  - csharp
  - vb
  name: FromUtc(Int32, Int32, Int32, Int32, Int32)
  nameWithType: Instant.FromUtc(Int32, Int32, Int32, Int32, Int32)
  fullName: NodaTime.Instant.FromUtc(System.Int32, System.Int32, System.Int32, System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: 1.3.x/src/NodaTime/Instant.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: FromUtc
    path: src/NodaTime/Instant.cs
    startLine: 373
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nReturns a new instant corresponding to the given UTC date and time in the ISO calendar.\nIn most cases applications should use <xref href=\"NodaTime.ZonedDateTime\" data-throw-if-not-resolved=\"false\"></xref> to represent a date\nand time, but this method is useful in some situations where an <xref href=\"NodaTime.Instant\" data-throw-if-not-resolved=\"false\"></xref> is\nrequired, such as time zone testing.\n"
  example: []
  syntax:
    content: public static Instant FromUtc(int year, int monthOfYear, int dayOfMonth, int hourOfDay, int minuteOfHour)
    parameters:
    - id: year
      type: System.Int32
      description: >-
        The year. This is the &quot;absolute year&quot;,

        so a value of 0 means 1 BC, for example.
    - id: monthOfYear
      type: System.Int32
      description: The month of year.
    - id: dayOfMonth
      type: System.Int32
      description: The day of month.
    - id: hourOfDay
      type: System.Int32
      description: The hour.
    - id: minuteOfHour
      type: System.Int32
      description: The minute.
    return:
      type: NodaTime.Instant
      description: An <xref href="NodaTime.Instant" data-throw-if-not-resolved="false"></xref> value representing the given date and time in UTC and the ISO calendar.
    content.vb: Public Shared Function FromUtc(year As Integer, monthOfYear As Integer, dayOfMonth As Integer, hourOfDay As Integer, minuteOfHour As Integer) As Instant
  overload: NodaTime.Instant.FromUtc*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: NodaTime.Instant.FromUtc(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)
  commentId: M:NodaTime.Instant.FromUtc(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)
  id: FromUtc(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)
  parent: NodaTime.Instant
  langs:
  - csharp
  - vb
  name: FromUtc(Int32, Int32, Int32, Int32, Int32, Int32)
  nameWithType: Instant.FromUtc(Int32, Int32, Int32, Int32, Int32, Int32)
  fullName: NodaTime.Instant.FromUtc(System.Int32, System.Int32, System.Int32, System.Int32, System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: 1.3.x/src/NodaTime/Instant.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: FromUtc
    path: src/NodaTime/Instant.cs
    startLine: 394
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nReturns a new instant corresponding to the given UTC date and\ntime in the ISO calendar. In most cases applications should \nuse <xref href=\"NodaTime.ZonedDateTime\" data-throw-if-not-resolved=\"false\"></xref>\nto represent a date and time, but this method is useful in some \nsituations where an Instant is required, such as time zone testing.\n"
  example: []
  syntax:
    content: public static Instant FromUtc(int year, int monthOfYear, int dayOfMonth, int hourOfDay, int minuteOfHour, int secondOfMinute)
    parameters:
    - id: year
      type: System.Int32
      description: >-
        The year. This is the &quot;absolute year&quot;,

        so a value of 0 means 1 BC, for example.
    - id: monthOfYear
      type: System.Int32
      description: The month of year.
    - id: dayOfMonth
      type: System.Int32
      description: The day of month.
    - id: hourOfDay
      type: System.Int32
      description: The hour.
    - id: minuteOfHour
      type: System.Int32
      description: The minute.
    - id: secondOfMinute
      type: System.Int32
      description: The second.
    return:
      type: NodaTime.Instant
      description: An <xref href="NodaTime.Instant" data-throw-if-not-resolved="false"></xref> value representing the given date and time in UTC and the ISO calendar.
    content.vb: Public Shared Function FromUtc(year As Integer, monthOfYear As Integer, dayOfMonth As Integer, hourOfDay As Integer, minuteOfHour As Integer, secondOfMinute As Integer) As Instant
  overload: NodaTime.Instant.FromUtc*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: NodaTime.Instant.Max(NodaTime.Instant,NodaTime.Instant)
  commentId: M:NodaTime.Instant.Max(NodaTime.Instant,NodaTime.Instant)
  id: Max(NodaTime.Instant,NodaTime.Instant)
  parent: NodaTime.Instant
  langs:
  - csharp
  - vb
  name: Max(Instant, Instant)
  nameWithType: Instant.Max(Instant, Instant)
  fullName: NodaTime.Instant.Max(NodaTime.Instant, NodaTime.Instant)
  type: Method
  source:
    remote:
      path: 1.3.x/src/NodaTime/Instant.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: Max
    path: src/NodaTime/Instant.cs
    startLine: 406
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nReturns the later instant of the given two.\n"
  example: []
  syntax:
    content: public static Instant Max(Instant x, Instant y)
    parameters:
    - id: x
      type: NodaTime.Instant
      description: The first instant to compare.
    - id: y
      type: NodaTime.Instant
      description: The second instant to compare.
    return:
      type: NodaTime.Instant
      description: The later instant of <code data-dev-comment-type="paramref" class="paramref">x</code> or <code data-dev-comment-type="paramref" class="paramref">y</code>.
    content.vb: Public Shared Function Max(x As Instant, y As Instant) As Instant
  overload: NodaTime.Instant.Max*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: NodaTime.Instant.Min(NodaTime.Instant,NodaTime.Instant)
  commentId: M:NodaTime.Instant.Min(NodaTime.Instant,NodaTime.Instant)
  id: Min(NodaTime.Instant,NodaTime.Instant)
  parent: NodaTime.Instant
  langs:
  - csharp
  - vb
  name: Min(Instant, Instant)
  nameWithType: Instant.Min(Instant, Instant)
  fullName: NodaTime.Instant.Min(NodaTime.Instant, NodaTime.Instant)
  type: Method
  source:
    remote:
      path: 1.3.x/src/NodaTime/Instant.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: Min
    path: src/NodaTime/Instant.cs
    startLine: 417
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nReturns the earlier instant of the given two.\n"
  example: []
  syntax:
    content: public static Instant Min(Instant x, Instant y)
    parameters:
    - id: x
      type: NodaTime.Instant
      description: The first instant to compare.
    - id: y
      type: NodaTime.Instant
      description: The second instant to compare.
    return:
      type: NodaTime.Instant
      description: The earlier instant of <code data-dev-comment-type="paramref" class="paramref">x</code> or <code data-dev-comment-type="paramref" class="paramref">y</code>.
    content.vb: Public Shared Function Min(x As Instant, y As Instant) As Instant
  overload: NodaTime.Instant.Min*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: NodaTime.Instant.ToString
  commentId: M:NodaTime.Instant.ToString
  id: ToString
  parent: NodaTime.Instant
  langs:
  - csharp
  - vb
  name: ToString()
  nameWithType: Instant.ToString()
  fullName: NodaTime.Instant.ToString()
  type: Method
  source:
    remote:
      path: 1.3.x/src/NodaTime/Instant.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: ToString
    path: src/NodaTime/Instant.cs
    startLine: 431
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nReturns a <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref> that represents this instance.\n"
  example: []
  syntax:
    content: public override string ToString()
    return:
      type: System.String
      description: "\nThe value of the current instance in the default format pattern (&quot;g&quot;), using the current thread&apos;s\nculture to obtain a format provider.\n"
    content.vb: Public Overrides Function ToString As String
  overridden: System.ValueType.ToString
  overload: NodaTime.Instant.ToString*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: NodaTime.Instant.ToString(System.String,System.IFormatProvider)
  commentId: M:NodaTime.Instant.ToString(System.String,System.IFormatProvider)
  id: ToString(System.String,System.IFormatProvider)
  parent: NodaTime.Instant
  langs:
  - csharp
  - vb
  name: ToString(String, IFormatProvider)
  nameWithType: Instant.ToString(String, IFormatProvider)
  fullName: NodaTime.Instant.ToString(System.String, System.IFormatProvider)
  type: Method
  source:
    remote:
      path: 1.3.x/src/NodaTime/Instant.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: ToString
    path: src/NodaTime/Instant.cs
    startLine: 449
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nFormats the value of the current instance using the specified pattern.\n"
  example: []
  syntax:
    content: public string ToString(string patternText, IFormatProvider formatProvider)
    parameters:
    - id: patternText
      type: System.String
      description: >
        The <xref href="System.String" data-throw-if-not-resolved="false"></xref> specifying the pattern to use,

        or null to use the default format pattern (&quot;g&quot;).
    - id: formatProvider
      type: System.IFormatProvider
      description: >
        The <xref href="System.IFormatProvider" data-throw-if-not-resolved="false"></xref> to use when formatting the value,

        or null to use the current thread&apos;s culture to obtain a format provider.
    return:
      type: System.String
      description: "\nA <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref> containing the value of the current instance in the specified format.\n"
    content.vb: Public Function ToString(patternText As String, formatProvider As IFormatProvider) As String
  overload: NodaTime.Instant.ToString*
  implements:
  - System.IFormattable.ToString(System.String,System.IFormatProvider)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: NodaTime.Instant.Equals(NodaTime.Instant)
  commentId: M:NodaTime.Instant.Equals(NodaTime.Instant)
  id: Equals(NodaTime.Instant)
  parent: NodaTime.Instant
  langs:
  - csharp
  - vb
  name: Equals(Instant)
  nameWithType: Instant.Equals(Instant)
  fullName: NodaTime.Instant.Equals(NodaTime.Instant)
  type: Method
  source:
    remote:
      path: 1.3.x/src/NodaTime/Instant.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: Equals
    path: src/NodaTime/Instant.cs
    startLine: 464
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nIndicates whether the value of this instant is equal to the value of the specified instant.\n"
  example: []
  syntax:
    content: public bool Equals(Instant other)
    parameters:
    - id: other
      type: NodaTime.Instant
      description: The value to compare with this instance.
    return:
      type: System.Boolean
      description: "\ntrue if the value of this instant is equal to the value of the <code data-dev-comment-type=\"paramref\" class=\"paramref\">other</code> parameter;\notherwise, false.\n"
    content.vb: Public Function Equals(other As Instant) As Boolean
  overload: NodaTime.Instant.Equals*
  implements:
  - System.IEquatable{NodaTime.Instant}.Equals(NodaTime.Instant)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: NodaTime.Instant.ToDateTimeUtc
  commentId: M:NodaTime.Instant.ToDateTimeUtc
  id: ToDateTimeUtc
  parent: NodaTime.Instant
  langs:
  - csharp
  - vb
  name: ToDateTimeUtc()
  nameWithType: Instant.ToDateTimeUtc()
  fullName: NodaTime.Instant.ToDateTimeUtc()
  type: Method
  source:
    remote:
      path: 1.3.x/src/NodaTime/Instant.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: ToDateTimeUtc
    path: src/NodaTime/Instant.cs
    startLine: 475
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nConstructs a <xref href=\"System.DateTime\" data-throw-if-not-resolved=\"false\"></xref> from this Instant which has a <xref href=\"System.DateTime.Kind\" data-throw-if-not-resolved=\"false\"></xref>\nof <xref href=\"System.DateTimeKind.Utc\" data-throw-if-not-resolved=\"false\"></xref> and represents the same instant of time as this value.\n"
  example: []
  syntax:
    content: public DateTime ToDateTimeUtc()
    return:
      type: System.DateTime
      description: A <xref href="System.DateTime" data-throw-if-not-resolved="false"></xref> representing the same instant in time as this value, with a kind of &quot;universal&quot;.
    content.vb: Public Function ToDateTimeUtc As Date
  overload: NodaTime.Instant.ToDateTimeUtc*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: NodaTime.Instant.ToDateTimeOffset
  commentId: M:NodaTime.Instant.ToDateTimeOffset
  id: ToDateTimeOffset
  parent: NodaTime.Instant
  langs:
  - csharp
  - vb
  name: ToDateTimeOffset()
  nameWithType: Instant.ToDateTimeOffset()
  fullName: NodaTime.Instant.ToDateTimeOffset()
  type: Method
  source:
    remote:
      path: 1.3.x/src/NodaTime/Instant.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: ToDateTimeOffset
    path: src/NodaTime/Instant.cs
    startLine: 485
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nConstructs a <xref href=\"System.DateTimeOffset\" data-throw-if-not-resolved=\"false\"></xref> from this Instant which has an offset of zero.\n"
  example: []
  syntax:
    content: public DateTimeOffset ToDateTimeOffset()
    return:
      type: System.DateTimeOffset
      description: A <xref href="System.DateTimeOffset" data-throw-if-not-resolved="false"></xref> representing the same instant in time as this value.
    content.vb: Public Function ToDateTimeOffset As DateTimeOffset
  overload: NodaTime.Instant.ToDateTimeOffset*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: NodaTime.Instant.FromDateTimeOffset(System.DateTimeOffset)
  commentId: M:NodaTime.Instant.FromDateTimeOffset(System.DateTimeOffset)
  id: FromDateTimeOffset(System.DateTimeOffset)
  parent: NodaTime.Instant
  langs:
  - csharp
  - vb
  name: FromDateTimeOffset(DateTimeOffset)
  nameWithType: Instant.FromDateTimeOffset(DateTimeOffset)
  fullName: NodaTime.Instant.FromDateTimeOffset(System.DateTimeOffset)
  type: Method
  source:
    remote:
      path: 1.3.x/src/NodaTime/Instant.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: FromDateTimeOffset
    path: src/NodaTime/Instant.cs
    startLine: 497
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nConverts a <xref href=\"System.DateTimeOffset\" data-throw-if-not-resolved=\"false\"></xref> into a new Instant representing the same instant in time. Note that\nthe offset information is not preserved in the returned Instant.\n"
  example: []
  syntax:
    content: public static Instant FromDateTimeOffset(DateTimeOffset dateTimeOffset)
    parameters:
    - id: dateTimeOffset
      type: System.DateTimeOffset
      description: Date and time value with an offset.
    return:
      type: NodaTime.Instant
      description: An <xref href="NodaTime.Instant" data-throw-if-not-resolved="false"></xref> value representing the same instant in time as the given <xref href="System.DateTimeOffset" data-throw-if-not-resolved="false"></xref>.
    content.vb: Public Shared Function FromDateTimeOffset(dateTimeOffset As DateTimeOffset) As Instant
  overload: NodaTime.Instant.FromDateTimeOffset*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: NodaTime.Instant.FromDateTimeUtc(System.DateTime)
  commentId: M:NodaTime.Instant.FromDateTimeUtc(System.DateTime)
  id: FromDateTimeUtc(System.DateTime)
  parent: NodaTime.Instant
  langs:
  - csharp
  - vb
  name: FromDateTimeUtc(DateTime)
  nameWithType: Instant.FromDateTimeUtc(DateTime)
  fullName: NodaTime.Instant.FromDateTimeUtc(System.DateTime)
  type: Method
  source:
    remote:
      path: 1.3.x/src/NodaTime/Instant.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: FromDateTimeUtc
    path: src/NodaTime/Instant.cs
    startLine: 509
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nConverts a <xref href=\"System.DateTime\" data-throw-if-not-resolved=\"false\"></xref> into a new Instant representing the same instant in time.\n"
  example: []
  syntax:
    content: public static Instant FromDateTimeUtc(DateTime dateTime)
    parameters:
    - id: dateTime
      type: System.DateTime
      description: Date and time value which must have a <xref href="System.DateTime.Kind" data-throw-if-not-resolved="false"></xref> of <xref href="System.DateTimeKind.Utc" data-throw-if-not-resolved="false"></xref>
    return:
      type: NodaTime.Instant
      description: An <xref href="NodaTime.Instant" data-throw-if-not-resolved="false"></xref> value representing the same instant in time as the given universal <xref href="System.DateTime" data-throw-if-not-resolved="false"></xref>.
    content.vb: Public Shared Function FromDateTimeUtc(dateTime As Date) As Instant
  overload: NodaTime.Instant.FromDateTimeUtc*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: >-
      <code data-dev-comment-type="paramref" class="paramref">dateTime</code> is not of <xref href="System.DateTime.Kind" data-throw-if-not-resolved="false"></xref>

      <xref href="System.DateTimeKind.Utc" data-throw-if-not-resolved="false"></xref>.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: NodaTime.Instant.FromSecondsSinceUnixEpoch(System.Int64)
  commentId: M:NodaTime.Instant.FromSecondsSinceUnixEpoch(System.Int64)
  id: FromSecondsSinceUnixEpoch(System.Int64)
  parent: NodaTime.Instant
  langs:
  - csharp
  - vb
  name: FromSecondsSinceUnixEpoch(Int64)
  nameWithType: Instant.FromSecondsSinceUnixEpoch(Int64)
  fullName: NodaTime.Instant.FromSecondsSinceUnixEpoch(System.Int64)
  type: Method
  source:
    remote:
      path: 1.3.x/src/NodaTime/Instant.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: FromSecondsSinceUnixEpoch
    path: src/NodaTime/Instant.cs
    startLine: 522
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nInitializes a new instance of the <xref href=\"NodaTime.Instant\" data-throw-if-not-resolved=\"false\"></xref> struct based\non a number of seconds since the Unix epoch of (ISO) January 1st 1970, midnight, UTC.\n"
  example: []
  syntax:
    content: public static Instant FromSecondsSinceUnixEpoch(long seconds)
    parameters:
    - id: seconds
      type: System.Int64
      description: Number of seconds since the Unix epoch. May be negative (for instants before the epoch).
    return:
      type: NodaTime.Instant
      description: An <xref href="NodaTime.Instant" data-throw-if-not-resolved="false"></xref> at exactly the given number of seconds since the Unix epoch.
    content.vb: Public Shared Function FromSecondsSinceUnixEpoch(seconds As Long) As Instant
  overload: NodaTime.Instant.FromSecondsSinceUnixEpoch*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: The constructed instant would be out of the range representable in Noda Time.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: NodaTime.Instant.FromMillisecondsSinceUnixEpoch(System.Int64)
  commentId: M:NodaTime.Instant.FromMillisecondsSinceUnixEpoch(System.Int64)
  id: FromMillisecondsSinceUnixEpoch(System.Int64)
  parent: NodaTime.Instant
  langs:
  - csharp
  - vb
  name: FromMillisecondsSinceUnixEpoch(Int64)
  nameWithType: Instant.FromMillisecondsSinceUnixEpoch(Int64)
  fullName: NodaTime.Instant.FromMillisecondsSinceUnixEpoch(System.Int64)
  type: Method
  source:
    remote:
      path: 1.3.x/src/NodaTime/Instant.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: FromMillisecondsSinceUnixEpoch
    path: src/NodaTime/Instant.cs
    startLine: 536
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nInitializes a new instance of the <xref href=\"NodaTime.Instant\" data-throw-if-not-resolved=\"false\"></xref> struct based\non a number of milliseconds since the Unix epoch of (ISO) January 1st 1970, midnight, UTC.\n"
  example: []
  syntax:
    content: public static Instant FromMillisecondsSinceUnixEpoch(long milliseconds)
    parameters:
    - id: milliseconds
      type: System.Int64
      description: Number of milliseconds since the Unix epoch. May be negative (for instants before the epoch).
    return:
      type: NodaTime.Instant
      description: An <xref href="NodaTime.Instant" data-throw-if-not-resolved="false"></xref> at exactly the given number of milliseconds since the Unix epoch.
    content.vb: Public Shared Function FromMillisecondsSinceUnixEpoch(milliseconds As Long) As Instant
  overload: NodaTime.Instant.FromMillisecondsSinceUnixEpoch*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: The constructed instant would be out of the range representable in Noda Time.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: NodaTime.Instant.FromTicksSinceUnixEpoch(System.Int64)
  commentId: M:NodaTime.Instant.FromTicksSinceUnixEpoch(System.Int64)
  id: FromTicksSinceUnixEpoch(System.Int64)
  parent: NodaTime.Instant
  langs:
  - csharp
  - vb
  name: FromTicksSinceUnixEpoch(Int64)
  nameWithType: Instant.FromTicksSinceUnixEpoch(Int64)
  fullName: NodaTime.Instant.FromTicksSinceUnixEpoch(System.Int64)
  type: Method
  source:
    remote:
      path: 1.3.x/src/NodaTime/Instant.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: FromTicksSinceUnixEpoch
    path: src/NodaTime/Instant.cs
    startLine: 551
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nInitializes a new instance of the <xref href=\"NodaTime.Instant\" data-throw-if-not-resolved=\"false\"></xref> struct based\non a number of ticks since the Unix epoch of (ISO) January 1st 1970, midnight, UTC.\n"
  remarks: >-
    This is equivalent to calling the constructor directly, but indicates

    intent more explicitly.
  example: []
  syntax:
    content: public static Instant FromTicksSinceUnixEpoch(long ticks)
    parameters:
    - id: ticks
      type: System.Int64
      description: Number of ticks since the Unix epoch. May be negative (for instants before the epoch).
    return:
      type: NodaTime.Instant
      description: An <xref href="NodaTime.Instant" data-throw-if-not-resolved="false"></xref> at exactly the given number of ticks since the Unix epoch.
    content.vb: Public Shared Function FromTicksSinceUnixEpoch(ticks As Long) As Instant
  overload: NodaTime.Instant.FromTicksSinceUnixEpoch*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: NodaTime.Instant.InUtc
  commentId: M:NodaTime.Instant.InUtc
  id: InUtc
  parent: NodaTime.Instant
  langs:
  - csharp
  - vb
  name: InUtc()
  nameWithType: Instant.InUtc()
  fullName: NodaTime.Instant.InUtc()
  type: Method
  source:
    remote:
      path: 1.3.x/src/NodaTime/Instant.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: InUtc
    path: src/NodaTime/Instant.cs
    startLine: 563
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nReturns the <xref href=\"NodaTime.ZonedDateTime\" data-throw-if-not-resolved=\"false\"></xref> representing the same point in time as this instant, in the UTC time\nzone and ISO-8601 calendar. This is a shortcut for calling <xref href=\"NodaTime.Instant.InZone(NodaTime.DateTimeZone)\" data-throw-if-not-resolved=\"false\"></xref> with an\nargument of <xref href=\"NodaTime.DateTimeZone.Utc\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public ZonedDateTime InUtc()
    return:
      type: NodaTime.ZonedDateTime
      description: >-
        A <xref href="NodaTime.ZonedDateTime" data-throw-if-not-resolved="false"></xref> for the same instant, in the UTC time zone

        and the ISO-8601 calendar
    content.vb: Public Function InUtc As ZonedDateTime
  overload: NodaTime.Instant.InUtc*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: NodaTime.Instant.InZone(NodaTime.DateTimeZone)
  commentId: M:NodaTime.Instant.InZone(NodaTime.DateTimeZone)
  id: InZone(NodaTime.DateTimeZone)
  parent: NodaTime.Instant
  langs:
  - csharp
  - vb
  name: InZone(DateTimeZone)
  nameWithType: Instant.InZone(DateTimeZone)
  fullName: NodaTime.Instant.InZone(NodaTime.DateTimeZone)
  type: Method
  source:
    remote:
      path: 1.3.x/src/NodaTime/Instant.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: InZone
    path: src/NodaTime/Instant.cs
    startLine: 576
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nReturns the <xref href=\"NodaTime.ZonedDateTime\" data-throw-if-not-resolved=\"false\"></xref> representing the same point in time as this instant, in the\nspecified time zone and ISO-8601 calendar.\n"
  example: []
  syntax:
    content: public ZonedDateTime InZone(DateTimeZone zone)
    parameters:
    - id: zone
      type: NodaTime.DateTimeZone
      description: The time zone in which to represent this instant.
    return:
      type: NodaTime.ZonedDateTime
      description: >-
        A <xref href="NodaTime.ZonedDateTime" data-throw-if-not-resolved="false"></xref> for the same instant, in the given time zone

        and the ISO-8601 calendar
    content.vb: Public Function InZone(zone As DateTimeZone) As ZonedDateTime
  overload: NodaTime.Instant.InZone*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: NodaTime.Instant.InZone(NodaTime.DateTimeZone,NodaTime.CalendarSystem)
  commentId: M:NodaTime.Instant.InZone(NodaTime.DateTimeZone,NodaTime.CalendarSystem)
  id: InZone(NodaTime.DateTimeZone,NodaTime.CalendarSystem)
  parent: NodaTime.Instant
  langs:
  - csharp
  - vb
  name: InZone(DateTimeZone, CalendarSystem)
  nameWithType: Instant.InZone(DateTimeZone, CalendarSystem)
  fullName: NodaTime.Instant.InZone(NodaTime.DateTimeZone, NodaTime.CalendarSystem)
  type: Method
  source:
    remote:
      path: 1.3.x/src/NodaTime/Instant.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: InZone
    path: src/NodaTime/Instant.cs
    startLine: 591
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nReturns the <xref href=\"NodaTime.ZonedDateTime\" data-throw-if-not-resolved=\"false\"></xref> representing the same point in time as this instant, in the\nspecified time zone and calendar system.\n"
  example: []
  syntax:
    content: public ZonedDateTime InZone(DateTimeZone zone, CalendarSystem calendar)
    parameters:
    - id: zone
      type: NodaTime.DateTimeZone
      description: The time zone in which to represent this instant.
    - id: calendar
      type: NodaTime.CalendarSystem
      description: The calendar system in which to represent this instant.
    return:
      type: NodaTime.ZonedDateTime
      description: >-
        A <xref href="NodaTime.ZonedDateTime" data-throw-if-not-resolved="false"></xref> for the same instant, in the given time zone

        and calendar
    content.vb: Public Function InZone(zone As DateTimeZone, calendar As CalendarSystem) As ZonedDateTime
  overload: NodaTime.Instant.InZone*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: NodaTime.Instant.WithOffset(NodaTime.Offset)
  commentId: M:NodaTime.Instant.WithOffset(NodaTime.Offset)
  id: WithOffset(NodaTime.Offset)
  parent: NodaTime.Instant
  langs:
  - csharp
  - vb
  name: WithOffset(Offset)
  nameWithType: Instant.WithOffset(Offset)
  fullName: NodaTime.Instant.WithOffset(NodaTime.Offset)
  type: Method
  source:
    remote:
      path: 1.3.x/src/NodaTime/Instant.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: WithOffset
    path: src/NodaTime/Instant.cs
    startLine: 606
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nReturns the <xref href=\"NodaTime.OffsetDateTime\" data-throw-if-not-resolved=\"false\"></xref> representing the same point in time as this instant, with\nthe specified UTC offset in the ISO calendar system.\n"
  example: []
  syntax:
    content: public OffsetDateTime WithOffset(Offset offset)
    parameters:
    - id: offset
      type: NodaTime.Offset
      description: The offset from UTC with which to represent this instant.
    return:
      type: NodaTime.OffsetDateTime
      description: >-
        An <xref href="NodaTime.OffsetDateTime" data-throw-if-not-resolved="false"></xref> for the same instant, with the given offset

        in the ISO calendar system
    content.vb: Public Function WithOffset(offset As Offset) As OffsetDateTime
  overload: NodaTime.Instant.WithOffset*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: NodaTime.Instant.WithOffset(NodaTime.Offset,NodaTime.CalendarSystem)
  commentId: M:NodaTime.Instant.WithOffset(NodaTime.Offset,NodaTime.CalendarSystem)
  id: WithOffset(NodaTime.Offset,NodaTime.CalendarSystem)
  parent: NodaTime.Instant
  langs:
  - csharp
  - vb
  name: WithOffset(Offset, CalendarSystem)
  nameWithType: Instant.WithOffset(Offset, CalendarSystem)
  fullName: NodaTime.Instant.WithOffset(NodaTime.Offset, NodaTime.CalendarSystem)
  type: Method
  source:
    remote:
      path: 1.3.x/src/NodaTime/Instant.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: WithOffset
    path: src/NodaTime/Instant.cs
    startLine: 620
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nReturns the <xref href=\"NodaTime.OffsetDateTime\" data-throw-if-not-resolved=\"false\"></xref> representing the same point in time as this instant, with\nthe specified UTC offset and calendar system.\n"
  example: []
  syntax:
    content: public OffsetDateTime WithOffset(Offset offset, CalendarSystem calendar)
    parameters:
    - id: offset
      type: NodaTime.Offset
      description: The offset from UTC with which to represent this instant.
    - id: calendar
      type: NodaTime.CalendarSystem
      description: The calendar system in which to represent this instant.
    return:
      type: NodaTime.OffsetDateTime
      description: >-
        An <xref href="NodaTime.OffsetDateTime" data-throw-if-not-resolved="false"></xref> for the same instant, with the given offset

        and calendar
    content.vb: Public Function WithOffset(offset As Offset, calendar As CalendarSystem) As OffsetDateTime
  overload: NodaTime.Instant.WithOffset*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: NodaTime.Instant.System#Xml#Serialization#IXmlSerializable#GetSchema
  commentId: M:NodaTime.Instant.System#Xml#Serialization#IXmlSerializable#GetSchema
  id: System#Xml#Serialization#IXmlSerializable#GetSchema
  isEii: true
  parent: NodaTime.Instant
  langs:
  - csharp
  - vb
  name: IXmlSerializable.GetSchema()
  nameWithType: Instant.IXmlSerializable.GetSchema()
  fullName: NodaTime.Instant.System.Xml.Serialization.IXmlSerializable.GetSchema()
  type: Method
  source:
    remote:
      path: 1.3.x/src/NodaTime/Instant.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: System.Xml.Serialization.IXmlSerializable.GetSchema
    path: src/NodaTime/Instant.cs
    startLine: 629
  assemblies:
  - NodaTime
  namespace: NodaTime
  example: []
  syntax:
    content: XmlSchema IXmlSerializable.GetSchema()
    return:
      type: System.Xml.Schema.XmlSchema
    content.vb: Function System.Xml.Serialization.IXmlSerializable.GetSchema As XmlSchema Implements IXmlSerializable.GetSchema
  overload: NodaTime.Instant.System#Xml#Serialization#IXmlSerializable#GetSchema*
  implements:
  - System.Xml.Serialization.IXmlSerializable.GetSchema
  nameWithType.vb: Instant.System.Xml.Serialization.IXmlSerializable.GetSchema()
  name.vb: System.Xml.Serialization.IXmlSerializable.GetSchema()
- uid: NodaTime.Instant.System#Xml#Serialization#IXmlSerializable#ReadXml(System.Xml.XmlReader)
  commentId: M:NodaTime.Instant.System#Xml#Serialization#IXmlSerializable#ReadXml(System.Xml.XmlReader)
  id: System#Xml#Serialization#IXmlSerializable#ReadXml(System.Xml.XmlReader)
  isEii: true
  parent: NodaTime.Instant
  langs:
  - csharp
  - vb
  name: IXmlSerializable.ReadXml(XmlReader)
  nameWithType: Instant.IXmlSerializable.ReadXml(XmlReader)
  fullName: NodaTime.Instant.System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)
  type: Method
  source:
    remote:
      path: 1.3.x/src/NodaTime/Instant.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: System.Xml.Serialization.IXmlSerializable.ReadXml
    path: src/NodaTime/Instant.cs
    startLine: 635
  assemblies:
  - NodaTime
  namespace: NodaTime
  example: []
  syntax:
    content: void IXmlSerializable.ReadXml(XmlReader reader)
    parameters:
    - id: reader
      type: System.Xml.XmlReader
    content.vb: Sub System.Xml.Serialization.IXmlSerializable.ReadXml(reader As XmlReader) Implements IXmlSerializable.ReadXml
  overload: NodaTime.Instant.System#Xml#Serialization#IXmlSerializable#ReadXml*
  implements:
  - System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)
  nameWithType.vb: Instant.System.Xml.Serialization.IXmlSerializable.ReadXml(XmlReader)
  name.vb: System.Xml.Serialization.IXmlSerializable.ReadXml(XmlReader)
- uid: NodaTime.Instant.System#Xml#Serialization#IXmlSerializable#WriteXml(System.Xml.XmlWriter)
  commentId: M:NodaTime.Instant.System#Xml#Serialization#IXmlSerializable#WriteXml(System.Xml.XmlWriter)
  id: System#Xml#Serialization#IXmlSerializable#WriteXml(System.Xml.XmlWriter)
  isEii: true
  parent: NodaTime.Instant
  langs:
  - csharp
  - vb
  name: IXmlSerializable.WriteXml(XmlWriter)
  nameWithType: Instant.IXmlSerializable.WriteXml(XmlWriter)
  fullName: NodaTime.Instant.System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)
  type: Method
  source:
    remote:
      path: 1.3.x/src/NodaTime/Instant.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: System.Xml.Serialization.IXmlSerializable.WriteXml
    path: src/NodaTime/Instant.cs
    startLine: 644
  assemblies:
  - NodaTime
  namespace: NodaTime
  example: []
  syntax:
    content: void IXmlSerializable.WriteXml(XmlWriter writer)
    parameters:
    - id: writer
      type: System.Xml.XmlWriter
    content.vb: Sub System.Xml.Serialization.IXmlSerializable.WriteXml(writer As XmlWriter) Implements IXmlSerializable.WriteXml
  overload: NodaTime.Instant.System#Xml#Serialization#IXmlSerializable#WriteXml*
  implements:
  - System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)
  nameWithType.vb: Instant.System.Xml.Serialization.IXmlSerializable.WriteXml(XmlWriter)
  name.vb: System.Xml.Serialization.IXmlSerializable.WriteXml(XmlWriter)
- uid: NodaTime.Instant.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  commentId: M:NodaTime.Instant.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  id: System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  isEii: true
  parent: NodaTime.Instant
  langs:
  - csharp
  - vb
  name: ISerializable.GetObjectData(SerializationInfo, StreamingContext)
  nameWithType: Instant.ISerializable.GetObjectData(SerializationInfo, StreamingContext)
  fullName: NodaTime.Instant.System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext)
  type: Method
  source:
    remote:
      path: 1.3.x/src/NodaTime/Instant.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: System.Runtime.Serialization.ISerializable.GetObjectData
    path: src/NodaTime/Instant.cs
    startLine: 670
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nImplementation of <xref href=\"System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo%2cSystem.Runtime.Serialization.StreamingContext)\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: >-
      [SecurityCritical]

      void ISerializable.GetObjectData(SerializationInfo info, StreamingContext context)
    parameters:
    - id: info
      type: System.Runtime.Serialization.SerializationInfo
      description: The <xref href="System.Runtime.Serialization.SerializationInfo" data-throw-if-not-resolved="false"></xref> to populate with data.
    - id: context
      type: System.Runtime.Serialization.StreamingContext
      description: The destination for this serialization.
    content.vb: >-
      <SecurityCritical>

      Sub System.Runtime.Serialization.ISerializable.GetObjectData(info As SerializationInfo, context As StreamingContext) Implements ISerializable.GetObjectData
  overload: NodaTime.Instant.System#Runtime#Serialization#ISerializable#GetObjectData*
  implements:
  - System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  attributes:
  - type: System.Security.SecurityCriticalAttribute
    ctor: System.Security.SecurityCriticalAttribute.#ctor
    arguments: []
  nameWithType.vb: Instant.System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo, StreamingContext)
  name.vb: System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo, StreamingContext)
references:
- uid: NodaTime.Instant
  commentId: T:NodaTime.Instant
  parent: NodaTime
  name: Instant
  nameWithType: Instant
  fullName: NodaTime.Instant
- uid: NodaTime
  commentId: N:NodaTime
  name: NodaTime
  nameWithType: NodaTime
  fullName: NodaTime
- uid: System.IEquatable{NodaTime.Instant}
  commentId: T:System.IEquatable{NodaTime.Instant}
  parent: System
  definition: System.IEquatable`1
  name: IEquatable<Instant>
  nameWithType: IEquatable<Instant>
  fullName: System.IEquatable<NodaTime.Instant>
  nameWithType.vb: IEquatable(Of Instant)
  fullName.vb: System.IEquatable(Of NodaTime.Instant)
  name.vb: IEquatable(Of Instant)
  spec.csharp:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: NodaTime.Instant
    name: Instant
    nameWithType: Instant
    fullName: NodaTime.Instant
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: NodaTime.Instant
    name: Instant
    nameWithType: Instant
    fullName: NodaTime.Instant
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IComparable{NodaTime.Instant}
  commentId: T:System.IComparable{NodaTime.Instant}
  parent: System
  definition: System.IComparable`1
  name: IComparable<Instant>
  nameWithType: IComparable<Instant>
  fullName: System.IComparable<NodaTime.Instant>
  nameWithType.vb: IComparable(Of Instant)
  fullName.vb: System.IComparable(Of NodaTime.Instant)
  name.vb: IComparable(Of Instant)
  spec.csharp:
  - uid: System.IComparable`1
    name: IComparable
    nameWithType: IComparable
    fullName: System.IComparable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: NodaTime.Instant
    name: Instant
    nameWithType: Instant
    fullName: NodaTime.Instant
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.IComparable`1
    name: IComparable
    nameWithType: IComparable
    fullName: System.IComparable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: NodaTime.Instant
    name: Instant
    nameWithType: Instant
    fullName: NodaTime.Instant
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IFormattable
  commentId: T:System.IFormattable
  parent: System
  isExternal: true
  name: IFormattable
  nameWithType: IFormattable
  fullName: System.IFormattable
- uid: System.IComparable
  commentId: T:System.IComparable
  parent: System
  isExternal: true
  name: IComparable
  nameWithType: IComparable
  fullName: System.IComparable
- uid: System.Xml.Serialization.IXmlSerializable
  commentId: T:System.Xml.Serialization.IXmlSerializable
  parent: System.Xml.Serialization
  isExternal: true
  name: IXmlSerializable
  nameWithType: IXmlSerializable
  fullName: System.Xml.Serialization.IXmlSerializable
- uid: System.Runtime.Serialization.ISerializable
  commentId: T:System.Runtime.Serialization.ISerializable
  parent: System.Runtime.Serialization
  isExternal: true
  name: ISerializable
  nameWithType: ISerializable
  fullName: System.Runtime.Serialization.ISerializable
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IEquatable`1
  commentId: T:System.IEquatable`1
  isExternal: true
  name: IEquatable<T>
  nameWithType: IEquatable<T>
  fullName: System.IEquatable<T>
  nameWithType.vb: IEquatable(Of T)
  fullName.vb: System.IEquatable(Of T)
  name.vb: IEquatable(Of T)
  spec.csharp:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: System.IComparable`1
  commentId: T:System.IComparable`1
  isExternal: true
  name: IComparable<T>
  nameWithType: IComparable<T>
  fullName: System.IComparable<T>
  nameWithType.vb: IComparable(Of T)
  fullName.vb: System.IComparable(Of T)
  name.vb: IComparable(Of T)
  spec.csharp:
  - uid: System.IComparable`1
    name: IComparable
    nameWithType: IComparable
    fullName: System.IComparable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.IComparable`1
    name: IComparable
    nameWithType: IComparable
    fullName: System.IComparable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Xml.Serialization
  commentId: N:System.Xml.Serialization
  isExternal: true
  name: System.Xml.Serialization
  nameWithType: System.Xml.Serialization
  fullName: System.Xml.Serialization
- uid: System.Runtime.Serialization
  commentId: N:System.Runtime.Serialization
  isExternal: true
  name: System.Runtime.Serialization
  nameWithType: System.Runtime.Serialization
  fullName: System.Runtime.Serialization
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.DateTime
  commentId: T:System.DateTime
  parent: System
  isExternal: true
  name: DateTime
  nameWithType: DateTime
  fullName: System.DateTime
- uid: System.DateTimeOffset
  commentId: T:System.DateTimeOffset
  parent: System
  isExternal: true
  name: DateTimeOffset
  nameWithType: DateTimeOffset
  fullName: System.DateTimeOffset
- uid: NodaTime.Instant.FromDateTimeUtc(System.DateTime)
  commentId: M:NodaTime.Instant.FromDateTimeUtc(System.DateTime)
  isExternal: true
- uid: NodaTime.Instant.#ctor*
  commentId: Overload:NodaTime.Instant.#ctor
  name: Instant
  nameWithType: Instant.Instant
  fullName: NodaTime.Instant.Instant
- uid: System.Int64
  commentId: T:System.Int64
  parent: System
  isExternal: true
  name: Int64
  nameWithType: Int64
  fullName: System.Int64
- uid: NodaTime.Instant.Ticks*
  commentId: Overload:NodaTime.Instant.Ticks
  name: Ticks
  nameWithType: Instant.Ticks
  fullName: NodaTime.Instant.Ticks
- uid: NodaTime.Instant.CompareTo*
  commentId: Overload:NodaTime.Instant.CompareTo
  name: CompareTo
  nameWithType: Instant.CompareTo
  fullName: NodaTime.Instant.CompareTo
- uid: System.IComparable{NodaTime.Instant}.CompareTo(NodaTime.Instant)
  commentId: M:System.IComparable{NodaTime.Instant}.CompareTo(NodaTime.Instant)
  parent: System.IComparable{NodaTime.Instant}
  definition: System.IComparable`1.CompareTo(`0)
  name: CompareTo(Instant)
  nameWithType: IComparable<Instant>.CompareTo(Instant)
  fullName: System.IComparable<NodaTime.Instant>.CompareTo(NodaTime.Instant)
  nameWithType.vb: IComparable(Of Instant).CompareTo(Instant)
  fullName.vb: System.IComparable(Of NodaTime.Instant).CompareTo(NodaTime.Instant)
  spec.csharp:
  - uid: System.IComparable`1.CompareTo(`0)
    name: CompareTo
    nameWithType: IComparable<Instant>.CompareTo
    fullName: System.IComparable<NodaTime.Instant>.CompareTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: NodaTime.Instant
    name: Instant
    nameWithType: Instant
    fullName: NodaTime.Instant
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IComparable`1.CompareTo(`0)
    name: CompareTo
    nameWithType: IComparable(Of Instant).CompareTo
    fullName: System.IComparable(Of NodaTime.Instant).CompareTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: NodaTime.Instant
    name: Instant
    nameWithType: Instant
    fullName: NodaTime.Instant
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.IComparable`1.CompareTo(`0)
  commentId: M:System.IComparable`1.CompareTo(`0)
  isExternal: true
  name: CompareTo(T)
  nameWithType: IComparable<T>.CompareTo(T)
  fullName: System.IComparable<T>.CompareTo(T)
  nameWithType.vb: IComparable(Of T).CompareTo(T)
  fullName.vb: System.IComparable(Of T).CompareTo(T)
  spec.csharp:
  - uid: System.IComparable`1.CompareTo(`0)
    name: CompareTo
    nameWithType: IComparable<T>.CompareTo
    fullName: System.IComparable<T>.CompareTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IComparable`1.CompareTo(`0)
    name: CompareTo
    nameWithType: IComparable(Of T).CompareTo
    fullName: System.IComparable(Of T).CompareTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IComparable.CompareTo(System.Object)
  commentId: M:System.IComparable.CompareTo(System.Object)
  parent: System.IComparable
  isExternal: true
  name: CompareTo(Object)
  nameWithType: IComparable.CompareTo(Object)
  fullName: System.IComparable.CompareTo(System.Object)
  spec.csharp:
  - uid: System.IComparable.CompareTo(System.Object)
    name: CompareTo
    nameWithType: IComparable.CompareTo
    fullName: System.IComparable.CompareTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IComparable.CompareTo(System.Object)
    name: CompareTo
    nameWithType: IComparable.CompareTo
    fullName: System.IComparable.CompareTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: NodaTime.Instant.CompareTo(NodaTime.Instant)
  commentId: M:NodaTime.Instant.CompareTo(NodaTime.Instant)
  isExternal: true
- uid: System.ArgumentException
  commentId: T:System.ArgumentException
  parent: System
  isExternal: true
  name: ArgumentException
  nameWithType: ArgumentException
  fullName: System.ArgumentException
- uid: NodaTime.Instant.System#IComparable#CompareTo*
  commentId: Overload:NodaTime.Instant.System#IComparable#CompareTo
  name: IComparable.CompareTo
  nameWithType: Instant.IComparable.CompareTo
  fullName: NodaTime.Instant.System.IComparable.CompareTo
  nameWithType.vb: Instant.System.IComparable.CompareTo
  name.vb: System.IComparable.CompareTo
- uid: System.ValueType.Equals(System.Object)
  commentId: M:System.ValueType.Equals(System.Object)
  parent: System.ValueType
  isExternal: true
  name: Equals(Object)
  nameWithType: ValueType.Equals(Object)
  fullName: System.ValueType.Equals(System.Object)
  spec.csharp:
  - uid: System.ValueType.Equals(System.Object)
    name: Equals
    nameWithType: ValueType.Equals
    fullName: System.ValueType.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.ValueType.Equals(System.Object)
    name: Equals
    nameWithType: ValueType.Equals
    fullName: System.ValueType.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: NodaTime.Instant.Equals*
  commentId: Overload:NodaTime.Instant.Equals
  name: Equals
  nameWithType: Instant.Equals
  fullName: NodaTime.Instant.Equals
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.ValueType
  commentId: T:System.ValueType
  parent: System
  isExternal: true
  name: ValueType
  nameWithType: ValueType
  fullName: System.ValueType
- uid: System.ValueType.GetHashCode
  commentId: M:System.ValueType.GetHashCode
  parent: System.ValueType
  isExternal: true
  name: GetHashCode()
  nameWithType: ValueType.GetHashCode()
  fullName: System.ValueType.GetHashCode()
  spec.csharp:
  - uid: System.ValueType.GetHashCode
    name: GetHashCode
    nameWithType: ValueType.GetHashCode
    fullName: System.ValueType.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.ValueType.GetHashCode
    name: GetHashCode
    nameWithType: ValueType.GetHashCode
    fullName: System.ValueType.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: NodaTime.Instant.GetHashCode*
  commentId: Overload:NodaTime.Instant.GetHashCode
  name: GetHashCode
  nameWithType: Instant.GetHashCode
  fullName: NodaTime.Instant.GetHashCode
- uid: NodaTime.Instant.PlusTicks*
  commentId: Overload:NodaTime.Instant.PlusTicks
  name: PlusTicks
  nameWithType: Instant.PlusTicks
  fullName: NodaTime.Instant.PlusTicks
- uid: NodaTime.Duration
  commentId: T:NodaTime.Duration
  parent: NodaTime
  name: Duration
  nameWithType: Duration
  fullName: NodaTime.Duration
- uid: NodaTime.Instant.op_Addition*
  commentId: Overload:NodaTime.Instant.op_Addition
  name: Addition
  nameWithType: Instant.Addition
  fullName: NodaTime.Instant.Addition
- uid: NodaTime.Instant.Add*
  commentId: Overload:NodaTime.Instant.Add
  name: Add
  nameWithType: Instant.Add
  fullName: NodaTime.Instant.Add
- uid: NodaTime.Instant.Plus*
  commentId: Overload:NodaTime.Instant.Plus
  name: Plus
  nameWithType: Instant.Plus
  fullName: NodaTime.Instant.Plus
- uid: NodaTime.Instant.op_Subtraction*
  commentId: Overload:NodaTime.Instant.op_Subtraction
  name: Subtraction
  nameWithType: Instant.Subtraction
  fullName: NodaTime.Instant.Subtraction
- uid: NodaTime.Instant.Subtract*
  commentId: Overload:NodaTime.Instant.Subtract
  name: Subtract
  nameWithType: Instant.Subtract
  fullName: NodaTime.Instant.Subtract
- uid: NodaTime.Instant.Minus*
  commentId: Overload:NodaTime.Instant.Minus
  name: Minus
  nameWithType: Instant.Minus
  fullName: NodaTime.Instant.Minus
- uid: NodaTime.Instant.op_Equality*
  commentId: Overload:NodaTime.Instant.op_Equality
  name: Equality
  nameWithType: Instant.Equality
  fullName: NodaTime.Instant.Equality
- uid: NodaTime.Instant.op_Inequality*
  commentId: Overload:NodaTime.Instant.op_Inequality
  name: Inequality
  nameWithType: Instant.Inequality
  fullName: NodaTime.Instant.Inequality
- uid: NodaTime.Instant.op_LessThan*
  commentId: Overload:NodaTime.Instant.op_LessThan
  name: LessThan
  nameWithType: Instant.LessThan
  fullName: NodaTime.Instant.LessThan
- uid: NodaTime.Instant.op_LessThanOrEqual*
  commentId: Overload:NodaTime.Instant.op_LessThanOrEqual
  name: LessThanOrEqual
  nameWithType: Instant.LessThanOrEqual
  fullName: NodaTime.Instant.LessThanOrEqual
- uid: NodaTime.Instant.op_GreaterThan*
  commentId: Overload:NodaTime.Instant.op_GreaterThan
  name: GreaterThan
  nameWithType: Instant.GreaterThan
  fullName: NodaTime.Instant.GreaterThan
- uid: NodaTime.Instant.op_GreaterThanOrEqual*
  commentId: Overload:NodaTime.Instant.op_GreaterThanOrEqual
  name: GreaterThanOrEqual
  nameWithType: Instant.GreaterThanOrEqual
  fullName: NodaTime.Instant.GreaterThanOrEqual
- uid: NodaTime.ZonedDateTime
  commentId: T:NodaTime.ZonedDateTime
  parent: NodaTime
  name: ZonedDateTime
  nameWithType: ZonedDateTime
  fullName: NodaTime.ZonedDateTime
- uid: NodaTime.Instant.FromUtc*
  commentId: Overload:NodaTime.Instant.FromUtc
  name: FromUtc
  nameWithType: Instant.FromUtc
  fullName: NodaTime.Instant.FromUtc
- uid: NodaTime.Instant.Max*
  commentId: Overload:NodaTime.Instant.Max
  name: Max
  nameWithType: Instant.Max
  fullName: NodaTime.Instant.Max
- uid: NodaTime.Instant.Min*
  commentId: Overload:NodaTime.Instant.Min
  name: Min
  nameWithType: Instant.Min
  fullName: NodaTime.Instant.Min
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.ValueType.ToString
  commentId: M:System.ValueType.ToString
  parent: System.ValueType
  isExternal: true
  name: ToString()
  nameWithType: ValueType.ToString()
  fullName: System.ValueType.ToString()
  spec.csharp:
  - uid: System.ValueType.ToString
    name: ToString
    nameWithType: ValueType.ToString
    fullName: System.ValueType.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.ValueType.ToString
    name: ToString
    nameWithType: ValueType.ToString
    fullName: System.ValueType.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: NodaTime.Instant.ToString*
  commentId: Overload:NodaTime.Instant.ToString
  name: ToString
  nameWithType: Instant.ToString
  fullName: NodaTime.Instant.ToString
- uid: System.IFormatProvider
  commentId: T:System.IFormatProvider
  parent: System
  isExternal: true
  name: IFormatProvider
  nameWithType: IFormatProvider
  fullName: System.IFormatProvider
- uid: System.IFormattable.ToString(System.String,System.IFormatProvider)
  commentId: M:System.IFormattable.ToString(System.String,System.IFormatProvider)
  parent: System.IFormattable
  isExternal: true
  name: ToString(String, IFormatProvider)
  nameWithType: IFormattable.ToString(String, IFormatProvider)
  fullName: System.IFormattable.ToString(System.String, System.IFormatProvider)
  spec.csharp:
  - uid: System.IFormattable.ToString(System.String,System.IFormatProvider)
    name: ToString
    nameWithType: IFormattable.ToString
    fullName: System.IFormattable.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.IFormatProvider
    name: IFormatProvider
    nameWithType: IFormatProvider
    fullName: System.IFormatProvider
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IFormattable.ToString(System.String,System.IFormatProvider)
    name: ToString
    nameWithType: IFormattable.ToString
    fullName: System.IFormattable.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.IFormatProvider
    name: IFormatProvider
    nameWithType: IFormatProvider
    fullName: System.IFormatProvider
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IEquatable{NodaTime.Instant}.Equals(NodaTime.Instant)
  commentId: M:System.IEquatable{NodaTime.Instant}.Equals(NodaTime.Instant)
  parent: System.IEquatable{NodaTime.Instant}
  definition: System.IEquatable`1.Equals(`0)
  name: Equals(Instant)
  nameWithType: IEquatable<Instant>.Equals(Instant)
  fullName: System.IEquatable<NodaTime.Instant>.Equals(NodaTime.Instant)
  nameWithType.vb: IEquatable(Of Instant).Equals(Instant)
  fullName.vb: System.IEquatable(Of NodaTime.Instant).Equals(NodaTime.Instant)
  spec.csharp:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    nameWithType: IEquatable<Instant>.Equals
    fullName: System.IEquatable<NodaTime.Instant>.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: NodaTime.Instant
    name: Instant
    nameWithType: Instant
    fullName: NodaTime.Instant
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    nameWithType: IEquatable(Of Instant).Equals
    fullName: System.IEquatable(Of NodaTime.Instant).Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: NodaTime.Instant
    name: Instant
    nameWithType: Instant
    fullName: NodaTime.Instant
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IEquatable`1.Equals(`0)
  commentId: M:System.IEquatable`1.Equals(`0)
  isExternal: true
  name: Equals(T)
  nameWithType: IEquatable<T>.Equals(T)
  fullName: System.IEquatable<T>.Equals(T)
  nameWithType.vb: IEquatable(Of T).Equals(T)
  fullName.vb: System.IEquatable(Of T).Equals(T)
  spec.csharp:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    nameWithType: IEquatable<T>.Equals
    fullName: System.IEquatable<T>.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    nameWithType: IEquatable(Of T).Equals
    fullName: System.IEquatable(Of T).Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.DateTime.Kind
  commentId: P:System.DateTime.Kind
  isExternal: true
- uid: System.DateTimeKind.Utc
  commentId: F:System.DateTimeKind.Utc
  isExternal: true
- uid: NodaTime.Instant.ToDateTimeUtc*
  commentId: Overload:NodaTime.Instant.ToDateTimeUtc
  name: ToDateTimeUtc
  nameWithType: Instant.ToDateTimeUtc
  fullName: NodaTime.Instant.ToDateTimeUtc
- uid: NodaTime.Instant.ToDateTimeOffset*
  commentId: Overload:NodaTime.Instant.ToDateTimeOffset
  name: ToDateTimeOffset
  nameWithType: Instant.ToDateTimeOffset
  fullName: NodaTime.Instant.ToDateTimeOffset
- uid: NodaTime.Instant.FromDateTimeOffset*
  commentId: Overload:NodaTime.Instant.FromDateTimeOffset
  name: FromDateTimeOffset
  nameWithType: Instant.FromDateTimeOffset
  fullName: NodaTime.Instant.FromDateTimeOffset
- uid: NodaTime.Instant.FromDateTimeUtc*
  commentId: Overload:NodaTime.Instant.FromDateTimeUtc
  name: FromDateTimeUtc
  nameWithType: Instant.FromDateTimeUtc
  fullName: NodaTime.Instant.FromDateTimeUtc
- uid: System.ArgumentOutOfRangeException
  commentId: T:System.ArgumentOutOfRangeException
  parent: System
  isExternal: true
  name: ArgumentOutOfRangeException
  nameWithType: ArgumentOutOfRangeException
  fullName: System.ArgumentOutOfRangeException
- uid: NodaTime.Instant.FromSecondsSinceUnixEpoch*
  commentId: Overload:NodaTime.Instant.FromSecondsSinceUnixEpoch
  name: FromSecondsSinceUnixEpoch
  nameWithType: Instant.FromSecondsSinceUnixEpoch
  fullName: NodaTime.Instant.FromSecondsSinceUnixEpoch
- uid: NodaTime.Instant.FromMillisecondsSinceUnixEpoch*
  commentId: Overload:NodaTime.Instant.FromMillisecondsSinceUnixEpoch
  name: FromMillisecondsSinceUnixEpoch
  nameWithType: Instant.FromMillisecondsSinceUnixEpoch
  fullName: NodaTime.Instant.FromMillisecondsSinceUnixEpoch
- uid: NodaTime.Instant.FromTicksSinceUnixEpoch*
  commentId: Overload:NodaTime.Instant.FromTicksSinceUnixEpoch
  name: FromTicksSinceUnixEpoch
  nameWithType: Instant.FromTicksSinceUnixEpoch
  fullName: NodaTime.Instant.FromTicksSinceUnixEpoch
- uid: NodaTime.Instant.InZone(NodaTime.DateTimeZone)
  commentId: M:NodaTime.Instant.InZone(NodaTime.DateTimeZone)
  isExternal: true
- uid: NodaTime.DateTimeZone.Utc
  commentId: P:NodaTime.DateTimeZone.Utc
  parent: NodaTime.DateTimeZone
  name: Utc
  nameWithType: DateTimeZone.Utc
  fullName: NodaTime.DateTimeZone.Utc
- uid: NodaTime.Instant.InUtc*
  commentId: Overload:NodaTime.Instant.InUtc
  name: InUtc
  nameWithType: Instant.InUtc
  fullName: NodaTime.Instant.InUtc
- uid: NodaTime.DateTimeZone
  commentId: T:NodaTime.DateTimeZone
  parent: NodaTime
  name: DateTimeZone
  nameWithType: DateTimeZone
  fullName: NodaTime.DateTimeZone
- uid: NodaTime.Instant.InZone*
  commentId: Overload:NodaTime.Instant.InZone
  name: InZone
  nameWithType: Instant.InZone
  fullName: NodaTime.Instant.InZone
- uid: NodaTime.CalendarSystem
  commentId: T:NodaTime.CalendarSystem
  parent: NodaTime
  name: CalendarSystem
  nameWithType: CalendarSystem
  fullName: NodaTime.CalendarSystem
- uid: NodaTime.OffsetDateTime
  commentId: T:NodaTime.OffsetDateTime
  parent: NodaTime
  name: OffsetDateTime
  nameWithType: OffsetDateTime
  fullName: NodaTime.OffsetDateTime
- uid: NodaTime.Instant.WithOffset*
  commentId: Overload:NodaTime.Instant.WithOffset
  name: WithOffset
  nameWithType: Instant.WithOffset
  fullName: NodaTime.Instant.WithOffset
- uid: NodaTime.Offset
  commentId: T:NodaTime.Offset
  parent: NodaTime
  name: Offset
  nameWithType: Offset
  fullName: NodaTime.Offset
- uid: NodaTime.Instant.System#Xml#Serialization#IXmlSerializable#GetSchema*
  commentId: Overload:NodaTime.Instant.System#Xml#Serialization#IXmlSerializable#GetSchema
  name: IXmlSerializable.GetSchema
  nameWithType: Instant.IXmlSerializable.GetSchema
  fullName: NodaTime.Instant.System.Xml.Serialization.IXmlSerializable.GetSchema
  nameWithType.vb: Instant.System.Xml.Serialization.IXmlSerializable.GetSchema
  name.vb: System.Xml.Serialization.IXmlSerializable.GetSchema
- uid: System.Xml.Serialization.IXmlSerializable.GetSchema
  commentId: M:System.Xml.Serialization.IXmlSerializable.GetSchema
  parent: System.Xml.Serialization.IXmlSerializable
  isExternal: true
  name: GetSchema()
  nameWithType: IXmlSerializable.GetSchema()
  fullName: System.Xml.Serialization.IXmlSerializable.GetSchema()
  spec.csharp:
  - uid: System.Xml.Serialization.IXmlSerializable.GetSchema
    name: GetSchema
    nameWithType: IXmlSerializable.GetSchema
    fullName: System.Xml.Serialization.IXmlSerializable.GetSchema
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Xml.Serialization.IXmlSerializable.GetSchema
    name: GetSchema
    nameWithType: IXmlSerializable.GetSchema
    fullName: System.Xml.Serialization.IXmlSerializable.GetSchema
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Xml.Schema.XmlSchema
  commentId: T:System.Xml.Schema.XmlSchema
  parent: System.Xml.Schema
  isExternal: true
  name: XmlSchema
  nameWithType: XmlSchema
  fullName: System.Xml.Schema.XmlSchema
- uid: System.Xml.Schema
  commentId: N:System.Xml.Schema
  isExternal: true
  name: System.Xml.Schema
  nameWithType: System.Xml.Schema
  fullName: System.Xml.Schema
- uid: NodaTime.Instant.System#Xml#Serialization#IXmlSerializable#ReadXml*
  commentId: Overload:NodaTime.Instant.System#Xml#Serialization#IXmlSerializable#ReadXml
  name: IXmlSerializable.ReadXml
  nameWithType: Instant.IXmlSerializable.ReadXml
  fullName: NodaTime.Instant.System.Xml.Serialization.IXmlSerializable.ReadXml
  nameWithType.vb: Instant.System.Xml.Serialization.IXmlSerializable.ReadXml
  name.vb: System.Xml.Serialization.IXmlSerializable.ReadXml
- uid: System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)
  commentId: M:System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)
  parent: System.Xml.Serialization.IXmlSerializable
  isExternal: true
  name: ReadXml(XmlReader)
  nameWithType: IXmlSerializable.ReadXml(XmlReader)
  fullName: System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)
  spec.csharp:
  - uid: System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)
    name: ReadXml
    nameWithType: IXmlSerializable.ReadXml
    fullName: System.Xml.Serialization.IXmlSerializable.ReadXml
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Xml.XmlReader
    name: XmlReader
    nameWithType: XmlReader
    fullName: System.Xml.XmlReader
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)
    name: ReadXml
    nameWithType: IXmlSerializable.ReadXml
    fullName: System.Xml.Serialization.IXmlSerializable.ReadXml
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Xml.XmlReader
    name: XmlReader
    nameWithType: XmlReader
    fullName: System.Xml.XmlReader
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Xml.XmlReader
  commentId: T:System.Xml.XmlReader
  parent: System.Xml
  isExternal: true
  name: XmlReader
  nameWithType: XmlReader
  fullName: System.Xml.XmlReader
- uid: System.Xml
  commentId: N:System.Xml
  isExternal: true
  name: System.Xml
  nameWithType: System.Xml
  fullName: System.Xml
- uid: NodaTime.Instant.System#Xml#Serialization#IXmlSerializable#WriteXml*
  commentId: Overload:NodaTime.Instant.System#Xml#Serialization#IXmlSerializable#WriteXml
  name: IXmlSerializable.WriteXml
  nameWithType: Instant.IXmlSerializable.WriteXml
  fullName: NodaTime.Instant.System.Xml.Serialization.IXmlSerializable.WriteXml
  nameWithType.vb: Instant.System.Xml.Serialization.IXmlSerializable.WriteXml
  name.vb: System.Xml.Serialization.IXmlSerializable.WriteXml
- uid: System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)
  commentId: M:System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)
  parent: System.Xml.Serialization.IXmlSerializable
  isExternal: true
  name: WriteXml(XmlWriter)
  nameWithType: IXmlSerializable.WriteXml(XmlWriter)
  fullName: System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)
  spec.csharp:
  - uid: System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)
    name: WriteXml
    nameWithType: IXmlSerializable.WriteXml
    fullName: System.Xml.Serialization.IXmlSerializable.WriteXml
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Xml.XmlWriter
    name: XmlWriter
    nameWithType: XmlWriter
    fullName: System.Xml.XmlWriter
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)
    name: WriteXml
    nameWithType: IXmlSerializable.WriteXml
    fullName: System.Xml.Serialization.IXmlSerializable.WriteXml
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Xml.XmlWriter
    name: XmlWriter
    nameWithType: XmlWriter
    fullName: System.Xml.XmlWriter
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Xml.XmlWriter
  commentId: T:System.Xml.XmlWriter
  parent: System.Xml
  isExternal: true
  name: XmlWriter
  nameWithType: XmlWriter
  fullName: System.Xml.XmlWriter
- uid: System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  commentId: M:System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  parent: System.Runtime.Serialization.ISerializable
  isExternal: true
  name: GetObjectData(SerializationInfo, StreamingContext)
  nameWithType: ISerializable.GetObjectData(SerializationInfo, StreamingContext)
  fullName: System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext)
  spec.csharp:
  - uid: System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
    name: GetObjectData
    nameWithType: ISerializable.GetObjectData
    fullName: System.Runtime.Serialization.ISerializable.GetObjectData
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Runtime.Serialization.SerializationInfo
    name: SerializationInfo
    nameWithType: SerializationInfo
    fullName: System.Runtime.Serialization.SerializationInfo
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Runtime.Serialization.StreamingContext
    name: StreamingContext
    nameWithType: StreamingContext
    fullName: System.Runtime.Serialization.StreamingContext
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
    name: GetObjectData
    nameWithType: ISerializable.GetObjectData
    fullName: System.Runtime.Serialization.ISerializable.GetObjectData
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Runtime.Serialization.SerializationInfo
    name: SerializationInfo
    nameWithType: SerializationInfo
    fullName: System.Runtime.Serialization.SerializationInfo
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Runtime.Serialization.StreamingContext
    name: StreamingContext
    nameWithType: StreamingContext
    fullName: System.Runtime.Serialization.StreamingContext
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Runtime.Serialization.SerializationInfo
  commentId: T:System.Runtime.Serialization.SerializationInfo
  parent: System.Runtime.Serialization
  isExternal: true
  name: SerializationInfo
  nameWithType: SerializationInfo
  fullName: System.Runtime.Serialization.SerializationInfo
- uid: NodaTime.Instant.System#Runtime#Serialization#ISerializable#GetObjectData*
  commentId: Overload:NodaTime.Instant.System#Runtime#Serialization#ISerializable#GetObjectData
  name: ISerializable.GetObjectData
  nameWithType: Instant.ISerializable.GetObjectData
  fullName: NodaTime.Instant.System.Runtime.Serialization.ISerializable.GetObjectData
  nameWithType.vb: Instant.System.Runtime.Serialization.ISerializable.GetObjectData
  name.vb: System.Runtime.Serialization.ISerializable.GetObjectData
- uid: System.Runtime.Serialization.StreamingContext
  commentId: T:System.Runtime.Serialization.StreamingContext
  parent: System.Runtime.Serialization
  isExternal: true
  name: StreamingContext
  nameWithType: StreamingContext
  fullName: System.Runtime.Serialization.StreamingContext
shouldSkipMarkup: true
