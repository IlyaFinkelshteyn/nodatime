### YamlMime:ManagedReference
items:
- uid: NodaTime.CalendarSystem
  commentId: T:NodaTime.CalendarSystem
  id: CalendarSystem
  parent: NodaTime
  children:
  - NodaTime.CalendarSystem.Eras
  - NodaTime.CalendarSystem.ForId(System.String)
  - NodaTime.CalendarSystem.GetAbsoluteYear(System.Int32,NodaTime.Calendars.Era)
  - NodaTime.CalendarSystem.GetCopticCalendar(System.Int32)
  - NodaTime.CalendarSystem.GetDaysInMonth(System.Int32,System.Int32)
  - NodaTime.CalendarSystem.GetGregorianCalendar(System.Int32)
  - NodaTime.CalendarSystem.GetHebrewCalendar(NodaTime.Calendars.HebrewMonthNumbering)
  - NodaTime.CalendarSystem.GetIslamicCalendar(NodaTime.Calendars.IslamicLeapYearPattern,NodaTime.Calendars.IslamicEpoch)
  - NodaTime.CalendarSystem.GetJulianCalendar(System.Int32)
  - NodaTime.CalendarSystem.GetMaxMonth(System.Int32)
  - NodaTime.CalendarSystem.GetMaxYearOfEra(NodaTime.Calendars.Era)
  - NodaTime.CalendarSystem.GetMinYearOfEra(NodaTime.Calendars.Era)
  - NodaTime.CalendarSystem.GetPersianCalendar
  - NodaTime.CalendarSystem.Id
  - NodaTime.CalendarSystem.Ids
  - NodaTime.CalendarSystem.IsLeapYear(System.Int32)
  - NodaTime.CalendarSystem.Iso
  - NodaTime.CalendarSystem.MaxYear
  - NodaTime.CalendarSystem.MinYear
  - NodaTime.CalendarSystem.Name
  - NodaTime.CalendarSystem.ToString
  - NodaTime.CalendarSystem.UsesIsoDayOfWeek
  langs:
  - csharp
  - vb
  name: CalendarSystem
  nameWithType: CalendarSystem
  fullName: NodaTime.CalendarSystem
  type: Class
  source:
    remote:
      path: 1.3.x/src/NodaTime/CalendarSystem.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: CalendarSystem
    path: src/NodaTime/CalendarSystem.cs
    startLine: 40
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nA calendar system maps the non-calendar-specific &quot;local time line&quot; to human concepts\nsuch as years, months and days.\n"
  remarks: "\n<p>\nMany developers will never need to touch this class, other than to potentially ask a calendar\nhow many days are in a particular year/month and the like. Noda Time defaults to using the ISO-8601\ncalendar anywhere that a calendar system is required but hasn&apos;t been explicitly specified.\n</p>\n<p>\nIf you need to obtain a <xref href=\"NodaTime.CalendarSystem\" data-throw-if-not-resolved=\"false\"></xref> instance, use one of the static properties or methods in this\nclass, such as the <xref href=\"NodaTime.CalendarSystem.Iso\" data-throw-if-not-resolved=\"false\"></xref> property or the <xref href=\"NodaTime.CalendarSystem.GetGregorianCalendar(System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method.\n</p>\n<p>Although this class is currently sealed (as of Noda Time 1.2), in the future this decision may\nbe reversed. In any case, there is no current intention for third-party developers to be able to implement\ntheir own calendar systems (for various reasons). If you require a calendar system which is not\ncurrently supported, please file a feature request and we&apos;ll see what we can do.\n</p>\n"
  example: []
  syntax:
    content: public sealed class CalendarSystem
    content.vb: Public NotInheritable Class CalendarSystem
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - sealed
  - class
  modifiers.vb:
  - Public
  - NotInheritable
  - Class
- uid: NodaTime.CalendarSystem.ForId(System.String)
  commentId: M:NodaTime.CalendarSystem.ForId(System.String)
  id: ForId(System.String)
  parent: NodaTime.CalendarSystem
  langs:
  - csharp
  - vb
  name: ForId(String)
  nameWithType: CalendarSystem.ForId(String)
  fullName: NodaTime.CalendarSystem.ForId(System.String)
  type: Method
  source:
    remote:
      path: 1.3.x/src/NodaTime/CalendarSystem.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: ForId
    path: src/NodaTime/CalendarSystem.cs
    startLine: 108
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nFetches a calendar system by its unique identifier. This provides full round-tripping of a calendar\nsystem. It is not guaranteed that calling this method twice with the same identifier will return\nidentical references, but the references objects will be equal.\n"
  example: []
  syntax:
    content: public static CalendarSystem ForId(string id)
    parameters:
    - id: id
      type: System.String
      description: The ID of the calendar system. This is case-sensitive.
    return:
      type: NodaTime.CalendarSystem
      description: The calendar system with the given ID.
    content.vb: Public Shared Function ForId(id As String) As CalendarSystem
  overload: NodaTime.CalendarSystem.ForId*
  exceptions:
  - type: System.Collections.Generic.KeyNotFoundException
    commentId: T:System.Collections.Generic.KeyNotFoundException
    description: No calendar system for the specified ID can be found.
  seealso:
  - linkId: NodaTime.CalendarSystem.Id
    commentId: P:NodaTime.CalendarSystem.Id
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: NodaTime.CalendarSystem.Ids
  commentId: P:NodaTime.CalendarSystem.Ids
  id: Ids
  parent: NodaTime.CalendarSystem
  langs:
  - csharp
  - vb
  name: Ids
  nameWithType: CalendarSystem.Ids
  fullName: NodaTime.CalendarSystem.Ids
  type: Property
  source:
    remote:
      path: 1.3.x/src/NodaTime/CalendarSystem.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: Ids
    path: src/NodaTime/CalendarSystem.cs
    startLine: 121
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nReturns the IDs of all calendar systems available within Noda Time. The order of the keys is not guaranteed.\n"
  example: []
  syntax:
    content: public static IEnumerable<string> Ids { get; }
    parameters: []
    return:
      type: System.Collections.Generic.IEnumerable{System.String}
    content.vb: Public Shared ReadOnly Property Ids As IEnumerable(Of String)
  overload: NodaTime.CalendarSystem.Ids*
  modifiers.csharp:
  - public
  - static
  - get
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: NodaTime.CalendarSystem.Iso
  commentId: P:NodaTime.CalendarSystem.Iso
  id: Iso
  parent: NodaTime.CalendarSystem
  langs:
  - csharp
  - vb
  name: Iso
  nameWithType: CalendarSystem.Iso
  fullName: NodaTime.CalendarSystem.Iso
  type: Property
  source:
    remote:
      path: 1.3.x/src/NodaTime/CalendarSystem.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: Iso
    path: src/NodaTime/CalendarSystem.cs
    startLine: 176
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nReturns a calendar system that follows the rules of the ISO-8601 standard,\nwhich is compatible with Gregorian for all modern dates.\n"
  remarks: "\n<p>\nWhen ISO does not define a field, but it can be determined (such as AM/PM) it is included.\n</p>\n<p>\nWith the exception of century related fields, the ISO calendar is exactly the\nsame as the Gregorian calendar system. In the ISO system, centuries and year\nof century are zero based. For all years, the century is determined by\ndropping the last two digits of the year, ignoring sign. The year of century\nis the value of the last two year digits.\n</p>\n"
  example: []
  syntax:
    content: public static CalendarSystem Iso { get; }
    parameters: []
    return:
      type: NodaTime.CalendarSystem
    content.vb: Public Shared ReadOnly Property Iso As CalendarSystem
  overload: NodaTime.CalendarSystem.Iso*
  modifiers.csharp:
  - public
  - static
  - get
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: NodaTime.CalendarSystem.GetPersianCalendar
  commentId: M:NodaTime.CalendarSystem.GetPersianCalendar
  id: GetPersianCalendar
  parent: NodaTime.CalendarSystem
  langs:
  - csharp
  - vb
  name: GetPersianCalendar()
  nameWithType: CalendarSystem.GetPersianCalendar()
  fullName: NodaTime.CalendarSystem.GetPersianCalendar()
  type: Method
  source:
    remote:
      path: 1.3.x/src/NodaTime/CalendarSystem.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: GetPersianCalendar
    path: src/NodaTime/CalendarSystem.cs
    startLine: 191
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nReturns a Persian (also known as Solar Hijri) calendar system. This is the main calendar in Iran\nand Afghanistan, and is also used in some other countries where Persian is spoken.\n"
  remarks: "\nThe true Persian calendar is an astronomical one, where leap years depend on vernal equinox.\nA complicated algorithmic alternative approach exists, proposed by Ahmad Birashk,\nbut this isn&apos;t generally used in society. The implementation here is somewhat simpler, using a\n33-year leap cycle, where years  1, 5, 9, 13, 17, 22, 26, and 30 in each cycle are leap years.\nThis is the same approach taken by the BCL <code>PersianCalendar</code> class, and the dates of\nthis implementation align exactly with the BCL implementation.\n"
  example: []
  syntax:
    content: public static CalendarSystem GetPersianCalendar()
    return:
      type: NodaTime.CalendarSystem
      description: A Persian calendar system.
    content.vb: Public Shared Function GetPersianCalendar As CalendarSystem
  overload: NodaTime.CalendarSystem.GetPersianCalendar*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: NodaTime.CalendarSystem.GetHebrewCalendar(NodaTime.Calendars.HebrewMonthNumbering)
  commentId: M:NodaTime.CalendarSystem.GetHebrewCalendar(NodaTime.Calendars.HebrewMonthNumbering)
  id: GetHebrewCalendar(NodaTime.Calendars.HebrewMonthNumbering)
  parent: NodaTime.CalendarSystem
  langs:
  - csharp
  - vb
  name: GetHebrewCalendar(HebrewMonthNumbering)
  nameWithType: CalendarSystem.GetHebrewCalendar(HebrewMonthNumbering)
  fullName: NodaTime.CalendarSystem.GetHebrewCalendar(NodaTime.Calendars.HebrewMonthNumbering)
  type: Method
  source:
    remote:
      path: 1.3.x/src/NodaTime/CalendarSystem.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: GetHebrewCalendar
    path: src/NodaTime/CalendarSystem.cs
    startLine: 214
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nReturns a Hebrew calendar, as described at http://en.wikipedia.org/wiki/Hebrew_calendar. This is a\npurely mathematical calculator, applied proleptically to the period where the real calendar was observational. \n"
  remarks: "\n<p>Please note that in version 1.3.0 of Noda Time, support for the Hebrew calendar is somewhat experimental,\nparticularly in terms of calculations involving adding or subtracting years. Additionally, text formatting\nand parsing using month names is not currently supported, due to the challenges of handling leap months.\nIt is hoped that this will be improved in future versions.</p>\n<p>The implementation for this was taken from http://www.cs.tau.ac.il/~nachum/calendar-book/papers/calendar.ps,\nwhich is a public domain algorithm presumably equivalent to that given in the Calendrical Calculations book\nby the same authors (Nachum Dershowitz and Edward Reingold).\n</p>\n"
  example: []
  syntax:
    content: public static CalendarSystem GetHebrewCalendar(HebrewMonthNumbering monthNumbering)
    parameters:
    - id: monthNumbering
      type: NodaTime.Calendars.HebrewMonthNumbering
      description: The month numbering system to use
    return:
      type: NodaTime.CalendarSystem
      description: A Hebrew calendar system for the given month numbering.
    content.vb: Public Shared Function GetHebrewCalendar(monthNumbering As HebrewMonthNumbering) As CalendarSystem
  overload: NodaTime.CalendarSystem.GetHebrewCalendar*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: NodaTime.CalendarSystem.GetGregorianCalendar(System.Int32)
  commentId: M:NodaTime.CalendarSystem.GetGregorianCalendar(System.Int32)
  id: GetGregorianCalendar(System.Int32)
  parent: NodaTime.CalendarSystem
  langs:
  - csharp
  - vb
  name: GetGregorianCalendar(Int32)
  nameWithType: CalendarSystem.GetGregorianCalendar(Int32)
  fullName: NodaTime.CalendarSystem.GetGregorianCalendar(System.Int32)
  type: Method
  source:
    remote:
      path: 1.3.x/src/NodaTime/CalendarSystem.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: GetGregorianCalendar
    path: src/NodaTime/CalendarSystem.cs
    startLine: 235
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nReturns a pure proleptic Gregorian calendar system, which defines every\nfourth year as leap, unless the year is divisible by 100 and not by 400.\nThis improves upon the Julian calendar leap year rule.\n"
  remarks: "\nAlthough the Gregorian calendar did not exist before 1582 CE, this\ncalendar system assumes it did, thus it is proleptic. This implementation also\nfixes the start of the year at January 1.\n"
  example: []
  syntax:
    content: public static CalendarSystem GetGregorianCalendar(int minDaysInFirstWeek)
    parameters:
    - id: minDaysInFirstWeek
      type: System.Int32
      description: >-
        The minimum number of days in the first week of the year.

        When computing the WeekOfWeekYear and WeekYear properties of a particular date, this is

        used to decide at what point the week year changes.
    return:
      type: NodaTime.CalendarSystem
      description: >-
        A suitable Gregorian calendar reference; the same reference may be returned by several

        calls as the object is immutable and thread-safe.
    content.vb: Public Shared Function GetGregorianCalendar(minDaysInFirstWeek As Integer) As CalendarSystem
  overload: NodaTime.CalendarSystem.GetGregorianCalendar*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: NodaTime.CalendarSystem.GetJulianCalendar(System.Int32)
  commentId: M:NodaTime.CalendarSystem.GetJulianCalendar(System.Int32)
  id: GetJulianCalendar(System.Int32)
  parent: NodaTime.CalendarSystem
  langs:
  - csharp
  - vb
  name: GetJulianCalendar(Int32)
  nameWithType: CalendarSystem.GetJulianCalendar(Int32)
  fullName: NodaTime.CalendarSystem.GetJulianCalendar(System.Int32)
  type: Method
  source:
    remote:
      path: 1.3.x/src/NodaTime/CalendarSystem.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: GetJulianCalendar
    path: src/NodaTime/CalendarSystem.cs
    startLine: 257
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nReturns a pure proleptic Julian calendar system, which defines every\nfourth year as a leap year. This implementation follows the leap year rule\nstrictly, even for dates before 8 CE, where leap years were actually\nirregular.\n"
  remarks: "\nAlthough the Julian calendar did not exist before 45 BCE, this calendar\nassumes it did, thus it is proleptic. This implementation also fixes the\nstart of the year at January 1.\n"
  example: []
  syntax:
    content: public static CalendarSystem GetJulianCalendar(int minDaysInFirstWeek)
    parameters:
    - id: minDaysInFirstWeek
      type: System.Int32
      description: >-
        The minimum number of days in the first week of the year.

        When computing the WeekOfWeekYear and WeekYear properties of a particular date, this is

        used to decide at what point the week year changes.
    return:
      type: NodaTime.CalendarSystem
      description: >-
        A suitable Julian calendar reference; the same reference may be returned by several

        calls as the object is immutable and thread-safe.
    content.vb: Public Shared Function GetJulianCalendar(minDaysInFirstWeek As Integer) As CalendarSystem
  overload: NodaTime.CalendarSystem.GetJulianCalendar*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: NodaTime.CalendarSystem.GetCopticCalendar(System.Int32)
  commentId: M:NodaTime.CalendarSystem.GetCopticCalendar(System.Int32)
  id: GetCopticCalendar(System.Int32)
  parent: NodaTime.CalendarSystem
  langs:
  - csharp
  - vb
  name: GetCopticCalendar(Int32)
  nameWithType: CalendarSystem.GetCopticCalendar(Int32)
  fullName: NodaTime.CalendarSystem.GetCopticCalendar(System.Int32)
  type: Method
  source:
    remote:
      path: 1.3.x/src/NodaTime/CalendarSystem.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: GetCopticCalendar
    path: src/NodaTime/CalendarSystem.cs
    startLine: 287
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nReturns a Coptic calendar system, which defines every fourth year as\nleap, much like the Julian calendar. The year is broken down into 12 months,\neach 30 days in length. An extra period at the end of the year is either 5\nor 6 days in length. In this implementation, it is considered a 13th month.\n"
  remarks: "\n<p>\nYear 1 in the Coptic calendar began on August 29, 284 CE (Julian), thus\nCoptic years do not begin at the same time as Julian years. This calendar\nis not proleptic, as it does not allow dates before the first Coptic year.\n</p>\n<p>\nThis implementation defines a day as midnight to midnight exactly as per\nthe ISO calendar. Some references indicate that a Coptic day starts at\nsunset on the previous ISO day, but this has not been confirmed and is not\nimplemented.\n</p>\n"
  example: []
  syntax:
    content: public static CalendarSystem GetCopticCalendar(int minDaysInFirstWeek)
    parameters:
    - id: minDaysInFirstWeek
      type: System.Int32
      description: >-
        The minimum number of days in the first week of the year.

        When computing the WeekOfWeekYear and WeekYear properties of a particular date, this is

        used to decide at what point the week year changes.
    return:
      type: NodaTime.CalendarSystem
      description: >-
        A suitable Coptic calendar reference; the same reference may be returned by several

        calls as the object is immutable and thread-safe.
    content.vb: Public Shared Function GetCopticCalendar(minDaysInFirstWeek As Integer) As CalendarSystem
  overload: NodaTime.CalendarSystem.GetCopticCalendar*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: NodaTime.CalendarSystem.GetIslamicCalendar(NodaTime.Calendars.IslamicLeapYearPattern,NodaTime.Calendars.IslamicEpoch)
  commentId: M:NodaTime.CalendarSystem.GetIslamicCalendar(NodaTime.Calendars.IslamicLeapYearPattern,NodaTime.Calendars.IslamicEpoch)
  id: GetIslamicCalendar(NodaTime.Calendars.IslamicLeapYearPattern,NodaTime.Calendars.IslamicEpoch)
  parent: NodaTime.CalendarSystem
  langs:
  - csharp
  - vb
  name: GetIslamicCalendar(IslamicLeapYearPattern, IslamicEpoch)
  nameWithType: CalendarSystem.GetIslamicCalendar(IslamicLeapYearPattern, IslamicEpoch)
  fullName: NodaTime.CalendarSystem.GetIslamicCalendar(NodaTime.Calendars.IslamicLeapYearPattern, NodaTime.Calendars.IslamicEpoch)
  type: Method
  source:
    remote:
      path: 1.3.x/src/NodaTime/CalendarSystem.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: GetIslamicCalendar
    path: src/NodaTime/CalendarSystem.cs
    startLine: 350
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nReturns an Islamic, or Hijri, calendar system.\n"
  remarks: "\n<p>\nThis returns a tablular calendar, rather than one based on lunar observation. This calendar is a\nlunar calendar with 12 months, each of 29 or 30 days, resulting in a year of 354 days (or 355 on a leap\nyear).\n</p>\n<p>\nYear 1 in the Islamic calendar began on July 15th or 16th, 622 CE (Julian), thus\nIslamic years do not begin at the same time as Julian years. This calendar\nis not proleptic, as it does not allow dates before the first Islamic year.\n</p>\n<p>\nThere are two basic forms of the Islamic calendar, the tabular and the\nobserved. The observed form cannot easily be used by computers as it\nrelies on human observation of the new moon. The tabular calendar, implemented here, is an\narithmetic approximation of the observed form that follows relatively simple rules.\n</p>\n<p>You should choose an epoch based on which external system you wish\nto be compatible with. The epoch beginning on July 16th is the more common\none for the tabular calendar, so using <xref href=\"NodaTime.Calendars.IslamicEpoch.Civil\" data-throw-if-not-resolved=\"false\"></xref>\nwould usually be a logical choice. However, Windows uses July 15th, so\nif you need to be compatible with other Windows systems, you may wish to use\n<xref href=\"NodaTime.Calendars.IslamicEpoch.Astronomical\" data-throw-if-not-resolved=\"false\"></xref>. The fact that the Islamic calendar\ntraditionally starts at dusk, a Julian day traditionally starts at noon,\nand all calendar systems in Noda Time start their days at midnight adds\nsomewhat inevitable confusion to the mix, unfortunately.</p>\n<p>\nThe tabular form of the calendar defines 12 months of alternately\n30 and 29 days. The last month is extended to 30 days in a leap year.\nLeap years occur according to a 30 year cycle. There are four recognised\npatterns of leap years in the 30 year cycle:\n</p>\n<table><thead><tr><th>Origin</th><th>Leap years</th></tr></thead><tbody><tr><td>Kūshyār ibn Labbān</td><td>2, 5, 7, 10, 13, 15, 18, 21, 24, 26, 29</td></tr><tr><td>al-Fazārī</td><td>2, 5, 7, 10, 13, 16, 18, 21, 24, 26, 29</td></tr><tr><td>Fātimid (also known as Misri or Bohra)</td><td>2, 5, 8, 10, 13, 16, 19, 21, 24, 27, 29</td></tr><tr><td>Habash al-Hasib</td><td>2, 5, 8, 11, 13, 16, 19, 21, 24, 27, 30</td></tr></tbody></table>\n<p>\nThe leap year pattern to use is determined from the first parameter to this factory method.\nThe second parameter determines which epoch is used - the &quot;astronomical&quot; or &quot;Thursday&quot; epoch\n(July 15th 622CE) or the &quot;civil&quot; or &quot;Friday&quot; epoch (July 16th 622CE).\n</p>\n<p>\nThis implementation defines a day as midnight to midnight exactly as per\nthe ISO calendar. This correct start of day is at sunset on the previous\nday, however this cannot readily be modelled and has been ignored.\n</p>\n"
  example: []
  syntax:
    content: public static CalendarSystem GetIslamicCalendar(IslamicLeapYearPattern leapYearPattern, IslamicEpoch epoch)
    parameters:
    - id: leapYearPattern
      type: NodaTime.Calendars.IslamicLeapYearPattern
      description: The pattern of years in the 30-year cycle to consider as leap years
    - id: epoch
      type: NodaTime.Calendars.IslamicEpoch
      description: The kind of epoch to use (astronomical or civil)
    return:
      type: NodaTime.CalendarSystem
      description: >-
        A suitable Islamic calendar reference; the same reference may be returned by several

        calls as the object is immutable and thread-safe.
    content.vb: Public Shared Function GetIslamicCalendar(leapYearPattern As IslamicLeapYearPattern, epoch As IslamicEpoch) As CalendarSystem
  overload: NodaTime.CalendarSystem.GetIslamicCalendar*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: NodaTime.CalendarSystem.Id
  commentId: P:NodaTime.CalendarSystem.Id
  id: Id
  parent: NodaTime.CalendarSystem
  langs:
  - csharp
  - vb
  name: Id
  nameWithType: CalendarSystem.Id
  fullName: NodaTime.CalendarSystem.Id
  type: Property
  source:
    remote:
      path: 1.3.x/src/NodaTime/CalendarSystem.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: Id
    path: src/NodaTime/CalendarSystem.cs
    startLine: 453
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nReturns the unique identifier for this calendar system. This is provides full round-trip capability\nusing <xref href=\"NodaTime.CalendarSystem.ForId(System.String)\" data-throw-if-not-resolved=\"false\"></xref> to retrieve the calendar system from the identifier.\n"
  remarks: "\n<p>\nA unique ID for a calendar is required when serializing types which include a <xref href=\"NodaTime.CalendarSystem\" data-throw-if-not-resolved=\"false\"></xref>.\nAs of 2 Nov 2012 (ISO calendar) there are no ISO or RFC standards for naming a calendar system. As such,\nthe identifiers provided here are specific to Noda Time, and are not guaranteed to interoperate with any other\ndate and time API.\n</p>\n<table><thead><tr><th>Calendar ID</th><th>Equivalent factory method</th></tr></thead><tbody><tr><td>ISO</td><td><xref href=\"NodaTime.CalendarSystem.Iso\" data-throw-if-not-resolved=\"false\"></xref></td></tr><tr><td>Gregorian 1</td><td><xref href=\"NodaTime.CalendarSystem.GetGregorianCalendar(System.Int32)\" data-throw-if-not-resolved=\"false\"></xref>(1)</td></tr><tr><td>Gregorian 2</td><td><xref href=\"NodaTime.CalendarSystem.GetGregorianCalendar(System.Int32)\" data-throw-if-not-resolved=\"false\"></xref>(2)</td></tr><tr><td>Gregorian 3</td><td><xref href=\"NodaTime.CalendarSystem.GetGregorianCalendar(System.Int32)\" data-throw-if-not-resolved=\"false\"></xref>(3)</td></tr><tr><td>Gregorian 3</td><td><xref href=\"NodaTime.CalendarSystem.GetGregorianCalendar(System.Int32)\" data-throw-if-not-resolved=\"false\"></xref>(4)</td></tr><tr><td>Gregorian 5</td><td><xref href=\"NodaTime.CalendarSystem.GetGregorianCalendar(System.Int32)\" data-throw-if-not-resolved=\"false\"></xref>(5)</td></tr><tr><td>Gregorian 6</td><td><xref href=\"NodaTime.CalendarSystem.GetGregorianCalendar(System.Int32)\" data-throw-if-not-resolved=\"false\"></xref>(6)</td></tr><tr><td>Gregorian 7</td><td><xref href=\"NodaTime.CalendarSystem.GetGregorianCalendar(System.Int32)\" data-throw-if-not-resolved=\"false\"></xref>(7)</td></tr><tr><td>Coptic 1</td><td><xref href=\"NodaTime.CalendarSystem.GetCopticCalendar(System.Int32)\" data-throw-if-not-resolved=\"false\"></xref>(1)</td></tr><tr><td>Coptic 2</td><td><xref href=\"NodaTime.CalendarSystem.GetCopticCalendar(System.Int32)\" data-throw-if-not-resolved=\"false\"></xref>(2)</td></tr><tr><td>Coptic 3</td><td><xref href=\"NodaTime.CalendarSystem.GetCopticCalendar(System.Int32)\" data-throw-if-not-resolved=\"false\"></xref>(3)</td></tr><tr><td>Coptic 4</td><td><xref href=\"NodaTime.CalendarSystem.GetCopticCalendar(System.Int32)\" data-throw-if-not-resolved=\"false\"></xref>(4)</td></tr><tr><td>Coptic 5</td><td><xref href=\"NodaTime.CalendarSystem.GetCopticCalendar(System.Int32)\" data-throw-if-not-resolved=\"false\"></xref>(5)</td></tr><tr><td>Coptic 6</td><td><xref href=\"NodaTime.CalendarSystem.GetCopticCalendar(System.Int32)\" data-throw-if-not-resolved=\"false\"></xref>(6)</td></tr><tr><td>Coptic 7</td><td><xref href=\"NodaTime.CalendarSystem.GetCopticCalendar(System.Int32)\" data-throw-if-not-resolved=\"false\"></xref>(7)</td></tr><tr><td>Julian 1</td><td><xref href=\"NodaTime.CalendarSystem.GetJulianCalendar(System.Int32)\" data-throw-if-not-resolved=\"false\"></xref>(1)</td></tr><tr><td>Julian 2</td><td><xref href=\"NodaTime.CalendarSystem.GetJulianCalendar(System.Int32)\" data-throw-if-not-resolved=\"false\"></xref>(2)</td></tr><tr><td>Julian 3</td><td><xref href=\"NodaTime.CalendarSystem.GetJulianCalendar(System.Int32)\" data-throw-if-not-resolved=\"false\"></xref>(3)</td></tr><tr><td>Julian 4</td><td><xref href=\"NodaTime.CalendarSystem.GetJulianCalendar(System.Int32)\" data-throw-if-not-resolved=\"false\"></xref>(4)</td></tr><tr><td>Julian 5</td><td><xref href=\"NodaTime.CalendarSystem.GetJulianCalendar(System.Int32)\" data-throw-if-not-resolved=\"false\"></xref>(5)</td></tr><tr><td>Julian 6</td><td><xref href=\"NodaTime.CalendarSystem.GetJulianCalendar(System.Int32)\" data-throw-if-not-resolved=\"false\"></xref>(6)</td></tr><tr><td>Julian 7</td><td><xref href=\"NodaTime.CalendarSystem.GetJulianCalendar(System.Int32)\" data-throw-if-not-resolved=\"false\"></xref>(7)</td></tr><tr><td>Hijri Civil-Indian</td><td><xref href=\"NodaTime.CalendarSystem.GetIslamicCalendar(NodaTime.Calendars.IslamicLeapYearPattern%2cNodaTime.Calendars.IslamicEpoch)\" data-throw-if-not-resolved=\"false\"></xref>(IslamicLeapYearPattern.Indian, IslamicEpoch.Civil)</td></tr><tr><td>Hijri Civil-Base15</td><td><xref href=\"NodaTime.CalendarSystem.GetIslamicCalendar(NodaTime.Calendars.IslamicLeapYearPattern%2cNodaTime.Calendars.IslamicEpoch)\" data-throw-if-not-resolved=\"false\"></xref>(IslamicLeapYearPattern.Base15, IslamicEpoch.Civil)</td></tr><tr><td>Hijri Civil-Base16</td><td><xref href=\"NodaTime.CalendarSystem.GetIslamicCalendar(NodaTime.Calendars.IslamicLeapYearPattern%2cNodaTime.Calendars.IslamicEpoch)\" data-throw-if-not-resolved=\"false\"></xref>(IslamicLeapYearPattern.Base16, IslamicEpoch.Civil)</td></tr><tr><td>Hijri Civil-HabashAlHasib</td><td><xref href=\"NodaTime.CalendarSystem.GetIslamicCalendar(NodaTime.Calendars.IslamicLeapYearPattern%2cNodaTime.Calendars.IslamicEpoch)\" data-throw-if-not-resolved=\"false\"></xref>(IslamicLeapYearPattern.HabashAlHasib, IslamicEpoch.Civil)</td></tr><tr><td>Hijri Astronomical-Indian</td><td><xref href=\"NodaTime.CalendarSystem.GetIslamicCalendar(NodaTime.Calendars.IslamicLeapYearPattern%2cNodaTime.Calendars.IslamicEpoch)\" data-throw-if-not-resolved=\"false\"></xref>(IslamicLeapYearPattern.Indian, IslamicEpoch.Astronomical)</td></tr><tr><td>Hijri Astronomical-Base15</td><td><xref href=\"NodaTime.CalendarSystem.GetIslamicCalendar(NodaTime.Calendars.IslamicLeapYearPattern%2cNodaTime.Calendars.IslamicEpoch)\" data-throw-if-not-resolved=\"false\"></xref>(IslamicLeapYearPattern.Base15, IslamicEpoch.Astronomical)</td></tr><tr><td>Hijri Astronomical-Base16</td><td><xref href=\"NodaTime.CalendarSystem.GetIslamicCalendar(NodaTime.Calendars.IslamicLeapYearPattern%2cNodaTime.Calendars.IslamicEpoch)\" data-throw-if-not-resolved=\"false\"></xref>(IslamicLeapYearPattern.Base16, IslamicEpoch.Astronomical)</td></tr><tr><td>Hijri Astronomical-HabashAlHasib</td><td><xref href=\"NodaTime.CalendarSystem.GetIslamicCalendar(NodaTime.Calendars.IslamicLeapYearPattern%2cNodaTime.Calendars.IslamicEpoch)\" data-throw-if-not-resolved=\"false\"></xref>(IslamicLeapYearPattern.HabashAlHasib, IslamicEpoch.Astronomical)</td></tr><tr><td>Persian</td><td><xref href=\"NodaTime.CalendarSystem.GetPersianCalendar\" data-throw-if-not-resolved=\"false\"></xref></td></tr><tr><td>Hebrew</td><td><xref href=\"NodaTime.CalendarSystem.GetHebrewCalendar(NodaTime.Calendars.HebrewMonthNumbering)\" data-throw-if-not-resolved=\"false\"></xref></td></tr></tbody></table>\n"
  example: []
  syntax:
    content: public string Id { get; }
    parameters: []
    return:
      type: System.String
    content.vb: Public ReadOnly Property Id As String
  overload: NodaTime.CalendarSystem.Id*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: NodaTime.CalendarSystem.Name
  commentId: P:NodaTime.CalendarSystem.Name
  id: Name
  parent: NodaTime.CalendarSystem
  langs:
  - csharp
  - vb
  name: Name
  nameWithType: CalendarSystem.Name
  fullName: NodaTime.CalendarSystem.Name
  type: Property
  source:
    remote:
      path: 1.3.x/src/NodaTime/CalendarSystem.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: Name
    path: src/NodaTime/CalendarSystem.cs
    startLine: 461
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nReturns the name of this calendar system. Each kind of calendar system has a unique name, but this\ndoes not usually provide enough information for round-tripping. (For example, the name of an\nIslamic calendar system does not indicate which kind of leap cycle it uses, and other calendars\nspecify the minimum number of days in the first week of a year.)\n"
  example: []
  syntax:
    content: public string Name { get; }
    parameters: []
    return:
      type: System.String
    content.vb: Public ReadOnly Property Name As String
  overload: NodaTime.CalendarSystem.Name*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: NodaTime.CalendarSystem.UsesIsoDayOfWeek
  commentId: P:NodaTime.CalendarSystem.UsesIsoDayOfWeek
  id: UsesIsoDayOfWeek
  parent: NodaTime.CalendarSystem
  langs:
  - csharp
  - vb
  name: UsesIsoDayOfWeek
  nameWithType: CalendarSystem.UsesIsoDayOfWeek
  fullName: NodaTime.CalendarSystem.UsesIsoDayOfWeek
  type: Property
  source:
    remote:
      path: 1.3.x/src/NodaTime/CalendarSystem.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: UsesIsoDayOfWeek
    path: src/NodaTime/CalendarSystem.cs
    startLine: 468
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nReturns whether the day-of-week field refers to ISO days. If true, types such as <xref href=\"NodaTime.LocalDateTime\" data-throw-if-not-resolved=\"false\"></xref>\ncan use the <xref href=\"NodaTime.IsoDayOfWeek\" data-throw-if-not-resolved=\"false\"></xref> property to avoid using magic numbers.\nThis defaults to true, but can be overridden by specific calendars.\n"
  example: []
  syntax:
    content: public bool UsesIsoDayOfWeek { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property UsesIsoDayOfWeek As Boolean
  overload: NodaTime.CalendarSystem.UsesIsoDayOfWeek*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: NodaTime.CalendarSystem.MinYear
  commentId: P:NodaTime.CalendarSystem.MinYear
  id: MinYear
  parent: NodaTime.CalendarSystem
  langs:
  - csharp
  - vb
  name: MinYear
  nameWithType: CalendarSystem.MinYear
  fullName: NodaTime.CalendarSystem.MinYear
  type: Property
  source:
    remote:
      path: 1.3.x/src/NodaTime/CalendarSystem.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: MinYear
    path: src/NodaTime/CalendarSystem.cs
    startLine: 473
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nThe minimum valid year (inclusive) within this calendar.\n"
  example: []
  syntax:
    content: public int MinYear { get; }
    parameters: []
    return:
      type: System.Int32
    content.vb: Public ReadOnly Property MinYear As Integer
  overload: NodaTime.CalendarSystem.MinYear*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: NodaTime.CalendarSystem.MaxYear
  commentId: P:NodaTime.CalendarSystem.MaxYear
  id: MaxYear
  parent: NodaTime.CalendarSystem
  langs:
  - csharp
  - vb
  name: MaxYear
  nameWithType: CalendarSystem.MaxYear
  fullName: NodaTime.CalendarSystem.MaxYear
  type: Property
  source:
    remote:
      path: 1.3.x/src/NodaTime/CalendarSystem.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: MaxYear
    path: src/NodaTime/CalendarSystem.cs
    startLine: 478
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nThe maximum valid year (inclusive) within this calendar.\n"
  example: []
  syntax:
    content: public int MaxYear { get; }
    parameters: []
    return:
      type: System.Int32
    content.vb: Public ReadOnly Property MaxYear As Integer
  overload: NodaTime.CalendarSystem.MaxYear*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: NodaTime.CalendarSystem.Eras
  commentId: P:NodaTime.CalendarSystem.Eras
  id: Eras
  parent: NodaTime.CalendarSystem
  langs:
  - csharp
  - vb
  name: Eras
  nameWithType: CalendarSystem.Eras
  fullName: NodaTime.CalendarSystem.Eras
  type: Property
  source:
    remote:
      path: 1.3.x/src/NodaTime/CalendarSystem.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: Eras
    path: src/NodaTime/CalendarSystem.cs
    startLine: 494
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nReturns a read-only list of eras used in this calendar system.\n"
  example: []
  syntax:
    content: public IList<Era> Eras { get; }
    parameters: []
    return:
      type: System.Collections.Generic.IList{NodaTime.Calendars.Era}
    content.vb: Public ReadOnly Property Eras As IList(Of Era)
  overload: NodaTime.CalendarSystem.Eras*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: NodaTime.CalendarSystem.GetAbsoluteYear(System.Int32,NodaTime.Calendars.Era)
  commentId: M:NodaTime.CalendarSystem.GetAbsoluteYear(System.Int32,NodaTime.Calendars.Era)
  id: GetAbsoluteYear(System.Int32,NodaTime.Calendars.Era)
  parent: NodaTime.CalendarSystem
  langs:
  - csharp
  - vb
  name: GetAbsoluteYear(Int32, Era)
  nameWithType: CalendarSystem.GetAbsoluteYear(Int32, Era)
  fullName: NodaTime.CalendarSystem.GetAbsoluteYear(System.Int32, NodaTime.Calendars.Era)
  type: Method
  source:
    remote:
      path: 1.3.x/src/NodaTime/CalendarSystem.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: GetAbsoluteYear
    path: src/NodaTime/CalendarSystem.cs
    startLine: 511
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nReturns the &quot;absolute year&quot; (the one used throughout most of the API, without respect to eras)\nfrom a year-of-era and an era.\n"
  remarks: "\nFor example, in the Gregorian and Julian calendar systems, the BCE era starts at year 1, which is\nequivalent to an &quot;absolute year&quot; of 0 (then BCE year 2 has an absolute year of -1, and so on).  The absolute\nyear is the year that is used throughout the API; year-of-era is typically used primarily when formatting\nand parsing date values to and from text.\n"
  example: []
  syntax:
    content: public int GetAbsoluteYear(int yearOfEra, Era era)
    parameters:
    - id: yearOfEra
      type: System.Int32
      description: The year within the era.
    - id: era
      type: NodaTime.Calendars.Era
      description: The era in which to consider the year
    return:
      type: System.Int32
      description: The absolute year represented by the specified year of era.
    content.vb: Public Function GetAbsoluteYear(yearOfEra As Integer, era As Era) As Integer
  overload: NodaTime.CalendarSystem.GetAbsoluteYear*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: <code data-dev-comment-type="paramref" class="paramref">yearOfEra</code> is out of the range of years for the given era.
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: <code data-dev-comment-type="paramref" class="paramref">era</code> is not an era used in this calendar.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: NodaTime.CalendarSystem.GetMaxYearOfEra(NodaTime.Calendars.Era)
  commentId: M:NodaTime.CalendarSystem.GetMaxYearOfEra(NodaTime.Calendars.Era)
  id: GetMaxYearOfEra(NodaTime.Calendars.Era)
  parent: NodaTime.CalendarSystem
  langs:
  - csharp
  - vb
  name: GetMaxYearOfEra(Era)
  nameWithType: CalendarSystem.GetMaxYearOfEra(Era)
  fullName: NodaTime.CalendarSystem.GetMaxYearOfEra(NodaTime.Calendars.Era)
  type: Method
  source:
    remote:
      path: 1.3.x/src/NodaTime/CalendarSystem.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: GetMaxYearOfEra
    path: src/NodaTime/CalendarSystem.cs
    startLine: 522
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nReturns the maximum valid year-of-era in the given era.\n"
  example: []
  syntax:
    content: public int GetMaxYearOfEra(Era era)
    parameters:
    - id: era
      type: NodaTime.Calendars.Era
      description: The era in which to find the greatest year
    return:
      type: System.Int32
      description: The maximum valid year in the given era.
    content.vb: Public Function GetMaxYearOfEra(era As Era) As Integer
  overload: NodaTime.CalendarSystem.GetMaxYearOfEra*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: <code data-dev-comment-type="paramref" class="paramref">era</code> is not an era used in this calendar.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: NodaTime.CalendarSystem.GetMinYearOfEra(NodaTime.Calendars.Era)
  commentId: M:NodaTime.CalendarSystem.GetMinYearOfEra(NodaTime.Calendars.Era)
  id: GetMinYearOfEra(NodaTime.Calendars.Era)
  parent: NodaTime.CalendarSystem
  langs:
  - csharp
  - vb
  name: GetMinYearOfEra(Era)
  nameWithType: CalendarSystem.GetMinYearOfEra(Era)
  fullName: NodaTime.CalendarSystem.GetMinYearOfEra(NodaTime.Calendars.Era)
  type: Method
  source:
    remote:
      path: 1.3.x/src/NodaTime/CalendarSystem.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: GetMinYearOfEra
    path: src/NodaTime/CalendarSystem.cs
    startLine: 533
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nReturns the minimum valid year-of-era in the given era.\n"
  example: []
  syntax:
    content: public int GetMinYearOfEra(Era era)
    parameters:
    - id: era
      type: NodaTime.Calendars.Era
      description: The era in which to find the greatest year
    return:
      type: System.Int32
      description: The minimum valid year in the given eraera.
    content.vb: Public Function GetMinYearOfEra(era As Era) As Integer
  overload: NodaTime.CalendarSystem.GetMinYearOfEra*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: <code data-dev-comment-type="paramref" class="paramref">era</code> is not an era used in this calendar.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: NodaTime.CalendarSystem.ToString
  commentId: M:NodaTime.CalendarSystem.ToString
  id: ToString
  parent: NodaTime.CalendarSystem
  langs:
  - csharp
  - vb
  name: ToString()
  nameWithType: CalendarSystem.ToString()
  fullName: NodaTime.CalendarSystem.ToString()
  type: Method
  source:
    remote:
      path: 1.3.x/src/NodaTime/CalendarSystem.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: ToString
    path: src/NodaTime/CalendarSystem.cs
    startLine: 624
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nConverts this calendar system to text by simply returning its unique ID.\n"
  example: []
  syntax:
    content: public override string ToString()
    return:
      type: System.String
      description: The ID of this calendar system.
    content.vb: Public Overrides Function ToString As String
  overridden: System.Object.ToString
  overload: NodaTime.CalendarSystem.ToString*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: NodaTime.CalendarSystem.GetDaysInMonth(System.Int32,System.Int32)
  commentId: M:NodaTime.CalendarSystem.GetDaysInMonth(System.Int32,System.Int32)
  id: GetDaysInMonth(System.Int32,System.Int32)
  parent: NodaTime.CalendarSystem
  langs:
  - csharp
  - vb
  name: GetDaysInMonth(Int32, Int32)
  nameWithType: CalendarSystem.GetDaysInMonth(Int32, Int32)
  fullName: NodaTime.CalendarSystem.GetDaysInMonth(System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: 1.3.x/src/NodaTime/CalendarSystem.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: GetDaysInMonth
    path: src/NodaTime/CalendarSystem.cs
    startLine: 653
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nReturns the number of days in the given month within the given year.\n"
  example: []
  syntax:
    content: public int GetDaysInMonth(int year, int month)
    parameters:
    - id: year
      type: System.Int32
      description: The year in which to consider the month
    - id: month
      type: System.Int32
      description: The month to determine the number of days in
    return:
      type: System.Int32
      description: The number of days in the given month and year.
    content.vb: Public Function GetDaysInMonth(year As Integer, month As Integer) As Integer
  overload: NodaTime.CalendarSystem.GetDaysInMonth*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: >-
      The given year / month combination

      is invalid for this calendar.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: NodaTime.CalendarSystem.IsLeapYear(System.Int32)
  commentId: M:NodaTime.CalendarSystem.IsLeapYear(System.Int32)
  id: IsLeapYear(System.Int32)
  parent: NodaTime.CalendarSystem
  langs:
  - csharp
  - vb
  name: IsLeapYear(Int32)
  nameWithType: CalendarSystem.IsLeapYear(Int32)
  fullName: NodaTime.CalendarSystem.IsLeapYear(System.Int32)
  type: Method
  source:
    remote:
      path: 1.3.x/src/NodaTime/CalendarSystem.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: IsLeapYear
    path: src/NodaTime/CalendarSystem.cs
    startLine: 666
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nReturns whether or not the given year is a leap year in this calendar.\n"
  example: []
  syntax:
    content: public bool IsLeapYear(int year)
    parameters:
    - id: year
      type: System.Int32
      description: The year to consider.
    return:
      type: System.Boolean
      description: True if the given year is a leap year; false otherwise.
    content.vb: Public Function IsLeapYear(year As Integer) As Boolean
  overload: NodaTime.CalendarSystem.IsLeapYear*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: >-
      The given year is invalid for this calendar.

      Note that some implementations may return a value rather than throw this exception. Failure to throw an

      exception should not be treated as an indication that the year is valid.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: NodaTime.CalendarSystem.GetMaxMonth(System.Int32)
  commentId: M:NodaTime.CalendarSystem.GetMaxMonth(System.Int32)
  id: GetMaxMonth(System.Int32)
  parent: NodaTime.CalendarSystem
  langs:
  - csharp
  - vb
  name: GetMaxMonth(Int32)
  nameWithType: CalendarSystem.GetMaxMonth(Int32)
  fullName: NodaTime.CalendarSystem.GetMaxMonth(System.Int32)
  type: Method
  source:
    remote:
      path: 1.3.x/src/NodaTime/CalendarSystem.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: GetMaxMonth
    path: src/NodaTime/CalendarSystem.cs
    startLine: 681
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nThe maximum valid month (inclusive) within this calendar in the given year. It is assumed that\nall calendars start with month 1 and go up to this month number in any valid year.\n"
  example: []
  syntax:
    content: public int GetMaxMonth(int year)
    parameters:
    - id: year
      type: System.Int32
      description: The year to consider.
    return:
      type: System.Int32
      description: The maximum month number within the given year.
    content.vb: Public Function GetMaxMonth(year As Integer) As Integer
  overload: NodaTime.CalendarSystem.GetMaxMonth*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: >-
      The given year is invalid for this calendar.

      Note that some implementations may return a month rather than throw this exception (for example, if all

      years have the same number of months in this calendar system). Failure to throw an exception should not be

      treated as an indication that the year is valid.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: NodaTime.CalendarSystem
  commentId: T:NodaTime.CalendarSystem
  parent: NodaTime
  name: CalendarSystem
  nameWithType: CalendarSystem
  fullName: NodaTime.CalendarSystem
- uid: NodaTime.CalendarSystem.Iso
  commentId: P:NodaTime.CalendarSystem.Iso
  isExternal: true
- uid: NodaTime.CalendarSystem.GetGregorianCalendar(System.Int32)
  commentId: M:NodaTime.CalendarSystem.GetGregorianCalendar(System.Int32)
  isExternal: true
- uid: NodaTime
  commentId: N:NodaTime
  name: NodaTime
  nameWithType: NodaTime
  fullName: NodaTime
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: NodaTime.CalendarSystem.Id
  commentId: P:NodaTime.CalendarSystem.Id
  isExternal: true
- uid: System.Collections.Generic.KeyNotFoundException
  commentId: T:System.Collections.Generic.KeyNotFoundException
  isExternal: true
- uid: NodaTime.CalendarSystem.ForId*
  commentId: Overload:NodaTime.CalendarSystem.ForId
  name: ForId
  nameWithType: CalendarSystem.ForId
  fullName: NodaTime.CalendarSystem.ForId
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: NodaTime.CalendarSystem.Ids*
  commentId: Overload:NodaTime.CalendarSystem.Ids
  name: Ids
  nameWithType: CalendarSystem.Ids
  fullName: NodaTime.CalendarSystem.Ids
- uid: System.Collections.Generic.IEnumerable{System.String}
  commentId: T:System.Collections.Generic.IEnumerable{System.String}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<String>
  nameWithType: IEnumerable<String>
  fullName: System.Collections.Generic.IEnumerable<System.String>
  nameWithType.vb: IEnumerable(Of String)
  fullName.vb: System.Collections.Generic.IEnumerable(Of System.String)
  name.vb: IEnumerable(Of String)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: NodaTime.CalendarSystem.Iso*
  commentId: Overload:NodaTime.CalendarSystem.Iso
  name: Iso
  nameWithType: CalendarSystem.Iso
  fullName: NodaTime.CalendarSystem.Iso
- uid: NodaTime.CalendarSystem.GetPersianCalendar*
  commentId: Overload:NodaTime.CalendarSystem.GetPersianCalendar
  name: GetPersianCalendar
  nameWithType: CalendarSystem.GetPersianCalendar
  fullName: NodaTime.CalendarSystem.GetPersianCalendar
- uid: NodaTime.CalendarSystem.GetHebrewCalendar*
  commentId: Overload:NodaTime.CalendarSystem.GetHebrewCalendar
  name: GetHebrewCalendar
  nameWithType: CalendarSystem.GetHebrewCalendar
  fullName: NodaTime.CalendarSystem.GetHebrewCalendar
- uid: NodaTime.Calendars.HebrewMonthNumbering
  commentId: T:NodaTime.Calendars.HebrewMonthNumbering
  parent: NodaTime.Calendars
  name: HebrewMonthNumbering
  nameWithType: HebrewMonthNumbering
  fullName: NodaTime.Calendars.HebrewMonthNumbering
- uid: NodaTime.Calendars
  commentId: N:NodaTime.Calendars
  name: NodaTime.Calendars
  nameWithType: NodaTime.Calendars
  fullName: NodaTime.Calendars
- uid: NodaTime.CalendarSystem.GetGregorianCalendar*
  commentId: Overload:NodaTime.CalendarSystem.GetGregorianCalendar
  name: GetGregorianCalendar
  nameWithType: CalendarSystem.GetGregorianCalendar
  fullName: NodaTime.CalendarSystem.GetGregorianCalendar
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: NodaTime.CalendarSystem.GetJulianCalendar*
  commentId: Overload:NodaTime.CalendarSystem.GetJulianCalendar
  name: GetJulianCalendar
  nameWithType: CalendarSystem.GetJulianCalendar
  fullName: NodaTime.CalendarSystem.GetJulianCalendar
- uid: NodaTime.CalendarSystem.GetCopticCalendar*
  commentId: Overload:NodaTime.CalendarSystem.GetCopticCalendar
  name: GetCopticCalendar
  nameWithType: CalendarSystem.GetCopticCalendar
  fullName: NodaTime.CalendarSystem.GetCopticCalendar
- uid: NodaTime.Calendars.IslamicEpoch.Civil
  commentId: F:NodaTime.Calendars.IslamicEpoch.Civil
  isExternal: true
- uid: NodaTime.Calendars.IslamicEpoch.Astronomical
  commentId: F:NodaTime.Calendars.IslamicEpoch.Astronomical
  isExternal: true
- uid: NodaTime.CalendarSystem.GetIslamicCalendar*
  commentId: Overload:NodaTime.CalendarSystem.GetIslamicCalendar
  name: GetIslamicCalendar
  nameWithType: CalendarSystem.GetIslamicCalendar
  fullName: NodaTime.CalendarSystem.GetIslamicCalendar
- uid: NodaTime.Calendars.IslamicLeapYearPattern
  commentId: T:NodaTime.Calendars.IslamicLeapYearPattern
  parent: NodaTime.Calendars
  name: IslamicLeapYearPattern
  nameWithType: IslamicLeapYearPattern
  fullName: NodaTime.Calendars.IslamicLeapYearPattern
- uid: NodaTime.Calendars.IslamicEpoch
  commentId: T:NodaTime.Calendars.IslamicEpoch
  parent: NodaTime.Calendars
  name: IslamicEpoch
  nameWithType: IslamicEpoch
  fullName: NodaTime.Calendars.IslamicEpoch
- uid: NodaTime.CalendarSystem.ForId(System.String)
  commentId: M:NodaTime.CalendarSystem.ForId(System.String)
  isExternal: true
- uid: NodaTime.CalendarSystem.GetCopticCalendar(System.Int32)
  commentId: M:NodaTime.CalendarSystem.GetCopticCalendar(System.Int32)
  isExternal: true
- uid: NodaTime.CalendarSystem.GetJulianCalendar(System.Int32)
  commentId: M:NodaTime.CalendarSystem.GetJulianCalendar(System.Int32)
  isExternal: true
- uid: NodaTime.CalendarSystem.GetIslamicCalendar(NodaTime.Calendars.IslamicLeapYearPattern,NodaTime.Calendars.IslamicEpoch)
  commentId: M:NodaTime.CalendarSystem.GetIslamicCalendar(NodaTime.Calendars.IslamicLeapYearPattern,NodaTime.Calendars.IslamicEpoch)
  isExternal: true
- uid: NodaTime.CalendarSystem.GetPersianCalendar
  commentId: M:NodaTime.CalendarSystem.GetPersianCalendar
  isExternal: true
- uid: NodaTime.CalendarSystem.GetHebrewCalendar(NodaTime.Calendars.HebrewMonthNumbering)
  commentId: M:NodaTime.CalendarSystem.GetHebrewCalendar(NodaTime.Calendars.HebrewMonthNumbering)
  isExternal: true
- uid: NodaTime.CalendarSystem.Id*
  commentId: Overload:NodaTime.CalendarSystem.Id
  name: Id
  nameWithType: CalendarSystem.Id
  fullName: NodaTime.CalendarSystem.Id
- uid: NodaTime.CalendarSystem.Name*
  commentId: Overload:NodaTime.CalendarSystem.Name
  name: Name
  nameWithType: CalendarSystem.Name
  fullName: NodaTime.CalendarSystem.Name
- uid: NodaTime.LocalDateTime
  commentId: T:NodaTime.LocalDateTime
  parent: NodaTime
  name: LocalDateTime
  nameWithType: LocalDateTime
  fullName: NodaTime.LocalDateTime
- uid: NodaTime.IsoDayOfWeek
  commentId: T:NodaTime.IsoDayOfWeek
  parent: NodaTime
  name: IsoDayOfWeek
  nameWithType: IsoDayOfWeek
  fullName: NodaTime.IsoDayOfWeek
- uid: NodaTime.CalendarSystem.UsesIsoDayOfWeek*
  commentId: Overload:NodaTime.CalendarSystem.UsesIsoDayOfWeek
  name: UsesIsoDayOfWeek
  nameWithType: CalendarSystem.UsesIsoDayOfWeek
  fullName: NodaTime.CalendarSystem.UsesIsoDayOfWeek
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: NodaTime.CalendarSystem.MinYear*
  commentId: Overload:NodaTime.CalendarSystem.MinYear
  name: MinYear
  nameWithType: CalendarSystem.MinYear
  fullName: NodaTime.CalendarSystem.MinYear
- uid: NodaTime.CalendarSystem.MaxYear*
  commentId: Overload:NodaTime.CalendarSystem.MaxYear
  name: MaxYear
  nameWithType: CalendarSystem.MaxYear
  fullName: NodaTime.CalendarSystem.MaxYear
- uid: NodaTime.CalendarSystem.Eras*
  commentId: Overload:NodaTime.CalendarSystem.Eras
  name: Eras
  nameWithType: CalendarSystem.Eras
  fullName: NodaTime.CalendarSystem.Eras
- uid: System.Collections.Generic.IList{NodaTime.Calendars.Era}
  commentId: T:System.Collections.Generic.IList{NodaTime.Calendars.Era}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IList`1
  name: IList<Era>
  nameWithType: IList<Era>
  fullName: System.Collections.Generic.IList<NodaTime.Calendars.Era>
  nameWithType.vb: IList(Of Era)
  fullName.vb: System.Collections.Generic.IList(Of NodaTime.Calendars.Era)
  name.vb: IList(Of Era)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: NodaTime.Calendars.Era
    name: Era
    nameWithType: Era
    fullName: NodaTime.Calendars.Era
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: NodaTime.Calendars.Era
    name: Era
    nameWithType: Era
    fullName: NodaTime.Calendars.Era
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IList`1
  commentId: T:System.Collections.Generic.IList`1
  isExternal: true
  name: IList<T>
  nameWithType: IList<T>
  fullName: System.Collections.Generic.IList<T>
  nameWithType.vb: IList(Of T)
  fullName.vb: System.Collections.Generic.IList(Of T)
  name.vb: IList(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.ArgumentOutOfRangeException
  commentId: T:System.ArgumentOutOfRangeException
  parent: System
  isExternal: true
  name: ArgumentOutOfRangeException
  nameWithType: ArgumentOutOfRangeException
  fullName: System.ArgumentOutOfRangeException
- uid: System.ArgumentException
  commentId: T:System.ArgumentException
  parent: System
  isExternal: true
  name: ArgumentException
  nameWithType: ArgumentException
  fullName: System.ArgumentException
- uid: NodaTime.CalendarSystem.GetAbsoluteYear*
  commentId: Overload:NodaTime.CalendarSystem.GetAbsoluteYear
  name: GetAbsoluteYear
  nameWithType: CalendarSystem.GetAbsoluteYear
  fullName: NodaTime.CalendarSystem.GetAbsoluteYear
- uid: NodaTime.Calendars.Era
  commentId: T:NodaTime.Calendars.Era
  parent: NodaTime.Calendars
  name: Era
  nameWithType: Era
  fullName: NodaTime.Calendars.Era
- uid: NodaTime.CalendarSystem.GetMaxYearOfEra*
  commentId: Overload:NodaTime.CalendarSystem.GetMaxYearOfEra
  name: GetMaxYearOfEra
  nameWithType: CalendarSystem.GetMaxYearOfEra
  fullName: NodaTime.CalendarSystem.GetMaxYearOfEra
- uid: NodaTime.CalendarSystem.GetMinYearOfEra*
  commentId: Overload:NodaTime.CalendarSystem.GetMinYearOfEra
  name: GetMinYearOfEra
  nameWithType: CalendarSystem.GetMinYearOfEra
  fullName: NodaTime.CalendarSystem.GetMinYearOfEra
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: NodaTime.CalendarSystem.ToString*
  commentId: Overload:NodaTime.CalendarSystem.ToString
  name: ToString
  nameWithType: CalendarSystem.ToString
  fullName: NodaTime.CalendarSystem.ToString
- uid: NodaTime.CalendarSystem.GetDaysInMonth*
  commentId: Overload:NodaTime.CalendarSystem.GetDaysInMonth
  name: GetDaysInMonth
  nameWithType: CalendarSystem.GetDaysInMonth
  fullName: NodaTime.CalendarSystem.GetDaysInMonth
- uid: NodaTime.CalendarSystem.IsLeapYear*
  commentId: Overload:NodaTime.CalendarSystem.IsLeapYear
  name: IsLeapYear
  nameWithType: CalendarSystem.IsLeapYear
  fullName: NodaTime.CalendarSystem.IsLeapYear
- uid: NodaTime.CalendarSystem.GetMaxMonth*
  commentId: Overload:NodaTime.CalendarSystem.GetMaxMonth
  name: GetMaxMonth
  nameWithType: CalendarSystem.GetMaxMonth
  fullName: NodaTime.CalendarSystem.GetMaxMonth
shouldSkipMarkup: true
