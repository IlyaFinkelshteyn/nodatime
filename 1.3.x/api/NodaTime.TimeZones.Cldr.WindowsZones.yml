### YamlMime:ManagedReference
items:
- uid: NodaTime.TimeZones.Cldr.WindowsZones
  commentId: T:NodaTime.TimeZones.Cldr.WindowsZones
  id: WindowsZones
  parent: NodaTime.TimeZones.Cldr
  children:
  - NodaTime.TimeZones.Cldr.WindowsZones.MapZones
  - NodaTime.TimeZones.Cldr.WindowsZones.PrimaryMapping
  - NodaTime.TimeZones.Cldr.WindowsZones.TzdbVersion
  - NodaTime.TimeZones.Cldr.WindowsZones.Version
  - NodaTime.TimeZones.Cldr.WindowsZones.WindowsVersion
  langs:
  - csharp
  - vb
  name: WindowsZones
  nameWithType: WindowsZones
  fullName: NodaTime.TimeZones.Cldr.WindowsZones
  type: Class
  source:
    remote:
      path: 1.3.x/src/NodaTime/TimeZones/Cldr/WindowsZones.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: WindowsZones
    path: src/NodaTime/TimeZones/Cldr/WindowsZones.cs
    startLine: 21
  assemblies:
  - NodaTime
  namespace: NodaTime.TimeZones.Cldr
  summary: "\nRepresentation of the <code>&lt;windowsZones></code> element of CLDR supplemental data.\n"
  remarks: "\nSee <a href=\"http://cldr.unicode.org/development/development-process/design-proposals/extended-windows-olson-zid-mapping\">the CLDR design proposal</a>\nfor more details of the structure of the file from which data is taken.\n"
  example: []
  syntax:
    content: public sealed class WindowsZones
    content.vb: Public NotInheritable Class WindowsZones
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - sealed
  - class
  modifiers.vb:
  - Public
  - NotInheritable
  - Class
- uid: NodaTime.TimeZones.Cldr.WindowsZones.Version
  commentId: P:NodaTime.TimeZones.Cldr.WindowsZones.Version
  id: Version
  parent: NodaTime.TimeZones.Cldr.WindowsZones
  langs:
  - csharp
  - vb
  name: Version
  nameWithType: WindowsZones.Version
  fullName: NodaTime.TimeZones.Cldr.WindowsZones.Version
  type: Property
  source:
    remote:
      path: 1.3.x/src/NodaTime/TimeZones/Cldr/WindowsZones.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: Version
    path: src/NodaTime/TimeZones/Cldr/WindowsZones.cs
    startLine: 39
  assemblies:
  - NodaTime
  namespace: NodaTime.TimeZones.Cldr
  summary: "\nGets the version of the Windows zones mapping data read from the original file.\n"
  remarks: "\n<p>\nAs with other IDs, this should largely be treated as an opaque string, but the current method for\ngenerating this from the mapping file extracts a number from an element such as <code>&lt;version number=&quot;$Revision: 7825 $&quot;/></code>.\nThis is a Subversion revision number, but that association should only be used for diagnostic curiosity, and never\nassumed in code.\n</p>\n<p>\nThis property will never return a null value.\n</p>\n"
  example: []
  syntax:
    content: public string Version { get; }
    parameters: []
    return:
      type: System.String
    content.vb: Public ReadOnly Property Version As String
  overload: NodaTime.TimeZones.Cldr.WindowsZones.Version*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: NodaTime.TimeZones.Cldr.WindowsZones.TzdbVersion
  commentId: P:NodaTime.TimeZones.Cldr.WindowsZones.TzdbVersion
  id: TzdbVersion
  parent: NodaTime.TimeZones.Cldr.WindowsZones
  langs:
  - csharp
  - vb
  name: TzdbVersion
  nameWithType: WindowsZones.TzdbVersion
  fullName: NodaTime.TimeZones.Cldr.WindowsZones.TzdbVersion
  type: Property
  source:
    remote:
      path: 1.3.x/src/NodaTime/TimeZones/Cldr/WindowsZones.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: TzdbVersion
    path: src/NodaTime/TimeZones/Cldr/WindowsZones.cs
    startLine: 57
  assemblies:
  - NodaTime
  namespace: NodaTime.TimeZones.Cldr
  summary: "\nGets the TZDB version this Windows zone mapping data was created from.\n"
  remarks: "\n<p>\nThe CLDR mapping file usually lags behind the TZDB file somewhat - partly because the\nmappings themselves don&apos;t always change when the time zone data does. For example, it&apos;s entirely\nreasonable for a <xref href=\"NodaTime.TimeZones.TzdbDateTimeZoneSource\" data-throw-if-not-resolved=\"false\"></xref> with a <xref href=\"NodaTime.TimeZones.TzdbDateTimeZoneSource.TzdbVersion\" data-throw-if-not-resolved=\"false\"></xref> of\n&quot;2013b&quot; to be supply a <code>WindowsZones</code> object with a <code>TzdbVersion</code> of &quot;2012f&quot;.\n</p>\n<p>\nThis property will never return a null value, but will be &quot;Unknown&quot; if the data\nis loaded from the legacy resource format.\n</p>\n"
  example: []
  syntax:
    content: public string TzdbVersion { get; }
    parameters: []
    return:
      type: System.String
    content.vb: Public ReadOnly Property TzdbVersion As String
  overload: NodaTime.TimeZones.Cldr.WindowsZones.TzdbVersion*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: NodaTime.TimeZones.Cldr.WindowsZones.WindowsVersion
  commentId: P:NodaTime.TimeZones.Cldr.WindowsZones.WindowsVersion
  id: WindowsVersion
  parent: NodaTime.TimeZones.Cldr.WindowsZones
  langs:
  - csharp
  - vb
  name: WindowsVersion
  nameWithType: WindowsZones.WindowsVersion
  fullName: NodaTime.TimeZones.Cldr.WindowsZones.WindowsVersion
  type: Property
  source:
    remote:
      path: 1.3.x/src/NodaTime/TimeZones/Cldr/WindowsZones.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: WindowsVersion
    path: src/NodaTime/TimeZones/Cldr/WindowsZones.cs
    startLine: 74
  assemblies:
  - NodaTime
  namespace: NodaTime.TimeZones.Cldr
  summary: "\nGets the Windows time zone database version this Windows zone mapping data was created from.\n"
  remarks: "\n<p>\nAt the time of this writing, this is populated (by CLDR) from the registry key\nHKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Time Zones\\TzVersion,\nso &quot;7dc0101&quot; for example.\n</p>\n<p>\nThis property will never return a null value, but will be &quot;Unknown&quot; if the data\nis loaded from the legacy resource format.\n</p>\n"
  example: []
  syntax:
    content: public string WindowsVersion { get; }
    parameters: []
    return:
      type: System.String
    content.vb: Public ReadOnly Property WindowsVersion As String
  overload: NodaTime.TimeZones.Cldr.WindowsZones.WindowsVersion*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: NodaTime.TimeZones.Cldr.WindowsZones.MapZones
  commentId: P:NodaTime.TimeZones.Cldr.WindowsZones.MapZones
  id: MapZones
  parent: NodaTime.TimeZones.Cldr.WindowsZones
  langs:
  - csharp
  - vb
  name: MapZones
  nameWithType: WindowsZones.MapZones
  fullName: NodaTime.TimeZones.Cldr.WindowsZones.MapZones
  type: Property
  source:
    remote:
      path: 1.3.x/src/NodaTime/TimeZones/Cldr/WindowsZones.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: MapZones
    path: src/NodaTime/TimeZones/Cldr/WindowsZones.cs
    startLine: 104
  assemblies:
  - NodaTime
  namespace: NodaTime.TimeZones.Cldr
  summary: "\nGets an immutable collection of mappings from Windows system time zones to\nTZDB time zones.\n"
  remarks: "\n<p>\nEach mapping consists of a single Windows time zone ID and a single\nterritory to potentially multiple TZDB IDs that are broadly equivalent to that Windows zone/territory\npair.\n</p>\n<p>\nMappings for a single Windows system time zone can appear multiple times\nin this list, in different territories. For example, &quot;Central Standard Time&quot;\nmaps to different TZDB zones in different countries (the US, Canada, Mexico) and\neven within a single territory there can be multiple zones. Every Windows system time zone covered within\nthis collection has a &quot;primary&quot; entry with a territory code of &quot;001&quot; (which is the value of\n<xref href=\"NodaTime.TimeZones.Cldr.MapZone.PrimaryTerritory\" data-throw-if-not-resolved=\"false\"></xref>) and a single corresponding TZDB zone. \n</p>\n<p>This collection is not guaranteed to cover every Windows time zone. Some zones may be unmappable\n(such as &quot;Mid-Atlantic Standard Time&quot;) and there can be a delay between a new Windows time zone being introduced\nand it appearing in CLDR, ready to be used by Noda Time. (There&apos;s also bound to be a delay between it appearing\nin CLDR and being used in your production system.) In practice however, you&apos;re unlikely to wish to use a time zone\nwhich isn&apos;t covered here.</p>\n<p>\nIf the data is loaded from the legacy resource format, this will only include the primary mappings.\n</p>\n"
  example: []
  syntax:
    content: public IList<MapZone> MapZones { get; }
    parameters: []
    return:
      type: System.Collections.Generic.IList{NodaTime.TimeZones.Cldr.MapZone}
    content.vb: Public ReadOnly Property MapZones As IList(Of MapZone)
  overload: NodaTime.TimeZones.Cldr.WindowsZones.MapZones*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: NodaTime.TimeZones.Cldr.WindowsZones.PrimaryMapping
  commentId: P:NodaTime.TimeZones.Cldr.WindowsZones.PrimaryMapping
  id: PrimaryMapping
  parent: NodaTime.TimeZones.Cldr.WindowsZones
  langs:
  - csharp
  - vb
  name: PrimaryMapping
  nameWithType: WindowsZones.PrimaryMapping
  fullName: NodaTime.TimeZones.Cldr.WindowsZones.PrimaryMapping
  type: Property
  source:
    remote:
      path: 1.3.x/src/NodaTime/TimeZones/Cldr/WindowsZones.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: PrimaryMapping
    path: src/NodaTime/TimeZones/Cldr/WindowsZones.cs
    startLine: 112
  assemblies:
  - NodaTime
  namespace: NodaTime.TimeZones.Cldr
  summary: "\nGets an immutable dictionary of primary mappings, from Windows system time zone ID\nto TZDB zone ID. This corresponds to the &quot;001&quot; territory which is present for every zone\nwithin the mapping file.\n"
  example: []
  syntax:
    content: public IDictionary<string, string> PrimaryMapping { get; }
    parameters: []
    return:
      type: System.Collections.Generic.IDictionary{System.String,System.String}
    content.vb: Public ReadOnly Property PrimaryMapping As IDictionary(Of String, String)
  overload: NodaTime.TimeZones.Cldr.WindowsZones.PrimaryMapping*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
references:
- uid: NodaTime.TimeZones.Cldr
  commentId: N:NodaTime.TimeZones.Cldr
  name: NodaTime.TimeZones.Cldr
  nameWithType: NodaTime.TimeZones.Cldr
  fullName: NodaTime.TimeZones.Cldr
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: NodaTime.TimeZones.Cldr.WindowsZones.Version*
  commentId: Overload:NodaTime.TimeZones.Cldr.WindowsZones.Version
  name: Version
  nameWithType: WindowsZones.Version
  fullName: NodaTime.TimeZones.Cldr.WindowsZones.Version
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: NodaTime.TimeZones.TzdbDateTimeZoneSource
  commentId: T:NodaTime.TimeZones.TzdbDateTimeZoneSource
  parent: NodaTime.TimeZones
  name: TzdbDateTimeZoneSource
  nameWithType: TzdbDateTimeZoneSource
  fullName: NodaTime.TimeZones.TzdbDateTimeZoneSource
- uid: NodaTime.TimeZones.TzdbDateTimeZoneSource.TzdbVersion
  commentId: P:NodaTime.TimeZones.TzdbDateTimeZoneSource.TzdbVersion
  isExternal: true
- uid: NodaTime.TimeZones.Cldr.WindowsZones.TzdbVersion*
  commentId: Overload:NodaTime.TimeZones.Cldr.WindowsZones.TzdbVersion
  name: TzdbVersion
  nameWithType: WindowsZones.TzdbVersion
  fullName: NodaTime.TimeZones.Cldr.WindowsZones.TzdbVersion
- uid: NodaTime.TimeZones
  commentId: N:NodaTime.TimeZones
  name: NodaTime.TimeZones
  nameWithType: NodaTime.TimeZones
  fullName: NodaTime.TimeZones
- uid: NodaTime.TimeZones.Cldr.WindowsZones.WindowsVersion*
  commentId: Overload:NodaTime.TimeZones.Cldr.WindowsZones.WindowsVersion
  name: WindowsVersion
  nameWithType: WindowsZones.WindowsVersion
  fullName: NodaTime.TimeZones.Cldr.WindowsZones.WindowsVersion
- uid: NodaTime.TimeZones.Cldr.MapZone.PrimaryTerritory
  commentId: F:NodaTime.TimeZones.Cldr.MapZone.PrimaryTerritory
  isExternal: true
- uid: NodaTime.TimeZones.Cldr.WindowsZones.MapZones*
  commentId: Overload:NodaTime.TimeZones.Cldr.WindowsZones.MapZones
  name: MapZones
  nameWithType: WindowsZones.MapZones
  fullName: NodaTime.TimeZones.Cldr.WindowsZones.MapZones
- uid: System.Collections.Generic.IList{NodaTime.TimeZones.Cldr.MapZone}
  commentId: T:System.Collections.Generic.IList{NodaTime.TimeZones.Cldr.MapZone}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IList`1
  name: IList<MapZone>
  nameWithType: IList<MapZone>
  fullName: System.Collections.Generic.IList<NodaTime.TimeZones.Cldr.MapZone>
  nameWithType.vb: IList(Of MapZone)
  fullName.vb: System.Collections.Generic.IList(Of NodaTime.TimeZones.Cldr.MapZone)
  name.vb: IList(Of MapZone)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: NodaTime.TimeZones.Cldr.MapZone
    name: MapZone
    nameWithType: MapZone
    fullName: NodaTime.TimeZones.Cldr.MapZone
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: NodaTime.TimeZones.Cldr.MapZone
    name: MapZone
    nameWithType: MapZone
    fullName: NodaTime.TimeZones.Cldr.MapZone
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IList`1
  commentId: T:System.Collections.Generic.IList`1
  isExternal: true
  name: IList<T>
  nameWithType: IList<T>
  fullName: System.Collections.Generic.IList<T>
  nameWithType.vb: IList(Of T)
  fullName.vb: System.Collections.Generic.IList(Of T)
  name.vb: IList(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: NodaTime.TimeZones.Cldr.WindowsZones.PrimaryMapping*
  commentId: Overload:NodaTime.TimeZones.Cldr.WindowsZones.PrimaryMapping
  name: PrimaryMapping
  nameWithType: WindowsZones.PrimaryMapping
  fullName: NodaTime.TimeZones.Cldr.WindowsZones.PrimaryMapping
- uid: System.Collections.Generic.IDictionary{System.String,System.String}
  commentId: T:System.Collections.Generic.IDictionary{System.String,System.String}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IDictionary`2
  name: IDictionary<String, String>
  nameWithType: IDictionary<String, String>
  fullName: System.Collections.Generic.IDictionary<System.String, System.String>
  nameWithType.vb: IDictionary(Of String, String)
  fullName.vb: System.Collections.Generic.IDictionary(Of System.String, System.String)
  name.vb: IDictionary(Of String, String)
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IDictionary`2
  commentId: T:System.Collections.Generic.IDictionary`2
  isExternal: true
  name: IDictionary<TKey, TValue>
  nameWithType: IDictionary<TKey, TValue>
  fullName: System.Collections.Generic.IDictionary<TKey, TValue>
  nameWithType.vb: IDictionary(Of TKey, TValue)
  fullName.vb: System.Collections.Generic.IDictionary(Of TKey, TValue)
  name.vb: IDictionary(Of TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
shouldSkipMarkup: true
