### YamlMime:ManagedReference
items:
- uid: NodaTime.TimeZones.ZoneEqualityComparer.Options
  commentId: T:NodaTime.TimeZones.ZoneEqualityComparer.Options
  id: ZoneEqualityComparer.Options
  parent: NodaTime.TimeZones
  children:
  - NodaTime.TimeZones.ZoneEqualityComparer.Options.MatchAllTransitions
  - NodaTime.TimeZones.ZoneEqualityComparer.Options.MatchNames
  - NodaTime.TimeZones.ZoneEqualityComparer.Options.MatchOffsetComponents
  - NodaTime.TimeZones.ZoneEqualityComparer.Options.MatchStartAndEndTransitions
  - NodaTime.TimeZones.ZoneEqualityComparer.Options.OnlyMatchWallOffset
  - NodaTime.TimeZones.ZoneEqualityComparer.Options.StrictestMatch
  langs:
  - csharp
  - vb
  name: ZoneEqualityComparer.Options
  nameWithType: ZoneEqualityComparer.Options
  fullName: NodaTime.TimeZones.ZoneEqualityComparer.Options
  type: Enum
  source:
    remote:
      path: 1.3.x/src/NodaTime/TimeZones/ZoneEqualityComparer.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: Options
    path: src/NodaTime/TimeZones/ZoneEqualityComparer.cs
    startLine: 58
  assemblies:
  - NodaTime
  namespace: NodaTime.TimeZones
  summary: "\nOptions to use when comparing time zones for equality. Each option makes the comparison more restrictive.\n"
  remarks: "\n<p>\nBy default, the comparer only compares the wall offset (total of standard offset and any daylight saving offset)\nat every instant within the interval over which the comparer operates. In practice, this is done by comparing each\n<xref href=\"NodaTime.TimeZones.ZoneInterval\" data-throw-if-not-resolved=\"false\"></xref> which includes an instant within the interval (using <xref href=\"NodaTime.DateTimeZone.GetZoneIntervals(NodaTime.Interval)\" data-throw-if-not-resolved=\"false\"></xref>).\nFor most purposes, this is all that&apos;s required: from the simple perspective of a time zone being just a function from instants to local time,\nthe default option of <xref href=\"NodaTime.TimeZones.ZoneEqualityComparer.Options.OnlyMatchWallOffset\" data-throw-if-not-resolved=\"false\"></xref> effectively checks that the function gives the same result across the two time\nzones being compared, for any given instant within the interval.\n</p>\n<p>\nIt&apos;s possible for a time zone to have a transition from one <code>ZoneInterval</code> to another which doesn&apos;t adjust the offset: it\nmight just change the name, or the balance between standard offset to daylight saving offset. (As an example, at midnight local\ntime on October 27th 1968, the Europe/London time zone went from a standard offset of 0 and a daylight saving offset of 1 hour\nto a standard offset of 1 and a daylight saving offset of 0... which left the clocks unchanged.) This transition is irrelevant\nto the default options, so the two zone intervals involved are effectively coalesced.\n</p>\n<p>\nThe options available change what sort of comparison is performed - which can also change which zone intervals can be coalesced. For\nexample, by specifying just the <xref href=\"NodaTime.TimeZones.ZoneEqualityComparer.Options.MatchAllTransitions\" data-throw-if-not-resolved=\"false\"></xref> option, you would indicate that even though you don&apos;t care about the name within a zone\ninterval or how the wall offset is calculated, you do care about the fact that there was a transition at all, and when it occurred.\nWith that option enabled, zone intervals are never coalesced and the transition points within the operating interval are checked.\n</p>\n<p>Similarly, the <xref href=\"NodaTime.TimeZones.ZoneEqualityComparer.Options.MatchStartAndEndTransitions\" data-throw-if-not-resolved=\"false\"></xref> option is the only one where instants outside the operating interval are\nrelevant. For example, consider a comparer which operates over the interval [2000-01-01T00:00:00Z, 2011-01-01T00:00:00Z). Normally,\nanything that happens before the year 2000 (UTC) would be irrelevant - but with this option enabled, the transitions of the first and last zone\nintervals are part of the comparison... so if one time zone has a zone interval 1999-09-01T00:00:00Z to 2000-03-01T00:00:00Z and the other has\na zone interval 1999-10-15T00:00:00Z to 2000-03-01T00:00:Z, the two zones would be considered unequal, despite the fact that the only instants observing\nthe difference occur outside the operating interval.\n</p>\n"
  example: []
  syntax:
    content: >-
      [Flags]

      public enum Options
    content.vb: >-
      <Flags>

      Public Enum Options
  attributes:
  - type: System.FlagsAttribute
    ctor: System.FlagsAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - enum
  modifiers.vb:
  - Public
  - Enum
- uid: NodaTime.TimeZones.ZoneEqualityComparer.Options.OnlyMatchWallOffset
  commentId: F:NodaTime.TimeZones.ZoneEqualityComparer.Options.OnlyMatchWallOffset
  id: OnlyMatchWallOffset
  parent: NodaTime.TimeZones.ZoneEqualityComparer.Options
  langs:
  - csharp
  - vb
  name: OnlyMatchWallOffset
  nameWithType: ZoneEqualityComparer.Options.OnlyMatchWallOffset
  fullName: NodaTime.TimeZones.ZoneEqualityComparer.Options.OnlyMatchWallOffset
  type: Field
  source:
    remote:
      path: 1.3.x/src/NodaTime/TimeZones/ZoneEqualityComparer.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: OnlyMatchWallOffset
    path: src/NodaTime/TimeZones/ZoneEqualityComparer.cs
    startLine: 66
  assemblies:
  - NodaTime
  namespace: NodaTime.TimeZones
  summary: "\nThe default comparison, which only cares about the wall offset at any particular\ninstant, within the interval of the comparer. In other words, if <xref href=\"NodaTime.DateTimeZone.GetUtcOffset(NodaTime.Instant)\" data-throw-if-not-resolved=\"false\"></xref>\nreturns the same value for all instants in the interval, the comparer will consider the zones to be equal.\n"
  example: []
  syntax:
    content: OnlyMatchWallOffset = 0
    return:
      type: NodaTime.TimeZones.ZoneEqualityComparer.Options
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: NodaTime.TimeZones.ZoneEqualityComparer.Options.MatchOffsetComponents
  commentId: F:NodaTime.TimeZones.ZoneEqualityComparer.Options.MatchOffsetComponents
  id: MatchOffsetComponents
  parent: NodaTime.TimeZones.ZoneEqualityComparer.Options
  langs:
  - csharp
  - vb
  name: MatchOffsetComponents
  nameWithType: ZoneEqualityComparer.Options.MatchOffsetComponents
  fullName: NodaTime.TimeZones.ZoneEqualityComparer.Options.MatchOffsetComponents
  type: Field
  source:
    remote:
      path: 1.3.x/src/NodaTime/TimeZones/ZoneEqualityComparer.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: MatchOffsetComponents
    path: src/NodaTime/TimeZones/ZoneEqualityComparer.cs
    startLine: 74
  assemblies:
  - NodaTime
  namespace: NodaTime.TimeZones
  summary: "\nInstead of only comparing wall offsets, the standard/savings split is also considered. So when this\noption is used, two zones which both have a wall offset of +2 at one instant would be considered\nunequal if one of those offsets was +1 standard, +1 savings and the other was +2 standard with no daylight\nsaving.\n"
  example: []
  syntax:
    content: MatchOffsetComponents = 1
    return:
      type: NodaTime.TimeZones.ZoneEqualityComparer.Options
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: NodaTime.TimeZones.ZoneEqualityComparer.Options.MatchNames
  commentId: F:NodaTime.TimeZones.ZoneEqualityComparer.Options.MatchNames
  id: MatchNames
  parent: NodaTime.TimeZones.ZoneEqualityComparer.Options
  langs:
  - csharp
  - vb
  name: MatchNames
  nameWithType: ZoneEqualityComparer.Options.MatchNames
  fullName: NodaTime.TimeZones.ZoneEqualityComparer.Options.MatchNames
  type: Field
  source:
    remote:
      path: 1.3.x/src/NodaTime/TimeZones/ZoneEqualityComparer.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: MatchNames
    path: src/NodaTime/TimeZones/ZoneEqualityComparer.cs
    startLine: 79
  assemblies:
  - NodaTime
  namespace: NodaTime.TimeZones
  summary: "\nCompare the names of zone intervals as well as offsets.\n"
  example: []
  syntax:
    content: MatchNames = 2
    return:
      type: NodaTime.TimeZones.ZoneEqualityComparer.Options
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: NodaTime.TimeZones.ZoneEqualityComparer.Options.MatchAllTransitions
  commentId: F:NodaTime.TimeZones.ZoneEqualityComparer.Options.MatchAllTransitions
  id: MatchAllTransitions
  parent: NodaTime.TimeZones.ZoneEqualityComparer.Options
  langs:
  - csharp
  - vb
  name: MatchAllTransitions
  nameWithType: ZoneEqualityComparer.Options.MatchAllTransitions
  fullName: NodaTime.TimeZones.ZoneEqualityComparer.Options.MatchAllTransitions
  type: Field
  source:
    remote:
      path: 1.3.x/src/NodaTime/TimeZones/ZoneEqualityComparer.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: MatchAllTransitions
    path: src/NodaTime/TimeZones/ZoneEqualityComparer.cs
    startLine: 85
  assemblies:
  - NodaTime
  namespace: NodaTime.TimeZones
  summary: "\nThis option prevents adjacent zone intervals from being coalesced, even if they are otherwise considered\nequivalent according to other options.\n"
  example: []
  syntax:
    content: MatchAllTransitions = 4
    return:
      type: NodaTime.TimeZones.ZoneEqualityComparer.Options
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: NodaTime.TimeZones.ZoneEqualityComparer.Options.MatchStartAndEndTransitions
  commentId: F:NodaTime.TimeZones.ZoneEqualityComparer.Options.MatchStartAndEndTransitions
  id: MatchStartAndEndTransitions
  parent: NodaTime.TimeZones.ZoneEqualityComparer.Options
  langs:
  - csharp
  - vb
  name: MatchStartAndEndTransitions
  nameWithType: ZoneEqualityComparer.Options.MatchStartAndEndTransitions
  fullName: NodaTime.TimeZones.ZoneEqualityComparer.Options.MatchStartAndEndTransitions
  type: Field
  source:
    remote:
      path: 1.3.x/src/NodaTime/TimeZones/ZoneEqualityComparer.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: MatchStartAndEndTransitions
    path: src/NodaTime/TimeZones/ZoneEqualityComparer.cs
    startLine: 92
  assemblies:
  - NodaTime
  namespace: NodaTime.TimeZones
  summary: "\nIncludes the transitions into the first zone interval and out of the\nlast zone interval as part of the comparison, even if they do not affect\nthe offset or name for any instant within the operating interval.\n"
  example: []
  syntax:
    content: MatchStartAndEndTransitions = 8
    return:
      type: NodaTime.TimeZones.ZoneEqualityComparer.Options
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: NodaTime.TimeZones.ZoneEqualityComparer.Options.StrictestMatch
  commentId: F:NodaTime.TimeZones.ZoneEqualityComparer.Options.StrictestMatch
  id: StrictestMatch
  parent: NodaTime.TimeZones.ZoneEqualityComparer.Options
  langs:
  - csharp
  - vb
  name: StrictestMatch
  nameWithType: ZoneEqualityComparer.Options.StrictestMatch
  fullName: NodaTime.TimeZones.ZoneEqualityComparer.Options.StrictestMatch
  type: Field
  source:
    remote:
      path: 1.3.x/src/NodaTime/TimeZones/ZoneEqualityComparer.cs
      branch: history
      repo: https://github.com/nodatime/nodatime.git
    id: StrictestMatch
    path: src/NodaTime/TimeZones/ZoneEqualityComparer.cs
    startLine: 97
  assemblies:
  - NodaTime
  namespace: NodaTime.TimeZones
  summary: "\nThe combination of all available match options.\n"
  example: []
  syntax:
    content: StrictestMatch = 15
    return:
      type: NodaTime.TimeZones.ZoneEqualityComparer.Options
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
references:
- uid: NodaTime.TimeZones.ZoneInterval
  commentId: T:NodaTime.TimeZones.ZoneInterval
  parent: NodaTime.TimeZones
  name: ZoneInterval
  nameWithType: ZoneInterval
  fullName: NodaTime.TimeZones.ZoneInterval
- uid: NodaTime.DateTimeZone.GetZoneIntervals(NodaTime.Interval)
  commentId: M:NodaTime.DateTimeZone.GetZoneIntervals(NodaTime.Interval)
  parent: NodaTime.DateTimeZone
  name: GetZoneIntervals(Interval)
  nameWithType: DateTimeZone.GetZoneIntervals(Interval)
  fullName: NodaTime.DateTimeZone.GetZoneIntervals(NodaTime.Interval)
  spec.csharp:
  - uid: NodaTime.DateTimeZone.GetZoneIntervals(NodaTime.Interval)
    name: GetZoneIntervals
    nameWithType: DateTimeZone.GetZoneIntervals
    fullName: NodaTime.DateTimeZone.GetZoneIntervals
  - name: (
    nameWithType: (
    fullName: (
  - uid: NodaTime.Interval
    name: Interval
    nameWithType: Interval
    fullName: NodaTime.Interval
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NodaTime.DateTimeZone.GetZoneIntervals(NodaTime.Interval)
    name: GetZoneIntervals
    nameWithType: DateTimeZone.GetZoneIntervals
    fullName: NodaTime.DateTimeZone.GetZoneIntervals
  - name: (
    nameWithType: (
    fullName: (
  - uid: NodaTime.Interval
    name: Interval
    nameWithType: Interval
    fullName: NodaTime.Interval
  - name: )
    nameWithType: )
    fullName: )
- uid: NodaTime.TimeZones.ZoneEqualityComparer.Options.OnlyMatchWallOffset
  commentId: F:NodaTime.TimeZones.ZoneEqualityComparer.Options.OnlyMatchWallOffset
  isExternal: true
- uid: NodaTime.TimeZones.ZoneEqualityComparer.Options.MatchAllTransitions
  commentId: F:NodaTime.TimeZones.ZoneEqualityComparer.Options.MatchAllTransitions
  isExternal: true
- uid: NodaTime.TimeZones.ZoneEqualityComparer.Options.MatchStartAndEndTransitions
  commentId: F:NodaTime.TimeZones.ZoneEqualityComparer.Options.MatchStartAndEndTransitions
  isExternal: true
- uid: NodaTime.TimeZones
  commentId: N:NodaTime.TimeZones
  name: NodaTime.TimeZones
  nameWithType: NodaTime.TimeZones
  fullName: NodaTime.TimeZones
- uid: NodaTime.DateTimeZone
  commentId: T:NodaTime.DateTimeZone
  parent: NodaTime
  name: DateTimeZone
  nameWithType: DateTimeZone
  fullName: NodaTime.DateTimeZone
- uid: NodaTime
  commentId: N:NodaTime
  name: NodaTime
  nameWithType: NodaTime
  fullName: NodaTime
- uid: NodaTime.DateTimeZone.GetUtcOffset(NodaTime.Instant)
  commentId: M:NodaTime.DateTimeZone.GetUtcOffset(NodaTime.Instant)
  parent: NodaTime.DateTimeZone
  name: GetUtcOffset(Instant)
  nameWithType: DateTimeZone.GetUtcOffset(Instant)
  fullName: NodaTime.DateTimeZone.GetUtcOffset(NodaTime.Instant)
  spec.csharp:
  - uid: NodaTime.DateTimeZone.GetUtcOffset(NodaTime.Instant)
    name: GetUtcOffset
    nameWithType: DateTimeZone.GetUtcOffset
    fullName: NodaTime.DateTimeZone.GetUtcOffset
  - name: (
    nameWithType: (
    fullName: (
  - uid: NodaTime.Instant
    name: Instant
    nameWithType: Instant
    fullName: NodaTime.Instant
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NodaTime.DateTimeZone.GetUtcOffset(NodaTime.Instant)
    name: GetUtcOffset
    nameWithType: DateTimeZone.GetUtcOffset
    fullName: NodaTime.DateTimeZone.GetUtcOffset
  - name: (
    nameWithType: (
    fullName: (
  - uid: NodaTime.Instant
    name: Instant
    nameWithType: Instant
    fullName: NodaTime.Instant
  - name: )
    nameWithType: )
    fullName: )
- uid: NodaTime.TimeZones.ZoneEqualityComparer.Options
  commentId: T:NodaTime.TimeZones.ZoneEqualityComparer.Options
  parent: NodaTime.TimeZones
  name: ZoneEqualityComparer.Options
  nameWithType: ZoneEqualityComparer.Options
  fullName: NodaTime.TimeZones.ZoneEqualityComparer.Options
shouldSkipMarkup: true
